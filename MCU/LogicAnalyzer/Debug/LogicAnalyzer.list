
LogicAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a98c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace0  0800ace0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ace0  0800ace0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ace0  0800ace0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace0  0800ace0  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace4  0800ace4  0001ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ace8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00001c40  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e14  20001e14  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013860  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003553  00000000  00000000  00033aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b0  00000000  00000000  00037000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ca6  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000230f0  00000000  00000000  00038d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016aa6  00000000  00000000  0005be46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca17f  00000000  00000000  000728ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049c8  00000000  00000000  0013ca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00141434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab14 	.word	0x0800ab14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800ab14 	.word	0x0800ab14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

	int n = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fc11 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f857 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 fa45 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a6:	f000 f9f7 	bl	8000698 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80002aa:	f009 fa57 	bl	800975c <MX_USB_DEVICE_Init>
  //MX_TIM16_Init();
  //MX_TIM1_Init();
  MX_TIM1_Init(0, 79);  // Initial setup for 1 MHz sampling rate
 80002ae:	214f      	movs	r1, #79	; 0x4f
 80002b0:	2000      	movs	r0, #0
 80002b2:	f000 f8b1 	bl	8000418 <MX_TIM1_Init>
//  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&GPIOB->IDR, (uint32_t)buffer, BUFFER_SIZE);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = preTrigger;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0xa4>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 80002bc:	481e      	ldr	r0, [pc, #120]	; (8000338 <main+0xa8>)
 80002be:	f004 f9fd 	bl	80046bc <HAL_TIM_Base_Start_IT>
//
//	  }

    /* USER CODE END WHILE */
	  //if(trigger == 0 && status == 1){
	  switch(state){
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <main+0xa4>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d02f      	beq.n	800032a <main+0x9a>
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	dcf9      	bgt.n	80002c2 <main+0x32>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d02d      	beq.n	800032e <main+0x9e>
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d1f5      	bne.n	80002c2 <main+0x32>
	  	  case preTrigger:
	  		  break;
	  	  case triggerState:
	  		  break;
	  	  case postTrigger:
	  		  trigger = 0;
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <main+0xac>)
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
	  		  sprintf(msg, "%hu\r\n", buffer[val]);
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <main+0xb0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a18      	ldr	r2, [pc, #96]	; (8000344 <main+0xb4>)
 80002e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002e6:	461a      	mov	r2, r3
 80002e8:	4917      	ldr	r1, [pc, #92]	; (8000348 <main+0xb8>)
 80002ea:	4818      	ldr	r0, [pc, #96]	; (800034c <main+0xbc>)
 80002ec:	f009 ff6e 	bl	800a1cc <siprintf>
	  		  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 80002f0:	4816      	ldr	r0, [pc, #88]	; (800034c <main+0xbc>)
 80002f2:	f7ff ff75 	bl	80001e0 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	4813      	ldr	r0, [pc, #76]	; (800034c <main+0xbc>)
 80002fe:	f009 faed 	bl	80098dc <CDC_Transmit_FS>
	  		  HAL_Delay(2);
 8000302:	2002      	movs	r0, #2
 8000304:	f000 fc42 	bl	8000b8c <HAL_Delay>
	  		  val++;
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <main+0xb0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <main+0xb0>)
 8000310:	6013      	str	r3, [r2, #0]

	  		  if(val == 1024){
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <main+0xb0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800031a:	d102      	bne.n	8000322 <main+0x92>
	  			  val = 0;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <main+0xb0>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
	  		  }
	  		 HAL_TIM_Base_Start_IT(&htim1);
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <main+0xa8>)
 8000324:	f004 f9ca 	bl	80046bc <HAL_TIM_Base_Start_IT>
	  		  break;
 8000328:	e002      	b.n	8000330 <main+0xa0>
	  		  break;
 800032a:	bf00      	nop
 800032c:	e7c9      	b.n	80002c2 <main+0x32>
	  		  break;
 800032e:	bf00      	nop
	  switch(state){
 8000330:	e7c7      	b.n	80002c2 <main+0x32>
 8000332:	bf00      	nop
 8000334:	20000a0a 	.word	0x20000a0a
 8000338:	20000a0c 	.word	0x20000a0c
 800033c:	200009f4 	.word	0x200009f4
 8000340:	20000a04 	.word	0x20000a04
 8000344:	200001f0 	.word	0x200001f0
 8000348:	0800ab2c 	.word	0x0800ab2c
 800034c:	200009f8 	.word	0x200009f8

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b0a6      	sub	sp, #152	; 0x98
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f009 ff54 	bl	800a20c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2258      	movs	r2, #88	; 0x58
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f009 ff46 	bl	800a20c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000380:	2301      	movs	r3, #1
 8000382:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000388:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038a:	2301      	movs	r3, #1
 800038c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fcae 	bl	8002d10 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ba:	f000 fa2f 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fcec 	bl	8003db8 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e6:	f000 fa19 	bl	800081c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_TIM1
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <SystemClock_Config+0xc4>)
 80003ec:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ee:	2300      	movs	r3, #0
 80003f0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003f2:	2300      	movs	r3, #0
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003f6:	2300      	movs	r3, #0
 80003f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 fec1 	bl	8004184 <HAL_RCCEx_PeriphCLKConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000408:	f000 fa08 	bl	800081c <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3798      	adds	r7, #152	; 0x98
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	00821000 	.word	0x00821000

08000418 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(uint32_t prescaler, uint32_t period)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b09c      	sub	sp, #112	; 0x70
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
 800044c:	615a      	str	r2, [r3, #20]
 800044e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000450:	f107 030c 	add.w	r3, r7, #12
 8000454:	222c      	movs	r2, #44	; 0x2c
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f009 fed7 	bl	800a20c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800045e:	4b48      	ldr	r3, [pc, #288]	; (8000580 <MX_TIM1_Init+0x168>)
 8000460:	4a48      	ldr	r2, [pc, #288]	; (8000584 <MX_TIM1_Init+0x16c>)
 8000462:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000464:	4b46      	ldr	r3, [pc, #280]	; (8000580 <MX_TIM1_Init+0x168>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046a:	4b45      	ldr	r3, [pc, #276]	; (8000580 <MX_TIM1_Init+0x168>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;   //3300-1;
 8000470:	4b43      	ldr	r3, [pc, #268]	; (8000580 <MX_TIM1_Init+0x168>)
 8000472:	2201      	movs	r2, #1
 8000474:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000476:	4b42      	ldr	r3, [pc, #264]	; (8000580 <MX_TIM1_Init+0x168>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800047c:	4b40      	ldr	r3, [pc, #256]	; (8000580 <MX_TIM1_Init+0x168>)
 800047e:	2200      	movs	r2, #0
 8000480:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <MX_TIM1_Init+0x168>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000488:	483d      	ldr	r0, [pc, #244]	; (8000580 <MX_TIM1_Init+0x168>)
 800048a:	f004 f899 	bl	80045c0 <HAL_TIM_Base_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000494:	f000 f9c2 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800049e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004a2:	4619      	mov	r1, r3
 80004a4:	4836      	ldr	r0, [pc, #216]	; (8000580 <MX_TIM1_Init+0x168>)
 80004a6:	f004 fc0d 	bl	8004cc4 <HAL_TIM_ConfigClockSource>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004b0:	f000 f9b4 	bl	800081c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004b4:	4832      	ldr	r0, [pc, #200]	; (8000580 <MX_TIM1_Init+0x168>)
 80004b6:	f004 f971 	bl	800479c <HAL_TIM_PWM_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004c0:	f000 f9ac 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004c8:	2300      	movs	r3, #0
 80004ca:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004d4:	4619      	mov	r1, r3
 80004d6:	482a      	ldr	r0, [pc, #168]	; (8000580 <MX_TIM1_Init+0x168>)
 80004d8:	f005 f924 	bl	8005724 <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80004e2:	f000 f99b 	bl	800081c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e6:	2360      	movs	r3, #96	; 0x60
 80004e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ee:	2300      	movs	r3, #0
 80004f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004f2:	2300      	movs	r3, #0
 80004f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004fa:	2300      	movs	r3, #0
 80004fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004fe:	2300      	movs	r3, #0
 8000500:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000502:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	481d      	ldr	r0, [pc, #116]	; (8000580 <MX_TIM1_Init+0x168>)
 800050c:	f004 fac6 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000516:	f000 f981 	bl	800081c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800052e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000532:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800053c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <MX_TIM1_Init+0x168>)
 8000552:	f005 f973 	bl	800583c <HAL_TIMEx_ConfigBreakDeadTime>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800055c:	f000 f95e 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

  HAL_TIM_Base_Init(&htim1);
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <MX_TIM1_Init+0x168>)
 8000562:	f004 f82d 	bl	80045c0 <HAL_TIM_Base_Init>

  // Configure DMA request on update event
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_TIM1_Init+0x168>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <MX_TIM1_Init+0x168>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000574:	60da      	str	r2, [r3, #12]


}
 8000576:	bf00      	nop
 8000578:	3770      	adds	r7, #112	; 0x70
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000a0c 	.word	0x20000a0c
 8000584:	40012c00 	.word	0x40012c00

08000588 <HAL_TIM_PeriodElapsedCallback>:

uint16_t trigPin = 0x01;
uint16_t trigEdge = 0x00; //rising edge
int triggerCount = 128;
int counter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
		if (htim == &htim1) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a35      	ldr	r2, [pc, #212]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d15b      	bne.n	8000650 <HAL_TIM_PeriodElapsedCallback+0xc8>
			if (trigger){
 8000598:	4b34      	ldr	r3, [pc, #208]	; (800066c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d011      	beq.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				counter ++;
 80005a0:	4b33      	ldr	r3, [pc, #204]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a32      	ldr	r2, [pc, #200]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80005a8:	6013      	str	r3, [r2, #0]
				if (counter == triggerCount){
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d137      	bne.n	8000626 <HAL_TIM_PeriodElapsedCallback+0x9e>
					state = postTrigger;
 80005b6:	4b30      	ldr	r3, [pc, #192]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim1);
 80005bc:	482a      	ldr	r0, [pc, #168]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80005be:	f004 f856 	bl	800466e <HAL_TIM_Base_Stop>
 80005c2:	e030      	b.n	8000626 <HAL_TIM_PeriodElapsedCallback+0x9e>

				}
			}
			else {
				xorResult = GPIOB->IDR^buffer[bufferPointer];
 80005c4:	4b2d      	ldr	r3, [pc, #180]	; (800067c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	492d      	ldr	r1, [pc, #180]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80005d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005d4:	4053      	eors	r3, r2
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80005da:	801a      	strh	r2, [r3, #0]
				if (xorResult & trigPin){
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	4013      	ands	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01c      	beq.n	8000626 <HAL_TIM_PeriodElapsedCallback+0x9e>
					if(~(buffer[bufferPointer]^trigEdge)){
						//checking for falling edge
						if (~(trigEdge)){
							if ((xorResult & trigPin) & (~(buffer[bufferPointer]^trigEdge))){
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80005ee:	881a      	ldrh	r2, [r3, #0]
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	4013      	ands	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000600:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	4053      	eors	r3, r2
 800060a:	b29b      	uxth	r3, r3
 800060c:	43db      	mvns	r3, r3
 800060e:	400b      	ands	r3, r1
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <HAL_TIM_PeriodElapsedCallback+0x9e>
								trigger = 1; counter = 0;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
								//change state
								state = triggerState;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			//add value to buffer
			buffer[bufferPointer] = GPIOB->IDR;
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000628:	691a      	ldr	r2, [r3, #16]
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	b291      	uxth	r1, r2
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000632:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//FIXME: increment pointer with circular logic using logic gates
			bufferPointer++;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800063e:	6013      	str	r3, [r2, #0]
			if (bufferPointer > 1024){
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000648:	dd02      	ble.n	8000650 <HAL_TIM_PeriodElapsedCallback+0xc8>
				bufferPointer = 0;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
			}
		}
		//trigger timer interrupt
		if (htim == &htim16){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d102      	bne.n	800065e <HAL_TIM_PeriodElapsedCallback+0xd6>
			trigger = 0;
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
			//push buffer to usb

		}
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000a0c 	.word	0x20000a0c
 800066c:	200009f4 	.word	0x200009f4
 8000670:	20000aec 	.word	0x20000aec
 8000674:	20000004 	.word	0x20000004
 8000678:	20000a0a 	.word	0x20000a0a
 800067c:	48000400 	.word	0x48000400
 8000680:	200009f0 	.word	0x200009f0
 8000684:	200001f0 	.word	0x200001f0
 8000688:	20000a08 	.word	0x20000a08
 800068c:	20000000 	.word	0x20000000
 8000690:	20000ae8 	.word	0x20000ae8
 8000694:	20000a58 	.word	0x20000a58

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_DMA_Init+0x88>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <MX_DMA_Init+0x88>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_DMA_Init+0x88>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  	  hdma_tim1_up.Instance = DMA1_Channel5;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_DMA_Init+0x8c>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_DMA_Init+0x90>)
 80006ba:	601a      	str	r2, [r3, #0]
      hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_DMA_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
      hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_DMA_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
      hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_DMA_Init+0x8c>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	60da      	str	r2, [r3, #12]
      hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_DMA_Init+0x8c>)
 80006d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d4:	611a      	str	r2, [r3, #16]
      hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_DMA_Init+0x8c>)
 80006d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006dc:	615a      	str	r2, [r3, #20]
      hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_DMA_Init+0x8c>)
 80006e0:	2220      	movs	r2, #32
 80006e2:	619a      	str	r2, [r3, #24]
      hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_DMA_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]

      //HAL_DMA_Init(&hdma_tim1_up);

      if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <MX_DMA_Init+0x8c>)
 80006ec:	f000 fb83 	bl	8000df6 <HAL_DMA_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_DMA_Init+0x62>
          {
              Error_Handler();
 80006f6:	f000 f891 	bl	800081c <Error_Handler>
          }

      __HAL_LINKDMA(&htim1, hdma[TIM_DMA_ID_UPDATE], hdma_tim1_up);
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_DMA_Init+0x94>)
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <MX_DMA_Init+0x8c>)
 80006fe:	621a      	str	r2, [r3, #32]
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_DMA_Init+0x8c>)
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <MX_DMA_Init+0x94>)
 8000704:	625a      	str	r2, [r3, #36]	; 0x24

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	200f      	movs	r0, #15
 800070c:	f000 fb3d 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000710:	200f      	movs	r0, #15
 8000712:	f000 fb56 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	20000aa4 	.word	0x20000aa4
 8000728:	40020058 	.word	0x40020058
 800072c:	20000a0c 	.word	0x20000a0c

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xac>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <MX_GPIO_Init+0xac>)
 800074c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_GPIO_Init+0xac>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_GPIO_Init+0xac>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <MX_GPIO_Init+0xac>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_GPIO_Init+0xac>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_GPIO_Init+0xac>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0xac>)
 800077c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_GPIO_Init+0xac>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fddf 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800079a:	2320      	movs	r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a2:	2302      	movs	r3, #2
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 fc46 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007bc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007c2:	2302      	movs	r3, #2
 80007c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0xb0>)
 80007ce:	f000 fc39 	bl	8001044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400

080007e4 <Process_USB_Command>:
    Stop_TIM1_DMA();
    MX_TIM1_Init(prescaler, period);
    Start_TIM1_DMA();
}

void Process_USB_Command(char *cmd) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    uint32_t new_rate = atoi(cmd);  // Convert command string to integer
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f009 fc5d 	bl	800a0ac <atoi>
 80007f2:	4603      	mov	r3, r0
 80007f4:	60fb      	str	r3, [r7, #12]



    if(new_rate == 6){
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b06      	cmp	r3, #6
 80007fa:	d103      	bne.n	8000804 <Process_USB_Command+0x20>
    	trigger = 1;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <Process_USB_Command+0x34>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
    }

    else {
        // Handle invalid rate input (optional)
    }
}
 8000802:	e005      	b.n	8000810 <Process_USB_Command+0x2c>
    else if(new_rate ==7){
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d102      	bne.n	8000810 <Process_USB_Command+0x2c>
    	trigger = 0;
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <Process_USB_Command+0x34>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200009f4 	.word	0x200009f4

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x44>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x44>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x44>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x44>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085e:	2007      	movs	r0, #7
 8000860:	f000 fa88 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <HAL_TIM_Base_MspInit+0xc8>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d13c      	bne.n	80008fc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000882:	4b2e      	ldr	r3, [pc, #184]	; (800093c <HAL_TIM_Base_MspInit+0xcc>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a2d      	ldr	r2, [pc, #180]	; (800093c <HAL_TIM_Base_MspInit+0xcc>)
 8000888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b2b      	ldr	r3, [pc, #172]	; (800093c <HAL_TIM_Base_MspInit+0xcc>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 800089c:	4a29      	ldr	r2, [pc, #164]	; (8000944 <HAL_TIM_Base_MspInit+0xd4>)
 800089e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b8:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008c4:	2220      	movs	r2, #32
 80008c6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80008ce:	481c      	ldr	r0, [pc, #112]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008d0:	f000 fa91 	bl	8000df6 <HAL_DMA_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80008da:	f7ff ff9f 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008e2:	621a      	str	r2, [r3, #32]
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_TIM_Base_MspInit+0xd0>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2019      	movs	r0, #25
 80008f0:	f000 fa4b 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008f4:	2019      	movs	r0, #25
 80008f6:	f000 fa64 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80008fa:	e018      	b.n	800092e <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM16)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a11      	ldr	r2, [pc, #68]	; (8000948 <HAL_TIM_Base_MspInit+0xd8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d113      	bne.n	800092e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_TIM_Base_MspInit+0xcc>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a0c      	ldr	r2, [pc, #48]	; (800093c <HAL_TIM_Base_MspInit+0xcc>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_TIM_Base_MspInit+0xcc>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2019      	movs	r0, #25
 8000924:	f000 fa31 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000928:	2019      	movs	r0, #25
 800092a:	f000 fa4a 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40012c00 	.word	0x40012c00
 800093c:	40021000 	.word	0x40021000
 8000940:	20000aa4 	.word	0x20000aa4
 8000944:	40020058 	.word	0x40020058
 8000948:	40014400 	.word	0x40014400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f8d8 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <DMA1_Channel5_IRQHandler+0x10>)
 80009a6:	f000 fa6d 	bl	8000e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000aa4 	.word	0x20000aa4

080009b4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80009ba:	f000 fddd 	bl	8001578 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200017c0 	.word	0x200017c0

080009c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009ce:	f003 ff46 	bl	800485e <HAL_TIM_IRQHandler>
 // HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000a0c 	.word	0x20000a0c

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f009 fc06 	bl	800a21c <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20010000 	.word	0x20010000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	20000af0 	.word	0x20000af0
 8000a44:	20001e18 	.word	0x20001e18

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f009 fbc5 	bl	800a228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fbf7 	bl	8000290 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000ab0:	0800ace8 	.word	0x0800ace8
  ldr r2, =_sbss
 8000ab4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000ab8:	20001e14 	.word	0x20001e14

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f94f 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fea4 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f967 	bl	8000dde <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f92f 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000010 	.word	0x20000010
 8000b48:	2000000c 	.word	0x2000000c

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	20000af4 	.word	0x20000af4

08000b74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000af4 	.word	0x20000af4

08000b8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000010 	.word	0x20000010

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e037      	b.n	8000e7c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f8b4 	bl	8000fcc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}  
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d024      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x72>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d01f      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d107      	bne.n	8000ed4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0204 	bic.w	r2, r2, #4
 8000ed2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000edc:	2104      	movs	r1, #4
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d06a      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ef4:	e065      	b.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	2202      	movs	r2, #2
 8000efc:	409a      	lsls	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d02c      	beq.n	8000f60 <HAL_DMA_IRQHandler+0xdc>
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d027      	beq.n	8000f60 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10b      	bne.n	8000f36 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 020a 	bic.w	r2, r2, #10
 8000f2c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3e:	2102      	movs	r1, #2
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d035      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f5e:	e030      	b.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	2208      	movs	r2, #8
 8000f66:	409a      	lsls	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d028      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d023      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 020e 	bic.w	r2, r2, #14
 8000f88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4798      	blx	r3
    }
  }
}  
 8000fc0:	e7ff      	b.n	8000fc2 <HAL_DMA_IRQHandler+0x13e>
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <DMA_CalcBaseAndBitshift+0x60>)
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d80f      	bhi.n	8001000 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <DMA_CalcBaseAndBitshift+0x64>)
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <DMA_CalcBaseAndBitshift+0x68>)
 8000fec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	009a      	lsls	r2, r3, #2
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <DMA_CalcBaseAndBitshift+0x6c>)
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000ffe:	e00e      	b.n	800101e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <DMA_CalcBaseAndBitshift+0x70>)
 8001008:	4413      	add	r3, r2
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <DMA_CalcBaseAndBitshift+0x68>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	009a      	lsls	r2, r3, #2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <DMA_CalcBaseAndBitshift+0x74>)
 800101c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40020407 	.word	0x40020407
 8001030:	bffdfff8 	.word	0xbffdfff8
 8001034:	cccccccd 	.word	0xcccccccd
 8001038:	40020000 	.word	0x40020000
 800103c:	bffdfbf8 	.word	0xbffdfbf8
 8001040:	40020400 	.word	0x40020400

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e160      	b.n	8001316 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8152 	beq.w	8001310 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x40>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d017      	beq.n	8001122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d123      	bne.n	8001176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	6939      	ldr	r1, [r7, #16]
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0203 	and.w	r2, r3, #3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 80ac 	beq.w	8001310 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b8:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <HAL_GPIO_Init+0x2f0>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a5d      	ldr	r2, [pc, #372]	; (8001334 <HAL_GPIO_Init+0x2f0>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <HAL_GPIO_Init+0x2f0>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011d0:	4a59      	ldr	r2, [pc, #356]	; (8001338 <HAL_GPIO_Init+0x2f4>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011fa:	d025      	beq.n	8001248 <HAL_GPIO_Init+0x204>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_GPIO_Init+0x2f8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d01f      	beq.n	8001244 <HAL_GPIO_Init+0x200>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x2fc>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d019      	beq.n	8001240 <HAL_GPIO_Init+0x1fc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x300>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d013      	beq.n	800123c <HAL_GPIO_Init+0x1f8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x304>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00d      	beq.n	8001238 <HAL_GPIO_Init+0x1f4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4b      	ldr	r2, [pc, #300]	; (800134c <HAL_GPIO_Init+0x308>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d007      	beq.n	8001234 <HAL_GPIO_Init+0x1f0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_GPIO_Init+0x30c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_GPIO_Init+0x1ec>
 800122c:	2306      	movs	r3, #6
 800122e:	e00c      	b.n	800124a <HAL_GPIO_Init+0x206>
 8001230:	2307      	movs	r3, #7
 8001232:	e00a      	b.n	800124a <HAL_GPIO_Init+0x206>
 8001234:	2305      	movs	r3, #5
 8001236:	e008      	b.n	800124a <HAL_GPIO_Init+0x206>
 8001238:	2304      	movs	r3, #4
 800123a:	e006      	b.n	800124a <HAL_GPIO_Init+0x206>
 800123c:	2303      	movs	r3, #3
 800123e:	e004      	b.n	800124a <HAL_GPIO_Init+0x206>
 8001240:	2302      	movs	r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x206>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_GPIO_Init+0x206>
 8001248:	2300      	movs	r3, #0
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800125a:	4937      	ldr	r1, [pc, #220]	; (8001338 <HAL_GPIO_Init+0x2f4>)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <HAL_GPIO_Init+0x310>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800128c:	4a31      	ldr	r2, [pc, #196]	; (8001354 <HAL_GPIO_Init+0x310>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_GPIO_Init+0x310>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_GPIO_Init+0x310>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_GPIO_Init+0x310>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <HAL_GPIO_Init+0x310>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x310>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_GPIO_Init+0x310>)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	f47f ae97 	bne.w	8001054 <HAL_GPIO_Init+0x10>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	48000400 	.word	0x48000400
 8001340:	48000800 	.word	0x48000800
 8001344:	48000c00 	.word	0x48000c00
 8001348:	48001000 	.word	0x48001000
 800134c:	48001400 	.word	0x48001400
 8001350:	48001800 	.word	0x48001800
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001374:	e002      	b.n	800137c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	b08b      	sub	sp, #44	; 0x2c
 800138c:	af06      	add	r7, sp, #24
 800138e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0c4      	b.n	8001524 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d106      	bne.n	80013b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f008 fbca 	bl	8009b48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2203      	movs	r2, #3
 80013b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 faf6 	bl	80059b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e040      	b.n	800144e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	3301      	adds	r3, #1
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3303      	adds	r3, #3
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3338      	adds	r3, #56	; 0x38
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	333c      	adds	r3, #60	; 0x3c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3340      	adds	r3, #64	; 0x40
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3b9      	bcc.n	80013cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e044      	b.n	80014e8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3b5      	bcc.n	800145e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	687e      	ldr	r6, [r7, #4]
 80014fa:	466d      	mov	r5, sp
 80014fc:	f106 0410 	add.w	r4, r6, #16
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	602b      	str	r3, [r5, #0]
 8001508:	1d33      	adds	r3, r6, #4
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f004 fa6b 	bl	80059e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_PCD_Start+0x16>
 800153e:	2302      	movs	r3, #2
 8001540:	e016      	b.n	8001570 <HAL_PCD_Start+0x44>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fa18 	bl	8005984 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001554:	2101      	movs	r1, #1
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f008 fd70 	bl	800a03c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f006 fcd8 	bl	8007f16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f006 fcd1 	bl	8007f2c <USB_ReadInterrupts>
 800158a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fab2 	bl	8001b00 <PCD_EP_ISR_Handler>

    return;
 800159c:	e0bd      	b.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ba:	b292      	uxth	r2, r2
 80015bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f008 fb3c 	bl	8009c3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015c6:	2100      	movs	r1, #0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8a9 	bl	8001720 <HAL_PCD_SetAddress>

    return;
 80015ce:	e0a4      	b.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00c      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015ec:	b292      	uxth	r2, r2
 80015ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80015f2:	e092      	b.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001616:	e080      	b.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d027      	beq.n	8001672 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0204 	bic.w	r2, r2, #4
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0208 	bic.w	r2, r2, #8
 800164c:	b292      	uxth	r2, r2
 800164e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f008 fb2c 	bl	8009cb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800166a:	b292      	uxth	r2, r2
 800166c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001670:	e053      	b.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001678:	2b00      	cmp	r3, #0
 800167a:	d027      	beq.n	80016cc <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0208 	orr.w	r2, r2, #8
 800168e:	b292      	uxth	r2, r2
 8001690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a6:	b292      	uxth	r2, r2
 80016a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0204 	orr.w	r2, r2, #4
 80016be:	b292      	uxth	r2, r2
 80016c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f008 fad9 	bl	8009c7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016ca:	e026      	b.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00f      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e8:	b292      	uxth	r2, r2
 80016ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f008 fa97 	bl	8009c22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016f4:	e011      	b.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00c      	beq.n	800171a <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001712:	b292      	uxth	r2, r2
 8001714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001718:	bf00      	nop
  }
}
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_PCD_SetAddress+0x1a>
 8001736:	2302      	movs	r3, #2
 8001738:	e013      	b.n	8001762 <HAL_PCD_SetAddress+0x42>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f006 fbcb 	bl	8007eee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	4608      	mov	r0, r1
 8001774:	4611      	mov	r1, r2
 8001776:	461a      	mov	r2, r3
 8001778:	4603      	mov	r3, r0
 800177a:	70fb      	strb	r3, [r7, #3]
 800177c:	460b      	mov	r3, r1
 800177e:	803b      	strh	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da0e      	bge.n	80017ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	705a      	strb	r2, [r3, #1]
 80017ac:	e00e      	b.n	80017cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	f003 0207 	and.w	r2, r3, #7
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017d8:	883a      	ldrh	r2, [r7, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	78ba      	ldrb	r2, [r7, #2]
 80017e2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017e4:	78bb      	ldrb	r3, [r7, #2]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d102      	bne.n	80017f0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_PCD_EP_Open+0x94>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e00e      	b.n	800181c <HAL_PCD_EP_Open+0xb2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68f9      	ldr	r1, [r7, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 f90d 	bl	8005a2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800181a:	7afb      	ldrb	r3, [r7, #11]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da0e      	bge.n	8001856 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	705a      	strb	r2, [r3, #1]
 8001854:	e00e      	b.n	8001874 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	f003 0207 	and.w	r2, r3, #7
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	b2da      	uxtb	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_PCD_EP_Close+0x6a>
 800188a:	2302      	movs	r3, #2
 800188c:	e00e      	b.n	80018ac <HAL_PCD_EP_Close+0x88>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fc89 	bl	80061b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	460b      	mov	r3, r1
 80018c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c4:	7afb      	ldrb	r3, [r7, #11]
 80018c6:	f003 0207 	and.w	r2, r3, #7
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2200      	movs	r2, #0
 80018f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f4:	7afb      	ldrb	r3, [r7, #11]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6979      	ldr	r1, [r7, #20]
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fe41 	bl	800658e <USB_EPStartXfer>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	f003 0207 	and.w	r2, r3, #7
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001938:	681b      	ldr	r3, [r3, #0]
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	460b      	mov	r3, r1
 8001954:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001956:	7afb      	ldrb	r3, [r7, #11]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2201      	movs	r2, #1
 8001990:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	b2da      	uxtb	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6979      	ldr	r1, [r7, #20]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 fdf2 	bl	800658e <USB_EPStartXfer>

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 0207 	and.w	r2, r3, #7
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d901      	bls.n	80019d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e03e      	b.n	8001a50 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da0e      	bge.n	80019f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	705a      	strb	r2, [r3, #1]
 80019f6:	e00c      	b.n	8001a12 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_PCD_EP_SetStall+0x7e>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e00e      	b.n	8001a50 <HAL_PCD_EP_SetStall+0x9c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68f9      	ldr	r1, [r7, #12]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f006 f955 	bl	8007cf0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d901      	bls.n	8001a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e040      	b.n	8001af8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da0e      	bge.n	8001a9c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	705a      	strb	r2, [r3, #1]
 8001a9a:	e00e      	b.n	8001aba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	f003 0207 	and.w	r2, r3, #7
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_PCD_EP_ClrStall+0x82>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e00e      	b.n	8001af8 <HAL_PCD_EP_ClrStall+0xa0>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 f952 	bl	8007d92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b096      	sub	sp, #88	; 0x58
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b08:	e3b1      	b.n	800226e <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001b24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f040 8173 	bne.w	8001e14 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d150      	bne.n	8001bdc <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4a:	81fb      	strh	r3, [r7, #14]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3328      	adds	r3, #40	; 0x28
 8001b62:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	441a      	add	r2, r3
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f008 f826 	bl	8009bee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 835f 	beq.w	800226e <PCD_EP_ISR_Handler+0x76e>
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 835a 	bne.w	800226e <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bda:	e348      	b.n	800226e <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d032      	beq.n	8001c60 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f006 f9cb 	bl	8007fd0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c46:	4013      	ands	r3, r2
 8001c48:	823b      	strh	r3, [r7, #16]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	8a3a      	ldrh	r2, [r7, #16]
 8001c50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c54:	b292      	uxth	r2, r2
 8001c56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f007 ff9b 	bl	8009b94 <HAL_PCD_SetupStageCallback>
 8001c5e:	e306      	b.n	800226e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c60:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f280 8302 	bge.w	800226e <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c76:	4013      	ands	r3, r2
 8001c78:	83fb      	strh	r3, [r7, #30]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	8bfa      	ldrh	r2, [r7, #30]
 8001c80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c84:	b292      	uxth	r2, r2
 8001c86:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d019      	beq.n	8001cec <PCD_EP_ISR_Handler+0x1ec>
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d015      	beq.n	8001cec <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	6959      	ldr	r1, [r3, #20]
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f006 f97d 	bl	8007fd0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	441a      	add	r2, r3
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f007 ff66 	bl	8009bb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001cf6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 82b5 	bne.w	800226e <PCD_EP_ISR_Handler+0x76e>
 8001d04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d08:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d10:	f000 82ad 	beq.w	800226e <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b3e      	cmp	r3, #62	; 0x3e
 8001d4a:	d91d      	bls.n	8001d88 <PCD_EP_ISR_Handler+0x288>
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	647b      	str	r3, [r7, #68]	; 0x44
 8001d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <PCD_EP_ISR_Handler+0x266>
 8001d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d62:	3b01      	subs	r3, #1
 8001d64:	647b      	str	r3, [r7, #68]	; 0x44
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	029b      	lsls	r3, r3, #10
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	e026      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x2d6>
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10a      	bne.n	8001da6 <PCD_EP_ISR_Handler+0x2a6>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	e017      	b.n	8001dd6 <PCD_EP_ISR_Handler+0x2d6>
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	647b      	str	r3, [r7, #68]	; 0x44
 8001dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <PCD_EP_ISR_Handler+0x2c0>
 8001dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	827b      	strh	r3, [r7, #18]
 8001de8:	8a7b      	ldrh	r3, [r7, #18]
 8001dea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001dee:	827b      	strh	r3, [r7, #18]
 8001df0:	8a7b      	ldrh	r3, [r7, #18]
 8001df2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001df6:	827b      	strh	r3, [r7, #18]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	8a7b      	ldrh	r3, [r7, #18]
 8001dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	8013      	strh	r3, [r2, #0]
 8001e12:	e22c      	b.n	800226e <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e28:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f280 80f6 	bge.w	800201e <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e48:	4013      	ands	r3, r2
 8001e4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e64:	b292      	uxth	r2, r2
 8001e66:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e68:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e80:	7b1b      	ldrb	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d123      	bne.n	8001ece <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eaa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001eae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 808e 	beq.w	8001fd4 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	6959      	ldr	r1, [r3, #20]
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec2:	88da      	ldrh	r2, [r3, #6]
 8001ec4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ec8:	f006 f882 	bl	8007fd0 <USB_ReadPMA>
 8001ecc:	e082      	b.n	8001fd4 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	78db      	ldrb	r3, [r3, #3]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d10a      	bne.n	8001eec <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eda:	461a      	mov	r2, r3
 8001edc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f9d3 	bl	800228a <HAL_PCD_EP_DB_Receive>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001eea:	e073      	b.n	8001fd4 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	441a      	add	r2, r3
 8001f18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d022      	beq.n	8001f90 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d02c      	beq.n	8001fd4 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	6959      	ldr	r1, [r3, #20]
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	891a      	ldrh	r2, [r3, #8]
 8001f86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f8a:	f006 f821 	bl	8007fd0 <USB_ReadPMA>
 8001f8e:	e021      	b.n	8001fd4 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001fb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fca:	895a      	ldrh	r2, [r3, #10]
 8001fcc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fd0:	f005 fffe 	bl	8007fd0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fdc:	441a      	add	r2, r3
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fea:	441a      	add	r2, r3
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <PCD_EP_ISR_Handler+0x504>
 8001ff8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d206      	bcs.n	8002012 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f007 fdd4 	bl	8009bb8 <HAL_PCD_DataOutStageCallback>
 8002010:	e005      	b.n	800201e <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002018:	4618      	mov	r0, r3
 800201a:	f004 fab8 	bl	800658e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800201e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8121 	beq.w	800226e <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800202c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	441a      	add	r2, r3
 800206c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002078:	b29b      	uxth	r3, r3
 800207a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207e:	78db      	ldrb	r3, [r3, #3]
 8002080:	2b01      	cmp	r3, #1
 8002082:	f040 80a2 	bne.w	80021ca <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800208c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208e:	7b1b      	ldrb	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8093 	beq.w	80021bc <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002096:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d046      	beq.n	8002130 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d126      	bne.n	80020f8 <PCD_EP_ISR_Handler+0x5f8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	4413      	add	r3, r2
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	00da      	lsls	r2, r3, #3
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	4413      	add	r3, r2
 80020cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020dc:	b29a      	uxth	r2, r3
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	e061      	b.n	80021bc <PCD_EP_ISR_Handler+0x6bc>
 80020f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d15d      	bne.n	80021bc <PCD_EP_ISR_Handler+0x6bc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	4413      	add	r3, r2
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00da      	lsls	r2, r3, #3
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	4413      	add	r3, r2
 8002122:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	2200      	movs	r2, #0
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	e045      	b.n	80021bc <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d126      	bne.n	800218c <PCD_EP_ISR_Handler+0x68c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	4413      	add	r3, r2
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
 8002156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	00da      	lsls	r2, r3, #3
 800215c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215e:	4413      	add	r3, r2
 8002160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002170:	b29a      	uxth	r2, r3
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002184:	b29a      	uxth	r2, r3
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	801a      	strh	r2, [r3, #0]
 800218a:	e017      	b.n	80021bc <PCD_EP_ISR_Handler+0x6bc>
 800218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d113      	bne.n	80021bc <PCD_EP_ISR_Handler+0x6bc>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a2:	4413      	add	r3, r2
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	00da      	lsls	r2, r3, #3
 80021ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ae:	4413      	add	r3, r2
 80021b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	2200      	movs	r2, #0
 80021ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f007 fd13 	bl	8009bee <HAL_PCD_DataInStageCallback>
 80021c8:	e051      	b.n	800226e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d144      	bne.n	8002260 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021de:	b29b      	uxth	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80021fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002206:	429a      	cmp	r2, r3
 8002208:	d907      	bls.n	800221a <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 800220a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002212:	1ad2      	subs	r2, r2, r3
 8002214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002216:	619a      	str	r2, [r3, #24]
 8002218:	e002      	b.n	8002220 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d106      	bne.n	8002236 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f007 fcdd 	bl	8009bee <HAL_PCD_DataInStageCallback>
 8002234:	e01b      	b.n	800226e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800223e:	441a      	add	r2, r3
 8002240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002242:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800224c:	441a      	add	r2, r3
 800224e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002250:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002258:	4618      	mov	r0, r3
 800225a:	f004 f998 	bl	800658e <USB_EPStartXfer>
 800225e:	e006      	b.n	800226e <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002260:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002264:	461a      	mov	r2, r3
 8002266:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f917 	bl	800249c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002276:	b29b      	uxth	r3, r3
 8002278:	b21b      	sxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f6ff ac45 	blt.w	8001b0a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3758      	adds	r7, #88	; 0x58
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b088      	sub	sp, #32
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	4613      	mov	r3, r2
 8002296:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07c      	beq.n	800239c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	8b7b      	ldrh	r3, [r7, #26]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d306      	bcc.n	80022e0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	8b7b      	ldrh	r3, [r7, #26]
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	e002      	b.n	80022e6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d123      	bne.n	8002336 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002308:	833b      	strh	r3, [r7, #24]
 800230a:	8b3b      	ldrh	r3, [r7, #24]
 800230c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002310:	833b      	strh	r3, [r7, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	441a      	add	r2, r3
 8002320:	8b3b      	ldrh	r3, [r7, #24]
 8002322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002332:	b29b      	uxth	r3, r3
 8002334:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01f      	beq.n	8002380 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	82fb      	strh	r3, [r7, #22]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	8afb      	ldrh	r3, [r7, #22]
 800236c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002378:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800237c:	b29b      	uxth	r3, r3
 800237e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002380:	8b7b      	ldrh	r3, [r7, #26]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8085 	beq.w	8002492 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6959      	ldr	r1, [r3, #20]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	891a      	ldrh	r2, [r3, #8]
 8002394:	8b7b      	ldrh	r3, [r7, #26]
 8002396:	f005 fe1b 	bl	8007fd0 <USB_ReadPMA>
 800239a:	e07a      	b.n	8002492 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	8b7b      	ldrh	r3, [r7, #26]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d306      	bcc.n	80023da <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	8b7b      	ldrh	r3, [r7, #26]
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	619a      	str	r2, [r3, #24]
 80023d8:	e002      	b.n	80023e0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d123      	bne.n	8002430 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	83fb      	strh	r3, [r7, #30]
 8002404:	8bfb      	ldrh	r3, [r7, #30]
 8002406:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800240a:	83fb      	strh	r3, [r7, #30]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	8bfb      	ldrh	r3, [r7, #30]
 800241c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242c:	b29b      	uxth	r3, r3
 800242e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11f      	bne.n	800247a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002454:	83bb      	strh	r3, [r7, #28]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	441a      	add	r2, r3
 8002464:	8bbb      	ldrh	r3, [r7, #28]
 8002466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800246a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800246e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002472:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002476:	b29b      	uxth	r3, r3
 8002478:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800247a:	8b7b      	ldrh	r3, [r7, #26]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	6959      	ldr	r1, [r3, #20]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	895a      	ldrh	r2, [r3, #10]
 800248c:	8b7b      	ldrh	r3, [r7, #26]
 800248e:	f005 fd9f 	bl	8007fd0 <USB_ReadPMA>
    }
  }

  return count;
 8002492:	8b7b      	ldrh	r3, [r7, #26]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0a4      	sub	sp, #144	; 0x90
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 81db 	beq.w	800286c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d907      	bls.n	80024fa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	e002      	b.n	8002500 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 80b9 	bne.w	800267c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d126      	bne.n	8002560 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002520:	b29b      	uxth	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	4413      	add	r3, r2
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	00da      	lsls	r2, r3, #3
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	4413      	add	r3, r2
 8002534:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	b29a      	uxth	r2, r3
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002558:	b29a      	uxth	r2, r3
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	e01a      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d116      	bne.n	8002596 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	4413      	add	r3, r2
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	00da      	lsls	r2, r3, #3
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	4413      	add	r3, r2
 800258a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	2200      	movs	r2, #0
 8002594:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d126      	bne.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x156>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	4413      	add	r3, r2
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00da      	lsls	r2, r3, #3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	e017      	b.n	8002622 <HAL_PCD_EP_DB_Transmit+0x186>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d113      	bne.n	8002622 <HAL_PCD_EP_DB_Transmit+0x186>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	4413      	add	r3, r2
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	00da      	lsls	r2, r3, #3
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	4413      	add	r3, r2
 8002616:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	2200      	movs	r2, #0
 8002620:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f007 fae0 	bl	8009bee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 82fa 	beq.w	8002c2e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002654:	82fb      	strh	r3, [r7, #22]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	441a      	add	r2, r3
 8002664:	8afb      	ldrh	r3, [r7, #22]
 8002666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002676:	b29b      	uxth	r3, r3
 8002678:	8013      	strh	r3, [r2, #0]
 800267a:	e2d8      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d021      	beq.n	80026ca <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80026b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	f040 82ac 	bne.w	8002c2e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026de:	441a      	add	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026ec:	441a      	add	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d30b      	bcc.n	8002716 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	621a      	str	r2, [r3, #32]
 8002714:	e017      	b.n	8002746 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800271e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800272e:	e00a      	b.n	8002746 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2200      	movs	r2, #0
 8002744:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d165      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x37e>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002762:	4413      	add	r3, r2
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	00da      	lsls	r2, r3, #3
 800276c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276e:	4413      	add	r3, r2
 8002770:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002780:	b29a      	uxth	r2, r3
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800278a:	2b3e      	cmp	r3, #62	; 0x3e
 800278c:	d91d      	bls.n	80027ca <HAL_PCD_EP_DB_Transmit+0x32e>
 800278e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
 8002796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a4:	3b01      	subs	r3, #1
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	e044      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x34c>
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e035      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_PCD_EP_DB_Transmit+0x366>
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	3301      	adds	r3, #1
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29a      	uxth	r2, r3
 8002808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280a:	b29b      	uxth	r3, r3
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	b29b      	uxth	r3, r3
 8002810:	4313      	orrs	r3, r2
 8002812:	b29a      	uxth	r2, r3
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	e01c      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d118      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	647b      	str	r3, [r7, #68]	; 0x44
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002836:	4413      	add	r3, r2
 8002838:	647b      	str	r3, [r7, #68]	; 0x44
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	00da      	lsls	r2, r3, #3
 8002840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002842:	4413      	add	r3, r2
 8002844:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284e:	b29a      	uxth	r2, r3
 8002850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002852:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6959      	ldr	r1, [r3, #20]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	891a      	ldrh	r2, [r3, #8]
 8002860:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002864:	b29b      	uxth	r3, r3
 8002866:	f005 fb71 	bl	8007f4c <USB_WritePMA>
 800286a:	e1e0      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	4413      	add	r3, r2
 8002886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002890:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800289c:	429a      	cmp	r2, r3
 800289e:	d307      	bcc.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	699a      	ldr	r2, [r3, #24]
 80028a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028a8:	1ad2      	subs	r2, r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	619a      	str	r2, [r3, #24]
 80028ae:	e002      	b.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 80c0 	bne.w	8002a40 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d126      	bne.n	8002916 <HAL_PCD_EP_DB_Transmit+0x47a>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028dc:	4413      	add	r3, r2
 80028de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	00da      	lsls	r2, r3, #3
 80028e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80028f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800290e:	b29a      	uxth	r2, r3
 8002910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002912:	801a      	strh	r2, [r3, #0]
 8002914:	e01a      	b.n	800294c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	785b      	ldrb	r3, [r3, #1]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d116      	bne.n	800294c <HAL_PCD_EP_DB_Transmit+0x4b0>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	667b      	str	r3, [r7, #100]	; 0x64
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292c:	b29b      	uxth	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002932:	4413      	add	r3, r2
 8002934:	667b      	str	r3, [r7, #100]	; 0x64
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	00da      	lsls	r2, r3, #3
 800293c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800293e:	4413      	add	r3, r2
 8002940:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002944:	663b      	str	r3, [r7, #96]	; 0x60
 8002946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002948:	2200      	movs	r2, #0
 800294a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	677b      	str	r3, [r7, #116]	; 0x74
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12b      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x516>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002968:	b29b      	uxth	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	4413      	add	r3, r2
 8002970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	00da      	lsls	r2, r3, #3
 8002978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297a:	4413      	add	r3, r2
 800297c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002990:	b29a      	uxth	r2, r3
 8002992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	e017      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x546>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d113      	bne.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x546>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c8:	4413      	add	r3, r2
 80029ca:	677b      	str	r3, [r7, #116]	; 0x74
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00da      	lsls	r2, r3, #3
 80029d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d4:	4413      	add	r3, r2
 80029d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029da:	673b      	str	r3, [r7, #112]	; 0x70
 80029dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f007 f900 	bl	8009bee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 811a 	bne.w	8002c2e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a14:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	8013      	strh	r3, [r2, #0]
 8002a3e:	e0f6      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d121      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 80ca 	bne.w	8002c2e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002aa2:	441a      	add	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ab0:	441a      	add	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d30b      	bcc.n	8002ada <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad2:	1ad2      	subs	r2, r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	621a      	str	r2, [r3, #32]
 8002ad8:	e017      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002ae2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002af2:	e00a      	b.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d165      	bne.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x748>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2c:	4413      	add	r3, r2
 8002b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	00da      	lsls	r2, r3, #3
 8002b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b38:	4413      	add	r3, r2
 8002b3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4e:	801a      	strh	r2, [r3, #0]
 8002b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b54:	2b3e      	cmp	r3, #62	; 0x3e
 8002b56:	d91d      	bls.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4313      	orrs	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	e041      	b.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x716>
 8002b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	e032      	b.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x730>
 8002bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc8:	3301      	adds	r3, #1
 8002bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	029b      	lsls	r3, r3, #10
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	e019      	b.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	785b      	ldrb	r3, [r3, #1]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d115      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfa:	4413      	add	r3, r2
 8002bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	00da      	lsls	r2, r3, #3
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	4413      	add	r3, r2
 8002c08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8002c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c16:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6959      	ldr	r1, [r3, #20]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	895a      	ldrh	r2, [r3, #10]
 8002c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f005 f98f 	bl	8007f4c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c48:	82bb      	strh	r3, [r7, #20]
 8002c4a:	8abb      	ldrh	r3, [r7, #20]
 8002c4c:	f083 0310 	eor.w	r3, r3, #16
 8002c50:	82bb      	strh	r3, [r7, #20]
 8002c52:	8abb      	ldrh	r3, [r7, #20]
 8002c54:	f083 0320 	eor.w	r3, r3, #32
 8002c58:	82bb      	strh	r3, [r7, #20]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	441a      	add	r2, r3
 8002c68:	8abb      	ldrh	r3, [r7, #20]
 8002c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3790      	adds	r7, #144	; 0x90
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	817b      	strh	r3, [r7, #10]
 8002c96:	4613      	mov	r3, r2
 8002c98:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e009      	b.n	8002cd2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cbe:	897a      	ldrh	r2, [r7, #10]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cd2:	893b      	ldrh	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	80da      	strh	r2, [r3, #6]
 8002ce6:	e00b      	b.n	8002d00 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2201      	movs	r2, #1
 8002cec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d20:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f001 b83a 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 816f 	beq.w	800302a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d4c:	4bb5      	ldr	r3, [pc, #724]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d00c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d58:	4bb2      	ldr	r3, [pc, #712]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d15c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x10e>
 8002d64:	4baf      	ldr	r3, [pc, #700]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d155      	bne.n	8002e1e <HAL_RCC_OscConfig+0x10e>
 8002d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x94>
 8002d9e:	4ba1      	ldr	r3, [pc, #644]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e015      	b.n	8002dd0 <HAL_RCC_OscConfig+0xc0>
 8002da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dbc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002dc0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002dcc:	4b95      	ldr	r3, [pc, #596]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002dd8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002ddc:	fa92 f2a2 	rbit	r2, r2
 8002de0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002de4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	f042 0220 	orr.w	r2, r2, #32
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f002 021f 	and.w	r2, r2, #31
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8111 	beq.w	8003028 <HAL_RCC_OscConfig+0x318>
 8002e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8108 	bne.w	8003028 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f000 bfc6 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x12e>
 8002e30:	4b7c      	ldr	r3, [pc, #496]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7b      	ldr	r2, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e036      	b.n	8002eac <HAL_RCC_OscConfig+0x19c>
 8002e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x158>
 8002e4e:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a74      	ldr	r2, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a71      	ldr	r2, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e021      	b.n	8002eac <HAL_RCC_OscConfig+0x19c>
 8002e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x184>
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a66      	ldr	r2, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x19c>
 8002e94:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a62      	ldr	r2, [pc, #392]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b60      	ldr	r3, [pc, #384]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5f      	ldr	r2, [pc, #380]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d059      	beq.n	8002f70 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fe5a 	bl	8000b74 <HAL_GetTick>
 8002ec0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec6:	f7fd fe55 	bl	8000b74 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d902      	bls.n	8002edc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	f000 bf67 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
 8002edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002ef0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_OscConfig+0x1fe>
 8002f08:	4b46      	ldr	r3, [pc, #280]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x22a>
 8002f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f12:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f2a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f3e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f42:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002f46:	fa92 f2a2 	rbit	r2, r2
 8002f4a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002f4e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f52:	fab2 f282 	clz	r2, r2
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f042 0220 	orr.w	r2, r2, #32
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f002 021f 	and.w	r2, r2, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ab      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1b6>
 8002f6e:	e05c      	b.n	800302a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fd fe00 	bl	8000b74 <HAL_GetTick>
 8002f74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7a:	f7fd fdfb 	bl	8000b74 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d902      	bls.n	8002f90 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	f000 bf0d 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
 8002f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f94:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002fa4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d102      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2b2>
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x2de>
 8002fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_RCC_OscConfig+0x314>)
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ff2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002ff6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ffa:	fa92 f2a2 	rbit	r2, r2
 8002ffe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003002:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003006:	fab2 f282 	clz	r2, r2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f042 0220 	orr.w	r2, r2, #32
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f002 021f 	and.w	r2, r2, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f202 	lsl.w	r2, r1, r2
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ab      	bne.n	8002f7a <HAL_RCC_OscConfig+0x26a>
 8003022:	e002      	b.n	800302a <HAL_RCC_OscConfig+0x31a>
 8003024:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 817f 	beq.w	800333e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003040:	4ba7      	ldr	r3, [pc, #668]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800304c:	4ba4      	ldr	r3, [pc, #656]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d173      	bne.n	8003140 <HAL_RCC_OscConfig+0x430>
 8003058:	4ba1      	ldr	r3, [pc, #644]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003064:	d16c      	bne.n	8003140 <HAL_RCC_OscConfig+0x430>
 8003066:	2302      	movs	r3, #2
 8003068:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003078:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_RCC_OscConfig+0x386>
 8003090:	4b93      	ldr	r3, [pc, #588]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e013      	b.n	80030be <HAL_RCC_OscConfig+0x3ae>
 8003096:	2302      	movs	r3, #2
 8003098:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80030a8:	2302      	movs	r3, #2
 80030aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80030ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80030ba:	4b89      	ldr	r3, [pc, #548]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	2202      	movs	r2, #2
 80030c0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80030c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80030d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030d4:	fab2 f282 	clz	r2, r2
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f042 0220 	orr.w	r2, r2, #32
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f002 021f 	and.w	r2, r2, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HAL_RCC_OscConfig+0x3f6>
 80030f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d002      	beq.n	8003106 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f000 be52 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003112:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	21f8      	movs	r1, #248	; 0xf8
 800311c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003124:	fa91 f1a1 	rbit	r1, r1
 8003128:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800312c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003130:	fab1 f181 	clz	r1, r1
 8003134:	b2c9      	uxtb	r1, r1
 8003136:	408b      	lsls	r3, r1
 8003138:	4969      	ldr	r1, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	e0fe      	b.n	800333e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003144:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8088 	beq.w	8003262 <HAL_RCC_OscConfig+0x552>
 8003152:	2301      	movs	r3, #1
 8003154:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003164:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003172:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	461a      	mov	r2, r3
 800317a:	2301      	movs	r3, #1
 800317c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fd fcf9 	bl	8000b74 <HAL_GetTick>
 8003182:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7fd fcf4 	bl	8000b74 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d902      	bls.n	800319e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	f000 be06 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
 800319e:	2302      	movs	r3, #2
 80031a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80031b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_OscConfig+0x4be>
 80031c8:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	e013      	b.n	80031f6 <HAL_RCC_OscConfig+0x4e6>
 80031ce:	2302      	movs	r3, #2
 80031d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	2202      	movs	r2, #2
 80031f8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80031fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003200:	fa92 f2a2 	rbit	r2, r2
 8003204:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003208:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	f042 0220 	orr.w	r2, r2, #32
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f002 021f 	and.w	r2, r2, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f202 	lsl.w	r2, r1, r2
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0af      	beq.n	8003188 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003234:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	21f8      	movs	r1, #248	; 0xf8
 800323e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003246:	fa91 f1a1 	rbit	r1, r1
 800324a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800324e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003252:	fab1 f181 	clz	r1, r1
 8003256:	b2c9      	uxtb	r1, r1
 8003258:	408b      	lsls	r3, r1
 800325a:	4921      	ldr	r1, [pc, #132]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
 8003260:	e06d      	b.n	800333e <HAL_RCC_OscConfig+0x62e>
 8003262:	2301      	movs	r3, #1
 8003264:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003274:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003282:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	461a      	mov	r2, r3
 800328a:	2300      	movs	r3, #0
 800328c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fd fc71 	bl	8000b74 <HAL_GetTick>
 8003292:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003298:	f7fd fc6c 	bl	8000b74 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d902      	bls.n	80032ae <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	f000 bd7e 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
 80032ae:	2302      	movs	r3, #2
 80032b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80032c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5d4>
 80032d8:	4b01      	ldr	r3, [pc, #4]	; (80032e0 <HAL_RCC_OscConfig+0x5d0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	e016      	b.n	800330c <HAL_RCC_OscConfig+0x5fc>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	2302      	movs	r3, #2
 80032e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032f6:	2302      	movs	r3, #2
 80032f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003308:	4bbf      	ldr	r3, [pc, #764]	; (8003608 <HAL_RCC_OscConfig+0x8f8>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2202      	movs	r2, #2
 800330e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003312:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003316:	fa92 f2a2 	rbit	r2, r2
 800331a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800331e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f042 0220 	orr.w	r2, r2, #32
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f002 021f 	and.w	r2, r2, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1ac      	bne.n	8003298 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003342:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8113 	beq.w	800357a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003358:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d07c      	beq.n	800345e <HAL_RCC_OscConfig+0x74e>
 8003364:	2301      	movs	r3, #1
 8003366:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003376:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	4ba2      	ldr	r3, [pc, #648]	; (800360c <HAL_RCC_OscConfig+0x8fc>)
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	461a      	mov	r2, r3
 800338a:	2301      	movs	r3, #1
 800338c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338e:	f7fd fbf1 	bl	8000b74 <HAL_GetTick>
 8003392:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003398:	f7fd fbec 	bl	8000b74 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d902      	bls.n	80033ae <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	f000 bcfe 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
 80033ae:	2302      	movs	r3, #2
 80033b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b8:	fa93 f2a3 	rbit	r2, r3
 80033bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033ce:	2202      	movs	r2, #2
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003408:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800340c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	4b7e      	ldr	r3, [pc, #504]	; (8003608 <HAL_RCC_OscConfig+0x8f8>)
 8003410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003416:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800341a:	2102      	movs	r1, #2
 800341c:	6019      	str	r1, [r3, #0]
 800341e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003422:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f1a3 	rbit	r1, r3
 800342c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003430:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003434:	6019      	str	r1, [r3, #0]
  return result;
 8003436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d09d      	beq.n	8003398 <HAL_RCC_OscConfig+0x688>
 800345c:	e08d      	b.n	800357a <HAL_RCC_OscConfig+0x86a>
 800345e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003462:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f2a3 	rbit	r2, r3
 8003478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003480:	601a      	str	r2, [r3, #0]
  return result;
 8003482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003486:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800348a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	4b5d      	ldr	r3, [pc, #372]	; (800360c <HAL_RCC_OscConfig+0x8fc>)
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	461a      	mov	r2, r3
 800349c:	2300      	movs	r3, #0
 800349e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fd fb68 	bl	8000b74 <HAL_GetTick>
 80034a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fd fb63 	bl	8000b74 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d902      	bls.n	80034c0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	f000 bc75 	b.w	8003daa <HAL_RCC_OscConfig+0x109a>
 80034c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034c8:	2202      	movs	r2, #2
 80034ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fa93 f2a3 	rbit	r2, r3
 80034da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034ec:	2202      	movs	r2, #2
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003518:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003526:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800352a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCC_OscConfig+0x8f8>)
 800352e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003534:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003538:	2102      	movs	r1, #2
 800353a:	6019      	str	r1, [r3, #0]
 800353c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003540:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fa93 f1a3 	rbit	r1, r3
 800354a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003552:	6019      	str	r1, [r3, #0]
  return result;
 8003554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003558:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d197      	bne.n	80034aa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 81a5 	beq.w	80038da <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <HAL_RCC_OscConfig+0x8f8>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_RCC_OscConfig+0x8f8>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_RCC_OscConfig+0x8f8>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ac:	61d3      	str	r3, [r2, #28]
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_RCC_OscConfig+0x8f8>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_RCC_OscConfig+0x900>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d121      	bne.n	8003620 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_RCC_OscConfig+0x900>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x900>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e8:	f7fd fac4 	bl	8000b74 <HAL_GetTick>
 80035ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	e010      	b.n	8003614 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fd fabf 	bl	8000b74 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d908      	bls.n	8003614 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e3d1      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	10908120 	.word	0x10908120
 8003610:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b8d      	ldr	r3, [pc, #564]	; (800384c <HAL_RCC_OscConfig+0xb3c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0e8      	beq.n	80035f2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x92e>
 8003630:	4b87      	ldr	r3, [pc, #540]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	4a86      	ldr	r2, [pc, #536]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6213      	str	r3, [r2, #32]
 800363c:	e035      	b.n	80036aa <HAL_RCC_OscConfig+0x99a>
 800363e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003642:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x958>
 800364e:	4b80      	ldr	r3, [pc, #512]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a7f      	ldr	r2, [pc, #508]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6213      	str	r3, [r2, #32]
 800365a:	4b7d      	ldr	r3, [pc, #500]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a7c      	ldr	r2, [pc, #496]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	e020      	b.n	80036aa <HAL_RCC_OscConfig+0x99a>
 8003668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d10c      	bne.n	8003692 <HAL_RCC_OscConfig+0x982>
 8003678:	4b75      	ldr	r3, [pc, #468]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a74      	ldr	r2, [pc, #464]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	4b72      	ldr	r3, [pc, #456]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4a71      	ldr	r2, [pc, #452]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6213      	str	r3, [r2, #32]
 8003690:	e00b      	b.n	80036aa <HAL_RCC_OscConfig+0x99a>
 8003692:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a6e      	ldr	r2, [pc, #440]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a6b      	ldr	r2, [pc, #428]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8081 	beq.w	80037be <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fd fa5a 	bl	8000b74 <HAL_GetTick>
 80036c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	e00b      	b.n	80036de <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fd fa55 	bl	8000b74 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e365      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
 80036de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80036e6:	2202      	movs	r2, #2
 80036e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	fa93 f2a3 	rbit	r2, r3
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003706:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800370a:	2202      	movs	r2, #2
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003712:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003720:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003724:	601a      	str	r2, [r3, #0]
  return result;
 8003726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800372e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d102      	bne.n	800374a <HAL_RCC_OscConfig+0xa3a>
 8003744:	4b42      	ldr	r3, [pc, #264]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	e013      	b.n	8003772 <HAL_RCC_OscConfig+0xa62>
 800374a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003752:	2202      	movs	r2, #2
 8003754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003768:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003776:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800377a:	2102      	movs	r1, #2
 800377c:	6011      	str	r1, [r2, #0]
 800377e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003782:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	fa92 f1a2 	rbit	r1, r2
 800378c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003790:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003794:	6011      	str	r1, [r2, #0]
  return result;
 8003796:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800379a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	fab2 f282 	clz	r2, r2
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	f002 021f 	and.w	r2, r2, #31
 80037b0:	2101      	movs	r1, #1
 80037b2:	fa01 f202 	lsl.w	r2, r1, r2
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d084      	beq.n	80036c6 <HAL_RCC_OscConfig+0x9b6>
 80037bc:	e083      	b.n	80038c6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fd f9d9 	bl	8000b74 <HAL_GetTick>
 80037c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	e00b      	b.n	80037e0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fd f9d4 	bl	8000b74 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e2e4      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
 80037e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037e8:	2202      	movs	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fa93 f2a3 	rbit	r2, r3
 80037fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003808:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800380c:	2202      	movs	r2, #2
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003814:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003826:	601a      	str	r2, [r3, #0]
  return result;
 8003828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003830:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d106      	bne.n	8003854 <HAL_RCC_OscConfig+0xb44>
 8003846:	4b02      	ldr	r3, [pc, #8]	; (8003850 <HAL_RCC_OscConfig+0xb40>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	e017      	b.n	800387c <HAL_RCC_OscConfig+0xb6c>
 800384c:	40007000 	.word	0x40007000
 8003850:	40021000 	.word	0x40021000
 8003854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003858:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800385c:	2202      	movs	r2, #2
 800385e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003864:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	fa93 f2a3 	rbit	r2, r3
 800386e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003872:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	4bb3      	ldr	r3, [pc, #716]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003880:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003884:	2102      	movs	r1, #2
 8003886:	6011      	str	r1, [r2, #0]
 8003888:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800388c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	fa92 f1a2 	rbit	r1, r2
 8003896:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800389a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800389e:	6011      	str	r1, [r2, #0]
  return result;
 80038a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038a4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f002 021f 	and.w	r2, r2, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d180      	bne.n	80037c8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038c6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d105      	bne.n	80038da <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ce:	4b9e      	ldr	r3, [pc, #632]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4a9d      	ldr	r2, [pc, #628]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 80038d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 825e 	beq.w	8003da8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ec:	4b96      	ldr	r3, [pc, #600]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	f000 821f 	beq.w	8003d38 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b02      	cmp	r3, #2
 8003908:	f040 8170 	bne.w	8003bec <HAL_RCC_OscConfig+0xedc>
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	fa93 f2a3 	rbit	r2, r3
 8003928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003930:	601a      	str	r2, [r3, #0]
  return result;
 8003932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003936:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800393a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003946:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fd f90f 	bl	8000b74 <HAL_GetTick>
 8003956:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395a:	e009      	b.n	8003970 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fd f90a 	bl	8000b74 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e21c      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
 8003970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003974:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003982:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	fa93 f2a3 	rbit	r2, r3
 800398c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003990:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003994:	601a      	str	r2, [r3, #0]
  return result;
 8003996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800399e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_OscConfig+0xcaa>
 80039b4:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	e027      	b.n	8003a0a <HAL_RCC_OscConfig+0xcfa>
 80039ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039cc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a00:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a16:	6011      	str	r1, [r2, #0]
 8003a18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a1c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	fa92 f1a2 	rbit	r1, r2
 8003a26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a2a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003a2e:	6011      	str	r1, [r2, #0]
  return result;
 8003a30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a34:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f042 0220 	orr.w	r2, r2, #32
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f002 021f 	and.w	r2, r2, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d182      	bne.n	800395c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a56:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	4937      	ldr	r1, [pc, #220]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003a70:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a19      	ldr	r1, [r3, #32]
 8003a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	492d      	ldr	r1, [pc, #180]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aaa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003abc:	601a      	str	r2, [r3, #0]
  return result;
 8003abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ac6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2301      	movs	r3, #1
 8003adc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fd f849 	bl	8000b74 <HAL_GetTick>
 8003ae2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae6:	e009      	b.n	8003afc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd f844 	bl	8000b74 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e156      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
 8003afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	fa93 f2a3 	rbit	r2, r3
 8003b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b20:	601a      	str	r2, [r3, #0]
  return result;
 8003b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b26:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0xe3c>
 8003b40:	4b01      	ldr	r3, [pc, #4]	; (8003b48 <HAL_RCC_OscConfig+0xe38>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	e02a      	b.n	8003b9c <HAL_RCC_OscConfig+0xe8c>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b50:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b5e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b76:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b92:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	4b86      	ldr	r3, [pc, #536]	; (8003db4 <HAL_RCC_OscConfig+0x10a4>)
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ba0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ba4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ba8:	6011      	str	r1, [r2, #0]
 8003baa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	fa92 f1a2 	rbit	r1, r2
 8003bb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bbc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003bc0:	6011      	str	r1, [r2, #0]
  return result;
 8003bc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bc6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f002 021f 	and.w	r2, r2, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f43f af7f 	beq.w	8003ae8 <HAL_RCC_OscConfig+0xdd8>
 8003bea:	e0dd      	b.n	8003da8 <HAL_RCC_OscConfig+0x1098>
 8003bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	fa93 f2a3 	rbit	r2, r3
 8003c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c10:	601a      	str	r2, [r3, #0]
  return result;
 8003c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c1a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2300      	movs	r3, #0
 8003c30:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fc ff9f 	bl	8000b74 <HAL_GetTick>
 8003c36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3a:	e009      	b.n	8003c50 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fc ff9a 	bl	8000b74 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0ac      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
 8003c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c54:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c62:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	fa93 f2a3 	rbit	r2, r3
 8003c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c70:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c74:	601a      	str	r2, [r3, #0]
  return result;
 8003c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_OscConfig+0xf8a>
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_OscConfig+0x10a4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	e027      	b.n	8003cea <HAL_RCC_OscConfig+0xfda>
 8003c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	fa93 f2a3 	rbit	r2, r3
 8003cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f2a3 	rbit	r2, r3
 8003cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCC_OscConfig+0x10a4>)
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cf2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cf6:	6011      	str	r1, [r2, #0]
 8003cf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cfc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	fa92 f1a2 	rbit	r1, r2
 8003d06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d0a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003d0e:	6011      	str	r1, [r2, #0]
  return result;
 8003d10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d14:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	fab2 f282 	clz	r2, r2
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f042 0220 	orr.w	r2, r2, #32
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	f002 021f 	and.w	r2, r2, #31
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d182      	bne.n	8003c3c <HAL_RCC_OscConfig+0xf2c>
 8003d36:	e037      	b.n	8003da8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e02e      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCC_OscConfig+0x10a4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <HAL_RCC_OscConfig+0x10a4>)
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d60:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d117      	bne.n	8003da4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d78:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d10b      	bne.n	8003da4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003d8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d90:	f003 020f 	and.w	r2, r3, #15
 8003d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000

08003db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b09e      	sub	sp, #120	; 0x78
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e162      	b.n	8004096 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b90      	ldr	r3, [pc, #576]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d910      	bls.n	8003e00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b8d      	ldr	r3, [pc, #564]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 0207 	bic.w	r2, r3, #7
 8003de6:	498b      	ldr	r1, [pc, #556]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b89      	ldr	r3, [pc, #548]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e14a      	b.n	8004096 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b82      	ldr	r3, [pc, #520]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	497f      	ldr	r1, [pc, #508]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80dc 	beq.w	8003fe4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d13c      	bne.n	8003eae <HAL_RCC_ClockConfig+0xf6>
 8003e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xa6>
 8003e58:	4b6f      	ldr	r3, [pc, #444]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCC_ClockConfig+0xc6>
 8003e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
 8003e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7a:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e82:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e86:	fa92 f2a2 	rbit	r2, r2
 8003e8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e8e:	fab2 f282 	clz	r2, r2
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	f002 021f 	and.w	r2, r2, #31
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d17b      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0f3      	b.n	8004096 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d13c      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x178>
 8003eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x128>
 8003eda:	4b4f      	ldr	r3, [pc, #316]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	e00f      	b.n	8003f00 <HAL_RCC_ClockConfig+0x148>
 8003ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	647b      	str	r3, [r7, #68]	; 0x44
 8003eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efc:	4b46      	ldr	r3, [pc, #280]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f04:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f08:	fa92 f2a2 	rbit	r2, r2
 8003f0c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f10:	fab2 f282 	clz	r2, r2
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	f042 0220 	orr.w	r2, r2, #32
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	f002 021f 	and.w	r2, r2, #31
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f202 	lsl.w	r2, r1, r2
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d13a      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0b2      	b.n	8004096 <HAL_RCC_ClockConfig+0x2de>
 8003f30:	2302      	movs	r3, #2
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x1a0>
 8003f52:	4b31      	ldr	r3, [pc, #196]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	e00d      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1bc>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
 8003f64:	2302      	movs	r3, #2
 8003f66:	623b      	str	r3, [r7, #32]
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	2202      	movs	r2, #2
 8003f76:	61ba      	str	r2, [r7, #24]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	fa92 f2a2 	rbit	r2, r2
 8003f7e:	617a      	str	r2, [r7, #20]
  return result;
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	fab2 f282 	clz	r2, r2
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f042 0220 	orr.w	r2, r2, #32
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	f002 021f 	and.w	r2, r2, #31
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f202 	lsl.w	r2, r1, r2
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e079      	b.n	8004096 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	491a      	ldr	r1, [pc, #104]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fc fdde 	bl	8000b74 <HAL_GetTick>
 8003fb8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fc fdda 	bl	8000b74 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e061      	b.n	8004096 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_RCC_ClockConfig+0x260>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d214      	bcs.n	800401c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 0207 	bic.w	r2, r3, #7
 8003ffa:	4906      	ldr	r1, [pc, #24]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <HAL_RCC_ClockConfig+0x25c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e040      	b.n	8004096 <HAL_RCC_ClockConfig+0x2de>
 8004014:	40022000 	.word	0x40022000
 8004018:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCC_ClockConfig+0x2e8>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	491a      	ldr	r1, [pc, #104]	; (80040a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4912      	ldr	r1, [pc, #72]	; (80040a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800405a:	f000 f829 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 800405e:	4601      	mov	r1, r0
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCC_ClockConfig+0x2e8>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004068:	22f0      	movs	r2, #240	; 0xf0
 800406a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	fa92 f2a2 	rbit	r2, r2
 8004072:	60fa      	str	r2, [r7, #12]
  return result;
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	fab2 f282 	clz	r2, r2
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	40d3      	lsrs	r3, r2
 800407e:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x2ec>)
 8004080:	5cd3      	ldrb	r3, [r2, r3]
 8004082:	fa21 f303 	lsr.w	r3, r1, r3
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_RCC_ClockConfig+0x2f0>)
 8004088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_RCC_ClockConfig+0x2f4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc fd2c 	bl	8000aec <HAL_InitTick>
  
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3778      	adds	r7, #120	; 0x78
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800ab7c 	.word	0x0800ab7c
 80040a8:	20000008 	.word	0x20000008
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b08b      	sub	sp, #44	; 0x2c
 80040b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	2300      	movs	r3, #0
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d002      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x30>
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x36>
 80040de:	e03f      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040e2:	623b      	str	r3, [r7, #32]
      break;
 80040e4:	e03f      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	fa92 f2a2 	rbit	r2, r2
 80040f8:	607a      	str	r2, [r7, #4]
  return result;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	fab2 f282 	clz	r2, r2
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	40d3      	lsrs	r3, r2
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004106:	5cd3      	ldrb	r3, [r2, r3]
 8004108:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_RCC_GetSysClockFreq+0xc4>)
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	220f      	movs	r2, #15
 8004114:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	fa92 f2a2 	rbit	r2, r2
 800411c:	60fa      	str	r2, [r7, #12]
  return result;
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	fab2 f282 	clz	r2, r2
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	40d3      	lsrs	r3, r2
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <HAL_RCC_GetSysClockFreq+0xd0>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004138:	4a0f      	ldr	r2, [pc, #60]	; (8004178 <HAL_RCC_GetSysClockFreq+0xc8>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
 8004148:	e007      	b.n	800415a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800414a:	4a0b      	ldr	r2, [pc, #44]	; (8004178 <HAL_RCC_GetSysClockFreq+0xc8>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	623b      	str	r3, [r7, #32]
      break;
 800415e:	e002      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004162:	623b      	str	r3, [r7, #32]
      break;
 8004164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004166:	6a3b      	ldr	r3, [r7, #32]
}
 8004168:	4618      	mov	r0, r3
 800416a:	372c      	adds	r7, #44	; 0x2c
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40021000 	.word	0x40021000
 8004178:	007a1200 	.word	0x007a1200
 800417c:	0800ab8c 	.word	0x0800ab8c
 8004180:	0800ab9c 	.word	0x0800ab9c

08004184 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b092      	sub	sp, #72	; 0x48
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80d4 	beq.w	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a8:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10e      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b4:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4a4a      	ldr	r2, [pc, #296]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041be:	61d3      	str	r3, [r2, #28]
 80041c0:	4b48      	ldr	r3, [pc, #288]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	4b45      	ldr	r3, [pc, #276]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d118      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041de:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a41      	ldr	r2, [pc, #260]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ea:	f7fc fcc3 	bl	8000b74 <HAL_GetTick>
 80041ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	e008      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f2:	f7fc fcbf 	bl	8000b74 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	; 0x64
 80041fe:	d901      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e1d6      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004218:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8084 	beq.w	800432a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800422c:	429a      	cmp	r2, r3
 800422e:	d07c      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004230:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800423e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	4b26      	ldr	r3, [pc, #152]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	461a      	mov	r2, r3
 800425a:	2301      	movs	r3, #1
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004286:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d04b      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fc fc6f 	bl	8000b74 <HAL_GetTick>
 8004296:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fc fc6b 	bl	8000b74 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e180      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042b0:	2302      	movs	r3, #2
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
 80042bc:	2302      	movs	r3, #2
 80042be:	623b      	str	r3, [r7, #32]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	61fb      	str	r3, [r7, #28]
  return result;
 80042c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d108      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042de:	4b01      	ldr	r3, [pc, #4]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	e00d      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40007000 	.word	0x40007000
 80042ec:	10908100 	.word	0x10908100
 80042f0:	2302      	movs	r3, #2
 80042f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	4b9a      	ldr	r3, [pc, #616]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2202      	movs	r2, #2
 8004302:	613a      	str	r2, [r7, #16]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	fa92 f2a2 	rbit	r2, r2
 800430a:	60fa      	str	r2, [r7, #12]
  return result;
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	fab2 f282 	clz	r2, r2
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	f002 021f 	and.w	r2, r2, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f202 	lsl.w	r2, r1, r2
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0b7      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800432a:	4b8f      	ldr	r3, [pc, #572]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	498c      	ldr	r1, [pc, #560]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004338:	4313      	orrs	r3, r2
 800433a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800433c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b88      	ldr	r3, [pc, #544]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	4a87      	ldr	r2, [pc, #540]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435c:	4b82      	ldr	r3, [pc, #520]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f023 0203 	bic.w	r2, r3, #3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	497f      	ldr	r1, [pc, #508]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800437a:	4b7b      	ldr	r3, [pc, #492]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4978      	ldr	r1, [pc, #480]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004398:	4b73      	ldr	r3, [pc, #460]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	4970      	ldr	r1, [pc, #448]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b6:	4b6c      	ldr	r3, [pc, #432]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f023 0210 	bic.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4969      	ldr	r1, [pc, #420]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043d4:	4b64      	ldr	r3, [pc, #400]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	4961      	ldr	r1, [pc, #388]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f2:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f023 0220 	bic.w	r2, r3, #32
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	495a      	ldr	r1, [pc, #360]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004400:	4313      	orrs	r3, r2
 8004402:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004410:	4b55      	ldr	r3, [pc, #340]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	4952      	ldr	r1, [pc, #328]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800442e:	4b4e      	ldr	r3, [pc, #312]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	494b      	ldr	r1, [pc, #300]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800443c:	4313      	orrs	r3, r2
 800443e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800444c:	4b46      	ldr	r3, [pc, #280]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	4943      	ldr	r1, [pc, #268]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	493c      	ldr	r1, [pc, #240]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004488:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	4934      	ldr	r1, [pc, #208]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044a6:	4b30      	ldr	r3, [pc, #192]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	492d      	ldr	r1, [pc, #180]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044c4:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	4925      	ldr	r1, [pc, #148]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044e2:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	491e      	ldr	r1, [pc, #120]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800450e:	4313      	orrs	r3, r2
 8004510:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	490f      	ldr	r1, [pc, #60]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	4907      	ldr	r1, [pc, #28]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800455a:	4b03      	ldr	r3, [pc, #12]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	e002      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456e:	4913      	ldr	r1, [pc, #76]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004570:	4313      	orrs	r3, r2
 8004572:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458c:	490b      	ldr	r1, [pc, #44]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800458e:	4313      	orrs	r3, r2
 8004590:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045aa:	4904      	ldr	r1, [pc, #16]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3748      	adds	r7, #72	; 0x48
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000

080045c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e049      	b.n	8004666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fc f942 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f000 fc52 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <HAL_TIM_Base_Stop+0x38>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	f240 4344 	movw	r3, #1092	; 0x444
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_Base_Stop+0x38>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e04f      	b.n	8004774 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a23      	ldr	r2, [pc, #140]	; (8004780 <HAL_TIM_Base_Start_IT+0xc4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01d      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x76>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fe:	d018      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x76>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_TIM_Base_Start_IT+0xc8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x76>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <HAL_TIM_Base_Start_IT+0xcc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x76>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1c      	ldr	r2, [pc, #112]	; (800478c <HAL_TIM_Base_Start_IT+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x76>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_TIM_Base_Start_IT+0xd4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_TIM_Base_Start_IT+0x76>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <HAL_TIM_Base_Start_IT+0xd8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d115      	bne.n	800475e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	4b17      	ldr	r3, [pc, #92]	; (8004798 <HAL_TIM_Base_Start_IT+0xdc>)
 800473a:	4013      	ands	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b06      	cmp	r3, #6
 8004742:	d015      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0xb4>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d011      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475c:	e008      	b.n	8004770 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e000      	b.n	8004772 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40013400 	.word	0x40013400
 8004790:	40014000 	.word	0x40014000
 8004794:	40015000 	.word	0x40015000
 8004798:	00010007 	.word	0x00010007

0800479c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e049      	b.n	8004842 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f841 	bl	800484a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 fb64 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d122      	bne.n	80048ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d11b      	bne.n	80048ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0202 	mvn.w	r2, #2
 800488a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fae2 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 80048a6:	e005      	b.n	80048b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fad4 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fae5 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d122      	bne.n	800490e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d11b      	bne.n	800490e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f06f 0204 	mvn.w	r2, #4
 80048de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fab8 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 80048fa:	e005      	b.n	8004908 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 faaa 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fabb 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b08      	cmp	r3, #8
 800491a:	d122      	bne.n	8004962 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b08      	cmp	r3, #8
 8004928:	d11b      	bne.n	8004962 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f06f 0208 	mvn.w	r2, #8
 8004932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2204      	movs	r2, #4
 8004938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa8e 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 800494e:	e005      	b.n	800495c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa80 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa91 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b10      	cmp	r3, #16
 800496e:	d122      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d11b      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0210 	mvn.w	r2, #16
 8004986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2208      	movs	r2, #8
 800498c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa64 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 80049a2:	e005      	b.n	80049b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa56 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa67 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0201 	mvn.w	r2, #1
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fb fdd3 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d10e      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 ffa7 	bl	800595c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 ff9a 	bl	8005970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa15 	bl	8004e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0220 	mvn.w	r2, #32
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 ff5a 	bl	8005948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0ff      	b.n	8004cba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b14      	cmp	r3, #20
 8004ac6:	f200 80f0 	bhi.w	8004caa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004cab 	.word	0x08004cab
 8004ad8:	08004cab 	.word	0x08004cab
 8004adc:	08004cab 	.word	0x08004cab
 8004ae0:	08004b65 	.word	0x08004b65
 8004ae4:	08004cab 	.word	0x08004cab
 8004ae8:	08004cab 	.word	0x08004cab
 8004aec:	08004cab 	.word	0x08004cab
 8004af0:	08004ba7 	.word	0x08004ba7
 8004af4:	08004cab 	.word	0x08004cab
 8004af8:	08004cab 	.word	0x08004cab
 8004afc:	08004cab 	.word	0x08004cab
 8004b00:	08004be7 	.word	0x08004be7
 8004b04:	08004cab 	.word	0x08004cab
 8004b08:	08004cab 	.word	0x08004cab
 8004b0c:	08004cab 	.word	0x08004cab
 8004b10:	08004c29 	.word	0x08004c29
 8004b14:	08004cab 	.word	0x08004cab
 8004b18:	08004cab 	.word	0x08004cab
 8004b1c:	08004cab 	.word	0x08004cab
 8004b20:	08004c69 	.word	0x08004c69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa5a 	bl	8004fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0204 	bic.w	r2, r2, #4
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	619a      	str	r2, [r3, #24]
      break;
 8004b62:	e0a5      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fad4 	bl	8005118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6999      	ldr	r1, [r3, #24]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	619a      	str	r2, [r3, #24]
      break;
 8004ba4:	e084      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fb47 	bl	8005240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0208 	orr.w	r2, r2, #8
 8004bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0204 	bic.w	r2, r2, #4
 8004bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	61da      	str	r2, [r3, #28]
      break;
 8004be4:	e064      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fbb9 	bl	8005364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69d9      	ldr	r1, [r3, #28]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	021a      	lsls	r2, r3, #8
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	61da      	str	r2, [r3, #28]
      break;
 8004c26:	e043      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fc08 	bl	8005444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0208 	orr.w	r2, r2, #8
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c66:	e023      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fc52 	bl	8005518 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
      break;
 8004cae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop

08004cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e0b6      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x18a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1c:	d03e      	beq.n	8004d9c <HAL_TIM_ConfigClockSource+0xd8>
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d22:	f200 8087 	bhi.w	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2a:	f000 8086 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x176>
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d87f      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d34:	2b70      	cmp	r3, #112	; 0x70
 8004d36:	d01a      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0xaa>
 8004d38:	2b70      	cmp	r3, #112	; 0x70
 8004d3a:	d87b      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d3c:	2b60      	cmp	r3, #96	; 0x60
 8004d3e:	d050      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x11e>
 8004d40:	2b60      	cmp	r3, #96	; 0x60
 8004d42:	d877      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d44:	2b50      	cmp	r3, #80	; 0x50
 8004d46:	d03c      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0xfe>
 8004d48:	2b50      	cmp	r3, #80	; 0x50
 8004d4a:	d873      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d058      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x13e>
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d86f      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d064      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15e>
 8004d58:	2b30      	cmp	r3, #48	; 0x30
 8004d5a:	d86b      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d060      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15e>
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d867      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d05c      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15e>
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d05a      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15e>
 8004d6c:	e062      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d7e:	f000 fcb1 	bl	80056e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	609a      	str	r2, [r3, #8]
      break;
 8004d9a:	e04f      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dac:	f000 fc9a 	bl	80056e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dbe:	609a      	str	r2, [r3, #8]
      break;
 8004dc0:	e03c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 fc0e 	bl	80055f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2150      	movs	r1, #80	; 0x50
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fc67 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004de0:	e02c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 fc2d 	bl	800564e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2160      	movs	r1, #96	; 0x60
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fc57 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004e00:	e01c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 fbee 	bl	80055f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2140      	movs	r1, #64	; 0x40
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fc47 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004e20:	e00c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f000 fc3e 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8004e32:	e003      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      break;
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a42      	ldr	r2, [pc, #264]	; (8004fc4 <TIM_Base_SetConfig+0x11c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d00f      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a3f      	ldr	r2, [pc, #252]	; (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a3e      	ldr	r2, [pc, #248]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3d      	ldr	r2, [pc, #244]	; (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3c      	ldr	r2, [pc, #240]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a31      	ldr	r2, [pc, #196]	; (8004fc4 <TIM_Base_SetConfig+0x11c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01f      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d01b      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2e      	ldr	r2, [pc, #184]	; (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d017      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2d      	ldr	r2, [pc, #180]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00f      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <TIM_Base_SetConfig+0x134>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <TIM_Base_SetConfig+0x138>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_Base_SetConfig+0x9a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d108      	bne.n	8004f54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <TIM_Base_SetConfig+0x11c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <TIM_Base_SetConfig+0x100>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00f      	beq.n	8004fa8 <TIM_Base_SetConfig+0x100>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_Base_SetConfig+0x100>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a12      	ldr	r2, [pc, #72]	; (8004fdc <TIM_Base_SetConfig+0x134>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_Base_SetConfig+0x100>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <TIM_Base_SetConfig+0x138>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0x100>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d103      	bne.n	8004fb0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	615a      	str	r2, [r3, #20]
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40013400 	.word	0x40013400
 8004fd4:	40015000 	.word	0x40015000
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800

08004fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 0302 	bic.w	r3, r3, #2
 8005030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a30      	ldr	r2, [pc, #192]	; (8005100 <TIM_OC1_SetConfig+0x11c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d013      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a2f      	ldr	r2, [pc, #188]	; (8005104 <TIM_OC1_SetConfig+0x120>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a2e      	ldr	r2, [pc, #184]	; (8005108 <TIM_OC1_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00b      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a2d      	ldr	r2, [pc, #180]	; (800510c <TIM_OC1_SetConfig+0x128>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <TIM_OC1_SetConfig+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_OC1_SetConfig+0x88>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2b      	ldr	r2, [pc, #172]	; (8005114 <TIM_OC1_SetConfig+0x130>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d10c      	bne.n	8005086 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0308 	bic.w	r3, r3, #8
 8005072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <TIM_OC1_SetConfig+0x11c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <TIM_OC1_SetConfig+0x120>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00f      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <TIM_OC1_SetConfig+0x124>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00b      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1a      	ldr	r2, [pc, #104]	; (800510c <TIM_OC1_SetConfig+0x128>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a19      	ldr	r2, [pc, #100]	; (8005110 <TIM_OC1_SetConfig+0x12c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC1_SetConfig+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a18      	ldr	r2, [pc, #96]	; (8005114 <TIM_OC1_SetConfig+0x130>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40013400 	.word	0x40013400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	40015000 	.word	0x40015000

08005118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0210 	bic.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0320 	bic.w	r3, r3, #32
 8005166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <TIM_OC2_SetConfig+0x110>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_OC2_SetConfig+0x74>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a2b      	ldr	r2, [pc, #172]	; (800522c <TIM_OC2_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC2_SetConfig+0x74>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <TIM_OC2_SetConfig+0x118>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10d      	bne.n	80051a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <TIM_OC2_SetConfig+0x110>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1e      	ldr	r2, [pc, #120]	; (800522c <TIM_OC2_SetConfig+0x114>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00f      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <TIM_OC2_SetConfig+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00b      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <TIM_OC2_SetConfig+0x120>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a1c      	ldr	r2, [pc, #112]	; (800523c <TIM_OC2_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC2_SetConfig+0xc0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a17      	ldr	r2, [pc, #92]	; (8005230 <TIM_OC2_SetConfig+0x118>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d113      	bne.n	8005200 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051de:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40013400 	.word	0x40013400
 8005230:	40015000 	.word	0x40015000
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800

08005240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2b      	ldr	r2, [pc, #172]	; (800534c <TIM_OC3_SetConfig+0x10c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_OC3_SetConfig+0x72>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2a      	ldr	r2, [pc, #168]	; (8005350 <TIM_OC3_SetConfig+0x110>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC3_SetConfig+0x72>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a29      	ldr	r2, [pc, #164]	; (8005354 <TIM_OC3_SetConfig+0x114>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10d      	bne.n	80052ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052cc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1e      	ldr	r2, [pc, #120]	; (800534c <TIM_OC3_SetConfig+0x10c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <TIM_OC3_SetConfig+0x110>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <TIM_OC3_SetConfig+0x118>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1c      	ldr	r2, [pc, #112]	; (800535c <TIM_OC3_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <TIM_OC3_SetConfig+0x120>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0xbe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <TIM_OC3_SetConfig+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40013400 	.word	0x40013400
 8005354:	40015000 	.word	0x40015000
 8005358:	40014000 	.word	0x40014000
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800

08005364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	031b      	lsls	r3, r3, #12
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <TIM_OC4_SetConfig+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a19      	ldr	r2, [pc, #100]	; (8005430 <TIM_OC4_SetConfig+0xcc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00f      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a18      	ldr	r2, [pc, #96]	; (8005434 <TIM_OC4_SetConfig+0xd0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <TIM_OC4_SetConfig+0xd4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a16      	ldr	r2, [pc, #88]	; (800543c <TIM_OC4_SetConfig+0xd8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC4_SetConfig+0x8c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a15      	ldr	r2, [pc, #84]	; (8005440 <TIM_OC4_SetConfig+0xdc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d109      	bne.n	8005404 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800
 8005440:	40015000 	.word	0x40015000

08005444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <TIM_OC5_SetConfig+0xbc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <TIM_OC5_SetConfig+0xc0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <TIM_OC5_SetConfig+0xc4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <TIM_OC5_SetConfig+0xc8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <TIM_OC5_SetConfig+0xcc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_OC5_SetConfig+0x82>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <TIM_OC5_SetConfig+0xd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d109      	bne.n	80054da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	621a      	str	r2, [r3, #32]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40015000 	.word	0x40015000

08005518 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	051b      	lsls	r3, r3, #20
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <TIM_OC6_SetConfig+0xc0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a19      	ldr	r2, [pc, #100]	; (80055dc <TIM_OC6_SetConfig+0xc4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <TIM_OC6_SetConfig+0xc8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <TIM_OC6_SetConfig+0xcc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <TIM_OC6_SetConfig+0xd0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_OC6_SetConfig+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a15      	ldr	r2, [pc, #84]	; (80055ec <TIM_OC6_SetConfig+0xd4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d109      	bne.n	80055b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	029b      	lsls	r3, r3, #10
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40013400 	.word	0x40013400
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800
 80055ec:	40015000 	.word	0x40015000

080055f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0201 	bic.w	r2, r3, #1
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800561a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f023 030a 	bic.w	r3, r3, #10
 800562c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564e:	b480      	push	{r7}
 8005650:	b087      	sub	sp, #28
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0210 	bic.w	r2, r3, #16
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	031b      	lsls	r3, r3, #12
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800568a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f043 0307 	orr.w	r3, r3, #7
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	431a      	orrs	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	609a      	str	r2, [r3, #8]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005738:	2302      	movs	r3, #2
 800573a:	e06d      	b.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a30      	ldr	r2, [pc, #192]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2d      	ldr	r2, [pc, #180]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005780:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d01d      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d018      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1c      	ldr	r2, [pc, #112]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a15      	ldr	r2, [pc, #84]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a16      	ldr	r2, [pc, #88]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a11      	ldr	r2, [pc, #68]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10c      	bne.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40013400 	.word	0x40013400
 800582c:	40015000 	.word	0x40015000
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800
 8005838:	40014000 	.word	0x40014000

0800583c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005854:	2302      	movs	r3, #2
 8005856:	e06a      	b.n	800592e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	041b      	lsls	r3, r3, #16
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a17      	ldr	r2, [pc, #92]	; (8005940 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a16      	ldr	r2, [pc, #88]	; (8005944 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d115      	bne.n	800591c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	051b      	lsls	r3, r3, #20
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40015000 	.word	0x40015000

08005948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005994:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005998:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059ba:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	43db      	mvns	r3, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	4013      	ands	r3, r2
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059e8:	b084      	sub	sp, #16
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	f107 0014 	add.w	r0, r7, #20
 80059f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	b004      	add	sp, #16
 8005a28:	4770      	bx	lr
	...

08005a2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b09d      	sub	sp, #116	; 0x74
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	78db      	ldrb	r3, [r3, #3]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d81f      	bhi.n	8005a9e <USB_ActivateEndpoint+0x72>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <USB_ActivateEndpoint+0x38>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005aa7 	.word	0x08005aa7
 8005a70:	08005a83 	.word	0x08005a83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a80:	e012      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005a8a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a8e:	e00b      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005a9c:	e004      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005aa4:	e000      	b.n	8005aa8 <USB_ActivateEndpoint+0x7c>
      break;
 8005aa6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	b21b      	sxth	r3, r3
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	b21a      	sxth	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b21b      	sxth	r3, r3
 8005aee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	7b1b      	ldrb	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f040 8178 	bne.w	8005e0e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8084 	beq.w	8005c30 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	4413      	add	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	00da      	lsls	r2, r3, #3
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	88db      	ldrh	r3, [r3, #6]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	827b      	strh	r3, [r7, #18]
 8005b6a:	8a7b      	ldrh	r3, [r7, #18]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <USB_ActivateEndpoint+0x180>
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	823b      	strh	r3, [r7, #16]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	8a3b      	ldrh	r3, [r7, #16]
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d020      	beq.n	8005bf6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bca:	81bb      	strh	r3, [r7, #12]
 8005bcc:	89bb      	ldrh	r3, [r7, #12]
 8005bce:	f083 0320 	eor.w	r3, r3, #32
 8005bd2:	81bb      	strh	r3, [r7, #12]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	89bb      	ldrh	r3, [r7, #12]
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
 8005bf4:	e2d5      	b.n	80061a2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0c:	81fb      	strh	r3, [r7, #14]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e2b8      	b.n	80061a2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	633b      	str	r3, [r7, #48]	; 0x30
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	4413      	add	r3, r2
 8005c42:	633b      	str	r3, [r7, #48]	; 0x30
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	00da      	lsls	r2, r3, #3
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	88db      	ldrh	r3, [r3, #6]
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	4413      	add	r3, r2
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	00da      	lsls	r2, r3, #3
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9e:	d91d      	bls.n	8005cdc <USB_ActivateEndpoint+0x2b0>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <USB_ActivateEndpoint+0x28e>
 8005cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	e026      	b.n	8005d2a <USB_ActivateEndpoint+0x2fe>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <USB_ActivateEndpoint+0x2ce>
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e017      	b.n	8005d2a <USB_ActivateEndpoint+0x2fe>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <USB_ActivateEndpoint+0x2e8>
 8005d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d10:	3301      	adds	r3, #1
 8005d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	029b      	lsls	r3, r3, #10
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01b      	beq.n	8005d7a <USB_ActivateEndpoint+0x34e>
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	843b      	strh	r3, [r7, #32]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	8c3b      	ldrh	r3, [r7, #32]
 8005d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d124      	bne.n	8005dcc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d98:	83bb      	strh	r3, [r7, #28]
 8005d9a:	8bbb      	ldrh	r3, [r7, #28]
 8005d9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005da0:	83bb      	strh	r3, [r7, #28]
 8005da2:	8bbb      	ldrh	r3, [r7, #28]
 8005da4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005da8:	83bb      	strh	r3, [r7, #28]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	8bbb      	ldrh	r3, [r7, #28]
 8005db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	8013      	strh	r3, [r2, #0]
 8005dca:	e1ea      	b.n	80061a2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	83fb      	strh	r3, [r7, #30]
 8005de4:	8bfb      	ldrh	r3, [r7, #30]
 8005de6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dea:	83fb      	strh	r3, [r7, #30]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	8bfb      	ldrh	r3, [r7, #30]
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]
 8005e0c:	e1c9      	b.n	80061a2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	78db      	ldrb	r3, [r3, #3]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d11e      	bne.n	8005e54 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]
 8005e52:	e01d      	b.n	8005e90 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea0:	4413      	add	r3, r2
 8005ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00da      	lsls	r2, r3, #3
 8005eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	891b      	ldrh	r3, [r3, #8]
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed4:	4413      	add	r3, r2
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	00da      	lsls	r2, r3, #3
 8005ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	895b      	ldrh	r3, [r3, #10]
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 8093 	bne.w	8006028 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01b      	beq.n	8005f56 <USB_ActivateEndpoint+0x52a>
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01b      	beq.n	8005fa6 <USB_ActivateEndpoint+0x57a>
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fbe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fc4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fcc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	441a      	add	r2, r3
 8005fd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	441a      	add	r2, r3
 8006010:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006022:	b29b      	uxth	r3, r3
 8006024:	8013      	strh	r3, [r2, #0]
 8006026:	e0bc      	b.n	80061a2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800603c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01d      	beq.n	8006080 <USB_ActivateEndpoint+0x654>
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006090:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01d      	beq.n	80060d8 <USB_ActivateEndpoint+0x6ac>
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	78db      	ldrb	r3, [r3, #3]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d024      	beq.n	800612a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060fe:	f083 0320 	eor.w	r3, r3, #32
 8006102:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006124:	b29b      	uxth	r3, r3
 8006126:	8013      	strh	r3, [r2, #0]
 8006128:	e01d      	b.n	8006166 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006140:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	441a      	add	r2, r3
 800614e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800618e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619e:	b29b      	uxth	r3, r3
 80061a0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80061a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3774      	adds	r7, #116	; 0x74
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop

080061b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b08d      	sub	sp, #52	; 0x34
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	7b1b      	ldrb	r3, [r3, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 808e 	bne.w	80062e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d044      	beq.n	800625a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	81bb      	strh	r3, [r7, #12]
 80061de:	89bb      	ldrh	r3, [r7, #12]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01b      	beq.n	8006220 <USB_DeactivateEndpoint+0x6c>
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	817b      	strh	r3, [r7, #10]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	897b      	ldrh	r3, [r7, #10]
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006218:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006236:	813b      	strh	r3, [r7, #8]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	893b      	ldrh	r3, [r7, #8]
 8006244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]
 8006258:	e192      	b.n	8006580 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	827b      	strh	r3, [r7, #18]
 8006268:	8a7b      	ldrh	r3, [r7, #18]
 800626a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01b      	beq.n	80062aa <USB_DeactivateEndpoint+0xf6>
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006288:	823b      	strh	r3, [r7, #16]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	441a      	add	r2, r3
 8006294:	8a3b      	ldrh	r3, [r7, #16]
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	81fb      	strh	r3, [r7, #14]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	89fb      	ldrh	r3, [r7, #14]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
 80062e2:	e14d      	b.n	8006580 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 80a5 	bne.w	8006438 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	843b      	strh	r3, [r7, #32]
 80062fc:	8c3b      	ldrh	r3, [r7, #32]
 80062fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01b      	beq.n	800633e <USB_DeactivateEndpoint+0x18a>
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631c:	83fb      	strh	r3, [r7, #30]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	8bfb      	ldrh	r3, [r7, #30]
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	83bb      	strh	r3, [r7, #28]
 800634c:	8bbb      	ldrh	r3, [r7, #28]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01b      	beq.n	800638e <USB_DeactivateEndpoint+0x1da>
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	837b      	strh	r3, [r7, #26]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	441a      	add	r2, r3
 8006378:	8b7b      	ldrh	r3, [r7, #26]
 800637a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800638a:	b29b      	uxth	r3, r3
 800638c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	833b      	strh	r3, [r7, #24]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	441a      	add	r2, r3
 80063b0:	8b3b      	ldrh	r3, [r7, #24]
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	82fb      	strh	r3, [r7, #22]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	8afb      	ldrh	r3, [r7, #22]
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006414:	82bb      	strh	r3, [r7, #20]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	8abb      	ldrh	r3, [r7, #20]
 8006422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006432:	b29b      	uxth	r3, r3
 8006434:	8013      	strh	r3, [r2, #0]
 8006436:	e0a3      	b.n	8006580 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01b      	beq.n	8006488 <USB_DeactivateEndpoint+0x2d4>
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006496:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01b      	beq.n	80064d8 <USB_DeactivateEndpoint+0x324>
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	853b      	strh	r3, [r7, #40]	; 0x28
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	441a      	add	r2, r3
 80064c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006526:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	441a      	add	r2, r3
 8006532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800656c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657c:	b29b      	uxth	r3, r3
 800657e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3734      	adds	r7, #52	; 0x34
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b0c2      	sub	sp, #264	; 0x108
 8006592:	af00      	add	r7, sp, #0
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659c:	6018      	str	r0, [r3, #0]
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f040 86b7 	bne.w	8007328 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d908      	bls.n	80065e8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065e6:	e007      	b.n	80065f8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80065e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	7b1b      	ldrb	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d13a      	bne.n	800667e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6959      	ldr	r1, [r3, #20]
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	88da      	ldrh	r2, [r3, #6]
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	b29b      	uxth	r3, r3
 8006626:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800662a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800662e:	6800      	ldr	r0, [r0, #0]
 8006630:	f001 fc8c 	bl	8007f4c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4413      	add	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	00da      	lsls	r2, r3, #3
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4413      	add	r3, r2
 800666a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	f000 be1f 	b.w	80072bc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800667e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	78db      	ldrb	r3, [r3, #3]
 800668a:	2b02      	cmp	r3, #2
 800668c:	f040 8462 	bne.w	8006f54 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	f240 83df 	bls.w	8006e6c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	1ad2      	subs	r2, r2, r3
 800671c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 81c7 	beq.w	8006ade <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	633b      	str	r3, [r7, #48]	; 0x30
 800675c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d177      	bne.n	800685c <USB_EPStartXfer+0x2ce>
 800676c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006770:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
 8006778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	4413      	add	r3, r2
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	00da      	lsls	r2, r3, #3
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	4413      	add	r3, r2
 80067a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	2b3e      	cmp	r3, #62	; 0x3e
 80067be:	d921      	bls.n	8006804 <USB_EPStartXfer+0x276>
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0x252>
 80067d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4313      	orrs	r3, r2
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	e050      	b.n	80068a6 <USB_EPStartXfer+0x318>
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <USB_EPStartXfer+0x294>
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681a:	b29a      	uxth	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e041      	b.n	80068a6 <USB_EPStartXfer+0x318>
 8006822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <USB_EPStartXfer+0x2b4>
 8006838:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800683c:	3301      	adds	r3, #1
 800683e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800684c:	b29b      	uxth	r3, r3
 800684e:	029b      	lsls	r3, r3, #10
 8006850:	b29b      	uxth	r3, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	b29a      	uxth	r2, r3
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	e024      	b.n	80068a6 <USB_EPStartXfer+0x318>
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d11c      	bne.n	80068a6 <USB_EPStartXfer+0x318>
 800686c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687a:	b29b      	uxth	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	4413      	add	r3, r2
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
 8006884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	00da      	lsls	r2, r3, #3
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	4413      	add	r3, r2
 8006896:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	895b      	ldrh	r3, [r3, #10]
 80068b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6959      	ldr	r1, [r3, #20]
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068d4:	6800      	ldr	r0, [r0, #0]
 80068d6:	f001 fb39 	bl	8007f4c <USB_WritePMA>
            ep->xfer_buff += len;
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ea:	441a      	add	r2, r3
 80068ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	429a      	cmp	r2, r3
 8006912:	d90f      	bls.n	8006934 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006924:	1ad2      	subs	r2, r2, r3
 8006926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	621a      	str	r2, [r3, #32]
 8006932:	e00e      	b.n	8006952 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d177      	bne.n	8006a52 <USB_EPStartXfer+0x4c4>
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800697c:	b29b      	uxth	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	4413      	add	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00da      	lsls	r2, r3, #3
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	4413      	add	r3, r2
 8006998:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b2:	2b3e      	cmp	r3, #62	; 0x3e
 80069b4:	d921      	bls.n	80069fa <USB_EPStartXfer+0x46c>
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c4:	f003 031f 	and.w	r3, r3, #31
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <USB_EPStartXfer+0x448>
 80069cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d0:	3b01      	subs	r3, #1
 80069d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4313      	orrs	r3, r2
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	e056      	b.n	8006aa8 <USB_EPStartXfer+0x51a>
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <USB_EPStartXfer+0x48a>
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	e047      	b.n	8006aa8 <USB_EPStartXfer+0x51a>
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <USB_EPStartXfer+0x4aa>
 8006a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a32:	3301      	adds	r3, #1
 8006a34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	029b      	lsls	r3, r3, #10
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	e02a      	b.n	8006aa8 <USB_EPStartXfer+0x51a>
 8006a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d122      	bne.n	8006aa8 <USB_EPStartXfer+0x51a>
 8006a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	623b      	str	r3, [r7, #32]
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	4413      	add	r3, r2
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	00da      	lsls	r2, r3, #3
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	4413      	add	r3, r2
 8006a98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	891b      	ldrh	r3, [r3, #8]
 8006ab4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6959      	ldr	r1, [r3, #20]
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ace:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ad2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	f001 fa38 	bl	8007f4c <USB_WritePMA>
 8006adc:	e3ee      	b.n	80072bc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d177      	bne.n	8006bde <USB_EPStartXfer+0x650>
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0e:	4413      	add	r3, r2
 8006b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00da      	lsls	r2, r3, #3
 8006b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b22:	4413      	add	r3, r2
 8006b24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b28:	647b      	str	r3, [r7, #68]	; 0x44
 8006b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b40:	d921      	bls.n	8006b86 <USB_EPStartXfer+0x5f8>
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b50:	f003 031f 	and.w	r3, r3, #31
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <USB_EPStartXfer+0x5d4>
 8006b58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	029b      	lsls	r3, r3, #10
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4313      	orrs	r3, r2
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	e056      	b.n	8006c34 <USB_EPStartXfer+0x6a6>
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <USB_EPStartXfer+0x616>
 8006b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e047      	b.n	8006c34 <USB_EPStartXfer+0x6a6>
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <USB_EPStartXfer+0x636>
 8006bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e02a      	b.n	8006c34 <USB_EPStartXfer+0x6a6>
 8006bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d122      	bne.n	8006c34 <USB_EPStartXfer+0x6a6>
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	653b      	str	r3, [r7, #80]	; 0x50
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c0e:	4413      	add	r3, r2
 8006c10:	653b      	str	r3, [r7, #80]	; 0x50
 8006c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	00da      	lsls	r2, r3, #3
 8006c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c22:	4413      	add	r3, r2
 8006c24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	891b      	ldrh	r3, [r3, #8]
 8006c40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6959      	ldr	r1, [r3, #20]
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c62:	6800      	ldr	r0, [r0, #0]
 8006c64:	f001 f972 	bl	8007f4c <USB_WritePMA>
            ep->xfer_buff += len;
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	441a      	add	r2, r3
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d90f      	bls.n	8006cc2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6a1a      	ldr	r2, [r3, #32]
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	1ad2      	subs	r2, r2, r3
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	621a      	str	r2, [r3, #32]
 8006cc0:	e00e      	b.n	8006ce0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	643b      	str	r3, [r7, #64]	; 0x40
 8006cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d177      	bne.n	8006dec <USB_EPStartXfer+0x85e>
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	4413      	add	r3, r2
 8006d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	00da      	lsls	r2, r3, #3
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	4413      	add	r3, r2
 8006d32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	801a      	strh	r2, [r3, #0]
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4e:	d921      	bls.n	8006d94 <USB_EPStartXfer+0x806>
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <USB_EPStartXfer+0x7e2>
 8006d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	029b      	lsls	r3, r3, #10
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	e050      	b.n	8006e36 <USB_EPStartXfer+0x8a8>
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <USB_EPStartXfer+0x824>
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e041      	b.n	8006e36 <USB_EPStartXfer+0x8a8>
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <USB_EPStartXfer+0x844>
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4313      	orrs	r3, r2
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	e024      	b.n	8006e36 <USB_EPStartXfer+0x8a8>
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d11c      	bne.n	8006e36 <USB_EPStartXfer+0x8a8>
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	4413      	add	r3, r2
 8006e12:	643b      	str	r3, [r7, #64]	; 0x40
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	00da      	lsls	r2, r3, #3
 8006e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e24:	4413      	add	r3, r2
 8006e26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	895b      	ldrh	r3, [r3, #10]
 8006e42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6959      	ldr	r1, [r3, #20]
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e64:	6800      	ldr	r0, [r0, #0]
 8006e66:	f001 f871 	bl	8007f4c <USB_WritePMA>
 8006e6a:	e227      	b.n	80072bc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef8:	4413      	add	r3, r2
 8006efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	00da      	lsls	r2, r3, #3
 8006f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	891b      	ldrh	r3, [r3, #8]
 8006f2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6959      	ldr	r1, [r3, #20]
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f4c:	6800      	ldr	r0, [r0, #0]
 8006f4e:	f000 fffd 	bl	8007f4c <USB_WritePMA>
 8006f52:	e1b3      	b.n	80072bc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80c6 	beq.w	8007126 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	673b      	str	r3, [r7, #112]	; 0x70
 8006fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	785b      	ldrb	r3, [r3, #1]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d177      	bne.n	80070a6 <USB_EPStartXfer+0xb18>
 8006fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fd6:	4413      	add	r3, r2
 8006fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	00da      	lsls	r2, r3, #3
 8006fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fea:	4413      	add	r3, r2
 8006fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	2b3e      	cmp	r3, #62	; 0x3e
 8007008:	d921      	bls.n	800704e <USB_EPStartXfer+0xac0>
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <USB_EPStartXfer+0xa9c>
 8007020:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007024:	3b01      	subs	r3, #1
 8007026:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800702a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	b29a      	uxth	r2, r3
 8007030:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007034:	b29b      	uxth	r3, r3
 8007036:	029b      	lsls	r3, r3, #10
 8007038:	b29b      	uxth	r3, r3
 800703a:	4313      	orrs	r3, r2
 800703c:	b29b      	uxth	r3, r3
 800703e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007046:	b29a      	uxth	r2, r3
 8007048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	e050      	b.n	80070f0 <USB_EPStartXfer+0xb62>
 800704e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <USB_EPStartXfer+0xade>
 8007056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007064:	b29a      	uxth	r2, r3
 8007066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007068:	801a      	strh	r2, [r3, #0]
 800706a:	e041      	b.n	80070f0 <USB_EPStartXfer+0xb62>
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <USB_EPStartXfer+0xafe>
 8007082:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007086:	3301      	adds	r3, #1
 8007088:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800708c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29a      	uxth	r2, r3
 8007092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007096:	b29b      	uxth	r3, r3
 8007098:	029b      	lsls	r3, r3, #10
 800709a:	b29b      	uxth	r3, r3
 800709c:	4313      	orrs	r3, r2
 800709e:	b29a      	uxth	r2, r3
 80070a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	e024      	b.n	80070f0 <USB_EPStartXfer+0xb62>
 80070a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d11c      	bne.n	80070f0 <USB_EPStartXfer+0xb62>
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070ca:	4413      	add	r3, r2
 80070cc:	673b      	str	r3, [r7, #112]	; 0x70
 80070ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	00da      	lsls	r2, r3, #3
 80070dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070de:	4413      	add	r3, r2
 80070e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	895b      	ldrh	r3, [r3, #10]
 80070fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6959      	ldr	r1, [r3, #20]
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007110:	b29b      	uxth	r3, r3
 8007112:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007116:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800711a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800711e:	6800      	ldr	r0, [r0, #0]
 8007120:	f000 ff14 	bl	8007f4c <USB_WritePMA>
 8007124:	e0ca      	b.n	80072bc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d177      	bne.n	8007226 <USB_EPStartXfer+0xc98>
 8007136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007150:	b29b      	uxth	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007156:	4413      	add	r3, r2
 8007158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	00da      	lsls	r2, r3, #3
 8007168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800716a:	4413      	add	r3, r2
 800716c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007170:	67bb      	str	r3, [r7, #120]	; 0x78
 8007172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800717c:	b29a      	uxth	r2, r3
 800717e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007186:	2b3e      	cmp	r3, #62	; 0x3e
 8007188:	d921      	bls.n	80071ce <USB_EPStartXfer+0xc40>
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <USB_EPStartXfer+0xc1c>
 80071a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071a4:	3b01      	subs	r3, #1
 80071a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	029b      	lsls	r3, r3, #10
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4313      	orrs	r3, r2
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	e05c      	b.n	8007288 <USB_EPStartXfer+0xcfa>
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <USB_EPStartXfer+0xc5e>
 80071d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e04d      	b.n	8007288 <USB_EPStartXfer+0xcfa>
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <USB_EPStartXfer+0xc7e>
 8007202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007206:	3301      	adds	r3, #1
 8007208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800720c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29a      	uxth	r2, r3
 8007212:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007216:	b29b      	uxth	r3, r3
 8007218:	029b      	lsls	r3, r3, #10
 800721a:	b29b      	uxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e030      	b.n	8007288 <USB_EPStartXfer+0xcfa>
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d128      	bne.n	8007288 <USB_EPStartXfer+0xcfa>
 8007236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007252:	b29b      	uxth	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800725a:	4413      	add	r3, r2
 800725c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	00da      	lsls	r2, r3, #3
 800726e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007272:	4413      	add	r3, r2
 8007274:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007280:	b29a      	uxth	r2, r3
 8007282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007286:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	891b      	ldrh	r3, [r3, #8]
 8007294:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6959      	ldr	r1, [r3, #20]
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072b6:	6800      	ldr	r0, [r0, #0]
 80072b8:	f000 fe48 	bl	8007f4c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e2:	817b      	strh	r3, [r7, #10]
 80072e4:	897b      	ldrh	r3, [r7, #10]
 80072e6:	f083 0310 	eor.w	r3, r3, #16
 80072ea:	817b      	strh	r3, [r7, #10]
 80072ec:	897b      	ldrh	r3, [r7, #10]
 80072ee:	f083 0320 	eor.w	r3, r3, #32
 80072f2:	817b      	strh	r3, [r7, #10]
 80072f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	441a      	add	r2, r3
 800730e:	897b      	ldrh	r3, [r7, #10]
 8007310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007320:	b29b      	uxth	r3, r3
 8007322:	8013      	strh	r3, [r2, #0]
 8007324:	f000 bcde 	b.w	8007ce4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	7b1b      	ldrb	r3, [r3, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 80bb 	bne.w	80074b0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800733a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	429a      	cmp	r2, r3
 8007354:	d917      	bls.n	8007386 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007376:	1ad2      	subs	r2, r2, r3
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	619a      	str	r2, [r3, #24]
 8007384:	e00e      	b.n	80073a4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2200      	movs	r2, #0
 80073a2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073c8:	4413      	add	r3, r2
 80073ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	00da      	lsls	r2, r3, #3
 80073dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073e0:	4413      	add	r3, r2
 80073e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80073ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007402:	2b3e      	cmp	r3, #62	; 0x3e
 8007404:	d924      	bls.n	8007450 <USB_EPStartXfer+0xec2>
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <USB_EPStartXfer+0xe98>
 800741c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007420:	3b01      	subs	r3, #1
 8007422:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29a      	uxth	r2, r3
 800742e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007432:	b29b      	uxth	r3, r3
 8007434:	029b      	lsls	r3, r3, #10
 8007436:	b29b      	uxth	r3, r3
 8007438:	4313      	orrs	r3, r2
 800743a:	b29b      	uxth	r3, r3
 800743c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007444:	b29a      	uxth	r2, r3
 8007446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	f000 bc10 	b.w	8007c70 <USB_EPStartXfer+0x16e2>
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10c      	bne.n	8007472 <USB_EPStartXfer+0xee4>
 8007458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29a      	uxth	r2, r3
 800746a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	e3fe      	b.n	8007c70 <USB_EPStartXfer+0x16e2>
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <USB_EPStartXfer+0xf04>
 8007488:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800748c:	3301      	adds	r3, #1
 800748e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29a      	uxth	r2, r3
 800749a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800749e:	b29b      	uxth	r3, r3
 80074a0:	029b      	lsls	r3, r3, #10
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4313      	orrs	r3, r2
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	e3df      	b.n	8007c70 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	78db      	ldrb	r3, [r3, #3]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	f040 8218 	bne.w	80078f2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f040 809d 	bne.w	800760e <USB_EPStartXfer+0x1080>
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074f8:	4413      	add	r3, r2
 80074fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	00da      	lsls	r2, r3, #3
 800750c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007510:	4413      	add	r3, r2
 8007512:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800751a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b3e      	cmp	r3, #62	; 0x3e
 800753c:	d92b      	bls.n	8007596 <USB_EPStartXfer+0x1008>
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <USB_EPStartXfer+0xfe0>
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	3b01      	subs	r3, #1
 800756a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800756e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	b29b      	uxth	r3, r3
 800757c:	029b      	lsls	r3, r3, #10
 800757e:	b29b      	uxth	r3, r3
 8007580:	4313      	orrs	r3, r2
 8007582:	b29b      	uxth	r3, r3
 8007584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758c:	b29a      	uxth	r2, r3
 800758e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e070      	b.n	8007678 <USB_EPStartXfer+0x10ea>
 8007596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10c      	bne.n	80075c0 <USB_EPStartXfer+0x1032>
 80075a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e05b      	b.n	8007678 <USB_EPStartXfer+0x10ea>
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d004      	beq.n	80075f0 <USB_EPStartXfer+0x1062>
 80075e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ea:	3301      	adds	r3, #1
 80075ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	029b      	lsls	r3, r3, #10
 8007600:	b29b      	uxth	r3, r3
 8007602:	4313      	orrs	r3, r2
 8007604:	b29a      	uxth	r2, r3
 8007606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	e034      	b.n	8007678 <USB_EPStartXfer+0x10ea>
 800760e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d12c      	bne.n	8007678 <USB_EPStartXfer+0x10ea>
 800761e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800762c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763a:	b29b      	uxth	r3, r3
 800763c:	461a      	mov	r2, r3
 800763e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007642:	4413      	add	r3, r2
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	00da      	lsls	r2, r3, #3
 8007656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800765a:	4413      	add	r3, r2
 800765c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	b29a      	uxth	r2, r3
 8007672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f040 809d 	bne.w	80077d2 <USB_EPStartXfer+0x1244>
 8007698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076bc:	4413      	add	r3, r2
 80076be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	00da      	lsls	r2, r3, #3
 80076d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076d4:	4413      	add	r3, r2
 80076d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007700:	d92b      	bls.n	800775a <USB_EPStartXfer+0x11cc>
 8007702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <USB_EPStartXfer+0x11a4>
 8007728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800772c:	3b01      	subs	r3, #1
 800772e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007732:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29a      	uxth	r2, r3
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	b29b      	uxth	r3, r3
 8007740:	029b      	lsls	r3, r3, #10
 8007742:	b29b      	uxth	r3, r3
 8007744:	4313      	orrs	r3, r2
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	e069      	b.n	800782e <USB_EPStartXfer+0x12a0>
 800775a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10c      	bne.n	8007784 <USB_EPStartXfer+0x11f6>
 800776a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777a:	b29a      	uxth	r2, r3
 800777c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	e054      	b.n	800782e <USB_EPStartXfer+0x12a0>
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	085b      	lsrs	r3, r3, #1
 8007792:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d004      	beq.n	80077b4 <USB_EPStartXfer+0x1226>
 80077aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ae:	3301      	adds	r3, #1
 80077b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	029b      	lsls	r3, r3, #10
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	4313      	orrs	r3, r2
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	e02d      	b.n	800782e <USB_EPStartXfer+0x12a0>
 80077d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d125      	bne.n	800782e <USB_EPStartXfer+0x12a0>
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077f8:	4413      	add	r3, r2
 80077fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80077fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	00da      	lsls	r2, r3, #3
 800780c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007810:	4413      	add	r3, r2
 8007812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	b29a      	uxth	r2, r3
 8007828:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800782c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8218 	beq.w	8007c70 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007860:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <USB_EPStartXfer+0x12ea>
 800786c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10d      	bne.n	8007894 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007878:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800787c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 81f5 	bne.w	8007c70 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007886:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800788a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 81ee 	bne.w	8007c70 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ba:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80078be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80078dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	8013      	strh	r3, [r2, #0]
 80078f0:	e1be      	b.n	8007c70 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80078f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	78db      	ldrb	r3, [r3, #3]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	f040 81b4 	bne.w	8007c6c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	429a      	cmp	r2, r3
 800791e:	d917      	bls.n	8007950 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007940:	1ad2      	subs	r2, r2, r3
 8007942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	619a      	str	r2, [r3, #24]
 800794e:	e00e      	b.n	800796e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800796e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f040 8085 	bne.w	8007a8a <USB_EPStartXfer+0x14fc>
 8007980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800798e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799c:	b29b      	uxth	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079a4:	4413      	add	r3, r2
 80079a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	00da      	lsls	r2, r3, #3
 80079b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079bc:	4413      	add	r3, r2
 80079be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	2b3e      	cmp	r3, #62	; 0x3e
 80079e0:	d923      	bls.n	8007a2a <USB_EPStartXfer+0x149c>
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <USB_EPStartXfer+0x1474>
 80079f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079fc:	3b01      	subs	r3, #1
 80079fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	e060      	b.n	8007aec <USB_EPStartXfer+0x155e>
 8007a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10c      	bne.n	8007a4c <USB_EPStartXfer+0x14be>
 8007a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	e04f      	b.n	8007aec <USB_EPStartXfer+0x155e>
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <USB_EPStartXfer+0x14de>
 8007a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	029b      	lsls	r3, r3, #10
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	e030      	b.n	8007aec <USB_EPStartXfer+0x155e>
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d128      	bne.n	8007aec <USB_EPStartXfer+0x155e>
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007abe:	4413      	add	r3, r2
 8007ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	00da      	lsls	r2, r3, #3
 8007ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007aea:	801a      	strh	r2, [r3, #0]
 8007aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 8085 	bne.w	8007c16 <USB_EPStartXfer+0x1688>
 8007b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b30:	4413      	add	r3, r2
 8007b32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	00da      	lsls	r2, r3, #3
 8007b44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b48:	4413      	add	r3, r2
 8007b4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b6c:	d923      	bls.n	8007bb6 <USB_EPStartXfer+0x1628>
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <USB_EPStartXfer+0x1600>
 8007b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	029b      	lsls	r3, r3, #10
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e05c      	b.n	8007c70 <USB_EPStartXfer+0x16e2>
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10c      	bne.n	8007bd8 <USB_EPStartXfer+0x164a>
 8007bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	e04b      	b.n	8007c70 <USB_EPStartXfer+0x16e2>
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <USB_EPStartXfer+0x166a>
 8007bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	029b      	lsls	r3, r3, #10
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e02c      	b.n	8007c70 <USB_EPStartXfer+0x16e2>
 8007c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d124      	bne.n	8007c70 <USB_EPStartXfer+0x16e2>
 8007c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	00da      	lsls	r2, r3, #3
 8007c50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c54:	4413      	add	r3, r2
 8007c56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	e001      	b.n	8007c70 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e03a      	b.n	8007ce6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c96:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007c9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ca2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ca6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007caa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	441a      	add	r2, r3
 8007ccc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d020      	beq.n	8007d44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d18:	81bb      	strh	r3, [r7, #12]
 8007d1a:	89bb      	ldrh	r3, [r7, #12]
 8007d1c:	f083 0310 	eor.w	r3, r3, #16
 8007d20:	81bb      	strh	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	441a      	add	r2, r3
 8007d2c:	89bb      	ldrh	r3, [r7, #12]
 8007d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	8013      	strh	r3, [r2, #0]
 8007d42:	e01f      	b.n	8007d84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5a:	81fb      	strh	r3, [r7, #14]
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d62:	81fb      	strh	r3, [r7, #14]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	7b1b      	ldrb	r3, [r3, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f040 809d 	bne.w	8007ee0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d04c      	beq.n	8007e48 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	823b      	strh	r3, [r7, #16]
 8007dbc:	8a3b      	ldrh	r3, [r7, #16]
 8007dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01b      	beq.n	8007dfe <USB_EPClearStall+0x6c>
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ddc:	81fb      	strh	r3, [r7, #14]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	441a      	add	r2, r3
 8007de8:	89fb      	ldrh	r3, [r7, #14]
 8007dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	78db      	ldrb	r3, [r3, #3]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d06c      	beq.n	8007ee0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e1c:	81bb      	strh	r3, [r7, #12]
 8007e1e:	89bb      	ldrh	r3, [r7, #12]
 8007e20:	f083 0320 	eor.w	r3, r3, #32
 8007e24:	81bb      	strh	r3, [r7, #12]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	441a      	add	r2, r3
 8007e30:	89bb      	ldrh	r3, [r7, #12]
 8007e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	8013      	strh	r3, [r2, #0]
 8007e46:	e04b      	b.n	8007ee0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	82fb      	strh	r3, [r7, #22]
 8007e56:	8afb      	ldrh	r3, [r7, #22]
 8007e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01b      	beq.n	8007e98 <USB_EPClearStall+0x106>
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	82bb      	strh	r3, [r7, #20]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	8abb      	ldrh	r3, [r7, #20]
 8007e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eae:	827b      	strh	r3, [r7, #18]
 8007eb0:	8a7b      	ldrh	r3, [r7, #18]
 8007eb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007eb6:	827b      	strh	r3, [r7, #18]
 8007eb8:	8a7b      	ldrh	r3, [r7, #18]
 8007eba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ebe:	827b      	strh	r3, [r7, #18]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	441a      	add	r2, r3
 8007eca:	8a7b      	ldrh	r3, [r7, #18]
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2280      	movs	r2, #128	; 0x80
 8007f04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b08b      	sub	sp, #44	; 0x2c
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4611      	mov	r1, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	80fb      	strh	r3, [r7, #6]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f62:	88bb      	ldrh	r3, [r7, #4]
 8007f64:	3301      	adds	r3, #1
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
 8007f82:	e01b      	b.n	8007fbc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	b21a      	sxth	r2, r3
 8007f94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	b21b      	sxth	r3, r3
 8007f9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	8a7a      	ldrh	r2, [r7, #18]
 8007fa2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3301      	adds	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e0      	bne.n	8007f84 <USB_WritePMA+0x38>
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	372c      	adds	r7, #44	; 0x2c
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b08b      	sub	sp, #44	; 0x2c
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	460b      	mov	r3, r1
 8007fe0:	80fb      	strh	r3, [r7, #6]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007fe6:	88bb      	ldrh	r3, [r7, #4]
 8007fe8:	085b      	lsrs	r3, r3, #1
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ff6:	88fa      	ldrh	r2, [r7, #6]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008000:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
 8008006:	e018      	b.n	800803a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	3302      	adds	r3, #2
 8008014:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3301      	adds	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	0a1b      	lsrs	r3, r3, #8
 8008028:	b2da      	uxtb	r2, r3
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	3301      	adds	r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	3b01      	subs	r3, #1
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e3      	bne.n	8008008 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008040:	88bb      	ldrh	r3, [r7, #4]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	b29b      	uxth	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	701a      	strb	r2, [r3, #0]
  }
}
 800805c:	bf00      	nop
 800805e:	372c      	adds	r7, #44	; 0x2c
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7c1b      	ldrb	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d115      	bne.n	80080ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008084:	2202      	movs	r2, #2
 8008086:	2181      	movs	r1, #129	; 0x81
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fe96 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008098:	2202      	movs	r2, #2
 800809a:	2101      	movs	r1, #1
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 fe8c 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80080aa:	e012      	b.n	80080d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080ac:	2340      	movs	r3, #64	; 0x40
 80080ae:	2202      	movs	r2, #2
 80080b0:	2181      	movs	r1, #129	; 0x81
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fe81 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080be:	2340      	movs	r3, #64	; 0x40
 80080c0:	2202      	movs	r2, #2
 80080c2:	2101      	movs	r1, #1
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 fe78 	bl	8009dba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080d2:	2308      	movs	r3, #8
 80080d4:	2203      	movs	r2, #3
 80080d6:	2182      	movs	r1, #130	; 0x82
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fe6e 	bl	8009dba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80080e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80080e8:	f001 ff90 	bl	800a00c <USBD_static_malloc>
 80080ec:	4602      	mov	r2, r0
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80080fe:	2301      	movs	r3, #1
 8008100:	73fb      	strb	r3, [r7, #15]
 8008102:	e026      	b.n	8008152 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2200      	movs	r2, #0
 800811a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7c1b      	ldrb	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008138:	2101      	movs	r1, #1
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 ff2f 	bl	8009f9e <USBD_LL_PrepareReceive>
 8008140:	e007      	b.n	8008152 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008148:	2340      	movs	r3, #64	; 0x40
 800814a:	2101      	movs	r1, #1
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 ff26 	bl	8009f9e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800816c:	2181      	movs	r1, #129	; 0x81
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fe49 	bl	8009e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800817a:	2101      	movs	r1, #1
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 fe42 	bl	8009e06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800818a:	2182      	movs	r1, #130	; 0x82
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fe3a 	bl	8009e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00e      	beq.n	80081c0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 ff38 	bl	800a028 <USBD_static_free>
    pdev->pClassData = NULL;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d039      	beq.n	8008268 <USBD_CDC_Setup+0x9e>
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d17f      	bne.n	80082f8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	88db      	ldrh	r3, [r3, #6]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d029      	beq.n	8008254 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	b25b      	sxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	da11      	bge.n	800822e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008216:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	88d2      	ldrh	r2, [r2, #6]
 800821c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800821e:	6939      	ldr	r1, [r7, #16]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	88db      	ldrh	r3, [r3, #6]
 8008224:	461a      	mov	r2, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fa13 	bl	8009652 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800822c:	e06b      	b.n	8008306 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	785a      	ldrb	r2, [r3, #1]
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	88db      	ldrh	r3, [r3, #6]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008244:	6939      	ldr	r1, [r7, #16]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	88db      	ldrh	r3, [r3, #6]
 800824a:	461a      	mov	r2, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fa2e 	bl	80096ae <USBD_CtlPrepareRx>
      break;
 8008252:	e058      	b.n	8008306 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	7850      	ldrb	r0, [r2, #1]
 8008260:	2200      	movs	r2, #0
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	4798      	blx	r3
      break;
 8008266:	e04e      	b.n	8008306 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b0b      	cmp	r3, #11
 800826e:	d02e      	beq.n	80082ce <USBD_CDC_Setup+0x104>
 8008270:	2b0b      	cmp	r3, #11
 8008272:	dc38      	bgt.n	80082e6 <USBD_CDC_Setup+0x11c>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <USBD_CDC_Setup+0xb4>
 8008278:	2b0a      	cmp	r3, #10
 800827a:	d014      	beq.n	80082a6 <USBD_CDC_Setup+0xdc>
 800827c:	e033      	b.n	80082e6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008284:	2b03      	cmp	r3, #3
 8008286:	d107      	bne.n	8008298 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008288:	f107 030c 	add.w	r3, r7, #12
 800828c:	2202      	movs	r2, #2
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f9de 	bl	8009652 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008296:	e02e      	b.n	80082f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 f96e 	bl	800957c <USBD_CtlError>
            ret = USBD_FAIL;
 80082a0:	2302      	movs	r3, #2
 80082a2:	75fb      	strb	r3, [r7, #23]
          break;
 80082a4:	e027      	b.n	80082f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d107      	bne.n	80082c0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80082b0:	f107 030f 	add.w	r3, r7, #15
 80082b4:	2201      	movs	r2, #1
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f9ca 	bl	8009652 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082be:	e01a      	b.n	80082f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 f95a 	bl	800957c <USBD_CtlError>
            ret = USBD_FAIL;
 80082c8:	2302      	movs	r3, #2
 80082ca:	75fb      	strb	r3, [r7, #23]
          break;
 80082cc:	e013      	b.n	80082f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d00d      	beq.n	80082f4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 f94e 	bl	800957c <USBD_CtlError>
            ret = USBD_FAIL;
 80082e0:	2302      	movs	r3, #2
 80082e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082e4:	e006      	b.n	80082f4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f947 	bl	800957c <USBD_CtlError>
          ret = USBD_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	75fb      	strb	r3, [r7, #23]
          break;
 80082f2:	e000      	b.n	80082f6 <USBD_CDC_Setup+0x12c>
          break;
 80082f4:	bf00      	nop
      }
      break;
 80082f6:	e006      	b.n	8008306 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 f93e 	bl	800957c <USBD_CtlError>
      ret = USBD_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	75fb      	strb	r3, [r7, #23]
      break;
 8008304:	bf00      	nop
  }

  return ret;
 8008306:	7dfb      	ldrb	r3, [r7, #23]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008322:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800832a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d03a      	beq.n	80083ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	331c      	adds	r3, #28
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d029      	beq.n	80083a0 <USBD_CDC_DataIn+0x90>
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	331c      	adds	r3, #28
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	78f9      	ldrb	r1, [r7, #3]
 8008360:	68b8      	ldr	r0, [r7, #8]
 8008362:	460b      	mov	r3, r1
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	4403      	add	r3, r0
 800836c:	3338      	adds	r3, #56	; 0x38
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	fbb2 f1f3 	udiv	r1, r2, r3
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d110      	bne.n	80083a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	331c      	adds	r3, #28
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008392:	78f9      	ldrb	r1, [r7, #3]
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fddd 	bl	8009f58 <USBD_LL_Transmit>
 800839e:	e003      	b.n	80083a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e000      	b.n	80083ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80083ac:	2302      	movs	r3, #2
  }
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fe08 	bl	8009fe4 <USBD_LL_GetRxDataSize>
 80083d4:	4602      	mov	r2, r0
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00d      	beq.n	8008402 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083fa:	4611      	mov	r1, r2
 80083fc:	4798      	blx	r3

    return USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	e000      	b.n	8008404 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008402:	2302      	movs	r3, #2
  }
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008422:	2b00      	cmp	r3, #0
 8008424:	d015      	beq.n	8008452 <USBD_CDC_EP0_RxReady+0x46>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800842c:	2bff      	cmp	r3, #255	; 0xff
 800842e:	d010      	beq.n	8008452 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800843e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008446:	b292      	uxth	r2, r2
 8008448:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	22ff      	movs	r2, #255	; 0xff
 800844e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2243      	movs	r2, #67	; 0x43
 8008468:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800846a:	4b03      	ldr	r3, [pc, #12]	; (8008478 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	2000009c 	.word	0x2000009c

0800847c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2243      	movs	r2, #67	; 0x43
 8008488:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800848a:	4b03      	ldr	r3, [pc, #12]	; (8008498 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	20000058 	.word	0x20000058

0800849c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2243      	movs	r2, #67	; 0x43
 80084a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80084aa:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	200000e0 	.word	0x200000e0

080084bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	220a      	movs	r2, #10
 80084c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80084ca:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	20000014 	.word	0x20000014

080084dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80084e6:	2302      	movs	r3, #2
 80084e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800850a:	b480      	push	{r7}
 800850c:	b087      	sub	sp, #28
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	4613      	mov	r3, r2
 8008516:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008528:	88fa      	ldrh	r2, [r7, #6]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008574:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01c      	beq.n	80085ba <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008586:	2b00      	cmp	r3, #0
 8008588:	d115      	bne.n	80085b6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2201      	movs	r2, #1
 800858e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2181      	movs	r1, #129	; 0x81
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 fcd3 	bl	8009f58 <USBD_LL_Transmit>

      return USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e002      	b.n	80085bc <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80085ba:	2302      	movs	r3, #2
  }
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d017      	beq.n	800860e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	7c1b      	ldrb	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085f0:	2101      	movs	r1, #1
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 fcd3 	bl	8009f9e <USBD_LL_PrepareReceive>
 80085f8:	e007      	b.n	800860a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	2101      	movs	r1, #1
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 fcca 	bl	8009f9e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	e000      	b.n	8008610 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800860e:	2302      	movs	r3, #2
  }
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800862c:	2302      	movs	r3, #2
 800862e:	e01a      	b.n	8008666 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	79fa      	ldrb	r2, [r7, #7]
 800865c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f001 fb34 	bl	8009ccc <USBD_LL_Init>

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d006      	beq.n	8008690 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
 800868e:	e001      	b.n	8008694 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008690:	2302      	movs	r3, #2
 8008692:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fb6a 	bl	8009d84 <USBD_LL_Start>

  return USBD_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086dc:	2302      	movs	r3, #2
 80086de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00c      	beq.n	8008704 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	4611      	mov	r1, r2
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3

  return USBD_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fedb 	bl	8009502 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800875a:	461a      	mov	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008768:	f003 031f 	and.w	r3, r3, #31
 800876c:	2b02      	cmp	r3, #2
 800876e:	d016      	beq.n	800879e <USBD_LL_SetupStage+0x6a>
 8008770:	2b02      	cmp	r3, #2
 8008772:	d81c      	bhi.n	80087ae <USBD_LL_SetupStage+0x7a>
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <USBD_LL_SetupStage+0x4a>
 8008778:	2b01      	cmp	r3, #1
 800877a:	d008      	beq.n	800878e <USBD_LL_SetupStage+0x5a>
 800877c:	e017      	b.n	80087ae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f9ce 	bl	8008b28 <USBD_StdDevReq>
      break;
 800878c:	e01a      	b.n	80087c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa30 	bl	8008bfc <USBD_StdItfReq>
      break;
 800879c:	e012      	b.n	80087c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa70 	bl	8008c8c <USBD_StdEPReq>
      break;
 80087ac:	e00a      	b.n	80087c4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80087b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 fb41 	bl	8009e44 <USBD_LL_StallEP>
      break;
 80087c2:	bf00      	nop
  }

  return USBD_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b086      	sub	sp, #24
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	460b      	mov	r3, r1
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d14b      	bne.n	800887a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d134      	bne.n	800885e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d919      	bls.n	8008834 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	1ad2      	subs	r2, r2, r3
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008816:	429a      	cmp	r2, r3
 8008818:	d203      	bcs.n	8008822 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800881e:	b29b      	uxth	r3, r3
 8008820:	e002      	b.n	8008828 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008826:	b29b      	uxth	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 ff5c 	bl	80096ea <USBD_CtlContinueRx>
 8008832:	e038      	b.n	80088a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00a      	beq.n	8008856 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008846:	2b03      	cmp	r3, #3
 8008848:	d105      	bne.n	8008856 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 ff59 	bl	800970e <USBD_CtlSendStatus>
 800885c:	e023      	b.n	80088a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008864:	2b05      	cmp	r3, #5
 8008866:	d11e      	bne.n	80088a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008870:	2100      	movs	r1, #0
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f001 fae6 	bl	8009e44 <USBD_LL_StallEP>
 8008878:	e015      	b.n	80088a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00d      	beq.n	80088a2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800888c:	2b03      	cmp	r3, #3
 800888e:	d108      	bne.n	80088a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	7afa      	ldrb	r2, [r7, #11]
 800889a:	4611      	mov	r1, r2
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	4798      	blx	r3
 80088a0:	e001      	b.n	80088a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	e000      	b.n	80088a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	460b      	mov	r3, r1
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d17f      	bne.n	80089c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3314      	adds	r3, #20
 80088c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d15c      	bne.n	800898e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d915      	bls.n	800890c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	68da      	ldr	r2, [r3, #12]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	1ad2      	subs	r2, r2, r3
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fec6 	bl	800968a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088fe:	2300      	movs	r3, #0
 8008900:	2200      	movs	r2, #0
 8008902:	2100      	movs	r1, #0
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f001 fb4a 	bl	8009f9e <USBD_LL_PrepareReceive>
 800890a:	e04e      	b.n	80089aa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	6912      	ldr	r2, [r2, #16]
 8008914:	fbb3 f1f2 	udiv	r1, r3, r2
 8008918:	fb01 f202 	mul.w	r2, r1, r2
 800891c:	1a9b      	subs	r3, r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d11c      	bne.n	800895c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800892a:	429a      	cmp	r2, r3
 800892c:	d316      	bcc.n	800895c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008938:	429a      	cmp	r2, r3
 800893a:	d20f      	bcs.n	800895c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800893c:	2200      	movs	r2, #0
 800893e:	2100      	movs	r1, #0
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fea2 	bl	800968a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800894e:	2300      	movs	r3, #0
 8008950:	2200      	movs	r2, #0
 8008952:	2100      	movs	r1, #0
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f001 fb22 	bl	8009f9e <USBD_LL_PrepareReceive>
 800895a:	e026      	b.n	80089aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00a      	beq.n	800897e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800896e:	2b03      	cmp	r3, #3
 8008970:	d105      	bne.n	800897e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800897e:	2180      	movs	r1, #128	; 0x80
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f001 fa5f 	bl	8009e44 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fed4 	bl	8009734 <USBD_CtlReceiveStatus>
 800898c:	e00d      	b.n	80089aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008994:	2b04      	cmp	r3, #4
 8008996:	d004      	beq.n	80089a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80089a2:	2180      	movs	r1, #128	; 0x80
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f001 fa4d 	bl	8009e44 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d11d      	bne.n	80089f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7ff fe80 	bl	80086ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089c2:	e015      	b.n	80089f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00d      	beq.n	80089ec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d108      	bne.n	80089ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	7afa      	ldrb	r2, [r7, #11]
 80089e4:	4611      	mov	r1, r2
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	4798      	blx	r3
 80089ea:	e001      	b.n	80089f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089ec:	2302      	movs	r3, #2
 80089ee:	e000      	b.n	80089f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a02:	2340      	movs	r3, #64	; 0x40
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 f9d6 	bl	8009dba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2240      	movs	r2, #64	; 0x40
 8008a1a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a1e:	2340      	movs	r3, #64	; 0x40
 8008a20:	2200      	movs	r2, #0
 8008a22:	2180      	movs	r1, #128	; 0x80
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f9c8 	bl	8009dba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2240      	movs	r2, #64	; 0x40
 8008a34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d009      	beq.n	8008a72 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6852      	ldr	r2, [r2, #4]
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	4798      	blx	r3
  }

  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d105      	bne.n	8008ae4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d10b      	bne.n	8008b1c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b3e:	2b40      	cmp	r3, #64	; 0x40
 8008b40:	d005      	beq.n	8008b4e <USBD_StdDevReq+0x26>
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	d84f      	bhi.n	8008be6 <USBD_StdDevReq+0xbe>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <USBD_StdDevReq+0x36>
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d14b      	bne.n	8008be6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
      break;
 8008b5c:	e048      	b.n	8008bf0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	2b09      	cmp	r3, #9
 8008b64:	d839      	bhi.n	8008bda <USBD_StdDevReq+0xb2>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <USBD_StdDevReq+0x44>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008bbd 	.word	0x08008bbd
 8008b70:	08008bd1 	.word	0x08008bd1
 8008b74:	08008bdb 	.word	0x08008bdb
 8008b78:	08008bc7 	.word	0x08008bc7
 8008b7c:	08008bdb 	.word	0x08008bdb
 8008b80:	08008b9f 	.word	0x08008b9f
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008bdb 	.word	0x08008bdb
 8008b8c:	08008bb3 	.word	0x08008bb3
 8008b90:	08008ba9 	.word	0x08008ba9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f9dc 	bl	8008f54 <USBD_GetDescriptor>
          break;
 8008b9c:	e022      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fb3f 	bl	8009224 <USBD_SetAddress>
          break;
 8008ba6:	e01d      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fb7e 	bl	80092ac <USBD_SetConfig>
          break;
 8008bb0:	e018      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc07 	bl	80093c8 <USBD_GetConfig>
          break;
 8008bba:	e013      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fc37 	bl	8009432 <USBD_GetStatus>
          break;
 8008bc4:	e00e      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc65 	bl	8009498 <USBD_SetFeature>
          break;
 8008bce:	e009      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fc74 	bl	80094c0 <USBD_ClrFeature>
          break;
 8008bd8:	e004      	b.n	8008be4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fccd 	bl	800957c <USBD_CtlError>
          break;
 8008be2:	bf00      	nop
      }
      break;
 8008be4:	e004      	b.n	8008bf0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fcc7 	bl	800957c <USBD_CtlError>
      break;
 8008bee:	bf00      	nop
  }

  return ret;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop

08008bfc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c12:	2b40      	cmp	r3, #64	; 0x40
 8008c14:	d005      	beq.n	8008c22 <USBD_StdItfReq+0x26>
 8008c16:	2b40      	cmp	r3, #64	; 0x40
 8008c18:	d82e      	bhi.n	8008c78 <USBD_StdItfReq+0x7c>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <USBD_StdItfReq+0x26>
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d12a      	bne.n	8008c78 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d81d      	bhi.n	8008c6a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	889b      	ldrh	r3, [r3, #4]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d813      	bhi.n	8008c60 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
 8008c46:	4603      	mov	r3, r0
 8008c48:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	88db      	ldrh	r3, [r3, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d110      	bne.n	8008c74 <USBD_StdItfReq+0x78>
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10d      	bne.n	8008c74 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fd58 	bl	800970e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c5e:	e009      	b.n	8008c74 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fc8a 	bl	800957c <USBD_CtlError>
          break;
 8008c68:	e004      	b.n	8008c74 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fc85 	bl	800957c <USBD_CtlError>
          break;
 8008c72:	e000      	b.n	8008c76 <USBD_StdItfReq+0x7a>
          break;
 8008c74:	bf00      	nop
      }
      break;
 8008c76:	e004      	b.n	8008c82 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fc7e 	bl	800957c <USBD_CtlError>
      break;
 8008c80:	bf00      	nop
  }

  return USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	889b      	ldrh	r3, [r3, #4]
 8008c9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ca8:	2b40      	cmp	r3, #64	; 0x40
 8008caa:	d007      	beq.n	8008cbc <USBD_StdEPReq+0x30>
 8008cac:	2b40      	cmp	r3, #64	; 0x40
 8008cae:	f200 8146 	bhi.w	8008f3e <USBD_StdEPReq+0x2b2>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <USBD_StdEPReq+0x40>
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	f040 8141 	bne.w	8008f3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
      break;
 8008cca:	e13d      	b.n	8008f48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d10a      	bne.n	8008cee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	e12d      	b.n	8008f4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d007      	beq.n	8008d06 <USBD_StdEPReq+0x7a>
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	f300 811b 	bgt.w	8008f32 <USBD_StdEPReq+0x2a6>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d072      	beq.n	8008de6 <USBD_StdEPReq+0x15a>
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d03a      	beq.n	8008d7a <USBD_StdEPReq+0xee>
 8008d04:	e115      	b.n	8008f32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d002      	beq.n	8008d16 <USBD_StdEPReq+0x8a>
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d015      	beq.n	8008d40 <USBD_StdEPReq+0xb4>
 8008d14:	e02b      	b.n	8008d6e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00c      	beq.n	8008d36 <USBD_StdEPReq+0xaa>
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b80      	cmp	r3, #128	; 0x80
 8008d20:	d009      	beq.n	8008d36 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 f88c 	bl	8009e44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d2c:	2180      	movs	r1, #128	; 0x80
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 f888 	bl	8009e44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d34:	e020      	b.n	8008d78 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fc1f 	bl	800957c <USBD_CtlError>
              break;
 8008d3e:	e01b      	b.n	8008d78 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10e      	bne.n	8008d66 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00b      	beq.n	8008d66 <USBD_StdEPReq+0xda>
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	2b80      	cmp	r3, #128	; 0x80
 8008d52:	d008      	beq.n	8008d66 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	88db      	ldrh	r3, [r3, #6]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 f86f 	bl	8009e44 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fcd1 	bl	800970e <USBD_CtlSendStatus>

              break;
 8008d6c:	e004      	b.n	8008d78 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fc03 	bl	800957c <USBD_CtlError>
              break;
 8008d76:	bf00      	nop
          }
          break;
 8008d78:	e0e0      	b.n	8008f3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d002      	beq.n	8008d8a <USBD_StdEPReq+0xfe>
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d015      	beq.n	8008db4 <USBD_StdEPReq+0x128>
 8008d88:	e026      	b.n	8008dd8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00c      	beq.n	8008daa <USBD_StdEPReq+0x11e>
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	2b80      	cmp	r3, #128	; 0x80
 8008d94:	d009      	beq.n	8008daa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 f852 	bl	8009e44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008da0:	2180      	movs	r1, #128	; 0x80
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 f84e 	bl	8009e44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008da8:	e01c      	b.n	8008de4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fbe5 	bl	800957c <USBD_CtlError>
              break;
 8008db2:	e017      	b.n	8008de4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	885b      	ldrh	r3, [r3, #2]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d112      	bne.n	8008de2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 f859 	bl	8009e82 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fc9c 	bl	800970e <USBD_CtlSendStatus>
              }
              break;
 8008dd6:	e004      	b.n	8008de2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fbce 	bl	800957c <USBD_CtlError>
              break;
 8008de0:	e000      	b.n	8008de4 <USBD_StdEPReq+0x158>
              break;
 8008de2:	bf00      	nop
          }
          break;
 8008de4:	e0aa      	b.n	8008f3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d002      	beq.n	8008df6 <USBD_StdEPReq+0x16a>
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d032      	beq.n	8008e5a <USBD_StdEPReq+0x1ce>
 8008df4:	e097      	b.n	8008f26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <USBD_StdEPReq+0x180>
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b80      	cmp	r3, #128	; 0x80
 8008e00:	d004      	beq.n	8008e0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fbb9 	bl	800957c <USBD_CtlError>
                break;
 8008e0a:	e091      	b.n	8008f30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da0b      	bge.n	8008e2c <USBD_StdEPReq+0x1a0>
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	3310      	adds	r3, #16
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	4413      	add	r3, r2
 8008e28:	3304      	adds	r3, #4
 8008e2a:	e00b      	b.n	8008e44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	3304      	adds	r3, #4
 8008e44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fbfd 	bl	8009652 <USBD_CtlSendData>
              break;
 8008e58:	e06a      	b.n	8008f30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da11      	bge.n	8008e86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	3318      	adds	r3, #24
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d117      	bne.n	8008eac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fb7c 	bl	800957c <USBD_CtlError>
                  break;
 8008e84:	e054      	b.n	8008f30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	f003 020f 	and.w	r2, r3, #15
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d104      	bne.n	8008eac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fb69 	bl	800957c <USBD_CtlError>
                  break;
 8008eaa:	e041      	b.n	8008f30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da0b      	bge.n	8008ecc <USBD_StdEPReq+0x240>
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3304      	adds	r3, #4
 8008eca:	e00b      	b.n	8008ee4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <USBD_StdEPReq+0x266>
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b80      	cmp	r3, #128	; 0x80
 8008ef0:	d103      	bne.n	8008efa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e00e      	b.n	8008f18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 ffde 	bl	8009ec0 <USBD_LL_IsStallEP>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	e002      	b.n	8008f18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fb97 	bl	8009652 <USBD_CtlSendData>
              break;
 8008f24:	e004      	b.n	8008f30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fb27 	bl	800957c <USBD_CtlError>
              break;
 8008f2e:	bf00      	nop
          }
          break;
 8008f30:	e004      	b.n	8008f3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fb21 	bl	800957c <USBD_CtlError>
          break;
 8008f3a:	bf00      	nop
      }
      break;
 8008f3c:	e004      	b.n	8008f48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fb1b 	bl	800957c <USBD_CtlError>
      break;
 8008f46:	bf00      	nop
  }

  return ret;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	885b      	ldrh	r3, [r3, #2]
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	2b06      	cmp	r3, #6
 8008f76:	f200 8128 	bhi.w	80091ca <USBD_GetDescriptor+0x276>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <USBD_GetDescriptor+0x2c>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008f9d 	.word	0x08008f9d
 8008f84:	08008fb5 	.word	0x08008fb5
 8008f88:	08008ff5 	.word	0x08008ff5
 8008f8c:	080091cb 	.word	0x080091cb
 8008f90:	080091cb 	.word	0x080091cb
 8008f94:	0800916b 	.word	0x0800916b
 8008f98:	08009197 	.word	0x08009197
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	7c12      	ldrb	r2, [r2, #16]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
      break;
 8008fb2:	e112      	b.n	80091da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	7c1b      	ldrb	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10d      	bne.n	8008fd8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc4:	f107 0208 	add.w	r2, r7, #8
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fd6:	e100      	b.n	80091da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	f107 0208 	add.w	r2, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	2202      	movs	r2, #2
 8008ff0:	701a      	strb	r2, [r3, #0]
      break;
 8008ff2:	e0f2      	b.n	80091da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	885b      	ldrh	r3, [r3, #2]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	f200 80ac 	bhi.w	8009158 <USBD_GetDescriptor+0x204>
 8009000:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <USBD_GetDescriptor+0xb4>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	08009021 	.word	0x08009021
 800900c:	08009055 	.word	0x08009055
 8009010:	08009089 	.word	0x08009089
 8009014:	080090bd 	.word	0x080090bd
 8009018:	080090f1 	.word	0x080090f1
 800901c:	08009125 	.word	0x08009125
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	7c12      	ldrb	r2, [r2, #16]
 8009038:	f107 0108 	add.w	r1, r7, #8
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009042:	e091      	b.n	8009168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa98 	bl	800957c <USBD_CtlError>
            err++;
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	3301      	adds	r3, #1
 8009050:	72fb      	strb	r3, [r7, #11]
          break;
 8009052:	e089      	b.n	8009168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7c12      	ldrb	r2, [r2, #16]
 800906c:	f107 0108 	add.w	r1, r7, #8
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009076:	e077      	b.n	8009168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa7e 	bl	800957c <USBD_CtlError>
            err++;
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	3301      	adds	r3, #1
 8009084:	72fb      	strb	r3, [r7, #11]
          break;
 8009086:	e06f      	b.n	8009168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7c12      	ldrb	r2, [r2, #16]
 80090a0:	f107 0108 	add.w	r1, r7, #8
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
 80090a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090aa:	e05d      	b.n	8009168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa64 	bl	800957c <USBD_CtlError>
            err++;
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	3301      	adds	r3, #1
 80090b8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ba:	e055      	b.n	8009168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7c12      	ldrb	r2, [r2, #16]
 80090d4:	f107 0108 	add.w	r1, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090de:	e043      	b.n	8009168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa4a 	bl	800957c <USBD_CtlError>
            err++;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	3301      	adds	r3, #1
 80090ec:	72fb      	strb	r3, [r7, #11]
          break;
 80090ee:	e03b      	b.n	8009168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	7c12      	ldrb	r2, [r2, #16]
 8009108:	f107 0108 	add.w	r1, r7, #8
 800910c:	4610      	mov	r0, r2
 800910e:	4798      	blx	r3
 8009110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009112:	e029      	b.n	8009168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa30 	bl	800957c <USBD_CtlError>
            err++;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	3301      	adds	r3, #1
 8009120:	72fb      	strb	r3, [r7, #11]
          break;
 8009122:	e021      	b.n	8009168 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	7c12      	ldrb	r2, [r2, #16]
 800913c:	f107 0108 	add.w	r1, r7, #8
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
 8009144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009146:	e00f      	b.n	8009168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa16 	bl	800957c <USBD_CtlError>
            err++;
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	3301      	adds	r3, #1
 8009154:	72fb      	strb	r3, [r7, #11]
          break;
 8009156:	e007      	b.n	8009168 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fa0e 	bl	800957c <USBD_CtlError>
          err++;
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	3301      	adds	r3, #1
 8009164:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009166:	e038      	b.n	80091da <USBD_GetDescriptor+0x286>
 8009168:	e037      	b.n	80091da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7c1b      	ldrb	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d109      	bne.n	8009186 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917a:	f107 0208 	add.w	r2, r7, #8
 800917e:	4610      	mov	r0, r2
 8009180:	4798      	blx	r3
 8009182:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009184:	e029      	b.n	80091da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f9f7 	bl	800957c <USBD_CtlError>
        err++;
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	3301      	adds	r3, #1
 8009192:	72fb      	strb	r3, [r7, #11]
      break;
 8009194:	e021      	b.n	80091da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7c1b      	ldrb	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10d      	bne.n	80091ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	f107 0208 	add.w	r2, r7, #8
 80091aa:	4610      	mov	r0, r2
 80091ac:	4798      	blx	r3
 80091ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3301      	adds	r3, #1
 80091b4:	2207      	movs	r2, #7
 80091b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b8:	e00f      	b.n	80091da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9dd 	bl	800957c <USBD_CtlError>
        err++;
 80091c2:	7afb      	ldrb	r3, [r7, #11]
 80091c4:	3301      	adds	r3, #1
 80091c6:	72fb      	strb	r3, [r7, #11]
      break;
 80091c8:	e007      	b.n	80091da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f9d5 	bl	800957c <USBD_CtlError>
      err++;
 80091d2:	7afb      	ldrb	r3, [r7, #11]
 80091d4:	3301      	adds	r3, #1
 80091d6:	72fb      	strb	r3, [r7, #11]
      break;
 80091d8:	bf00      	nop
  }

  if (err != 0U)
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11c      	bne.n	800921a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091e0:	893b      	ldrh	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d011      	beq.n	800920a <USBD_GetDescriptor+0x2b6>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	88db      	ldrh	r3, [r3, #6]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00d      	beq.n	800920a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	88da      	ldrh	r2, [r3, #6]
 80091f2:	893b      	ldrh	r3, [r7, #8]
 80091f4:	4293      	cmp	r3, r2
 80091f6:	bf28      	it	cs
 80091f8:	4613      	movcs	r3, r2
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091fe:	893b      	ldrh	r3, [r7, #8]
 8009200:	461a      	mov	r2, r3
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fa24 	bl	8009652 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	88db      	ldrh	r3, [r3, #6]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa7b 	bl	800970e <USBD_CtlSendStatus>
 8009218:	e000      	b.n	800921c <USBD_GetDescriptor+0x2c8>
    return;
 800921a:	bf00      	nop
    }
  }
}
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop

08009224 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	889b      	ldrh	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d130      	bne.n	8009298 <USBD_SetAddress+0x74>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	88db      	ldrh	r3, [r3, #6]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d12c      	bne.n	8009298 <USBD_SetAddress+0x74>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	885b      	ldrh	r3, [r3, #2]
 8009242:	2b7f      	cmp	r3, #127	; 0x7f
 8009244:	d828      	bhi.n	8009298 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	885b      	ldrh	r3, [r3, #2]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009250:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009258:	2b03      	cmp	r3, #3
 800925a:	d104      	bne.n	8009266 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f98c 	bl	800957c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009264:	e01d      	b.n	80092a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	7bfa      	ldrb	r2, [r7, #15]
 800926a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fe51 	bl	8009f1a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa48 	bl	800970e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928c:	e009      	b.n	80092a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009296:	e004      	b.n	80092a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f96e 	bl	800957c <USBD_CtlError>
  }
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	885b      	ldrh	r3, [r3, #2]
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	4b41      	ldr	r3, [pc, #260]	; (80093c4 <USBD_SetConfig+0x118>)
 80092be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092c0:	4b40      	ldr	r3, [pc, #256]	; (80093c4 <USBD_SetConfig+0x118>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d904      	bls.n	80092d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f956 	bl	800957c <USBD_CtlError>
 80092d0:	e075      	b.n	80093be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d002      	beq.n	80092e2 <USBD_SetConfig+0x36>
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d023      	beq.n	8009328 <USBD_SetConfig+0x7c>
 80092e0:	e062      	b.n	80093a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80092e2:	4b38      	ldr	r3, [pc, #224]	; (80093c4 <USBD_SetConfig+0x118>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d01a      	beq.n	8009320 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80092ea:	4b36      	ldr	r3, [pc, #216]	; (80093c4 <USBD_SetConfig+0x118>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2203      	movs	r2, #3
 80092f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092fc:	4b31      	ldr	r3, [pc, #196]	; (80093c4 <USBD_SetConfig+0x118>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff f9e4 	bl	80086d0 <USBD_SetClassConfig>
 8009308:	4603      	mov	r3, r0
 800930a:	2b02      	cmp	r3, #2
 800930c:	d104      	bne.n	8009318 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f933 	bl	800957c <USBD_CtlError>
            return;
 8009316:	e052      	b.n	80093be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f9f8 	bl	800970e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800931e:	e04e      	b.n	80093be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f9f4 	bl	800970e <USBD_CtlSendStatus>
        break;
 8009326:	e04a      	b.n	80093be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009328:	4b26      	ldr	r3, [pc, #152]	; (80093c4 <USBD_SetConfig+0x118>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d112      	bne.n	8009356 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009338:	4b22      	ldr	r3, [pc, #136]	; (80093c4 <USBD_SetConfig+0x118>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009342:	4b20      	ldr	r3, [pc, #128]	; (80093c4 <USBD_SetConfig+0x118>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff f9e0 	bl	800870e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f9dd 	bl	800970e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009354:	e033      	b.n	80093be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009356:	4b1b      	ldr	r3, [pc, #108]	; (80093c4 <USBD_SetConfig+0x118>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d01d      	beq.n	80093a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff f9ce 	bl	800870e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009372:	4b14      	ldr	r3, [pc, #80]	; (80093c4 <USBD_SetConfig+0x118>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800937c:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <USBD_SetConfig+0x118>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff f9a4 	bl	80086d0 <USBD_SetClassConfig>
 8009388:	4603      	mov	r3, r0
 800938a:	2b02      	cmp	r3, #2
 800938c:	d104      	bne.n	8009398 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f8f3 	bl	800957c <USBD_CtlError>
            return;
 8009396:	e012      	b.n	80093be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f9b8 	bl	800970e <USBD_CtlSendStatus>
        break;
 800939e:	e00e      	b.n	80093be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f9b4 	bl	800970e <USBD_CtlSendStatus>
        break;
 80093a6:	e00a      	b.n	80093be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8e6 	bl	800957c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80093b0:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <USBD_SetConfig+0x118>)
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff f9a9 	bl	800870e <USBD_ClrClassConfig>
        break;
 80093bc:	bf00      	nop
    }
  }
}
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000af8 	.word	0x20000af8

080093c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	88db      	ldrh	r3, [r3, #6]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d004      	beq.n	80093e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f8cd 	bl	800957c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093e2:	e022      	b.n	800942a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	dc02      	bgt.n	80093f4 <USBD_GetConfig+0x2c>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dc03      	bgt.n	80093fa <USBD_GetConfig+0x32>
 80093f2:	e015      	b.n	8009420 <USBD_GetConfig+0x58>
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d00b      	beq.n	8009410 <USBD_GetConfig+0x48>
 80093f8:	e012      	b.n	8009420 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3308      	adds	r3, #8
 8009404:	2201      	movs	r2, #1
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f922 	bl	8009652 <USBD_CtlSendData>
        break;
 800940e:	e00c      	b.n	800942a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3304      	adds	r3, #4
 8009414:	2201      	movs	r2, #1
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f91a 	bl	8009652 <USBD_CtlSendData>
        break;
 800941e:	e004      	b.n	800942a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f8aa 	bl	800957c <USBD_CtlError>
        break;
 8009428:	bf00      	nop
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009442:	3b01      	subs	r3, #1
 8009444:	2b02      	cmp	r3, #2
 8009446:	d81e      	bhi.n	8009486 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	88db      	ldrh	r3, [r3, #6]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d004      	beq.n	800945a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f892 	bl	800957c <USBD_CtlError>
        break;
 8009458:	e01a      	b.n	8009490 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f043 0202 	orr.w	r2, r3, #2
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	330c      	adds	r3, #12
 800947a:	2202      	movs	r2, #2
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f8e7 	bl	8009652 <USBD_CtlSendData>
      break;
 8009484:	e004      	b.n	8009490 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f877 	bl	800957c <USBD_CtlError>
      break;
 800948e:	bf00      	nop
  }
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	885b      	ldrh	r3, [r3, #2]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d106      	bne.n	80094b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f92b 	bl	800970e <USBD_CtlSendStatus>
  }
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d0:	3b01      	subs	r3, #1
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d80b      	bhi.n	80094ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	885b      	ldrh	r3, [r3, #2]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d10c      	bne.n	80094f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f911 	bl	800970e <USBD_CtlSendStatus>
      }
      break;
 80094ec:	e004      	b.n	80094f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f843 	bl	800957c <USBD_CtlError>
      break;
 80094f6:	e000      	b.n	80094fa <USBD_ClrFeature+0x3a>
      break;
 80094f8:	bf00      	nop
  }
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781a      	ldrb	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	785a      	ldrb	r2, [r3, #1]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	3302      	adds	r3, #2
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	b29a      	uxth	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	3303      	adds	r3, #3
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	b29b      	uxth	r3, r3
 8009530:	4413      	add	r3, r2
 8009532:	b29a      	uxth	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	3304      	adds	r3, #4
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	b29a      	uxth	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	3305      	adds	r3, #5
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	021b      	lsls	r3, r3, #8
 800954a:	b29b      	uxth	r3, r3
 800954c:	4413      	add	r3, r2
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	3306      	adds	r3, #6
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	b29a      	uxth	r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	3307      	adds	r3, #7
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	b29b      	uxth	r3, r3
 8009568:	4413      	add	r3, r2
 800956a:	b29a      	uxth	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	80da      	strh	r2, [r3, #6]

}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009586:	2180      	movs	r1, #128	; 0x80
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fc5b 	bl	8009e44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800958e:	2100      	movs	r1, #0
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fc57 	bl	8009e44 <USBD_LL_StallEP>
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b086      	sub	sp, #24
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d032      	beq.n	800961a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f834 	bl	8009622 <USBD_GetLen>
 80095ba:	4603      	mov	r3, r0
 80095bc:	3301      	adds	r3, #1
 80095be:	b29b      	uxth	r3, r3
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	75fa      	strb	r2, [r7, #23]
 80095ce:	461a      	mov	r2, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4413      	add	r3, r2
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	7812      	ldrb	r2, [r2, #0]
 80095d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	75fa      	strb	r2, [r7, #23]
 80095e0:	461a      	mov	r2, r3
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	4413      	add	r3, r2
 80095e6:	2203      	movs	r2, #3
 80095e8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80095ea:	e012      	b.n	8009612 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	60fa      	str	r2, [r7, #12]
 80095f2:	7dfa      	ldrb	r2, [r7, #23]
 80095f4:	1c51      	adds	r1, r2, #1
 80095f6:	75f9      	strb	r1, [r7, #23]
 80095f8:	4611      	mov	r1, r2
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	440a      	add	r2, r1
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	1c5a      	adds	r2, r3, #1
 8009606:	75fa      	strb	r2, [r7, #23]
 8009608:	461a      	mov	r2, r3
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	4413      	add	r3, r2
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e8      	bne.n	80095ec <USBD_GetString+0x4e>
    }
  }
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009622:	b480      	push	{r7}
 8009624:	b085      	sub	sp, #20
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800962e:	e005      	b.n	800963c <USBD_GetLen+0x1a>
  {
    len++;
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	3301      	adds	r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3301      	adds	r3, #1
 800963a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1f5      	bne.n	8009630 <USBD_GetLen+0xe>
  }

  return len;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	4613      	mov	r3, r2
 800965e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2202      	movs	r2, #2
 8009664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009668:	88fa      	ldrh	r2, [r7, #6]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800966e:	88fa      	ldrh	r2, [r7, #6]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009674:	88fb      	ldrh	r3, [r7, #6]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	2100      	movs	r1, #0
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 fc6c 	bl	8009f58 <USBD_LL_Transmit>

  return USBD_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	4613      	mov	r3, r2
 8009696:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009698:	88fb      	ldrh	r3, [r7, #6]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	2100      	movs	r1, #0
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 fc5a 	bl	8009f58 <USBD_LL_Transmit>

  return USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	4613      	mov	r3, r2
 80096ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2203      	movs	r2, #3
 80096c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096c4:	88fa      	ldrh	r2, [r7, #6]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80096cc:	88fa      	ldrh	r2, [r7, #6]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096d4:	88fb      	ldrh	r3, [r7, #6]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	2100      	movs	r1, #0
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 fc5f 	bl	8009f9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	4613      	mov	r3, r2
 80096f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096f8:	88fb      	ldrh	r3, [r7, #6]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	2100      	movs	r1, #0
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 fc4d 	bl	8009f9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2204      	movs	r2, #4
 800971a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800971e:	2300      	movs	r3, #0
 8009720:	2200      	movs	r2, #0
 8009722:	2100      	movs	r1, #0
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc17 	bl	8009f58 <USBD_LL_Transmit>

  return USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2205      	movs	r2, #5
 8009740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	2100      	movs	r1, #0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fc27 	bl	8009f9e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009760:	2200      	movs	r2, #0
 8009762:	4912      	ldr	r1, [pc, #72]	; (80097ac <MX_USB_DEVICE_Init+0x50>)
 8009764:	4812      	ldr	r0, [pc, #72]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 8009766:	f7fe ff57 	bl	8008618 <USBD_Init>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009770:	f7f7 f854 	bl	800081c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009774:	490f      	ldr	r1, [pc, #60]	; (80097b4 <MX_USB_DEVICE_Init+0x58>)
 8009776:	480e      	ldr	r0, [pc, #56]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 8009778:	f7fe ff79 	bl	800866e <USBD_RegisterClass>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009782:	f7f7 f84b 	bl	800081c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009786:	490c      	ldr	r1, [pc, #48]	; (80097b8 <MX_USB_DEVICE_Init+0x5c>)
 8009788:	4809      	ldr	r0, [pc, #36]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 800978a:	f7fe fea7 	bl	80084dc <USBD_CDC_RegisterInterface>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009794:	f7f7 f842 	bl	800081c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009798:	4805      	ldr	r0, [pc, #20]	; (80097b0 <MX_USB_DEVICE_Init+0x54>)
 800979a:	f7fe ff82 	bl	80086a2 <USBD_Start>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097a4:	f7f7 f83a 	bl	800081c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097a8:	bf00      	nop
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20000134 	.word	0x20000134
 80097b0:	20000afc 	.word	0x20000afc
 80097b4:	20000020 	.word	0x20000020
 80097b8:	20000124 	.word	0x20000124

080097bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097c0:	2200      	movs	r2, #0
 80097c2:	4905      	ldr	r1, [pc, #20]	; (80097d8 <CDC_Init_FS+0x1c>)
 80097c4:	4805      	ldr	r0, [pc, #20]	; (80097dc <CDC_Init_FS+0x20>)
 80097c6:	f7fe fea0 	bl	800850a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097ca:	4905      	ldr	r1, [pc, #20]	; (80097e0 <CDC_Init_FS+0x24>)
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <CDC_Init_FS+0x20>)
 80097ce:	f7fe feb6 	bl	800853e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200011c0 	.word	0x200011c0
 80097dc:	20000afc 	.word	0x20000afc
 80097e0:	20000dc0 	.word	0x20000dc0

080097e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
 8009800:	4613      	mov	r3, r2
 8009802:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b23      	cmp	r3, #35	; 0x23
 8009808:	d84a      	bhi.n	80098a0 <CDC_Control_FS+0xac>
 800980a:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <CDC_Control_FS+0x1c>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	080098a1 	.word	0x080098a1
 8009814:	080098a1 	.word	0x080098a1
 8009818:	080098a1 	.word	0x080098a1
 800981c:	080098a1 	.word	0x080098a1
 8009820:	080098a1 	.word	0x080098a1
 8009824:	080098a1 	.word	0x080098a1
 8009828:	080098a1 	.word	0x080098a1
 800982c:	080098a1 	.word	0x080098a1
 8009830:	080098a1 	.word	0x080098a1
 8009834:	080098a1 	.word	0x080098a1
 8009838:	080098a1 	.word	0x080098a1
 800983c:	080098a1 	.word	0x080098a1
 8009840:	080098a1 	.word	0x080098a1
 8009844:	080098a1 	.word	0x080098a1
 8009848:	080098a1 	.word	0x080098a1
 800984c:	080098a1 	.word	0x080098a1
 8009850:	080098a1 	.word	0x080098a1
 8009854:	080098a1 	.word	0x080098a1
 8009858:	080098a1 	.word	0x080098a1
 800985c:	080098a1 	.word	0x080098a1
 8009860:	080098a1 	.word	0x080098a1
 8009864:	080098a1 	.word	0x080098a1
 8009868:	080098a1 	.word	0x080098a1
 800986c:	080098a1 	.word	0x080098a1
 8009870:	080098a1 	.word	0x080098a1
 8009874:	080098a1 	.word	0x080098a1
 8009878:	080098a1 	.word	0x080098a1
 800987c:	080098a1 	.word	0x080098a1
 8009880:	080098a1 	.word	0x080098a1
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098a1 	.word	0x080098a1
 800988c:	080098a1 	.word	0x080098a1
 8009890:	080098a1 	.word	0x080098a1
 8009894:	080098a1 	.word	0x080098a1
 8009898:	080098a1 	.word	0x080098a1
 800989c:	080098a1 	.word	0x080098a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098a0:	bf00      	nop
  }

  return (USBD_OK);
 80098a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4806      	ldr	r0, [pc, #24]	; (80098d8 <CDC_Receive_FS+0x28>)
 80098be:	f7fe fe3e 	bl	800853e <USBD_CDC_SetRxBuffer>
  Process_USB_Command((char*)&Buf[0]);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7f6 ff8e 	bl	80007e4 <Process_USB_Command>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098c8:	4803      	ldr	r0, [pc, #12]	; (80098d8 <CDC_Receive_FS+0x28>)
 80098ca:	f7fe fe7b 	bl	80085c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20000afc 	.word	0x20000afc

080098dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <CDC_Transmit_FS+0x48>)
 80098ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098fe:	2301      	movs	r3, #1
 8009900:	e00b      	b.n	800991a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009902:	887b      	ldrh	r3, [r7, #2]
 8009904:	461a      	mov	r2, r3
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	4806      	ldr	r0, [pc, #24]	; (8009924 <CDC_Transmit_FS+0x48>)
 800990a:	f7fe fdfe 	bl	800850a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800990e:	4805      	ldr	r0, [pc, #20]	; (8009924 <CDC_Transmit_FS+0x48>)
 8009910:	f7fe fe29 	bl	8008566 <USBD_CDC_TransmitPacket>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009918:	7bfb      	ldrb	r3, [r7, #15]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000afc 	.word	0x20000afc

08009928 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	6039      	str	r1, [r7, #0]
 8009932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2212      	movs	r2, #18
 8009938:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800993a:	4b03      	ldr	r3, [pc, #12]	; (8009948 <USBD_FS_DeviceDescriptor+0x20>)
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20000150 	.word	0x20000150

0800994c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	6039      	str	r1, [r7, #0]
 8009956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2204      	movs	r2, #4
 800995c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800995e:	4b03      	ldr	r3, [pc, #12]	; (800996c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	20000164 	.word	0x20000164

08009970 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d105      	bne.n	800998e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	4907      	ldr	r1, [pc, #28]	; (80099a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009986:	4808      	ldr	r0, [pc, #32]	; (80099a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009988:	f7ff fe09 	bl	800959e <USBD_GetString>
 800998c:	e004      	b.n	8009998 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	4904      	ldr	r1, [pc, #16]	; (80099a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009992:	4805      	ldr	r0, [pc, #20]	; (80099a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009994:	f7ff fe03 	bl	800959e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	200015c0 	.word	0x200015c0
 80099a8:	0800ab34 	.word	0x0800ab34

080099ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	6039      	str	r1, [r7, #0]
 80099b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	4904      	ldr	r1, [pc, #16]	; (80099cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099bc:	4804      	ldr	r0, [pc, #16]	; (80099d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099be:	f7ff fdee 	bl	800959e <USBD_GetString>
  return USBD_StrDesc;
 80099c2:	4b02      	ldr	r3, [pc, #8]	; (80099cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	200015c0 	.word	0x200015c0
 80099d0:	0800ab4c 	.word	0x0800ab4c

080099d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	6039      	str	r1, [r7, #0]
 80099de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	221a      	movs	r2, #26
 80099e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099e6:	f000 f843 	bl	8009a70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099ea:	4b02      	ldr	r3, [pc, #8]	; (80099f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20000168 	.word	0x20000168

080099f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	4907      	ldr	r1, [pc, #28]	; (8009a2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a0e:	4808      	ldr	r0, [pc, #32]	; (8009a30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a10:	f7ff fdc5 	bl	800959e <USBD_GetString>
 8009a14:	e004      	b.n	8009a20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	4904      	ldr	r1, [pc, #16]	; (8009a2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a1a:	4805      	ldr	r0, [pc, #20]	; (8009a30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a1c:	f7ff fdbf 	bl	800959e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a20:	4b02      	ldr	r3, [pc, #8]	; (8009a2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	200015c0 	.word	0x200015c0
 8009a30:	0800ab60 	.word	0x0800ab60

08009a34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6039      	str	r1, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a40:	79fb      	ldrb	r3, [r7, #7]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d105      	bne.n	8009a52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	4907      	ldr	r1, [pc, #28]	; (8009a68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a4a:	4808      	ldr	r0, [pc, #32]	; (8009a6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a4c:	f7ff fda7 	bl	800959e <USBD_GetString>
 8009a50:	e004      	b.n	8009a5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4904      	ldr	r1, [pc, #16]	; (8009a68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a56:	4805      	ldr	r0, [pc, #20]	; (8009a6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a58:	f7ff fda1 	bl	800959e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a5c:	4b02      	ldr	r3, [pc, #8]	; (8009a68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	200015c0 	.word	0x200015c0
 8009a6c:	0800ab6c 	.word	0x0800ab6c

08009a70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a76:	4b0f      	ldr	r3, [pc, #60]	; (8009ab4 <Get_SerialNum+0x44>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a7c:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <Get_SerialNum+0x48>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a82:	4b0e      	ldr	r3, [pc, #56]	; (8009abc <Get_SerialNum+0x4c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d009      	beq.n	8009aaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a96:	2208      	movs	r2, #8
 8009a98:	4909      	ldr	r1, [pc, #36]	; (8009ac0 <Get_SerialNum+0x50>)
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f814 	bl	8009ac8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009aa0:	2204      	movs	r2, #4
 8009aa2:	4908      	ldr	r1, [pc, #32]	; (8009ac4 <Get_SerialNum+0x54>)
 8009aa4:	68b8      	ldr	r0, [r7, #8]
 8009aa6:	f000 f80f 	bl	8009ac8 <IntToUnicode>
  }
}
 8009aaa:	bf00      	nop
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	1ffff7ac 	.word	0x1ffff7ac
 8009ab8:	1ffff7b0 	.word	0x1ffff7b0
 8009abc:	1ffff7b4 	.word	0x1ffff7b4
 8009ac0:	2000016a 	.word	0x2000016a
 8009ac4:	2000017a 	.word	0x2000017a

08009ac8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ada:	2300      	movs	r3, #0
 8009adc:	75fb      	strb	r3, [r7, #23]
 8009ade:	e027      	b.n	8009b30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	0f1b      	lsrs	r3, r3, #28
 8009ae4:	2b09      	cmp	r3, #9
 8009ae6:	d80b      	bhi.n	8009b00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	0f1b      	lsrs	r3, r3, #28
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	4619      	mov	r1, r3
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	440b      	add	r3, r1
 8009af8:	3230      	adds	r2, #48	; 0x30
 8009afa:	b2d2      	uxtb	r2, r2
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e00a      	b.n	8009b16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	0f1b      	lsrs	r3, r3, #28
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	440b      	add	r3, r1
 8009b10:	3237      	adds	r2, #55	; 0x37
 8009b12:	b2d2      	uxtb	r2, r2
 8009b14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	3301      	adds	r3, #1
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	4413      	add	r3, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]
 8009b30:	7dfa      	ldrb	r2, [r7, #23]
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d3d3      	bcc.n	8009ae0 <IntToUnicode+0x18>
  }
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
	...

08009b48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a0d      	ldr	r2, [pc, #52]	; (8009b8c <HAL_PCD_MspInit+0x44>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d113      	bne.n	8009b82 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <HAL_PCD_MspInit+0x48>)
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	4a0c      	ldr	r2, [pc, #48]	; (8009b90 <HAL_PCD_MspInit+0x48>)
 8009b60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b64:	61d3      	str	r3, [r2, #28]
 8009b66:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <HAL_PCD_MspInit+0x48>)
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009b72:	2200      	movs	r2, #0
 8009b74:	2100      	movs	r1, #0
 8009b76:	2014      	movs	r0, #20
 8009b78:	f7f7 f907 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009b7c:	2014      	movs	r0, #20
 8009b7e:	f7f7 f920 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	40005c00 	.word	0x40005c00
 8009b90:	40021000 	.word	0x40021000

08009b94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f7fe fdc2 	bl	8008734 <USBD_LL_SetupStage>
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009bca:	78fa      	ldrb	r2, [r7, #3]
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	440b      	add	r3, r1
 8009bd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	78fb      	ldrb	r3, [r7, #3]
 8009be0:	4619      	mov	r1, r3
 8009be2:	f7fe fdf4 	bl	80087ce <USBD_LL_DataOutStage>
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	440b      	add	r3, r1
 8009c0e:	333c      	adds	r3, #60	; 0x3c
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	78fb      	ldrb	r3, [r7, #3]
 8009c14:	4619      	mov	r1, r3
 8009c16:	f7fe fe4b 	bl	80088b0 <USBD_LL_DataInStage>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe ff5e 	bl	8008af2 <USBD_LL_SOF>
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c46:	2301      	movs	r3, #1
 8009c48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d001      	beq.n	8009c56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c52:	f7f6 fde3 	bl	800081c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c5c:	7bfa      	ldrb	r2, [r7, #15]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe ff0b 	bl	8008a7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe fec4 	bl	80089fa <USBD_LL_Reset>
}
 8009c72:	bf00      	nop
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe ff06 	bl	8008a9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <HAL_PCD_SuspendCallback+0x30>)
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	4a03      	ldr	r2, [pc, #12]	; (8009cac <HAL_PCD_SuspendCallback+0x30>)
 8009c9e:	f043 0306 	orr.w	r3, r3, #6
 8009ca2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	e000ed00 	.word	0xe000ed00

08009cb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe ff01 	bl	8008ac6 <USBD_LL_Resume>
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009cd4:	4a29      	ldr	r2, [pc, #164]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a27      	ldr	r2, [pc, #156]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009ce0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ce4:	4b25      	ldr	r3, [pc, #148]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009ce6:	4a26      	ldr	r2, [pc, #152]	; (8009d80 <USBD_LL_Init+0xb4>)
 8009ce8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009cea:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009cec:	2208      	movs	r2, #8
 8009cee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009cf0:	4b22      	ldr	r3, [pc, #136]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cf6:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009cfc:	4b1f      	ldr	r3, [pc, #124]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d02:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d08:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d0e:	481b      	ldr	r0, [pc, #108]	; (8009d7c <USBD_LL_Init+0xb0>)
 8009d10:	f7f7 fb3a 	bl	8001388 <HAL_PCD_Init>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009d1a:	f7f6 fd7f 	bl	800081c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d24:	2318      	movs	r3, #24
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f7f8 ffad 	bl	8002c88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d34:	2358      	movs	r3, #88	; 0x58
 8009d36:	2200      	movs	r2, #0
 8009d38:	2180      	movs	r1, #128	; 0x80
 8009d3a:	f7f8 ffa5 	bl	8002c88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d44:	23c0      	movs	r3, #192	; 0xc0
 8009d46:	2200      	movs	r2, #0
 8009d48:	2181      	movs	r1, #129	; 0x81
 8009d4a:	f7f8 ff9d 	bl	8002c88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d54:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	f7f8 ff94 	bl	8002c88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2182      	movs	r1, #130	; 0x82
 8009d6e:	f7f8 ff8b 	bl	8002c88 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200017c0 	.word	0x200017c0
 8009d80:	40005c00 	.word	0x40005c00

08009d84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7f7 fbc6 	bl	800152c <HAL_PCD_Start>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 f954 	bl	800a054 <USBD_Get_USB_Status>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	4608      	mov	r0, r1
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4603      	mov	r3, r0
 8009dca:	70fb      	strb	r3, [r7, #3]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70bb      	strb	r3, [r7, #2]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009de2:	78bb      	ldrb	r3, [r7, #2]
 8009de4:	883a      	ldrh	r2, [r7, #0]
 8009de6:	78f9      	ldrb	r1, [r7, #3]
 8009de8:	f7f7 fcbf 	bl	800176a <HAL_PCD_EP_Open>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 f92e 	bl	800a054 <USBD_Get_USB_Status>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e20:	78fa      	ldrb	r2, [r7, #3]
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7f7 fcfd 	bl	8001824 <HAL_PCD_EP_Close>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f90f 	bl	800a054 <USBD_Get_USB_Status>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f7 fda6 	bl	80019b4 <HAL_PCD_EP_SetStall>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f8f0 	bl	800a054 <USBD_Get_USB_Status>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7f7 fdd9 	bl	8001a58 <HAL_PCD_EP_ClrStall>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f8d1 	bl	800a054 <USBD_Get_USB_Status>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ed2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	da0c      	bge.n	8009ef6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee2:	68f9      	ldr	r1, [r7, #12]
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	00db      	lsls	r3, r3, #3
 8009eee:	440b      	add	r3, r1
 8009ef0:	3302      	adds	r3, #2
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	e00b      	b.n	8009f0e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009efc:	68f9      	ldr	r1, [r7, #12]
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	440b      	add	r3, r1
 8009f08:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f0c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f34:	78fa      	ldrb	r2, [r7, #3]
 8009f36:	4611      	mov	r1, r2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7f7 fbf1 	bl	8001720 <HAL_PCD_SetAddress>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 f885 	bl	800a054 <USBD_Get_USB_Status>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	607a      	str	r2, [r7, #4]
 8009f62:	461a      	mov	r2, r3
 8009f64:	460b      	mov	r3, r1
 8009f66:	72fb      	strb	r3, [r7, #11]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f7a:	893b      	ldrh	r3, [r7, #8]
 8009f7c:	7af9      	ldrb	r1, [r7, #11]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	f7f7 fce1 	bl	8001946 <HAL_PCD_EP_Transmit>
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 f862 	bl	800a054 <USBD_Get_USB_Status>
 8009f90:	4603      	mov	r3, r0
 8009f92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f94:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	460b      	mov	r3, r1
 8009fac:	72fb      	strb	r3, [r7, #11]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fc0:	893b      	ldrh	r3, [r7, #8]
 8009fc2:	7af9      	ldrb	r1, [r7, #11]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	f7f7 fc75 	bl	80018b4 <HAL_PCD_EP_Receive>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 f83f 	bl	800a054 <USBD_Get_USB_Status>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fda:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f7 fc8b 	bl	8001916 <HAL_PCD_EP_GetRxCount>
 800a000:	4603      	mov	r3, r0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a014:	4b03      	ldr	r3, [pc, #12]	; (800a024 <USBD_static_malloc+0x18>)
}
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20001aac 	.word	0x20001aac

0800a028 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d817      	bhi.n	800a098 <USBD_Get_USB_Status+0x44>
 800a068:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <USBD_Get_USB_Status+0x1c>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a081 	.word	0x0800a081
 800a074:	0800a087 	.word	0x0800a087
 800a078:	0800a08d 	.word	0x0800a08d
 800a07c:	0800a093 	.word	0x0800a093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
    break;
 800a084:	e00b      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a086:	2302      	movs	r3, #2
 800a088:	73fb      	strb	r3, [r7, #15]
    break;
 800a08a:	e008      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a08c:	2301      	movs	r3, #1
 800a08e:	73fb      	strb	r3, [r7, #15]
    break;
 800a090:	e005      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a092:	2302      	movs	r3, #2
 800a094:	73fb      	strb	r3, [r7, #15]
    break;
 800a096:	e002      	b.n	800a09e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a098:	2302      	movs	r3, #2
 800a09a:	73fb      	strb	r3, [r7, #15]
    break;
 800a09c:	bf00      	nop
  }
  return usb_status;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <atoi>:
 800a0ac:	220a      	movs	r2, #10
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	f000 b882 	b.w	800a1b8 <strtol>

0800a0b4 <_strtol_l.constprop.0>:
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ba:	d001      	beq.n	800a0c0 <_strtol_l.constprop.0+0xc>
 800a0bc:	2b24      	cmp	r3, #36	; 0x24
 800a0be:	d906      	bls.n	800a0ce <_strtol_l.constprop.0+0x1a>
 800a0c0:	f000 f8ac 	bl	800a21c <__errno>
 800a0c4:	2316      	movs	r3, #22
 800a0c6:	6003      	str	r3, [r0, #0]
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a1b4 <_strtol_l.constprop.0+0x100>
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	462e      	mov	r6, r5
 800a0d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a0de:	f017 0708 	ands.w	r7, r7, #8
 800a0e2:	d1f7      	bne.n	800a0d4 <_strtol_l.constprop.0+0x20>
 800a0e4:	2c2d      	cmp	r4, #45	; 0x2d
 800a0e6:	d132      	bne.n	800a14e <_strtol_l.constprop.0+0x9a>
 800a0e8:	782c      	ldrb	r4, [r5, #0]
 800a0ea:	2701      	movs	r7, #1
 800a0ec:	1cb5      	adds	r5, r6, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d05b      	beq.n	800a1aa <_strtol_l.constprop.0+0xf6>
 800a0f2:	2b10      	cmp	r3, #16
 800a0f4:	d109      	bne.n	800a10a <_strtol_l.constprop.0+0x56>
 800a0f6:	2c30      	cmp	r4, #48	; 0x30
 800a0f8:	d107      	bne.n	800a10a <_strtol_l.constprop.0+0x56>
 800a0fa:	782c      	ldrb	r4, [r5, #0]
 800a0fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a100:	2c58      	cmp	r4, #88	; 0x58
 800a102:	d14d      	bne.n	800a1a0 <_strtol_l.constprop.0+0xec>
 800a104:	786c      	ldrb	r4, [r5, #1]
 800a106:	2310      	movs	r3, #16
 800a108:	3502      	adds	r5, #2
 800a10a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a10e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a112:	f04f 0e00 	mov.w	lr, #0
 800a116:	fbb8 f9f3 	udiv	r9, r8, r3
 800a11a:	4676      	mov	r6, lr
 800a11c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a120:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a124:	f1bc 0f09 	cmp.w	ip, #9
 800a128:	d816      	bhi.n	800a158 <_strtol_l.constprop.0+0xa4>
 800a12a:	4664      	mov	r4, ip
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	dd24      	ble.n	800a17a <_strtol_l.constprop.0+0xc6>
 800a130:	f1be 3fff 	cmp.w	lr, #4294967295
 800a134:	d008      	beq.n	800a148 <_strtol_l.constprop.0+0x94>
 800a136:	45b1      	cmp	r9, r6
 800a138:	d31c      	bcc.n	800a174 <_strtol_l.constprop.0+0xc0>
 800a13a:	d101      	bne.n	800a140 <_strtol_l.constprop.0+0x8c>
 800a13c:	45a2      	cmp	sl, r4
 800a13e:	db19      	blt.n	800a174 <_strtol_l.constprop.0+0xc0>
 800a140:	fb06 4603 	mla	r6, r6, r3, r4
 800a144:	f04f 0e01 	mov.w	lr, #1
 800a148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a14c:	e7e8      	b.n	800a120 <_strtol_l.constprop.0+0x6c>
 800a14e:	2c2b      	cmp	r4, #43	; 0x2b
 800a150:	bf04      	itt	eq
 800a152:	782c      	ldrbeq	r4, [r5, #0]
 800a154:	1cb5      	addeq	r5, r6, #2
 800a156:	e7ca      	b.n	800a0ee <_strtol_l.constprop.0+0x3a>
 800a158:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a15c:	f1bc 0f19 	cmp.w	ip, #25
 800a160:	d801      	bhi.n	800a166 <_strtol_l.constprop.0+0xb2>
 800a162:	3c37      	subs	r4, #55	; 0x37
 800a164:	e7e2      	b.n	800a12c <_strtol_l.constprop.0+0x78>
 800a166:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a16a:	f1bc 0f19 	cmp.w	ip, #25
 800a16e:	d804      	bhi.n	800a17a <_strtol_l.constprop.0+0xc6>
 800a170:	3c57      	subs	r4, #87	; 0x57
 800a172:	e7db      	b.n	800a12c <_strtol_l.constprop.0+0x78>
 800a174:	f04f 3eff 	mov.w	lr, #4294967295
 800a178:	e7e6      	b.n	800a148 <_strtol_l.constprop.0+0x94>
 800a17a:	f1be 3fff 	cmp.w	lr, #4294967295
 800a17e:	d105      	bne.n	800a18c <_strtol_l.constprop.0+0xd8>
 800a180:	2322      	movs	r3, #34	; 0x22
 800a182:	6003      	str	r3, [r0, #0]
 800a184:	4646      	mov	r6, r8
 800a186:	b942      	cbnz	r2, 800a19a <_strtol_l.constprop.0+0xe6>
 800a188:	4630      	mov	r0, r6
 800a18a:	e79e      	b.n	800a0ca <_strtol_l.constprop.0+0x16>
 800a18c:	b107      	cbz	r7, 800a190 <_strtol_l.constprop.0+0xdc>
 800a18e:	4276      	negs	r6, r6
 800a190:	2a00      	cmp	r2, #0
 800a192:	d0f9      	beq.n	800a188 <_strtol_l.constprop.0+0xd4>
 800a194:	f1be 0f00 	cmp.w	lr, #0
 800a198:	d000      	beq.n	800a19c <_strtol_l.constprop.0+0xe8>
 800a19a:	1e69      	subs	r1, r5, #1
 800a19c:	6011      	str	r1, [r2, #0]
 800a19e:	e7f3      	b.n	800a188 <_strtol_l.constprop.0+0xd4>
 800a1a0:	2430      	movs	r4, #48	; 0x30
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1b1      	bne.n	800a10a <_strtol_l.constprop.0+0x56>
 800a1a6:	2308      	movs	r3, #8
 800a1a8:	e7af      	b.n	800a10a <_strtol_l.constprop.0+0x56>
 800a1aa:	2c30      	cmp	r4, #48	; 0x30
 800a1ac:	d0a5      	beq.n	800a0fa <_strtol_l.constprop.0+0x46>
 800a1ae:	230a      	movs	r3, #10
 800a1b0:	e7ab      	b.n	800a10a <_strtol_l.constprop.0+0x56>
 800a1b2:	bf00      	nop
 800a1b4:	0800abad 	.word	0x0800abad

0800a1b8 <strtol>:
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	460a      	mov	r2, r1
 800a1bc:	4601      	mov	r1, r0
 800a1be:	4802      	ldr	r0, [pc, #8]	; (800a1c8 <strtol+0x10>)
 800a1c0:	6800      	ldr	r0, [r0, #0]
 800a1c2:	f7ff bf77 	b.w	800a0b4 <_strtol_l.constprop.0>
 800a1c6:	bf00      	nop
 800a1c8:	200001d0 	.word	0x200001d0

0800a1cc <siprintf>:
 800a1cc:	b40e      	push	{r1, r2, r3}
 800a1ce:	b500      	push	{lr}
 800a1d0:	b09c      	sub	sp, #112	; 0x70
 800a1d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a1d4:	9002      	str	r0, [sp, #8]
 800a1d6:	9006      	str	r0, [sp, #24]
 800a1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1dc:	4809      	ldr	r0, [pc, #36]	; (800a204 <siprintf+0x38>)
 800a1de:	9107      	str	r1, [sp, #28]
 800a1e0:	9104      	str	r1, [sp, #16]
 800a1e2:	4909      	ldr	r1, [pc, #36]	; (800a208 <siprintf+0x3c>)
 800a1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	a902      	add	r1, sp, #8
 800a1f0:	f000 f992 	bl	800a518 <_svfiprintf_r>
 800a1f4:	9b02      	ldr	r3, [sp, #8]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	b01c      	add	sp, #112	; 0x70
 800a1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a200:	b003      	add	sp, #12
 800a202:	4770      	bx	lr
 800a204:	200001d0 	.word	0x200001d0
 800a208:	ffff0208 	.word	0xffff0208

0800a20c <memset>:
 800a20c:	4402      	add	r2, r0
 800a20e:	4603      	mov	r3, r0
 800a210:	4293      	cmp	r3, r2
 800a212:	d100      	bne.n	800a216 <memset+0xa>
 800a214:	4770      	bx	lr
 800a216:	f803 1b01 	strb.w	r1, [r3], #1
 800a21a:	e7f9      	b.n	800a210 <memset+0x4>

0800a21c <__errno>:
 800a21c:	4b01      	ldr	r3, [pc, #4]	; (800a224 <__errno+0x8>)
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	200001d0 	.word	0x200001d0

0800a228 <__libc_init_array>:
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	4d0d      	ldr	r5, [pc, #52]	; (800a260 <__libc_init_array+0x38>)
 800a22c:	4c0d      	ldr	r4, [pc, #52]	; (800a264 <__libc_init_array+0x3c>)
 800a22e:	1b64      	subs	r4, r4, r5
 800a230:	10a4      	asrs	r4, r4, #2
 800a232:	2600      	movs	r6, #0
 800a234:	42a6      	cmp	r6, r4
 800a236:	d109      	bne.n	800a24c <__libc_init_array+0x24>
 800a238:	4d0b      	ldr	r5, [pc, #44]	; (800a268 <__libc_init_array+0x40>)
 800a23a:	4c0c      	ldr	r4, [pc, #48]	; (800a26c <__libc_init_array+0x44>)
 800a23c:	f000 fc6a 	bl	800ab14 <_init>
 800a240:	1b64      	subs	r4, r4, r5
 800a242:	10a4      	asrs	r4, r4, #2
 800a244:	2600      	movs	r6, #0
 800a246:	42a6      	cmp	r6, r4
 800a248:	d105      	bne.n	800a256 <__libc_init_array+0x2e>
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a250:	4798      	blx	r3
 800a252:	3601      	adds	r6, #1
 800a254:	e7ee      	b.n	800a234 <__libc_init_array+0xc>
 800a256:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25a:	4798      	blx	r3
 800a25c:	3601      	adds	r6, #1
 800a25e:	e7f2      	b.n	800a246 <__libc_init_array+0x1e>
 800a260:	0800ace0 	.word	0x0800ace0
 800a264:	0800ace0 	.word	0x0800ace0
 800a268:	0800ace0 	.word	0x0800ace0
 800a26c:	0800ace4 	.word	0x0800ace4

0800a270 <__retarget_lock_acquire_recursive>:
 800a270:	4770      	bx	lr

0800a272 <__retarget_lock_release_recursive>:
 800a272:	4770      	bx	lr

0800a274 <_free_r>:
 800a274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a276:	2900      	cmp	r1, #0
 800a278:	d044      	beq.n	800a304 <_free_r+0x90>
 800a27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a27e:	9001      	str	r0, [sp, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	f1a1 0404 	sub.w	r4, r1, #4
 800a286:	bfb8      	it	lt
 800a288:	18e4      	addlt	r4, r4, r3
 800a28a:	f000 f8df 	bl	800a44c <__malloc_lock>
 800a28e:	4a1e      	ldr	r2, [pc, #120]	; (800a308 <_free_r+0x94>)
 800a290:	9801      	ldr	r0, [sp, #4]
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	b933      	cbnz	r3, 800a2a4 <_free_r+0x30>
 800a296:	6063      	str	r3, [r4, #4]
 800a298:	6014      	str	r4, [r2, #0]
 800a29a:	b003      	add	sp, #12
 800a29c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2a0:	f000 b8da 	b.w	800a458 <__malloc_unlock>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d908      	bls.n	800a2ba <_free_r+0x46>
 800a2a8:	6825      	ldr	r5, [r4, #0]
 800a2aa:	1961      	adds	r1, r4, r5
 800a2ac:	428b      	cmp	r3, r1
 800a2ae:	bf01      	itttt	eq
 800a2b0:	6819      	ldreq	r1, [r3, #0]
 800a2b2:	685b      	ldreq	r3, [r3, #4]
 800a2b4:	1949      	addeq	r1, r1, r5
 800a2b6:	6021      	streq	r1, [r4, #0]
 800a2b8:	e7ed      	b.n	800a296 <_free_r+0x22>
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b10b      	cbz	r3, 800a2c4 <_free_r+0x50>
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d9fa      	bls.n	800a2ba <_free_r+0x46>
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	1855      	adds	r5, r2, r1
 800a2c8:	42a5      	cmp	r5, r4
 800a2ca:	d10b      	bne.n	800a2e4 <_free_r+0x70>
 800a2cc:	6824      	ldr	r4, [r4, #0]
 800a2ce:	4421      	add	r1, r4
 800a2d0:	1854      	adds	r4, r2, r1
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	d1e0      	bne.n	800a29a <_free_r+0x26>
 800a2d8:	681c      	ldr	r4, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	6053      	str	r3, [r2, #4]
 800a2de:	440c      	add	r4, r1
 800a2e0:	6014      	str	r4, [r2, #0]
 800a2e2:	e7da      	b.n	800a29a <_free_r+0x26>
 800a2e4:	d902      	bls.n	800a2ec <_free_r+0x78>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	e7d6      	b.n	800a29a <_free_r+0x26>
 800a2ec:	6825      	ldr	r5, [r4, #0]
 800a2ee:	1961      	adds	r1, r4, r5
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	bf04      	itt	eq
 800a2f4:	6819      	ldreq	r1, [r3, #0]
 800a2f6:	685b      	ldreq	r3, [r3, #4]
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	bf04      	itt	eq
 800a2fc:	1949      	addeq	r1, r1, r5
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	6054      	str	r4, [r2, #4]
 800a302:	e7ca      	b.n	800a29a <_free_r+0x26>
 800a304:	b003      	add	sp, #12
 800a306:	bd30      	pop	{r4, r5, pc}
 800a308:	20001e0c 	.word	0x20001e0c

0800a30c <sbrk_aligned>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	4e0e      	ldr	r6, [pc, #56]	; (800a348 <sbrk_aligned+0x3c>)
 800a310:	460c      	mov	r4, r1
 800a312:	6831      	ldr	r1, [r6, #0]
 800a314:	4605      	mov	r5, r0
 800a316:	b911      	cbnz	r1, 800a31e <sbrk_aligned+0x12>
 800a318:	f000 fba6 	bl	800aa68 <_sbrk_r>
 800a31c:	6030      	str	r0, [r6, #0]
 800a31e:	4621      	mov	r1, r4
 800a320:	4628      	mov	r0, r5
 800a322:	f000 fba1 	bl	800aa68 <_sbrk_r>
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d00a      	beq.n	800a340 <sbrk_aligned+0x34>
 800a32a:	1cc4      	adds	r4, r0, #3
 800a32c:	f024 0403 	bic.w	r4, r4, #3
 800a330:	42a0      	cmp	r0, r4
 800a332:	d007      	beq.n	800a344 <sbrk_aligned+0x38>
 800a334:	1a21      	subs	r1, r4, r0
 800a336:	4628      	mov	r0, r5
 800a338:	f000 fb96 	bl	800aa68 <_sbrk_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	d101      	bne.n	800a344 <sbrk_aligned+0x38>
 800a340:	f04f 34ff 	mov.w	r4, #4294967295
 800a344:	4620      	mov	r0, r4
 800a346:	bd70      	pop	{r4, r5, r6, pc}
 800a348:	20001e10 	.word	0x20001e10

0800a34c <_malloc_r>:
 800a34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a350:	1ccd      	adds	r5, r1, #3
 800a352:	f025 0503 	bic.w	r5, r5, #3
 800a356:	3508      	adds	r5, #8
 800a358:	2d0c      	cmp	r5, #12
 800a35a:	bf38      	it	cc
 800a35c:	250c      	movcc	r5, #12
 800a35e:	2d00      	cmp	r5, #0
 800a360:	4607      	mov	r7, r0
 800a362:	db01      	blt.n	800a368 <_malloc_r+0x1c>
 800a364:	42a9      	cmp	r1, r5
 800a366:	d905      	bls.n	800a374 <_malloc_r+0x28>
 800a368:	230c      	movs	r3, #12
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	2600      	movs	r6, #0
 800a36e:	4630      	mov	r0, r6
 800a370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a374:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a448 <_malloc_r+0xfc>
 800a378:	f000 f868 	bl	800a44c <__malloc_lock>
 800a37c:	f8d8 3000 	ldr.w	r3, [r8]
 800a380:	461c      	mov	r4, r3
 800a382:	bb5c      	cbnz	r4, 800a3dc <_malloc_r+0x90>
 800a384:	4629      	mov	r1, r5
 800a386:	4638      	mov	r0, r7
 800a388:	f7ff ffc0 	bl	800a30c <sbrk_aligned>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	4604      	mov	r4, r0
 800a390:	d155      	bne.n	800a43e <_malloc_r+0xf2>
 800a392:	f8d8 4000 	ldr.w	r4, [r8]
 800a396:	4626      	mov	r6, r4
 800a398:	2e00      	cmp	r6, #0
 800a39a:	d145      	bne.n	800a428 <_malloc_r+0xdc>
 800a39c:	2c00      	cmp	r4, #0
 800a39e:	d048      	beq.n	800a432 <_malloc_r+0xe6>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	eb04 0903 	add.w	r9, r4, r3
 800a3aa:	f000 fb5d 	bl	800aa68 <_sbrk_r>
 800a3ae:	4581      	cmp	r9, r0
 800a3b0:	d13f      	bne.n	800a432 <_malloc_r+0xe6>
 800a3b2:	6821      	ldr	r1, [r4, #0]
 800a3b4:	1a6d      	subs	r5, r5, r1
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ffa7 	bl	800a30c <sbrk_aligned>
 800a3be:	3001      	adds	r0, #1
 800a3c0:	d037      	beq.n	800a432 <_malloc_r+0xe6>
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	442b      	add	r3, r5
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d038      	beq.n	800a442 <_malloc_r+0xf6>
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	42a2      	cmp	r2, r4
 800a3d4:	d12b      	bne.n	800a42e <_malloc_r+0xe2>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	605a      	str	r2, [r3, #4]
 800a3da:	e00f      	b.n	800a3fc <_malloc_r+0xb0>
 800a3dc:	6822      	ldr	r2, [r4, #0]
 800a3de:	1b52      	subs	r2, r2, r5
 800a3e0:	d41f      	bmi.n	800a422 <_malloc_r+0xd6>
 800a3e2:	2a0b      	cmp	r2, #11
 800a3e4:	d917      	bls.n	800a416 <_malloc_r+0xca>
 800a3e6:	1961      	adds	r1, r4, r5
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	6025      	str	r5, [r4, #0]
 800a3ec:	bf18      	it	ne
 800a3ee:	6059      	strne	r1, [r3, #4]
 800a3f0:	6863      	ldr	r3, [r4, #4]
 800a3f2:	bf08      	it	eq
 800a3f4:	f8c8 1000 	streq.w	r1, [r8]
 800a3f8:	5162      	str	r2, [r4, r5]
 800a3fa:	604b      	str	r3, [r1, #4]
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f104 060b 	add.w	r6, r4, #11
 800a402:	f000 f829 	bl	800a458 <__malloc_unlock>
 800a406:	f026 0607 	bic.w	r6, r6, #7
 800a40a:	1d23      	adds	r3, r4, #4
 800a40c:	1af2      	subs	r2, r6, r3
 800a40e:	d0ae      	beq.n	800a36e <_malloc_r+0x22>
 800a410:	1b9b      	subs	r3, r3, r6
 800a412:	50a3      	str	r3, [r4, r2]
 800a414:	e7ab      	b.n	800a36e <_malloc_r+0x22>
 800a416:	42a3      	cmp	r3, r4
 800a418:	6862      	ldr	r2, [r4, #4]
 800a41a:	d1dd      	bne.n	800a3d8 <_malloc_r+0x8c>
 800a41c:	f8c8 2000 	str.w	r2, [r8]
 800a420:	e7ec      	b.n	800a3fc <_malloc_r+0xb0>
 800a422:	4623      	mov	r3, r4
 800a424:	6864      	ldr	r4, [r4, #4]
 800a426:	e7ac      	b.n	800a382 <_malloc_r+0x36>
 800a428:	4634      	mov	r4, r6
 800a42a:	6876      	ldr	r6, [r6, #4]
 800a42c:	e7b4      	b.n	800a398 <_malloc_r+0x4c>
 800a42e:	4613      	mov	r3, r2
 800a430:	e7cc      	b.n	800a3cc <_malloc_r+0x80>
 800a432:	230c      	movs	r3, #12
 800a434:	603b      	str	r3, [r7, #0]
 800a436:	4638      	mov	r0, r7
 800a438:	f000 f80e 	bl	800a458 <__malloc_unlock>
 800a43c:	e797      	b.n	800a36e <_malloc_r+0x22>
 800a43e:	6025      	str	r5, [r4, #0]
 800a440:	e7dc      	b.n	800a3fc <_malloc_r+0xb0>
 800a442:	605b      	str	r3, [r3, #4]
 800a444:	deff      	udf	#255	; 0xff
 800a446:	bf00      	nop
 800a448:	20001e0c 	.word	0x20001e0c

0800a44c <__malloc_lock>:
 800a44c:	4801      	ldr	r0, [pc, #4]	; (800a454 <__malloc_lock+0x8>)
 800a44e:	f7ff bf0f 	b.w	800a270 <__retarget_lock_acquire_recursive>
 800a452:	bf00      	nop
 800a454:	20001e08 	.word	0x20001e08

0800a458 <__malloc_unlock>:
 800a458:	4801      	ldr	r0, [pc, #4]	; (800a460 <__malloc_unlock+0x8>)
 800a45a:	f7ff bf0a 	b.w	800a272 <__retarget_lock_release_recursive>
 800a45e:	bf00      	nop
 800a460:	20001e08 	.word	0x20001e08

0800a464 <__ssputs_r>:
 800a464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a468:	688e      	ldr	r6, [r1, #8]
 800a46a:	461f      	mov	r7, r3
 800a46c:	42be      	cmp	r6, r7
 800a46e:	680b      	ldr	r3, [r1, #0]
 800a470:	4682      	mov	sl, r0
 800a472:	460c      	mov	r4, r1
 800a474:	4690      	mov	r8, r2
 800a476:	d82c      	bhi.n	800a4d2 <__ssputs_r+0x6e>
 800a478:	898a      	ldrh	r2, [r1, #12]
 800a47a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a47e:	d026      	beq.n	800a4ce <__ssputs_r+0x6a>
 800a480:	6965      	ldr	r5, [r4, #20]
 800a482:	6909      	ldr	r1, [r1, #16]
 800a484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a488:	eba3 0901 	sub.w	r9, r3, r1
 800a48c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a490:	1c7b      	adds	r3, r7, #1
 800a492:	444b      	add	r3, r9
 800a494:	106d      	asrs	r5, r5, #1
 800a496:	429d      	cmp	r5, r3
 800a498:	bf38      	it	cc
 800a49a:	461d      	movcc	r5, r3
 800a49c:	0553      	lsls	r3, r2, #21
 800a49e:	d527      	bpl.n	800a4f0 <__ssputs_r+0x8c>
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7ff ff53 	bl	800a34c <_malloc_r>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	b360      	cbz	r0, 800a504 <__ssputs_r+0xa0>
 800a4aa:	6921      	ldr	r1, [r4, #16]
 800a4ac:	464a      	mov	r2, r9
 800a4ae:	f000 faeb 	bl	800aa88 <memcpy>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4bc:	81a3      	strh	r3, [r4, #12]
 800a4be:	6126      	str	r6, [r4, #16]
 800a4c0:	6165      	str	r5, [r4, #20]
 800a4c2:	444e      	add	r6, r9
 800a4c4:	eba5 0509 	sub.w	r5, r5, r9
 800a4c8:	6026      	str	r6, [r4, #0]
 800a4ca:	60a5      	str	r5, [r4, #8]
 800a4cc:	463e      	mov	r6, r7
 800a4ce:	42be      	cmp	r6, r7
 800a4d0:	d900      	bls.n	800a4d4 <__ssputs_r+0x70>
 800a4d2:	463e      	mov	r6, r7
 800a4d4:	6820      	ldr	r0, [r4, #0]
 800a4d6:	4632      	mov	r2, r6
 800a4d8:	4641      	mov	r1, r8
 800a4da:	f000 faab 	bl	800aa34 <memmove>
 800a4de:	68a3      	ldr	r3, [r4, #8]
 800a4e0:	1b9b      	subs	r3, r3, r6
 800a4e2:	60a3      	str	r3, [r4, #8]
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	4433      	add	r3, r6
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	f000 fad7 	bl	800aaa4 <_realloc_r>
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d1e0      	bne.n	800a4be <__ssputs_r+0x5a>
 800a4fc:	6921      	ldr	r1, [r4, #16]
 800a4fe:	4650      	mov	r0, sl
 800a500:	f7ff feb8 	bl	800a274 <_free_r>
 800a504:	230c      	movs	r3, #12
 800a506:	f8ca 3000 	str.w	r3, [sl]
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	f04f 30ff 	mov.w	r0, #4294967295
 800a516:	e7e9      	b.n	800a4ec <__ssputs_r+0x88>

0800a518 <_svfiprintf_r>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	4698      	mov	r8, r3
 800a51e:	898b      	ldrh	r3, [r1, #12]
 800a520:	061b      	lsls	r3, r3, #24
 800a522:	b09d      	sub	sp, #116	; 0x74
 800a524:	4607      	mov	r7, r0
 800a526:	460d      	mov	r5, r1
 800a528:	4614      	mov	r4, r2
 800a52a:	d50e      	bpl.n	800a54a <_svfiprintf_r+0x32>
 800a52c:	690b      	ldr	r3, [r1, #16]
 800a52e:	b963      	cbnz	r3, 800a54a <_svfiprintf_r+0x32>
 800a530:	2140      	movs	r1, #64	; 0x40
 800a532:	f7ff ff0b 	bl	800a34c <_malloc_r>
 800a536:	6028      	str	r0, [r5, #0]
 800a538:	6128      	str	r0, [r5, #16]
 800a53a:	b920      	cbnz	r0, 800a546 <_svfiprintf_r+0x2e>
 800a53c:	230c      	movs	r3, #12
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	e0d0      	b.n	800a6e8 <_svfiprintf_r+0x1d0>
 800a546:	2340      	movs	r3, #64	; 0x40
 800a548:	616b      	str	r3, [r5, #20]
 800a54a:	2300      	movs	r3, #0
 800a54c:	9309      	str	r3, [sp, #36]	; 0x24
 800a54e:	2320      	movs	r3, #32
 800a550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a554:	f8cd 800c 	str.w	r8, [sp, #12]
 800a558:	2330      	movs	r3, #48	; 0x30
 800a55a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a700 <_svfiprintf_r+0x1e8>
 800a55e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a562:	f04f 0901 	mov.w	r9, #1
 800a566:	4623      	mov	r3, r4
 800a568:	469a      	mov	sl, r3
 800a56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a56e:	b10a      	cbz	r2, 800a574 <_svfiprintf_r+0x5c>
 800a570:	2a25      	cmp	r2, #37	; 0x25
 800a572:	d1f9      	bne.n	800a568 <_svfiprintf_r+0x50>
 800a574:	ebba 0b04 	subs.w	fp, sl, r4
 800a578:	d00b      	beq.n	800a592 <_svfiprintf_r+0x7a>
 800a57a:	465b      	mov	r3, fp
 800a57c:	4622      	mov	r2, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	4638      	mov	r0, r7
 800a582:	f7ff ff6f 	bl	800a464 <__ssputs_r>
 800a586:	3001      	adds	r0, #1
 800a588:	f000 80a9 	beq.w	800a6de <_svfiprintf_r+0x1c6>
 800a58c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a58e:	445a      	add	r2, fp
 800a590:	9209      	str	r2, [sp, #36]	; 0x24
 800a592:	f89a 3000 	ldrb.w	r3, [sl]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 80a1 	beq.w	800a6de <_svfiprintf_r+0x1c6>
 800a59c:	2300      	movs	r3, #0
 800a59e:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5a6:	f10a 0a01 	add.w	sl, sl, #1
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	9307      	str	r3, [sp, #28]
 800a5ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a5b4:	4654      	mov	r4, sl
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5bc:	4850      	ldr	r0, [pc, #320]	; (800a700 <_svfiprintf_r+0x1e8>)
 800a5be:	f7f5 fe17 	bl	80001f0 <memchr>
 800a5c2:	9a04      	ldr	r2, [sp, #16]
 800a5c4:	b9d8      	cbnz	r0, 800a5fe <_svfiprintf_r+0xe6>
 800a5c6:	06d0      	lsls	r0, r2, #27
 800a5c8:	bf44      	itt	mi
 800a5ca:	2320      	movmi	r3, #32
 800a5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d0:	0711      	lsls	r1, r2, #28
 800a5d2:	bf44      	itt	mi
 800a5d4:	232b      	movmi	r3, #43	; 0x2b
 800a5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5da:	f89a 3000 	ldrb.w	r3, [sl]
 800a5de:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e0:	d015      	beq.n	800a60e <_svfiprintf_r+0xf6>
 800a5e2:	9a07      	ldr	r2, [sp, #28]
 800a5e4:	4654      	mov	r4, sl
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f04f 0c0a 	mov.w	ip, #10
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f2:	3b30      	subs	r3, #48	; 0x30
 800a5f4:	2b09      	cmp	r3, #9
 800a5f6:	d94d      	bls.n	800a694 <_svfiprintf_r+0x17c>
 800a5f8:	b1b0      	cbz	r0, 800a628 <_svfiprintf_r+0x110>
 800a5fa:	9207      	str	r2, [sp, #28]
 800a5fc:	e014      	b.n	800a628 <_svfiprintf_r+0x110>
 800a5fe:	eba0 0308 	sub.w	r3, r0, r8
 800a602:	fa09 f303 	lsl.w	r3, r9, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	46a2      	mov	sl, r4
 800a60c:	e7d2      	b.n	800a5b4 <_svfiprintf_r+0x9c>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	1d19      	adds	r1, r3, #4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	9103      	str	r1, [sp, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	bfbb      	ittet	lt
 800a61a:	425b      	neglt	r3, r3
 800a61c:	f042 0202 	orrlt.w	r2, r2, #2
 800a620:	9307      	strge	r3, [sp, #28]
 800a622:	9307      	strlt	r3, [sp, #28]
 800a624:	bfb8      	it	lt
 800a626:	9204      	strlt	r2, [sp, #16]
 800a628:	7823      	ldrb	r3, [r4, #0]
 800a62a:	2b2e      	cmp	r3, #46	; 0x2e
 800a62c:	d10c      	bne.n	800a648 <_svfiprintf_r+0x130>
 800a62e:	7863      	ldrb	r3, [r4, #1]
 800a630:	2b2a      	cmp	r3, #42	; 0x2a
 800a632:	d134      	bne.n	800a69e <_svfiprintf_r+0x186>
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	1d1a      	adds	r2, r3, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	9203      	str	r2, [sp, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfb8      	it	lt
 800a640:	f04f 33ff 	movlt.w	r3, #4294967295
 800a644:	3402      	adds	r4, #2
 800a646:	9305      	str	r3, [sp, #20]
 800a648:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a710 <_svfiprintf_r+0x1f8>
 800a64c:	7821      	ldrb	r1, [r4, #0]
 800a64e:	2203      	movs	r2, #3
 800a650:	4650      	mov	r0, sl
 800a652:	f7f5 fdcd 	bl	80001f0 <memchr>
 800a656:	b138      	cbz	r0, 800a668 <_svfiprintf_r+0x150>
 800a658:	9b04      	ldr	r3, [sp, #16]
 800a65a:	eba0 000a 	sub.w	r0, r0, sl
 800a65e:	2240      	movs	r2, #64	; 0x40
 800a660:	4082      	lsls	r2, r0
 800a662:	4313      	orrs	r3, r2
 800a664:	3401      	adds	r4, #1
 800a666:	9304      	str	r3, [sp, #16]
 800a668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66c:	4825      	ldr	r0, [pc, #148]	; (800a704 <_svfiprintf_r+0x1ec>)
 800a66e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a672:	2206      	movs	r2, #6
 800a674:	f7f5 fdbc 	bl	80001f0 <memchr>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d038      	beq.n	800a6ee <_svfiprintf_r+0x1d6>
 800a67c:	4b22      	ldr	r3, [pc, #136]	; (800a708 <_svfiprintf_r+0x1f0>)
 800a67e:	bb1b      	cbnz	r3, 800a6c8 <_svfiprintf_r+0x1b0>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	3307      	adds	r3, #7
 800a684:	f023 0307 	bic.w	r3, r3, #7
 800a688:	3308      	adds	r3, #8
 800a68a:	9303      	str	r3, [sp, #12]
 800a68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68e:	4433      	add	r3, r6
 800a690:	9309      	str	r3, [sp, #36]	; 0x24
 800a692:	e768      	b.n	800a566 <_svfiprintf_r+0x4e>
 800a694:	fb0c 3202 	mla	r2, ip, r2, r3
 800a698:	460c      	mov	r4, r1
 800a69a:	2001      	movs	r0, #1
 800a69c:	e7a6      	b.n	800a5ec <_svfiprintf_r+0xd4>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	3401      	adds	r4, #1
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	f04f 0c0a 	mov.w	ip, #10
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b0:	3a30      	subs	r2, #48	; 0x30
 800a6b2:	2a09      	cmp	r2, #9
 800a6b4:	d903      	bls.n	800a6be <_svfiprintf_r+0x1a6>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0c6      	beq.n	800a648 <_svfiprintf_r+0x130>
 800a6ba:	9105      	str	r1, [sp, #20]
 800a6bc:	e7c4      	b.n	800a648 <_svfiprintf_r+0x130>
 800a6be:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e7f0      	b.n	800a6aa <_svfiprintf_r+0x192>
 800a6c8:	ab03      	add	r3, sp, #12
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	462a      	mov	r2, r5
 800a6ce:	4b0f      	ldr	r3, [pc, #60]	; (800a70c <_svfiprintf_r+0x1f4>)
 800a6d0:	a904      	add	r1, sp, #16
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	f3af 8000 	nop.w
 800a6d8:	1c42      	adds	r2, r0, #1
 800a6da:	4606      	mov	r6, r0
 800a6dc:	d1d6      	bne.n	800a68c <_svfiprintf_r+0x174>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	065b      	lsls	r3, r3, #25
 800a6e2:	f53f af2d 	bmi.w	800a540 <_svfiprintf_r+0x28>
 800a6e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6e8:	b01d      	add	sp, #116	; 0x74
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	ab03      	add	r3, sp, #12
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	462a      	mov	r2, r5
 800a6f4:	4b05      	ldr	r3, [pc, #20]	; (800a70c <_svfiprintf_r+0x1f4>)
 800a6f6:	a904      	add	r1, sp, #16
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f000 f879 	bl	800a7f0 <_printf_i>
 800a6fe:	e7eb      	b.n	800a6d8 <_svfiprintf_r+0x1c0>
 800a700:	0800acad 	.word	0x0800acad
 800a704:	0800acb7 	.word	0x0800acb7
 800a708:	00000000 	.word	0x00000000
 800a70c:	0800a465 	.word	0x0800a465
 800a710:	0800acb3 	.word	0x0800acb3

0800a714 <_printf_common>:
 800a714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a718:	4616      	mov	r6, r2
 800a71a:	4699      	mov	r9, r3
 800a71c:	688a      	ldr	r2, [r1, #8]
 800a71e:	690b      	ldr	r3, [r1, #16]
 800a720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a724:	4293      	cmp	r3, r2
 800a726:	bfb8      	it	lt
 800a728:	4613      	movlt	r3, r2
 800a72a:	6033      	str	r3, [r6, #0]
 800a72c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a730:	4607      	mov	r7, r0
 800a732:	460c      	mov	r4, r1
 800a734:	b10a      	cbz	r2, 800a73a <_printf_common+0x26>
 800a736:	3301      	adds	r3, #1
 800a738:	6033      	str	r3, [r6, #0]
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	0699      	lsls	r1, r3, #26
 800a73e:	bf42      	ittt	mi
 800a740:	6833      	ldrmi	r3, [r6, #0]
 800a742:	3302      	addmi	r3, #2
 800a744:	6033      	strmi	r3, [r6, #0]
 800a746:	6825      	ldr	r5, [r4, #0]
 800a748:	f015 0506 	ands.w	r5, r5, #6
 800a74c:	d106      	bne.n	800a75c <_printf_common+0x48>
 800a74e:	f104 0a19 	add.w	sl, r4, #25
 800a752:	68e3      	ldr	r3, [r4, #12]
 800a754:	6832      	ldr	r2, [r6, #0]
 800a756:	1a9b      	subs	r3, r3, r2
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dc26      	bgt.n	800a7aa <_printf_common+0x96>
 800a75c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a760:	1e13      	subs	r3, r2, #0
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	bf18      	it	ne
 800a766:	2301      	movne	r3, #1
 800a768:	0692      	lsls	r2, r2, #26
 800a76a:	d42b      	bmi.n	800a7c4 <_printf_common+0xb0>
 800a76c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a770:	4649      	mov	r1, r9
 800a772:	4638      	mov	r0, r7
 800a774:	47c0      	blx	r8
 800a776:	3001      	adds	r0, #1
 800a778:	d01e      	beq.n	800a7b8 <_printf_common+0xa4>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	6922      	ldr	r2, [r4, #16]
 800a77e:	f003 0306 	and.w	r3, r3, #6
 800a782:	2b04      	cmp	r3, #4
 800a784:	bf02      	ittt	eq
 800a786:	68e5      	ldreq	r5, [r4, #12]
 800a788:	6833      	ldreq	r3, [r6, #0]
 800a78a:	1aed      	subeq	r5, r5, r3
 800a78c:	68a3      	ldr	r3, [r4, #8]
 800a78e:	bf0c      	ite	eq
 800a790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a794:	2500      	movne	r5, #0
 800a796:	4293      	cmp	r3, r2
 800a798:	bfc4      	itt	gt
 800a79a:	1a9b      	subgt	r3, r3, r2
 800a79c:	18ed      	addgt	r5, r5, r3
 800a79e:	2600      	movs	r6, #0
 800a7a0:	341a      	adds	r4, #26
 800a7a2:	42b5      	cmp	r5, r6
 800a7a4:	d11a      	bne.n	800a7dc <_printf_common+0xc8>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e008      	b.n	800a7bc <_printf_common+0xa8>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4652      	mov	r2, sl
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	47c0      	blx	r8
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d103      	bne.n	800a7c0 <_printf_common+0xac>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	e7c6      	b.n	800a752 <_printf_common+0x3e>
 800a7c4:	18e1      	adds	r1, r4, r3
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	2030      	movs	r0, #48	; 0x30
 800a7ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7ce:	4422      	add	r2, r4
 800a7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7d8:	3302      	adds	r3, #2
 800a7da:	e7c7      	b.n	800a76c <_printf_common+0x58>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d0e6      	beq.n	800a7b8 <_printf_common+0xa4>
 800a7ea:	3601      	adds	r6, #1
 800a7ec:	e7d9      	b.n	800a7a2 <_printf_common+0x8e>
	...

0800a7f0 <_printf_i>:
 800a7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	7e0f      	ldrb	r7, [r1, #24]
 800a7f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7f8:	2f78      	cmp	r7, #120	; 0x78
 800a7fa:	4691      	mov	r9, r2
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	469a      	mov	sl, r3
 800a802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a806:	d807      	bhi.n	800a818 <_printf_i+0x28>
 800a808:	2f62      	cmp	r7, #98	; 0x62
 800a80a:	d80a      	bhi.n	800a822 <_printf_i+0x32>
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	f000 80d4 	beq.w	800a9ba <_printf_i+0x1ca>
 800a812:	2f58      	cmp	r7, #88	; 0x58
 800a814:	f000 80c0 	beq.w	800a998 <_printf_i+0x1a8>
 800a818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a81c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a820:	e03a      	b.n	800a898 <_printf_i+0xa8>
 800a822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a826:	2b15      	cmp	r3, #21
 800a828:	d8f6      	bhi.n	800a818 <_printf_i+0x28>
 800a82a:	a101      	add	r1, pc, #4	; (adr r1, 800a830 <_printf_i+0x40>)
 800a82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a830:	0800a889 	.word	0x0800a889
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a819 	.word	0x0800a819
 800a83c:	0800a819 	.word	0x0800a819
 800a840:	0800a819 	.word	0x0800a819
 800a844:	0800a819 	.word	0x0800a819
 800a848:	0800a89d 	.word	0x0800a89d
 800a84c:	0800a819 	.word	0x0800a819
 800a850:	0800a819 	.word	0x0800a819
 800a854:	0800a819 	.word	0x0800a819
 800a858:	0800a819 	.word	0x0800a819
 800a85c:	0800a9a1 	.word	0x0800a9a1
 800a860:	0800a8c9 	.word	0x0800a8c9
 800a864:	0800a95b 	.word	0x0800a95b
 800a868:	0800a819 	.word	0x0800a819
 800a86c:	0800a819 	.word	0x0800a819
 800a870:	0800a9c3 	.word	0x0800a9c3
 800a874:	0800a819 	.word	0x0800a819
 800a878:	0800a8c9 	.word	0x0800a8c9
 800a87c:	0800a819 	.word	0x0800a819
 800a880:	0800a819 	.word	0x0800a819
 800a884:	0800a963 	.word	0x0800a963
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	602a      	str	r2, [r5, #0]
 800a890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a898:	2301      	movs	r3, #1
 800a89a:	e09f      	b.n	800a9dc <_printf_i+0x1ec>
 800a89c:	6820      	ldr	r0, [r4, #0]
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	0607      	lsls	r7, r0, #24
 800a8a2:	f103 0104 	add.w	r1, r3, #4
 800a8a6:	6029      	str	r1, [r5, #0]
 800a8a8:	d501      	bpl.n	800a8ae <_printf_i+0xbe>
 800a8aa:	681e      	ldr	r6, [r3, #0]
 800a8ac:	e003      	b.n	800a8b6 <_printf_i+0xc6>
 800a8ae:	0646      	lsls	r6, r0, #25
 800a8b0:	d5fb      	bpl.n	800a8aa <_printf_i+0xba>
 800a8b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	da03      	bge.n	800a8c2 <_printf_i+0xd2>
 800a8ba:	232d      	movs	r3, #45	; 0x2d
 800a8bc:	4276      	negs	r6, r6
 800a8be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c2:	485a      	ldr	r0, [pc, #360]	; (800aa2c <_printf_i+0x23c>)
 800a8c4:	230a      	movs	r3, #10
 800a8c6:	e012      	b.n	800a8ee <_printf_i+0xfe>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	6820      	ldr	r0, [r4, #0]
 800a8cc:	1d19      	adds	r1, r3, #4
 800a8ce:	6029      	str	r1, [r5, #0]
 800a8d0:	0605      	lsls	r5, r0, #24
 800a8d2:	d501      	bpl.n	800a8d8 <_printf_i+0xe8>
 800a8d4:	681e      	ldr	r6, [r3, #0]
 800a8d6:	e002      	b.n	800a8de <_printf_i+0xee>
 800a8d8:	0641      	lsls	r1, r0, #25
 800a8da:	d5fb      	bpl.n	800a8d4 <_printf_i+0xe4>
 800a8dc:	881e      	ldrh	r6, [r3, #0]
 800a8de:	4853      	ldr	r0, [pc, #332]	; (800aa2c <_printf_i+0x23c>)
 800a8e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a8e2:	bf0c      	ite	eq
 800a8e4:	2308      	moveq	r3, #8
 800a8e6:	230a      	movne	r3, #10
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8ee:	6865      	ldr	r5, [r4, #4]
 800a8f0:	60a5      	str	r5, [r4, #8]
 800a8f2:	2d00      	cmp	r5, #0
 800a8f4:	bfa2      	ittt	ge
 800a8f6:	6821      	ldrge	r1, [r4, #0]
 800a8f8:	f021 0104 	bicge.w	r1, r1, #4
 800a8fc:	6021      	strge	r1, [r4, #0]
 800a8fe:	b90e      	cbnz	r6, 800a904 <_printf_i+0x114>
 800a900:	2d00      	cmp	r5, #0
 800a902:	d04b      	beq.n	800a99c <_printf_i+0x1ac>
 800a904:	4615      	mov	r5, r2
 800a906:	fbb6 f1f3 	udiv	r1, r6, r3
 800a90a:	fb03 6711 	mls	r7, r3, r1, r6
 800a90e:	5dc7      	ldrb	r7, [r0, r7]
 800a910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a914:	4637      	mov	r7, r6
 800a916:	42bb      	cmp	r3, r7
 800a918:	460e      	mov	r6, r1
 800a91a:	d9f4      	bls.n	800a906 <_printf_i+0x116>
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d10b      	bne.n	800a938 <_printf_i+0x148>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	07de      	lsls	r6, r3, #31
 800a924:	d508      	bpl.n	800a938 <_printf_i+0x148>
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	6861      	ldr	r1, [r4, #4]
 800a92a:	4299      	cmp	r1, r3
 800a92c:	bfde      	ittt	le
 800a92e:	2330      	movle	r3, #48	; 0x30
 800a930:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a934:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a938:	1b52      	subs	r2, r2, r5
 800a93a:	6122      	str	r2, [r4, #16]
 800a93c:	f8cd a000 	str.w	sl, [sp]
 800a940:	464b      	mov	r3, r9
 800a942:	aa03      	add	r2, sp, #12
 800a944:	4621      	mov	r1, r4
 800a946:	4640      	mov	r0, r8
 800a948:	f7ff fee4 	bl	800a714 <_printf_common>
 800a94c:	3001      	adds	r0, #1
 800a94e:	d14a      	bne.n	800a9e6 <_printf_i+0x1f6>
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	b004      	add	sp, #16
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	f043 0320 	orr.w	r3, r3, #32
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	4833      	ldr	r0, [pc, #204]	; (800aa30 <_printf_i+0x240>)
 800a964:	2778      	movs	r7, #120	; 0x78
 800a966:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	6829      	ldr	r1, [r5, #0]
 800a96e:	061f      	lsls	r7, r3, #24
 800a970:	f851 6b04 	ldr.w	r6, [r1], #4
 800a974:	d402      	bmi.n	800a97c <_printf_i+0x18c>
 800a976:	065f      	lsls	r7, r3, #25
 800a978:	bf48      	it	mi
 800a97a:	b2b6      	uxthmi	r6, r6
 800a97c:	07df      	lsls	r7, r3, #31
 800a97e:	bf48      	it	mi
 800a980:	f043 0320 	orrmi.w	r3, r3, #32
 800a984:	6029      	str	r1, [r5, #0]
 800a986:	bf48      	it	mi
 800a988:	6023      	strmi	r3, [r4, #0]
 800a98a:	b91e      	cbnz	r6, 800a994 <_printf_i+0x1a4>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	f023 0320 	bic.w	r3, r3, #32
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	2310      	movs	r3, #16
 800a996:	e7a7      	b.n	800a8e8 <_printf_i+0xf8>
 800a998:	4824      	ldr	r0, [pc, #144]	; (800aa2c <_printf_i+0x23c>)
 800a99a:	e7e4      	b.n	800a966 <_printf_i+0x176>
 800a99c:	4615      	mov	r5, r2
 800a99e:	e7bd      	b.n	800a91c <_printf_i+0x12c>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	6826      	ldr	r6, [r4, #0]
 800a9a4:	6961      	ldr	r1, [r4, #20]
 800a9a6:	1d18      	adds	r0, r3, #4
 800a9a8:	6028      	str	r0, [r5, #0]
 800a9aa:	0635      	lsls	r5, r6, #24
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	d501      	bpl.n	800a9b4 <_printf_i+0x1c4>
 800a9b0:	6019      	str	r1, [r3, #0]
 800a9b2:	e002      	b.n	800a9ba <_printf_i+0x1ca>
 800a9b4:	0670      	lsls	r0, r6, #25
 800a9b6:	d5fb      	bpl.n	800a9b0 <_printf_i+0x1c0>
 800a9b8:	8019      	strh	r1, [r3, #0]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6123      	str	r3, [r4, #16]
 800a9be:	4615      	mov	r5, r2
 800a9c0:	e7bc      	b.n	800a93c <_printf_i+0x14c>
 800a9c2:	682b      	ldr	r3, [r5, #0]
 800a9c4:	1d1a      	adds	r2, r3, #4
 800a9c6:	602a      	str	r2, [r5, #0]
 800a9c8:	681d      	ldr	r5, [r3, #0]
 800a9ca:	6862      	ldr	r2, [r4, #4]
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f7f5 fc0e 	bl	80001f0 <memchr>
 800a9d4:	b108      	cbz	r0, 800a9da <_printf_i+0x1ea>
 800a9d6:	1b40      	subs	r0, r0, r5
 800a9d8:	6060      	str	r0, [r4, #4]
 800a9da:	6863      	ldr	r3, [r4, #4]
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9e4:	e7aa      	b.n	800a93c <_printf_i+0x14c>
 800a9e6:	6923      	ldr	r3, [r4, #16]
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	47d0      	blx	sl
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d0ad      	beq.n	800a950 <_printf_i+0x160>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	079b      	lsls	r3, r3, #30
 800a9f8:	d413      	bmi.n	800aa22 <_printf_i+0x232>
 800a9fa:	68e0      	ldr	r0, [r4, #12]
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	4298      	cmp	r0, r3
 800aa00:	bfb8      	it	lt
 800aa02:	4618      	movlt	r0, r3
 800aa04:	e7a6      	b.n	800a954 <_printf_i+0x164>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4632      	mov	r2, r6
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	47d0      	blx	sl
 800aa10:	3001      	adds	r0, #1
 800aa12:	d09d      	beq.n	800a950 <_printf_i+0x160>
 800aa14:	3501      	adds	r5, #1
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	9903      	ldr	r1, [sp, #12]
 800aa1a:	1a5b      	subs	r3, r3, r1
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dcf2      	bgt.n	800aa06 <_printf_i+0x216>
 800aa20:	e7eb      	b.n	800a9fa <_printf_i+0x20a>
 800aa22:	2500      	movs	r5, #0
 800aa24:	f104 0619 	add.w	r6, r4, #25
 800aa28:	e7f5      	b.n	800aa16 <_printf_i+0x226>
 800aa2a:	bf00      	nop
 800aa2c:	0800acbe 	.word	0x0800acbe
 800aa30:	0800accf 	.word	0x0800accf

0800aa34 <memmove>:
 800aa34:	4288      	cmp	r0, r1
 800aa36:	b510      	push	{r4, lr}
 800aa38:	eb01 0402 	add.w	r4, r1, r2
 800aa3c:	d902      	bls.n	800aa44 <memmove+0x10>
 800aa3e:	4284      	cmp	r4, r0
 800aa40:	4623      	mov	r3, r4
 800aa42:	d807      	bhi.n	800aa54 <memmove+0x20>
 800aa44:	1e43      	subs	r3, r0, #1
 800aa46:	42a1      	cmp	r1, r4
 800aa48:	d008      	beq.n	800aa5c <memmove+0x28>
 800aa4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa52:	e7f8      	b.n	800aa46 <memmove+0x12>
 800aa54:	4402      	add	r2, r0
 800aa56:	4601      	mov	r1, r0
 800aa58:	428a      	cmp	r2, r1
 800aa5a:	d100      	bne.n	800aa5e <memmove+0x2a>
 800aa5c:	bd10      	pop	{r4, pc}
 800aa5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa66:	e7f7      	b.n	800aa58 <memmove+0x24>

0800aa68 <_sbrk_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d06      	ldr	r5, [pc, #24]	; (800aa84 <_sbrk_r+0x1c>)
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4604      	mov	r4, r0
 800aa70:	4608      	mov	r0, r1
 800aa72:	602b      	str	r3, [r5, #0]
 800aa74:	f7f5 ffb2 	bl	80009dc <_sbrk>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d102      	bne.n	800aa82 <_sbrk_r+0x1a>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	b103      	cbz	r3, 800aa82 <_sbrk_r+0x1a>
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	20001e04 	.word	0x20001e04

0800aa88 <memcpy>:
 800aa88:	440a      	add	r2, r1
 800aa8a:	4291      	cmp	r1, r2
 800aa8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa90:	d100      	bne.n	800aa94 <memcpy+0xc>
 800aa92:	4770      	bx	lr
 800aa94:	b510      	push	{r4, lr}
 800aa96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	d1f9      	bne.n	800aa96 <memcpy+0xe>
 800aaa2:	bd10      	pop	{r4, pc}

0800aaa4 <_realloc_r>:
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	4614      	mov	r4, r2
 800aaac:	460e      	mov	r6, r1
 800aaae:	b921      	cbnz	r1, 800aaba <_realloc_r+0x16>
 800aab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aab4:	4611      	mov	r1, r2
 800aab6:	f7ff bc49 	b.w	800a34c <_malloc_r>
 800aaba:	b92a      	cbnz	r2, 800aac8 <_realloc_r+0x24>
 800aabc:	f7ff fbda 	bl	800a274 <_free_r>
 800aac0:	4625      	mov	r5, r4
 800aac2:	4628      	mov	r0, r5
 800aac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac8:	f000 f81b 	bl	800ab02 <_malloc_usable_size_r>
 800aacc:	4284      	cmp	r4, r0
 800aace:	4607      	mov	r7, r0
 800aad0:	d802      	bhi.n	800aad8 <_realloc_r+0x34>
 800aad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aad6:	d812      	bhi.n	800aafe <_realloc_r+0x5a>
 800aad8:	4621      	mov	r1, r4
 800aada:	4640      	mov	r0, r8
 800aadc:	f7ff fc36 	bl	800a34c <_malloc_r>
 800aae0:	4605      	mov	r5, r0
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d0ed      	beq.n	800aac2 <_realloc_r+0x1e>
 800aae6:	42bc      	cmp	r4, r7
 800aae8:	4622      	mov	r2, r4
 800aaea:	4631      	mov	r1, r6
 800aaec:	bf28      	it	cs
 800aaee:	463a      	movcs	r2, r7
 800aaf0:	f7ff ffca 	bl	800aa88 <memcpy>
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f7ff fbbc 	bl	800a274 <_free_r>
 800aafc:	e7e1      	b.n	800aac2 <_realloc_r+0x1e>
 800aafe:	4635      	mov	r5, r6
 800ab00:	e7df      	b.n	800aac2 <_realloc_r+0x1e>

0800ab02 <_malloc_usable_size_r>:
 800ab02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab06:	1f18      	subs	r0, r3, #4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbc      	itt	lt
 800ab0c:	580b      	ldrlt	r3, [r1, r0]
 800ab0e:	18c0      	addlt	r0, r0, r3
 800ab10:	4770      	bx	lr
	...

0800ab14 <_init>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	bf00      	nop
 800ab18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1a:	bc08      	pop	{r3}
 800ab1c:	469e      	mov	lr, r3
 800ab1e:	4770      	bx	lr

0800ab20 <_fini>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr
