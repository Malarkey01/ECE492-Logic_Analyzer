
LogicAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adc0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800af60  0800af60  0000bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b114  0800b114  0000d224  2**0
                  CONTENTS
  4 .ARM          00000008  0800b114  0800b114  0000c114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b11c  0800b11c  0000d224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b11c  0800b11c  0000c11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b120  0800b120  0000c120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800b124  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d224  2**0
                  CONTENTS
 10 .bss          00001c44  20000224  20000224  0000d224  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e68  20001e68  0000d224  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a1c  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003546  00000000  00000000  00020c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  000241b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca7  00000000  00000000  00025268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023125  00000000  00000000  00025f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c58  00000000  00000000  00049034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca238  00000000  00000000  0005fc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129ec4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049cc  00000000  00000000  00129f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0012e8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af48 	.word	0x0800af48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	0800af48 	.word	0x0800af48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fe40 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f868 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 fa6e 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 80002a0:	f000 fa20 	bl	80006e4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80002a4:	f009 fc80 	bl	8009ba8 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 80002a8:	f000 f97c 	bl	80005a4 <MX_TIM16_Init>
  MX_TIM1_Init(period);
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <main+0xb8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f8bf 	bl	8000434 <MX_TIM1_Init>
//  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&GPIOB->IDR, (uint32_t)buffer, BUFFER_SIZE);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = preTrigger;
 80002b6:	4b25      	ldr	r3, [pc, #148]	@ (800034c <main+0xbc>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	701a      	strb	r2, [r3, #0]
//	  }

    /* USER CODE END WHILE */
	  //if(trigger == 0 && status == 1){

	  switch(state){
 80002bc:	4b23      	ldr	r3, [pc, #140]	@ (800034c <main+0xbc>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d006      	beq.n	80002d2 <main+0x42>
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	dcf9      	bgt.n	80002bc <main+0x2c>
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d036      	beq.n	800033a <main+0xaa>
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d008      	beq.n	80002e2 <main+0x52>
 80002d0:	e7f4      	b.n	80002bc <main+0x2c>
	  	  case preTrigger:
	  		  if(status == 0){
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <main+0xc0>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d131      	bne.n	800033e <main+0xae>
	  			 HAL_TIM_Base_Start_IT(&htim1);
 80002da:	481e      	ldr	r0, [pc, #120]	@ (8000354 <main+0xc4>)
 80002dc:	f004 fc18 	bl	8004b10 <HAL_TIM_Base_Start_IT>

	  		  }
	  		  break;
 80002e0:	e02d      	b.n	800033e <main+0xae>
	  	  case triggerState:

	  		  break;
	  	  case postTrigger:
	  		  trigger = 0;
 80002e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <main+0xc8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
	  		  sprintf(msg, "%hu\r\n", buffer[val++]);
 80002e8:	4b1c      	ldr	r3, [pc, #112]	@ (800035c <main+0xcc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	491b      	ldr	r1, [pc, #108]	@ (800035c <main+0xcc>)
 80002f0:	600a      	str	r2, [r1, #0]
 80002f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000360 <main+0xd0>)
 80002f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002f8:	461a      	mov	r2, r3
 80002fa:	491a      	ldr	r1, [pc, #104]	@ (8000364 <main+0xd4>)
 80002fc:	481a      	ldr	r0, [pc, #104]	@ (8000368 <main+0xd8>)
 80002fe:	f00a f983 	bl	800a608 <siprintf>
	  		  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 8000302:	4819      	ldr	r0, [pc, #100]	@ (8000368 <main+0xd8>)
 8000304:	f7ff ff6c 	bl	80001e0 <strlen>
 8000308:	4603      	mov	r3, r0
 800030a:	b29b      	uxth	r3, r3
 800030c:	4619      	mov	r1, r3
 800030e:	4816      	ldr	r0, [pc, #88]	@ (8000368 <main+0xd8>)
 8000310:	f009 fd0a 	bl	8009d28 <CDC_Transmit_FS>
	  		  HAL_Delay(1);
 8000314:	2001      	movs	r0, #1
 8000316:	f000 fe65 	bl	8000fe4 <HAL_Delay>


	  		  if(val == 300){
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <main+0xcc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000322:	d102      	bne.n	800032a <main+0x9a>
	  			  val = 0;
 8000324:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <main+0xcc>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
	  		  }
	  		 if(status == 0){
 800032a:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <main+0xc0>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d107      	bne.n	8000342 <main+0xb2>
	  		 HAL_TIM_Base_Start_IT(&htim1);}
 8000332:	4808      	ldr	r0, [pc, #32]	@ (8000354 <main+0xc4>)
 8000334:	f004 fbec 	bl	8004b10 <HAL_TIM_Base_Start_IT>
	  		  break;
 8000338:	e003      	b.n	8000342 <main+0xb2>
	  		  break;
 800033a:	bf00      	nop
 800033c:	e7be      	b.n	80002bc <main+0x2c>
	  		  break;
 800033e:	bf00      	nop
 8000340:	e7bc      	b.n	80002bc <main+0x2c>
	  		  break;
 8000342:	bf00      	nop
	  switch(state){
 8000344:	e7ba      	b.n	80002bc <main+0x2c>
 8000346:	bf00      	nop
 8000348:	20000000 	.word	0x20000000
 800034c:	20000a5a 	.word	0x20000a5a
 8000350:	20000004 	.word	0x20000004
 8000354:	20000a60 	.word	0x20000a60
 8000358:	20000a44 	.word	0x20000a44
 800035c:	20000a54 	.word	0x20000a54
 8000360:	20000240 	.word	0x20000240
 8000364:	0800af60 	.word	0x0800af60
 8000368:	20000a48 	.word	0x20000a48

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b0a6      	sub	sp, #152	@ 0x98
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000376:	2228      	movs	r2, #40	@ 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f00a f964 	bl	800a648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2258      	movs	r2, #88	@ 0x58
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f00a f956 	bl	800a648 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039c:	2301      	movs	r3, #1
 800039e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003a4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a6:	2301      	movs	r3, #1
 80003a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003aa:	2302      	movs	r3, #2
 80003ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 feca 	bl	8003164 <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003d6:	f000 fc47 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003de:	2302      	movs	r3, #2
 80003e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003f4:	2102      	movs	r1, #2
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 ff08 	bl	800420c <HAL_RCC_ClockConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000402:	f000 fc31 	bl	8000c68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_TIM1
 8000406:	4b0a      	ldr	r3, [pc, #40]	@ (8000430 <SystemClock_Config+0xc4>)
 8000408:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800040a:	2300      	movs	r3, #0
 800040c:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800040e:	2300      	movs	r3, #0
 8000410:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000412:	2300      	movs	r3, #0
 8000414:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4618      	mov	r0, r3
 800041a:	f004 f8dd 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000424:	f000 fc20 	bl	8000c68 <Error_Handler>
  }
}
 8000428:	bf00      	nop
 800042a:	3798      	adds	r7, #152	@ 0x98
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00821000 	.word	0x00821000

08000434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(int period)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b09c      	sub	sp, #112	@ 0x70
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000456:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	222c      	movs	r2, #44	@ 0x2c
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f00a f8e8 	bl	800a648 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000478:	4b48      	ldr	r3, [pc, #288]	@ (800059c <MX_TIM1_Init+0x168>)
 800047a:	4a49      	ldr	r2, [pc, #292]	@ (80005a0 <MX_TIM1_Init+0x16c>)
 800047c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800047e:	4b47      	ldr	r3, [pc, #284]	@ (800059c <MX_TIM1_Init+0x168>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b45      	ldr	r3, [pc, #276]	@ (800059c <MX_TIM1_Init+0x168>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = period-1;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3b01      	subs	r3, #1
 800048e:	461a      	mov	r2, r3
 8000490:	4b42      	ldr	r3, [pc, #264]	@ (800059c <MX_TIM1_Init+0x168>)
 8000492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000494:	4b41      	ldr	r3, [pc, #260]	@ (800059c <MX_TIM1_Init+0x168>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800049a:	4b40      	ldr	r3, [pc, #256]	@ (800059c <MX_TIM1_Init+0x168>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a0:	4b3e      	ldr	r3, [pc, #248]	@ (800059c <MX_TIM1_Init+0x168>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004a6:	483d      	ldr	r0, [pc, #244]	@ (800059c <MX_TIM1_Init+0x168>)
 80004a8:	f004 fab4 	bl	8004a14 <HAL_TIM_Base_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80004b2:	f000 fbd9 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004ba:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004bc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80004c0:	4619      	mov	r1, r3
 80004c2:	4836      	ldr	r0, [pc, #216]	@ (800059c <MX_TIM1_Init+0x168>)
 80004c4:	f004 fe28 	bl	8005118 <HAL_TIM_ConfigClockSource>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80004ce:	f000 fbcb 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d2:	4832      	ldr	r0, [pc, #200]	@ (800059c <MX_TIM1_Init+0x168>)
 80004d4:	f004 fb8c 	bl	8004bf0 <HAL_TIM_PWM_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80004de:	f000 fbc3 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e2:	2300      	movs	r3, #0
 80004e4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80004f2:	4619      	mov	r1, r3
 80004f4:	4829      	ldr	r0, [pc, #164]	@ (800059c <MX_TIM1_Init+0x168>)
 80004f6:	f005 fb3f 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000500:	f000 fbb2 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000504:	2360      	movs	r3, #96	@ 0x60
 8000506:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 10;
 8000508:	230a      	movs	r3, #10
 800050a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800050c:	2300      	movs	r3, #0
 800050e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000510:	2300      	movs	r3, #0
 8000512:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000518:	2300      	movs	r3, #0
 800051a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000520:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000524:	2200      	movs	r2, #0
 8000526:	4619      	mov	r1, r3
 8000528:	481c      	ldr	r0, [pc, #112]	@ (800059c <MX_TIM1_Init+0x168>)
 800052a:	f004 fce1 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000534:	f000 fb98 	bl	8000c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800054c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000550:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800055a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	480b      	ldr	r0, [pc, #44]	@ (800059c <MX_TIM1_Init+0x168>)
 8000570:	f005 fb8e 	bl	8005c90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800057a:	f000 fb75 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

  HAL_TIM_Base_Init(&htim1);
 800057e:	4807      	ldr	r0, [pc, #28]	@ (800059c <MX_TIM1_Init+0x168>)
 8000580:	f004 fa48 	bl	8004a14 <HAL_TIM_Base_Init>

  // Configure DMA request on update event
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <MX_TIM1_Init+0x168>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68da      	ldr	r2, [r3, #12]
 800058a:	4b04      	ldr	r3, [pc, #16]	@ (800059c <MX_TIM1_Init+0x168>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000592:	60da      	str	r2, [r3, #12]

}
 8000594:	bf00      	nop
 8000596:	3770      	adds	r7, #112	@ 0x70
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000a60 	.word	0x20000a60
 80005a0:	40012c00 	.word	0x40012c00

080005a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005aa:	4a10      	ldr	r2, [pc, #64]	@ (80005ec <MX_TIM16_Init+0x48>)
 80005ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005b0:	2247      	movs	r2, #71	@ 0x47
 80005b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 6554-1;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005bc:	f641 1299 	movw	r2, #6553	@ 0x1999
 80005c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <MX_TIM16_Init+0x44>)
 80005d6:	f004 fa1d 	bl	8004a14 <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80005e0:	f000 fb42 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000aac 	.word	0x20000aac
 80005ec:	40014400 	.word	0x40014400

080005f0 <HAL_TIM_PeriodElapsedCallback>:

uint16_t trigPin;
uint16_t trigEdge; //Falling Edge
int triggerCount = 300;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a30      	ldr	r2, [pc, #192]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d10b      	bne.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x28>
		trigger = 0;
 8000600:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
		state = postTrigger;
 8000606:	4b2f      	ldr	r3, [pc, #188]	@ (80006c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim1);
 800060c:	482e      	ldr	r0, [pc, #184]	@ (80006c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800060e:	f004 fa58 	bl	8004ac2 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim16);
 8000612:	482a      	ldr	r0, [pc, #168]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000614:	f004 fa55 	bl	8004ac2 <HAL_TIM_Base_Stop>
	}
	if (htim == &htim1) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a2b      	ldr	r2, [pc, #172]	@ (80006c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d149      	bne.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0xc4>
//			if (counter == triggerCount){
//				state = postTrigger;
//				HAL_TIM_Base_Stop(&htim1);
//			}
//		}
		if(!trigger) {
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d132      	bne.n	800068e <HAL_TIM_PeriodElapsedCallback+0x9e>
			xorResult = GPIOB->IDR^buffer[bufferPointer];
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4928      	ldr	r1, [pc, #160]	@ (80006d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000634:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000638:	4053      	eors	r3, r2
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800063e:	801a      	strh	r2, [r3, #0]
			uint16_t trigPinCheck = xorResult & trigPin;
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000642:	881a      	ldrh	r2, [r3, #0]
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	4013      	ands	r3, r2
 800064a:	81fb      	strh	r3, [r7, #14]
			uint16_t trigEdgeCheck = ~(buffer[bufferPointer]^trigEdge);
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000652:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	4053      	eors	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	81bb      	strh	r3, [r7, #12]
			trigger = (trigPinCheck & trigEdgeCheck) > 0;
 8000662:	89fa      	ldrh	r2, [r7, #14]
 8000664:	89bb      	ldrh	r3, [r7, #12]
 8000666:	4013      	ands	r3, r2
 8000668:	b29b      	uxth	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	bf14      	ite	ne
 800066e:	2301      	movne	r3, #1
 8000670:	2300      	moveq	r3, #0
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000678:	601a      	str	r2, [r3, #0]
			if (trigger){
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d005      	beq.n	800068e <HAL_TIM_PeriodElapsedCallback+0x9e>
				//start trigger timer
//				counter = 0;
				state = triggerState;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim16);
 8000688:	480c      	ldr	r0, [pc, #48]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800068a:	f004 fa41 	bl	8004b10 <HAL_TIM_Base_Start_IT>
			}
		}

		//add 8 bit logic input to buffer
		buffer[bufferPointer] = GPIOB->IDR;
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000690:	691a      	ldr	r2, [r3, #16]
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	b291      	uxth	r1, r2
 8000698:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800069a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//increments pointer with circular logic using logic gates
		bufferPointer++;
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006a6:	6013      	str	r3, [r2, #0]
		bufferPointer &= 0x03FF;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006b0:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006b2:	6013      	str	r3, [r2, #0]
//			if (bufferPointer > 1024){ // we can use and with 10 bits to with 0x03FF
//				bufferPointer = 0;
//			}
	}
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000aac 	.word	0x20000aac
 80006c0:	20000a44 	.word	0x20000a44
 80006c4:	20000a5a 	.word	0x20000a5a
 80006c8:	20000a60 	.word	0x20000a60
 80006cc:	48000400 	.word	0x48000400
 80006d0:	20000a40 	.word	0x20000a40
 80006d4:	20000240 	.word	0x20000240
 80006d8:	20000a58 	.word	0x20000a58
 80006dc:	20000b3c 	.word	0x20000b3c
 80006e0:	20000b3e 	.word	0x20000b3e

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b20      	ldr	r3, [pc, #128]	@ (800076c <MX_DMA_Init+0x88>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a1f      	ldr	r2, [pc, #124]	@ (800076c <MX_DMA_Init+0x88>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_DMA_Init+0x88>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  	  hdma_tim1_up.Instance = DMA1_Channel5;
 8000702:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <MX_DMA_Init+0x8c>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <MX_DMA_Init+0x90>)
 8000706:	601a      	str	r2, [r3, #0]
      hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_DMA_Init+0x8c>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
      hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_DMA_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
      hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_DMA_Init+0x8c>)
 8000716:	2280      	movs	r2, #128	@ 0x80
 8000718:	60da      	str	r2, [r3, #12]
      hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_DMA_Init+0x8c>)
 800071c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000720:	611a      	str	r2, [r3, #16]
      hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_DMA_Init+0x8c>)
 8000724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000728:	615a      	str	r2, [r3, #20]
      hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_DMA_Init+0x8c>)
 800072c:	2220      	movs	r2, #32
 800072e:	619a      	str	r2, [r3, #24]
      hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_DMA_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]

      //HAL_DMA_Init(&hdma_tim1_up);

      if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000736:	480e      	ldr	r0, [pc, #56]	@ (8000770 <MX_DMA_Init+0x8c>)
 8000738:	f000 fd89 	bl	800124e <HAL_DMA_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_DMA_Init+0x62>
          {
              Error_Handler();
 8000742:	f000 fa91 	bl	8000c68 <Error_Handler>
          }

      __HAL_LINKDMA(&htim1, hdma[TIM_DMA_ID_UPDATE], hdma_tim1_up);
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_DMA_Init+0x94>)
 8000748:	4a09      	ldr	r2, [pc, #36]	@ (8000770 <MX_DMA_Init+0x8c>)
 800074a:	621a      	str	r2, [r3, #32]
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_DMA_Init+0x8c>)
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <MX_DMA_Init+0x94>)
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200f      	movs	r0, #15
 8000758:	f000 fd43 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800075c:	200f      	movs	r0, #15
 800075e:	f000 fd5c 	bl	800121a <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	20000af8 	.word	0x20000af8
 8000774:	40020058 	.word	0x40020058
 8000778:	20000a60 	.word	0x20000a60

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_GPIO_Init+0xac>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a24      	ldr	r2, [pc, #144]	@ (8000828 <MX_GPIO_Init+0xac>)
 8000798:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_GPIO_Init+0xac>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e2:	f000 ffe5 	bl	80017b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007e6:	2320      	movs	r3, #32
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ee:	2302      	movs	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000800:	f000 fe4c 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000804:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000808:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080e:	2302      	movs	r3, #2
 8000810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_GPIO_Init+0xb0>)
 800081a:	f000 fe3f 	bl	800149c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400

08000830 <Process_USB_Command>:
uint8_t trigPIN[8]={0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
int Period_T1[10]={1000, 2000, 3000, 45000, 50000, 32000, 35000, 25000, 40000, 65536};

int command = 0;

void Process_USB_Command(char *cmd) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	//if its command state, convert to integer and take in the command value
	//value state
	command = atoi(cmd);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f009 fe5d 	bl	800a4f8 <atoi>
 800083e:	4603      	mov	r3, r0
 8000840:	4aa4      	ldr	r2, [pc, #656]	@ (8000ad4 <Process_USB_Command+0x2a4>)
 8000842:	6013      	str	r3, [r2, #0]
		switch(command){
 8000844:	4ba3      	ldr	r3, [pc, #652]	@ (8000ad4 <Process_USB_Command+0x2a4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b26      	cmp	r3, #38	@ 0x26
 800084a:	f200 81d1 	bhi.w	8000bf0 <Process_USB_Command+0x3c0>
 800084e:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <Process_USB_Command+0x24>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	080008f1 	.word	0x080008f1
 8000858:	080008f9 	.word	0x080008f9
 800085c:	08000901 	.word	0x08000901
 8000860:	08000907 	.word	0x08000907
 8000864:	0800090f 	.word	0x0800090f
 8000868:	0800091b 	.word	0x0800091b
 800086c:	08000927 	.word	0x08000927
 8000870:	08000933 	.word	0x08000933
 8000874:	0800093f 	.word	0x0800093f
 8000878:	0800094b 	.word	0x0800094b
 800087c:	08000957 	.word	0x08000957
 8000880:	08000963 	.word	0x08000963
 8000884:	0800096f 	.word	0x0800096f
 8000888:	0800097b 	.word	0x0800097b
 800088c:	08000987 	.word	0x08000987
 8000890:	08000993 	.word	0x08000993
 8000894:	0800099f 	.word	0x0800099f
 8000898:	080009ab 	.word	0x080009ab
 800089c:	080009b7 	.word	0x080009b7
 80008a0:	080009c3 	.word	0x080009c3
 80008a4:	080009cf 	.word	0x080009cf
 80008a8:	080009db 	.word	0x080009db
 80008ac:	080009e7 	.word	0x080009e7
 80008b0:	080009f3 	.word	0x080009f3
 80008b4:	08000a0f 	.word	0x08000a0f
 80008b8:	08000a2b 	.word	0x08000a2b
 80008bc:	08000a47 	.word	0x08000a47
 80008c0:	08000a63 	.word	0x08000a63
 80008c4:	08000a7f 	.word	0x08000a7f
 80008c8:	08000a9b 	.word	0x08000a9b
 80008cc:	08000ab7 	.word	0x08000ab7
 80008d0:	08000b11 	.word	0x08000b11
 80008d4:	08000b2d 	.word	0x08000b2d
 80008d8:	08000b49 	.word	0x08000b49
 80008dc:	08000b65 	.word	0x08000b65
 80008e0:	08000b81 	.word	0x08000b81
 80008e4:	08000b9d 	.word	0x08000b9d
 80008e8:	08000bb9 	.word	0x08000bb9
 80008ec:	08000bd5 	.word	0x08000bd5
		case 0://start
			status = 0;
 80008f0:	4b79      	ldr	r3, [pc, #484]	@ (8000ad8 <Process_USB_Command+0x2a8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
			break;
 80008f6:	e17b      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 1: //stop
			status = 1;
 80008f8:	4b77      	ldr	r3, [pc, #476]	@ (8000ad8 <Process_USB_Command+0x2a8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
			break;
 80008fe:	e177      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 2: //trigger Falling Edge
			trigEdge = 0x00;
 8000900:	4b76      	ldr	r3, [pc, #472]	@ (8000adc <Process_USB_Command+0x2ac>)
 8000902:	2200      	movs	r2, #0
 8000904:	801a      	strh	r2, [r3, #0]
		case 3: //trigger Rising Edge;
			trigEdge = 0x01;
 8000906:	4b75      	ldr	r3, [pc, #468]	@ (8000adc <Process_USB_Command+0x2ac>)
 8000908:	2201      	movs	r2, #1
 800090a:	801a      	strh	r2, [r3, #0]
			break;
 800090c:	e170      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 4: //trigger PIN from 0 to 7
			trigPin = trigPIN[0];
 800090e:	4b74      	ldr	r3, [pc, #464]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4b73      	ldr	r3, [pc, #460]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 8000916:	801a      	strh	r2, [r3, #0]
			break;
 8000918:	e16a      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 5:
			trigPin = trigPIN[1];
 800091a:	4b71      	ldr	r3, [pc, #452]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	461a      	mov	r2, r3
 8000920:	4b70      	ldr	r3, [pc, #448]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 8000922:	801a      	strh	r2, [r3, #0]
			break;
 8000924:	e164      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 6:
			trigPin = trigPIN[2];
 8000926:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	461a      	mov	r2, r3
 800092c:	4b6d      	ldr	r3, [pc, #436]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 800092e:	801a      	strh	r2, [r3, #0]
			break;
 8000930:	e15e      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 7:
			trigPin = trigPIN[3];
 8000932:	4b6b      	ldr	r3, [pc, #428]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 8000934:	78db      	ldrb	r3, [r3, #3]
 8000936:	461a      	mov	r2, r3
 8000938:	4b6a      	ldr	r3, [pc, #424]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 800093a:	801a      	strh	r2, [r3, #0]
			break;
 800093c:	e158      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 8:
			trigPin = trigPIN[4];
 800093e:	4b68      	ldr	r3, [pc, #416]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	461a      	mov	r2, r3
 8000944:	4b67      	ldr	r3, [pc, #412]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 8000946:	801a      	strh	r2, [r3, #0]
			break;
 8000948:	e152      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 9:
			trigPin = trigPIN[5];
 800094a:	4b65      	ldr	r3, [pc, #404]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	461a      	mov	r2, r3
 8000950:	4b64      	ldr	r3, [pc, #400]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 8000952:	801a      	strh	r2, [r3, #0]
			break;
 8000954:	e14c      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 10:
			trigPin = trigPIN[6];
 8000956:	4b62      	ldr	r3, [pc, #392]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 8000958:	799b      	ldrb	r3, [r3, #6]
 800095a:	461a      	mov	r2, r3
 800095c:	4b61      	ldr	r3, [pc, #388]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 800095e:	801a      	strh	r2, [r3, #0]
			break;
 8000960:	e146      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 11:
			trigPin = trigPIN[7];
 8000962:	4b5f      	ldr	r3, [pc, #380]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 8000964:	79db      	ldrb	r3, [r3, #7]
 8000966:	461a      	mov	r2, r3
 8000968:	4b5e      	ldr	r3, [pc, #376]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 800096a:	801a      	strh	r2, [r3, #0]
			break;
 800096c:	e140      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 12:
			trigPin = trigPIN[8];
 800096e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ae0 <Process_USB_Command+0x2b0>)
 8000970:	7a1b      	ldrb	r3, [r3, #8]
 8000972:	461a      	mov	r2, r3
 8000974:	4b5b      	ldr	r3, [pc, #364]	@ (8000ae4 <Process_USB_Command+0x2b4>)
 8000976:	801a      	strh	r2, [r3, #0]
			break;
 8000978:	e13a      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 13:
			change_period(Period_T1[0]);
 800097a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f94c 	bl	8000c1c <change_period>

			break;
 8000984:	e134      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 14:
			change_period(Period_T1[1]);
 8000986:	4b58      	ldr	r3, [pc, #352]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f946 	bl	8000c1c <change_period>

			break;
 8000990:	e12e      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 15:
			change_period(Period_T1[2]);
 8000992:	4b55      	ldr	r3, [pc, #340]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f940 	bl	8000c1c <change_period>

			break;
 800099c:	e128      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 16:
			change_period(Period_T1[3]);
 800099e:	4b52      	ldr	r3, [pc, #328]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f93a 	bl	8000c1c <change_period>

			break;
 80009a8:	e122      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 17:
			change_period(Period_T1[4]);
 80009aa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f934 	bl	8000c1c <change_period>

			break;
 80009b4:	e11c      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 18:
			change_period(Period_T1[5]);
 80009b6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f92e 	bl	8000c1c <change_period>

			break;
 80009c0:	e116      	b.n	8000bf0 <Process_USB_Command+0x3c0>
			
		case 19:
			change_period(Period_T1[6]);
 80009c2:	4b49      	ldr	r3, [pc, #292]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f928 	bl	8000c1c <change_period>

			break;
 80009cc:	e110      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 20:
			change_period(Period_T1[7]);
 80009ce:	4b46      	ldr	r3, [pc, #280]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f922 	bl	8000c1c <change_period>

			break;
 80009d8:	e10a      	b.n	8000bf0 <Process_USB_Command+0x3c0>
			
		case 21:
			change_period(Period_T1[8]);
 80009da:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 80009dc:	6a1b      	ldr	r3, [r3, #32]
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f91c 	bl	8000c1c <change_period>

			break;
 80009e4:	e104      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 22:
			change_period(Period_T1[9]);
 80009e6:	4b40      	ldr	r3, [pc, #256]	@ (8000ae8 <Process_USB_Command+0x2b8>)
 80009e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f916 	bl	8000c1c <change_period>

			break;
 80009f0:	e0fe      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 23:
			triggerPeriod ^= BIT0;
 80009f2:	4b3e      	ldr	r3, [pc, #248]	@ (8000aec <Process_USB_Command+0x2bc>)
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	4b3e      	ldr	r3, [pc, #248]	@ (8000af0 <Process_USB_Command+0x2c0>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	4053      	eors	r3, r2
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b3b      	ldr	r3, [pc, #236]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a00:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000a02:	4b3a      	ldr	r3, [pc, #232]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f91c 	bl	8000c44 <change_period16>
			break;
 8000a0c:	e0f0      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 24:
			triggerPeriod ^= BIT1;
 8000a0e:	4b37      	ldr	r3, [pc, #220]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a10:	881a      	ldrh	r2, [r3, #0]
 8000a12:	4b38      	ldr	r3, [pc, #224]	@ (8000af4 <Process_USB_Command+0x2c4>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	4053      	eors	r3, r2
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	4b34      	ldr	r3, [pc, #208]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a1c:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000a1e:	4b33      	ldr	r3, [pc, #204]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f90e 	bl	8000c44 <change_period16>
			break;
 8000a28:	e0e2      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 25:
			triggerPeriod ^= BIT2;
 8000a2a:	4b30      	ldr	r3, [pc, #192]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a2c:	881a      	ldrh	r2, [r3, #0]
 8000a2e:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <Process_USB_Command+0x2c8>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4053      	eors	r3, r2
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a38:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f900 	bl	8000c44 <change_period16>
			break;
 8000a44:	e0d4      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 26:
			triggerPeriod ^= BIT3;
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a48:	881a      	ldrh	r2, [r3, #0]
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <Process_USB_Command+0x2cc>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	4053      	eors	r3, r2
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a54:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000a56:	4b25      	ldr	r3, [pc, #148]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f8f2 	bl	8000c44 <change_period16>
			break;
 8000a60:	e0c6      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 27:
			triggerPeriod ^= BIT4;
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a64:	881a      	ldrh	r2, [r3, #0]
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <Process_USB_Command+0x2d0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	4053      	eors	r3, r2
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a70:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f8e4 	bl	8000c44 <change_period16>
			break;
 8000a7c:	e0b8      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 28:
			triggerPeriod ^= BIT5;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <Process_USB_Command+0x2d4>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	4053      	eors	r3, r2
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a8c:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f8d6 	bl	8000c44 <change_period16>
			break;
 8000a98:	e0aa      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 29:
			triggerPeriod ^= BIT6;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000a9c:	881a      	ldrh	r2, [r3, #0]
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <Process_USB_Command+0x2d8>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	4053      	eors	r3, r2
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000aa8:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c8 	bl	8000c44 <change_period16>
			break;
 8000ab4:	e09c      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 30:
			triggerPeriod ^= BIT7;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000ab8:	881a      	ldrh	r2, [r3, #0]
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <Process_USB_Command+0x2dc>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	4053      	eors	r3, r2
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000ac4:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <Process_USB_Command+0x2bc>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8ba 	bl	8000c44 <change_period16>
			break;
 8000ad0:	e08e      	b.n	8000bf0 <Process_USB_Command+0x3c0>
 8000ad2:	bf00      	nop
 8000ad4:	20000b40 	.word	0x20000b40
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	20000b3e 	.word	0x20000b3e
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	20000b3c 	.word	0x20000b3c
 8000ae8:	20000030 	.word	0x20000030
 8000aec:	20000a5c 	.word	0x20000a5c
 8000af0:	20000008 	.word	0x20000008
 8000af4:	2000000a 	.word	0x2000000a
 8000af8:	2000000c 	.word	0x2000000c
 8000afc:	2000000e 	.word	0x2000000e
 8000b00:	20000010 	.word	0x20000010
 8000b04:	20000012 	.word	0x20000012
 8000b08:	20000014 	.word	0x20000014
 8000b0c:	20000016 	.word	0x20000016
		case 31:
			triggerPeriod ^= BIT8;
 8000b10:	4b39      	ldr	r3, [pc, #228]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b12:	881a      	ldrh	r2, [r3, #0]
 8000b14:	4b39      	ldr	r3, [pc, #228]	@ (8000bfc <Process_USB_Command+0x3cc>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b36      	ldr	r3, [pc, #216]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b1e:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000b20:	4b35      	ldr	r3, [pc, #212]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f88d 	bl	8000c44 <change_period16>
			break;
 8000b2a:	e061      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 32:
			triggerPeriod ^= BIT9;
 8000b2c:	4b32      	ldr	r3, [pc, #200]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b2e:	881a      	ldrh	r2, [r3, #0]
 8000b30:	4b33      	ldr	r3, [pc, #204]	@ (8000c00 <Process_USB_Command+0x3d0>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	4053      	eors	r3, r2
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b3a:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f87f 	bl	8000c44 <change_period16>
			break;
 8000b46:	e053      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 33:
			triggerPeriod ^= BIT10;
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b4a:	881a      	ldrh	r2, [r3, #0]
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <Process_USB_Command+0x3d4>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	4053      	eors	r3, r2
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b28      	ldr	r3, [pc, #160]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b56:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f871 	bl	8000c44 <change_period16>
			break;
 8000b62:	e045      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 34:
			triggerPeriod ^= BIT11;
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b66:	881a      	ldrh	r2, [r3, #0]
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <Process_USB_Command+0x3d8>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	4053      	eors	r3, r2
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b72:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f863 	bl	8000c44 <change_period16>
			break;
 8000b7e:	e037      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 35:
			triggerPeriod ^= BIT12;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b82:	881a      	ldrh	r2, [r3, #0]
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <Process_USB_Command+0x3dc>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4053      	eors	r3, r2
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b8e:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000b90:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f855 	bl	8000c44 <change_period16>
			break;
 8000b9a:	e029      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 36:
			triggerPeriod ^= BIT13;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <Process_USB_Command+0x3e0>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	4053      	eors	r3, r2
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000baa:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f847 	bl	8000c44 <change_period16>
			break;
 8000bb6:	e01b      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 37:
			triggerPeriod ^= BIT14;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000bba:	881a      	ldrh	r2, [r3, #0]
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <Process_USB_Command+0x3e4>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	4053      	eors	r3, r2
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000bc6:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f839 	bl	8000c44 <change_period16>
			break;
 8000bd2:	e00d      	b.n	8000bf0 <Process_USB_Command+0x3c0>
		case 38:
			triggerPeriod ^= BIT15;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000bd6:	881a      	ldrh	r2, [r3, #0]
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <Process_USB_Command+0x3e8>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	4053      	eors	r3, r2
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000be2:	801a      	strh	r2, [r3, #0]
			change_period16(triggerPeriod);
 8000be4:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <Process_USB_Command+0x3c8>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f82b 	bl	8000c44 <change_period16>
			break;
 8000bee:	bf00      	nop

		}		
	}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000a5c 	.word	0x20000a5c
 8000bfc:	20000018 	.word	0x20000018
 8000c00:	2000001a 	.word	0x2000001a
 8000c04:	2000001c 	.word	0x2000001c
 8000c08:	2000001e 	.word	0x2000001e
 8000c0c:	20000020 	.word	0x20000020
 8000c10:	20000022 	.word	0x20000022
 8000c14:	20000024 	.word	0x20000024
 8000c18:	20000026 	.word	0x20000026

08000c1c <change_period>:
//
//    else {
//        // Handle invalid rate input (optional)
//    }

void change_period(int period){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop(&htim1);
 8000c24:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <change_period+0x24>)
 8000c26:	f003 ff4c 	bl	8004ac2 <HAL_TIM_Base_Stop>
	
	MX_TIM1_Init(period);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fc02 	bl	8000434 <MX_TIM1_Init>
	
	HAL_TIM_Base_Start_IT(&htim1);
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <change_period+0x24>)
 8000c32:	f003 ff6d 	bl	8004b10 <HAL_TIM_Base_Start_IT>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000a60 	.word	0x20000a60

08000c44 <change_period16>:
void change_period16(uint16_t period){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Stop(&htim16);
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <change_period16+0x20>)
 8000c50:	f003 ff37 	bl	8004ac2 <HAL_TIM_Base_Stop>

	MX_TIM1_Init(period);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fbec 	bl	8000434 <MX_TIM1_Init>
	
//	HAL_TIM_Base_Start_IT(&htim16);
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000aac 	.word	0x20000aac

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000caa:	2007      	movs	r0, #7
 8000cac:	f000 fa8e 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8000d84 <HAL_TIM_Base_MspInit+0xc8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d13c      	bne.n	8000d48 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	4b2e      	ldr	r3, [pc, #184]	@ (8000d88 <HAL_TIM_Base_MspInit+0xcc>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d88 <HAL_TIM_Base_MspInit+0xcc>)
 8000cd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <HAL_TIM_Base_MspInit+0xcc>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000ce8:	4a29      	ldr	r2, [pc, #164]	@ (8000d90 <HAL_TIM_Base_MspInit+0xd4>)
 8000cea:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cec:	4b27      	ldr	r3, [pc, #156]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf2:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000cf8:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000cfa:	2280      	movs	r2, #128	@ 0x80
 8000cfc:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfe:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d04:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000d08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d0c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000d10:	2220      	movs	r2, #32
 8000d12:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000d1a:	481c      	ldr	r0, [pc, #112]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000d1c:	f000 fa97 	bl	800124e <HAL_DMA_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000d26:	f7ff ff9f 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000d2e:	621a      	str	r2, [r3, #32]
 8000d30:	4a16      	ldr	r2, [pc, #88]	@ (8000d8c <HAL_TIM_Base_MspInit+0xd0>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2019      	movs	r0, #25
 8000d3c:	f000 fa51 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d40:	2019      	movs	r0, #25
 8000d42:	f000 fa6a 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d46:	e018      	b.n	8000d7a <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM16)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <HAL_TIM_Base_MspInit+0xd8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d113      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_TIM_Base_MspInit+0xcc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <HAL_TIM_Base_MspInit+0xcc>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_TIM_Base_MspInit+0xcc>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2019      	movs	r0, #25
 8000d70:	f000 fa37 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d74:	2019      	movs	r0, #25
 8000d76:	f000 fa50 	bl	800121a <HAL_NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40012c00 	.word	0x40012c00
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	20000af8 	.word	0x20000af8
 8000d90:	40020058 	.word	0x40020058
 8000d94:	40014400 	.word	0x40014400

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <NMI_Handler+0x4>

08000da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dee:	f000 f8d9 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <DMA1_Channel5_IRQHandler+0x10>)
 8000dfe:	f000 fa6d 	bl	80012dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000af8 	.word	0x20000af8

08000e0c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000e12:	f000 fddd 	bl	80019d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20001814 	.word	0x20001814

08000e20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e26:	f003 ff44 	bl	8004cb2 <HAL_TIM_IRQHandler>
 // HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000a60 	.word	0x20000a60

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f009 fbf8 	bl	800a658 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20010000 	.word	0x20010000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	20000b44 	.word	0x20000b44
 8000e9c:	20001e68 	.word	0x20001e68

08000ea0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000efc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec8:	f7ff ffea 	bl	8000ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	@ (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f009 fbb7 	bl	800a664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef6:	f7ff f9cb 	bl	8000290 <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000efc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8000f08:	0800b124 	.word	0x0800b124
  ldr r2, =_sbss
 8000f0c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8000f10:	20001e68 	.word	0x20001e68

08000f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_2_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_Init+0x28>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_Init+0x28>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f94f 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fe9e 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f967 	bl	8001236 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f92f 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000058 	.word	0x20000058
 8000f9c:	20000060 	.word	0x20000060
 8000fa0:	2000005c 	.word	0x2000005c

08000fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000060 	.word	0x20000060
 8000fc8:	20000b48 	.word	0x20000b48

08000fcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000b48 	.word	0x20000b48

08000fe4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000060 	.word	0x20000060

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	@ (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	@ (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff3e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff31 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e037      	b.n	80012d4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800127a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800127e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f8b4 	bl	8001424 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}  
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	2204      	movs	r2, #4
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d024      	beq.n	800134e <HAL_DMA_IRQHandler+0x72>
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01f      	beq.n	800134e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	2b00      	cmp	r3, #0
 800131a:	d107      	bne.n	800132c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001334:	2104      	movs	r1, #4
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d06a      	beq.n	800141a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800134c:	e065      	b.n	800141a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	2202      	movs	r2, #2
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d02c      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xdc>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d027      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10b      	bne.n	800138e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 020a 	bic.w	r2, r2, #10
 8001384:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001396:	2102      	movs	r1, #2
 8001398:	fa01 f202 	lsl.w	r2, r1, r2
 800139c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d035      	beq.n	800141a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80013b6:	e030      	b.n	800141a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	2208      	movs	r2, #8
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d028      	beq.n	800141a <HAL_DMA_IRQHandler+0x13e>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d023      	beq.n	800141a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 020e 	bic.w	r2, r2, #14
 80013e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
    }
  }
}  
 8001418:	e7ff      	b.n	800141a <HAL_DMA_IRQHandler+0x13e>
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <DMA_CalcBaseAndBitshift+0x60>)
 8001434:	429a      	cmp	r2, r3
 8001436:	d80f      	bhi.n	8001458 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <DMA_CalcBaseAndBitshift+0x64>)
 8001440:	4413      	add	r3, r2
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <DMA_CalcBaseAndBitshift+0x68>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	009a      	lsls	r2, r3, #2
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <DMA_CalcBaseAndBitshift+0x6c>)
 8001454:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001456:	e00e      	b.n	8001476 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <DMA_CalcBaseAndBitshift+0x70>)
 8001460:	4413      	add	r3, r2
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <DMA_CalcBaseAndBitshift+0x68>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	009a      	lsls	r2, r3, #2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <DMA_CalcBaseAndBitshift+0x74>)
 8001474:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40020407 	.word	0x40020407
 8001488:	bffdfff8 	.word	0xbffdfff8
 800148c:	cccccccd 	.word	0xcccccccd
 8001490:	40020000 	.word	0x40020000
 8001494:	bffdfbf8 	.word	0xbffdfbf8
 8001498:	40020400 	.word	0x40020400

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e160      	b.n	800176e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8152 	beq.w	8001768 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d005      	beq.n	80014dc <HAL_GPIO_Init+0x40>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d130      	bne.n	800153e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001512:	2201      	movs	r2, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0201 	and.w	r2, r3, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b03      	cmp	r3, #3
 8001548:	d017      	beq.n	800157a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d123      	bne.n	80015ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	6939      	ldr	r1, [r7, #16]
 80015ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0203 	and.w	r2, r3, #3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80ac 	beq.w	8001768 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001610:	4b5e      	ldr	r3, [pc, #376]	@ (800178c <HAL_GPIO_Init+0x2f0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a5d      	ldr	r2, [pc, #372]	@ (800178c <HAL_GPIO_Init+0x2f0>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b5b      	ldr	r3, [pc, #364]	@ (800178c <HAL_GPIO_Init+0x2f0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001628:	4a59      	ldr	r2, [pc, #356]	@ (8001790 <HAL_GPIO_Init+0x2f4>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001652:	d025      	beq.n	80016a0 <HAL_GPIO_Init+0x204>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a4f      	ldr	r2, [pc, #316]	@ (8001794 <HAL_GPIO_Init+0x2f8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d01f      	beq.n	800169c <HAL_GPIO_Init+0x200>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a4e      	ldr	r2, [pc, #312]	@ (8001798 <HAL_GPIO_Init+0x2fc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d019      	beq.n	8001698 <HAL_GPIO_Init+0x1fc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a4d      	ldr	r2, [pc, #308]	@ (800179c <HAL_GPIO_Init+0x300>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_GPIO_Init+0x1f8>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a4c      	ldr	r2, [pc, #304]	@ (80017a0 <HAL_GPIO_Init+0x304>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_GPIO_Init+0x1f4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a4b      	ldr	r2, [pc, #300]	@ (80017a4 <HAL_GPIO_Init+0x308>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x1f0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a4a      	ldr	r2, [pc, #296]	@ (80017a8 <HAL_GPIO_Init+0x30c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_Init+0x1ec>
 8001684:	2306      	movs	r3, #6
 8001686:	e00c      	b.n	80016a2 <HAL_GPIO_Init+0x206>
 8001688:	2307      	movs	r3, #7
 800168a:	e00a      	b.n	80016a2 <HAL_GPIO_Init+0x206>
 800168c:	2305      	movs	r3, #5
 800168e:	e008      	b.n	80016a2 <HAL_GPIO_Init+0x206>
 8001690:	2304      	movs	r3, #4
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_Init+0x206>
 8001694:	2303      	movs	r3, #3
 8001696:	e004      	b.n	80016a2 <HAL_GPIO_Init+0x206>
 8001698:	2302      	movs	r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x206>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_GPIO_Init+0x206>
 80016a0:	2300      	movs	r3, #0
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	4093      	lsls	r3, r2
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b2:	4937      	ldr	r1, [pc, #220]	@ (8001790 <HAL_GPIO_Init+0x2f4>)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c0:	4b3a      	ldr	r3, [pc, #232]	@ (80017ac <HAL_GPIO_Init+0x310>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016e4:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <HAL_GPIO_Init+0x310>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ea:	4b30      	ldr	r3, [pc, #192]	@ (80017ac <HAL_GPIO_Init+0x310>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800170e:	4a27      	ldr	r2, [pc, #156]	@ (80017ac <HAL_GPIO_Init+0x310>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001714:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <HAL_GPIO_Init+0x310>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001738:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <HAL_GPIO_Init+0x310>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_GPIO_Init+0x310>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <HAL_GPIO_Init+0x310>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	f47f ae97 	bne.w	80014ac <HAL_GPIO_Init+0x10>
  }
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000
 8001790:	40010000 	.word	0x40010000
 8001794:	48000400 	.word	0x48000400
 8001798:	48000800 	.word	0x48000800
 800179c:	48000c00 	.word	0x48000c00
 80017a0:	48001000 	.word	0x48001000
 80017a4:	48001400 	.word	0x48001400
 80017a8:	48001800 	.word	0x48001800
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
 80017bc:	4613      	mov	r3, r2
 80017be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c0:	787b      	ldrb	r3, [r7, #1]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	b08b      	sub	sp, #44	@ 0x2c
 80017e4:	af06      	add	r7, sp, #24
 80017e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0c4      	b.n	800197c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f008 fbc4 	bl	8009f94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2203      	movs	r2, #3
 8001810:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f004 faf4 	bl	8005e06 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e040      	b.n	80018a6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3301      	adds	r3, #1
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	3303      	adds	r3, #3
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	3338      	adds	r3, #56	@ 0x38
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	333c      	adds	r3, #60	@ 0x3c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	3340      	adds	r3, #64	@ 0x40
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	3301      	adds	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3b9      	bcc.n	8001824 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e044      	b.n	8001940 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	3301      	adds	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3b5      	bcc.n	80018b6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	687e      	ldr	r6, [r7, #4]
 8001952:	466d      	mov	r5, sp
 8001954:	f106 0410 	add.w	r4, r6, #16
 8001958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	602b      	str	r3, [r5, #0]
 8001960:	1d33      	adds	r3, r6, #4
 8001962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f004 fa69 	bl	8005e3c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001984 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_PCD_Start+0x16>
 8001996:	2302      	movs	r3, #2
 8001998:	e016      	b.n	80019c8 <HAL_PCD_Start+0x44>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 fa16 	bl	8005dd8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019ac:	2101      	movs	r1, #1
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f008 fd6a 	bl	800a488 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f006 fcd6 	bl	800836a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 fccf 	bl	8008380 <USB_ReadInterrupts>
 80019e2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fab2 	bl	8001f58 <PCD_EP_ISR_Handler>

    return;
 80019f4:	e0bd      	b.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a12:	b292      	uxth	r2, r2
 8001a14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f008 fb36 	bl	800a08a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f8a9 	bl	8001b78 <HAL_PCD_SetAddress>

    return;
 8001a26:	e0a4      	b.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00c      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a44:	b292      	uxth	r2, r2
 8001a46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a4a:	e092      	b.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00c      	beq.n	8001a70 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a6e:	e080      	b.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d027      	beq.n	8001aca <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0204 	bic.w	r2, r2, #4
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0208 	bic.w	r2, r2, #8
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f008 fb26 	bl	800a0fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ac8:	e053      	b.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d027      	beq.n	8001b24 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0208 	orr.w	r2, r2, #8
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001afe:	b292      	uxth	r2, r2
 8001b00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0204 	orr.w	r2, r2, #4
 8001b16:	b292      	uxth	r2, r2
 8001b18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f008 fad3 	bl	800a0c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b22:	e026      	b.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00f      	beq.n	8001b4e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b40:	b292      	uxth	r2, r2
 8001b42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f008 fa91 	bl	800a06e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b4c:	e011      	b.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b70:	bf00      	nop
  }
}
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_PCD_SetAddress+0x1a>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e013      	b.n	8001bba <HAL_PCD_SetAddress+0x42>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 fbc9 	bl	8008342 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	4608      	mov	r0, r1
 8001bcc:	4611      	mov	r1, r2
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	70fb      	strb	r3, [r7, #3]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	803b      	strh	r3, [r7, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da0e      	bge.n	8001c06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00e      	b.n	8001c24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 0207 	and.w	r2, r3, #7
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c30:	883a      	ldrh	r2, [r7, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	78ba      	ldrb	r2, [r7, #2]
 8001c3a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c3c:	78bb      	ldrb	r3, [r7, #2]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d102      	bne.n	8001c48 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_PCD_EP_Open+0x94>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e00e      	b.n	8001c74 <HAL_PCD_EP_Open+0xb2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 f90b 	bl	8005e80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001c72:	7afb      	ldrb	r3, [r7, #11]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da0e      	bge.n	8001cae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	705a      	strb	r2, [r3, #1]
 8001cac:	e00e      	b.n	8001ccc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 0207 	and.w	r2, r3, #7
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_PCD_EP_Close+0x6a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e00e      	b.n	8001d04 <HAL_PCD_EP_Close+0x88>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68f9      	ldr	r1, [r7, #12]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fc87 	bl	8006608 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
 8001d1e:	f003 0207 	and.w	r2, r3, #7
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6979      	ldr	r1, [r7, #20]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 fe3f 	bl	80069e2 <USB_EPStartXfer>

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 0207 	and.w	r2, r3, #7
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001d90:	681b      	ldr	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	460b      	mov	r3, r1
 8001dac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fdf0 	bl	80069e2 <USB_EPStartXfer>

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0207 	and.w	r2, r3, #7
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d901      	bls.n	8001e2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e03e      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da0e      	bge.n	8001e50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	705a      	strb	r2, [r3, #1]
 8001e4e:	e00c      	b.n	8001e6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_EP_SetStall+0x7e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e00e      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0x9c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f006 f953 	bl	8008144 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d901      	bls.n	8001ece <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e040      	b.n	8001f50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da0e      	bge.n	8001ef4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	705a      	strb	r2, [r3, #1]
 8001ef2:	e00e      	b.n	8001f12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 0207 	and.w	r2, r3, #7
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_EP_ClrStall+0x82>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e00e      	b.n	8001f50 <HAL_PCD_EP_ClrStall+0xa0>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f006 f950 	bl	80081e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b096      	sub	sp, #88	@ 0x58
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f60:	e3b0      	b.n	80026c4 <PCD_EP_ISR_Handler+0x76c>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001f7c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 8172 	bne.w	800226a <PCD_EP_ISR_Handler+0x312>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d14f      	bne.n	8002032 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa2:	81fb      	strh	r3, [r7, #14]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	89fb      	ldrh	r3, [r7, #14]
 8001faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3328      	adds	r3, #40	@ 0x28
 8001fba:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	441a      	add	r2, r3
 8001fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f008 f820 	bl	800a03a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 835e 	beq.w	80026c4 <PCD_EP_ISR_Handler+0x76c>
 8002008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 8359 	bne.w	80026c4 <PCD_EP_ISR_Handler+0x76c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800201e:	b2da      	uxtb	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002030:	e348      	b.n	80026c4 <PCD_EP_ISR_Handler+0x76c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002038:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002044:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d032      	beq.n	80020b6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002058:	b29b      	uxth	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	4413      	add	r3, r2
 800206a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002076:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002084:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002088:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800208a:	b29b      	uxth	r3, r3
 800208c:	f006 f9ca 	bl	8008424 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29a      	uxth	r2, r3
 8002098:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800209c:	4013      	ands	r3, r2
 800209e:	823b      	strh	r3, [r7, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	8a3a      	ldrh	r2, [r7, #16]
 80020a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020aa:	b292      	uxth	r2, r2
 80020ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f007 ff96 	bl	8009fe0 <HAL_PCD_SetupStageCallback>
 80020b4:	e306      	b.n	80026c4 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020b6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f280 8302 	bge.w	80026c4 <PCD_EP_ISR_Handler+0x76c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020cc:	4013      	ands	r3, r2
 80020ce:	83fb      	strh	r3, [r7, #30]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	8bfa      	ldrh	r2, [r7, #30]
 80020d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020da:	b292      	uxth	r2, r2
 80020dc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002104:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d019      	beq.n	8002142 <PCD_EP_ISR_Handler+0x1ea>
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d015      	beq.n	8002142 <PCD_EP_ISR_Handler+0x1ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211c:	6959      	ldr	r1, [r3, #20]
 800211e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002120:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002124:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002126:	b29b      	uxth	r3, r3
 8002128:	f006 f97c 	bl	8008424 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	441a      	add	r2, r3
 8002136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002138:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800213a:	2100      	movs	r1, #0
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f007 ff61 	bl	800a004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800214c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 82b5 	bne.w	80026c4 <PCD_EP_ISR_Handler+0x76c>
 800215a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800215e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002162:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002166:	f000 82ad 	beq.w	80026c4 <PCD_EP_ISR_Handler+0x76c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	4413      	add	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002194:	b29a      	uxth	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b3e      	cmp	r3, #62	@ 0x3e
 80021a0:	d91d      	bls.n	80021de <PCD_EP_ISR_Handler+0x286>
 80021a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80021aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <PCD_EP_ISR_Handler+0x264>
 80021b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021b8:	3b01      	subs	r3, #1
 80021ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	e026      	b.n	800222c <PCD_EP_ISR_Handler+0x2d4>
 80021de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <PCD_EP_ISR_Handler+0x2a4>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	e017      	b.n	800222c <PCD_EP_ISR_Handler+0x2d4>
 80021fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	647b      	str	r3, [r7, #68]	@ 0x44
 8002204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <PCD_EP_ISR_Handler+0x2be>
 8002210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002212:	3301      	adds	r3, #1
 8002214:	647b      	str	r3, [r7, #68]	@ 0x44
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29a      	uxth	r2, r3
 800221c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221e:	b29b      	uxth	r3, r3
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	b29b      	uxth	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b29a      	uxth	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800223c:	827b      	strh	r3, [r7, #18]
 800223e:	8a7b      	ldrh	r3, [r7, #18]
 8002240:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002244:	827b      	strh	r3, [r7, #18]
 8002246:	8a7b      	ldrh	r3, [r7, #18]
 8002248:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800224c:	827b      	strh	r3, [r7, #18]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	8a7b      	ldrh	r3, [r7, #18]
 8002254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800225c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002264:	b29b      	uxth	r3, r3
 8002266:	8013      	strh	r3, [r2, #0]
 8002268:	e22c      	b.n	80026c4 <PCD_EP_ISR_Handler+0x76c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800227e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002282:	2b00      	cmp	r3, #0
 8002284:	f280 80f6 	bge.w	8002474 <PCD_EP_ISR_Handler+0x51c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29a      	uxth	r2, r3
 800229a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800229e:	4013      	ands	r3, r2
 80022a0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80022b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022ba:	b292      	uxth	r2, r2
 80022bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022be:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d6:	7b1b      	ldrb	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d123      	bne.n	8002324 <PCD_EP_ISR_Handler+0x3cc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002300:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002304:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 808e 	beq.w	800242a <PCD_EP_ISR_Handler+0x4d2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002314:	6959      	ldr	r1, [r3, #20]
 8002316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002318:	88da      	ldrh	r2, [r3, #6]
 800231a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800231e:	f006 f881 	bl	8008424 <USB_ReadPMA>
 8002322:	e082      	b.n	800242a <PCD_EP_ISR_Handler+0x4d2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002326:	78db      	ldrb	r3, [r3, #3]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d10a      	bne.n	8002342 <PCD_EP_ISR_Handler+0x3ea>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800232c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002330:	461a      	mov	r2, r3
 8002332:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f9d3 	bl	80026e0 <HAL_PCD_EP_DB_Receive>
 800233a:	4603      	mov	r3, r0
 800233c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002340:	e073      	b.n	800242a <PCD_EP_ISR_Handler+0x4d2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800235c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800237a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800237e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002382:	b29b      	uxth	r3, r3
 8002384:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d022      	beq.n	80023e6 <PCD_EP_ISR_Handler+0x48e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80023c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02c      	beq.n	800242a <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d6:	6959      	ldr	r1, [r3, #20]
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	891a      	ldrh	r2, [r3, #8]
 80023dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023e0:	f006 f820 	bl	8008424 <USB_ReadPMA>
 80023e4:	e021      	b.n	800242a <PCD_EP_ISR_Handler+0x4d2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800240e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <PCD_EP_ISR_Handler+0x4d2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241c:	6959      	ldr	r1, [r3, #20]
 800241e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002420:	895a      	ldrh	r2, [r3, #10]
 8002422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002426:	f005 fffd 	bl	8008424 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002432:	441a      	add	r2, r3
 8002434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002436:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002440:	441a      	add	r2, r3
 8002442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002444:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <PCD_EP_ISR_Handler+0x502>
 800244e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	429a      	cmp	r2, r3
 8002458:	d206      	bcs.n	8002468 <PCD_EP_ISR_Handler+0x510>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800245a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f007 fdcf 	bl	800a004 <HAL_PCD_DataOutStageCallback>
 8002466:	e005      	b.n	8002474 <PCD_EP_ISR_Handler+0x51c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800246e:	4618      	mov	r0, r3
 8002470:	f004 fab7 	bl	80069e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002474:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8121 	beq.w	80026c4 <PCD_EP_ISR_Handler+0x76c>
      {
        ep = &hpcd->IN_ep[epindex];
 8002482:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	441a      	add	r2, r3
 80024c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80024d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f040 80a2 	bne.w	8002620 <PCD_EP_ISR_Handler+0x6c8>
        {
          ep->xfer_len = 0U;
 80024dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80024e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e4:	7b1b      	ldrb	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8093 	beq.w	8002612 <PCD_EP_ISR_Handler+0x6ba>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d046      	beq.n	8002586 <PCD_EP_ISR_Handler+0x62e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d126      	bne.n	800254e <PCD_EP_ISR_Handler+0x5f6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	4413      	add	r3, r2
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
 8002518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00da      	lsls	r2, r3, #3
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	4413      	add	r3, r2
 8002522:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002526:	623b      	str	r3, [r7, #32]
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002532:	b29a      	uxth	r2, r3
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	e061      	b.n	8002612 <PCD_EP_ISR_Handler+0x6ba>
 800254e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d15d      	bne.n	8002612 <PCD_EP_ISR_Handler+0x6ba>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256a:	4413      	add	r3, r2
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800256e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	00da      	lsls	r2, r3, #3
 8002574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002576:	4413      	add	r3, r2
 8002578:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]
 8002584:	e045      	b.n	8002612 <PCD_EP_ISR_Handler+0x6ba>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800258c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d126      	bne.n	80025e2 <PCD_EP_ISR_Handler+0x68a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a8:	4413      	add	r3, r2
 80025aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	00da      	lsls	r2, r3, #3
 80025b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b4:	4413      	add	r3, r2
 80025b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80025ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025da:	b29a      	uxth	r2, r3
 80025dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e017      	b.n	8002612 <PCD_EP_ISR_Handler+0x6ba>
 80025e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d113      	bne.n	8002612 <PCD_EP_ISR_Handler+0x6ba>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f8:	4413      	add	r3, r2
 80025fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	00da      	lsls	r2, r3, #3
 8002602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002604:	4413      	add	r3, r2
 8002606:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800260a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800260c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260e:	2200      	movs	r2, #0
 8002610:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f007 fd0e 	bl	800a03a <HAL_PCD_DataInStageCallback>
 800261e:	e051      	b.n	80026c4 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d144      	bne.n	80026b6 <PCD_EP_ISR_Handler+0x75e>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	4413      	add	r3, r2
 8002646:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002650:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002656:	699a      	ldr	r2, [r3, #24]
 8002658:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800265c:	429a      	cmp	r2, r3
 800265e:	d907      	bls.n	8002670 <PCD_EP_ISR_Handler+0x718>
            {
              ep->xfer_len -= TxPctSize;
 8002660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002668:	1ad2      	subs	r2, r2, r3
 800266a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266c:	619a      	str	r2, [r3, #24]
 800266e:	e002      	b.n	8002676 <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              ep->xfer_len = 0U;
 8002670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <PCD_EP_ISR_Handler+0x734>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f007 fcd8 	bl	800a03a <HAL_PCD_DataInStageCallback>
 800268a:	e01b      	b.n	80026c4 <PCD_EP_ISR_Handler+0x76c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800268c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002694:	441a      	add	r2, r3
 8002696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002698:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800269a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026a2:	441a      	add	r2, r3
 80026a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026ae:	4618      	mov	r0, r3
 80026b0:	f004 f997 	bl	80069e2 <USB_EPStartXfer>
 80026b4:	e006      	b.n	80026c4 <PCD_EP_ISR_Handler+0x76c>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026ba:	461a      	mov	r2, r3
 80026bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f917 	bl	80028f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f6ff ac46 	blt.w	8001f62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3758      	adds	r7, #88	@ 0x58
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d07c      	beq.n	80027f2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4413      	add	r3, r2
 8002712:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	8b7b      	ldrh	r3, [r7, #26]
 8002724:	429a      	cmp	r2, r3
 8002726:	d306      	bcc.n	8002736 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	8b7b      	ldrh	r3, [r7, #26]
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	e002      	b.n	800273c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d123      	bne.n	800278c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800275a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800275e:	833b      	strh	r3, [r7, #24]
 8002760:	8b3b      	ldrh	r3, [r7, #24]
 8002762:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002766:	833b      	strh	r3, [r7, #24]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	8b3b      	ldrh	r3, [r7, #24]
 8002778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800277c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01f      	beq.n	80027d6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b0:	82fb      	strh	r3, [r7, #22]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	8afb      	ldrh	r3, [r7, #22]
 80027c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027d6:	8b7b      	ldrh	r3, [r7, #26]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8085 	beq.w	80028e8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6959      	ldr	r1, [r3, #20]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	891a      	ldrh	r2, [r3, #8]
 80027ea:	8b7b      	ldrh	r3, [r7, #26]
 80027ec:	f005 fe1a 	bl	8008424 <USB_ReadPMA>
 80027f0:	e07a      	b.n	80028e8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	4413      	add	r3, r2
 800280c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002816:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	8b7b      	ldrh	r3, [r7, #26]
 800281e:	429a      	cmp	r2, r3
 8002820:	d306      	bcc.n	8002830 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	8b7b      	ldrh	r3, [r7, #26]
 8002828:	1ad2      	subs	r2, r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	e002      	b.n	8002836 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d123      	bne.n	8002886 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002858:	83fb      	strh	r3, [r7, #30]
 800285a:	8bfb      	ldrh	r3, [r7, #30]
 800285c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002860:	83fb      	strh	r3, [r7, #30]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	441a      	add	r2, r3
 8002870:	8bfb      	ldrh	r3, [r7, #30]
 8002872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800287a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800287e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11f      	bne.n	80028d0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	83bb      	strh	r3, [r7, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028d0:	8b7b      	ldrh	r3, [r7, #26]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6959      	ldr	r1, [r3, #20]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	895a      	ldrh	r2, [r3, #10]
 80028e2:	8b7b      	ldrh	r3, [r7, #26]
 80028e4:	f005 fd9e 	bl	8008424 <USB_ReadPMA>
    }
  }

  return count;
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b0a4      	sub	sp, #144	@ 0x90
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	4613      	mov	r3, r2
 80028fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 81db 	beq.w	8002cc2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4413      	add	r3, r2
 8002926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002930:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800293c:	429a      	cmp	r2, r3
 800293e:	d907      	bls.n	8002950 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002948:	1ad2      	subs	r2, r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	619a      	str	r2, [r3, #24]
 800294e:	e002      	b.n	8002956 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 80b9 	bne.w	8002ad2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d126      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	4413      	add	r3, r2
 800297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	00da      	lsls	r2, r3, #3
 8002986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002988:	4413      	add	r3, r2
 800298a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800299a:	b29a      	uxth	r2, r3
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	e01a      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0xfa>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d116      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0xfa>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d2:	4413      	add	r3, r2
 80029d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	00da      	lsls	r2, r3, #3
 80029dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029de:	4413      	add	r3, r2
 80029e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80029e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	2200      	movs	r2, #0
 80029ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x156>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	00da      	lsls	r2, r3, #3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e017      	b.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d113      	bne.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	4413      	add	r3, r2
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00da      	lsls	r2, r3, #3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a70:	623b      	str	r3, [r7, #32]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	2200      	movs	r2, #0
 8002a76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f007 fadb 	bl	800a03a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 82fa 	beq.w	8003084 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aaa:	82fb      	strh	r3, [r7, #22]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	8afb      	ldrh	r3, [r7, #22]
 8002abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ac4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	8013      	strh	r3, [r2, #0]
 8002ad0:	e2d8      	b.n	8003084 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d021      	beq.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002af6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	441a      	add	r2, r3
 8002b08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f040 82ac 	bne.w	8003084 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b34:	441a      	add	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b42:	441a      	add	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d30b      	bcc.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b64:	1ad2      	subs	r2, r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	621a      	str	r2, [r3, #32]
 8002b6a:	e017      	b.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d108      	bne.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002b74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002b84:	e00a      	b.n	8002b9c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d165      	bne.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	4413      	add	r3, r2
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	00da      	lsls	r2, r3, #3
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be0:	2b3e      	cmp	r3, #62	@ 0x3e
 8002be2:	d91d      	bls.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x30c>
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	029b      	lsls	r3, r3, #10
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	e044      	b.n	8002caa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x34c>
 8002c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	e035      	b.n	8002caa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x366>
 8002c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c54:	3301      	adds	r3, #1
 8002c56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e01c      	b.n	8002caa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d118      	bne.n	8002caa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8c:	4413      	add	r3, r2
 8002c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	00da      	lsls	r2, r3, #3
 8002c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c98:	4413      	add	r3, r2
 8002c9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6959      	ldr	r1, [r3, #20]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	891a      	ldrh	r2, [r3, #8]
 8002cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f005 fb70 	bl	80083a0 <USB_WritePMA>
 8002cc0:	e1e0      	b.n	8003084 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d307      	bcc.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cfe:	1ad2      	subs	r2, r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	e002      	b.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f040 80c0 	bne.w	8002e96 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d126      	bne.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x47a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d32:	4413      	add	r3, r2
 8002d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	00da      	lsls	r2, r3, #3
 8002d3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d3e:	4413      	add	r3, r2
 8002d40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	e01a      	b.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d116      	bne.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d88:	4413      	add	r3, r2
 8002d8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	00da      	lsls	r2, r3, #3
 8002d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d94:	4413      	add	r3, r2
 8002d96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d9e:	2200      	movs	r2, #0
 8002da0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d12b      	bne.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x516>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc4:	4413      	add	r3, r2
 8002dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	00da      	lsls	r2, r3, #3
 8002dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	e017      	b.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x546>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d113      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x546>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e1e:	4413      	add	r3, r2
 8002e20:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	00da      	lsls	r2, r3, #3
 8002e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e30:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e34:	2200      	movs	r2, #0
 8002e36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f007 f8fb 	bl	800a03a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 811a 	bne.w	8003084 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8013      	strh	r3, [r2, #0]
 8002e94:	e0f6      	b.n	8003084 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d121      	bne.n	8002ee4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	441a      	add	r2, r3
 8002ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ed8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 80ca 	bne.w	8003084 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ef8:	441a      	add	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f06:	441a      	add	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d30b      	bcc.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f28:	1ad2      	subs	r2, r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	621a      	str	r2, [r3, #32]
 8002f2e:	e017      	b.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d108      	bne.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002f38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f48:	e00a      	b.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d165      	bne.n	800303a <HAL_PCD_EP_DB_Transmit+0x748>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f82:	4413      	add	r3, r2
 8002f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	00da      	lsls	r2, r3, #3
 8002f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f8e:	4413      	add	r3, r2
 8002f90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002faa:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fac:	d91d      	bls.n	8002fea <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e041      	b.n	800306e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_PCD_EP_DB_Transmit+0x716>
 8002ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003000:	b29a      	uxth	r2, r3
 8003002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	e032      	b.n	800306e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_PCD_EP_DB_Transmit+0x730>
 800301c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800301e:	3301      	adds	r3, #1
 8003020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29a      	uxth	r2, r3
 8003028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302a:	b29b      	uxth	r3, r3
 800302c:	029b      	lsls	r3, r3, #10
 800302e:	b29b      	uxth	r3, r3
 8003030:	4313      	orrs	r3, r2
 8003032:	b29a      	uxth	r2, r3
 8003034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	e019      	b.n	800306e <HAL_PCD_EP_DB_Transmit+0x77c>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d115      	bne.n	800306e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003050:	4413      	add	r3, r2
 8003052:	657b      	str	r3, [r7, #84]	@ 0x54
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	00da      	lsls	r2, r3, #3
 800305a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305c:	4413      	add	r3, r2
 800305e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003062:	653b      	str	r3, [r7, #80]	@ 0x50
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003068:	b29a      	uxth	r2, r3
 800306a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800306c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6959      	ldr	r1, [r3, #20]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	895a      	ldrh	r2, [r3, #10]
 800307a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800307e:	b29b      	uxth	r3, r3
 8003080:	f005 f98e 	bl	80083a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800309a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800309e:	82bb      	strh	r3, [r7, #20]
 80030a0:	8abb      	ldrh	r3, [r7, #20]
 80030a2:	f083 0310 	eor.w	r3, r3, #16
 80030a6:	82bb      	strh	r3, [r7, #20]
 80030a8:	8abb      	ldrh	r3, [r7, #20]
 80030aa:	f083 0320 	eor.w	r3, r3, #32
 80030ae:	82bb      	strh	r3, [r7, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	8abb      	ldrh	r3, [r7, #20]
 80030c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3790      	adds	r7, #144	@ 0x90
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	817b      	strh	r3, [r7, #10]
 80030ec:	4613      	mov	r3, r2
 80030ee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030f0:	897b      	ldrh	r3, [r7, #10]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e009      	b.n	8003128 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003114:	897a      	ldrh	r2, [r7, #10]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003128:	893b      	ldrh	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	b29a      	uxth	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	80da      	strh	r2, [r3, #6]
 800313c:	e00b      	b.n	8003156 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2201      	movs	r2, #1
 8003142:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	b29a      	uxth	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	b29a      	uxth	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800316a:	af00      	add	r7, sp, #0
 800316c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003170:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003174:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f001 b83a 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800318e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 816f 	beq.w	800347e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031a0:	4bb5      	ldr	r3, [pc, #724]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d00c      	beq.n	80031c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031ac:	4bb2      	ldr	r3, [pc, #712]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d15c      	bne.n	8003272 <HAL_RCC_OscConfig+0x10e>
 80031b8:	4baf      	ldr	r3, [pc, #700]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c4:	d155      	bne.n	8003272 <HAL_RCC_OscConfig+0x10e>
 80031c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031ca:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_RCC_OscConfig+0x94>
 80031f2:	4ba1      	ldr	r3, [pc, #644]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	e015      	b.n	8003224 <HAL_RCC_OscConfig+0xc0>
 80031f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031fc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800320c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003210:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003214:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003220:	4b95      	ldr	r3, [pc, #596]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003228:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800322c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003238:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800323c:	fab2 f282 	clz	r2, r2
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f042 0220 	orr.w	r2, r2, #32
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	f002 021f 	and.w	r2, r2, #31
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f202 	lsl.w	r2, r1, r2
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8111 	beq.w	800347c <HAL_RCC_OscConfig+0x318>
 800325a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 8108 	bne.w	800347c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f000 bfc6 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003276:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x12e>
 8003284:	4b7c      	ldr	r3, [pc, #496]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a7b      	ldr	r2, [pc, #492]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e036      	b.n	8003300 <HAL_RCC_OscConfig+0x19c>
 8003292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003296:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x158>
 80032a2:	4b75      	ldr	r3, [pc, #468]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a74      	ldr	r2, [pc, #464]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b72      	ldr	r3, [pc, #456]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a71      	ldr	r2, [pc, #452]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e021      	b.n	8003300 <HAL_RCC_OscConfig+0x19c>
 80032bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x184>
 80032ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a69      	ldr	r2, [pc, #420]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b67      	ldr	r3, [pc, #412]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a66      	ldr	r2, [pc, #408]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0x19c>
 80032e8:	4b63      	ldr	r3, [pc, #396]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a62      	ldr	r2, [pc, #392]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b60      	ldr	r3, [pc, #384]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 80032fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032fe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003304:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d059      	beq.n	80033c4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fd fe5c 	bl	8000fcc <HAL_GetTick>
 8003314:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331a:	f7fd fe57 	bl	8000fcc <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	@ 0x64
 8003328:	d902      	bls.n	8003330 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	f000 bf67 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
 8003330:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003334:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003344:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d102      	bne.n	8003362 <HAL_RCC_OscConfig+0x1fe>
 800335c:	4b46      	ldr	r3, [pc, #280]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x22a>
 8003362:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003366:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003376:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800337a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800337e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800338a:	4b3b      	ldr	r3, [pc, #236]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003392:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003396:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800339a:	fa92 f2a2 	rbit	r2, r2
 800339e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80033a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f042 0220 	orr.w	r2, r2, #32
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ab      	beq.n	800331a <HAL_RCC_OscConfig+0x1b6>
 80033c2:	e05c      	b.n	800347e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fe02 	bl	8000fcc <HAL_GetTick>
 80033c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ce:	f7fd fdfd 	bl	8000fcc <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	@ 0x64
 80033dc:	d902      	bls.n	80033e4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	f000 bf0d 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
 80033e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80033f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_RCC_OscConfig+0x2b2>
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x2de>
 8003416:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800341a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800342a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800342e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003432:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800343e:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <HAL_RCC_OscConfig+0x314>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003446:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800344a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800344e:	fa92 f2a2 	rbit	r2, r2
 8003452:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003456:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f042 0220 	orr.w	r2, r2, #32
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f002 021f 	and.w	r2, r2, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ab      	bne.n	80033ce <HAL_RCC_OscConfig+0x26a>
 8003476:	e002      	b.n	800347e <HAL_RCC_OscConfig+0x31a>
 8003478:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003482:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 817f 	beq.w	8003792 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003494:	4ba7      	ldr	r3, [pc, #668]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034a0:	4ba4      	ldr	r3, [pc, #656]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d173      	bne.n	8003594 <HAL_RCC_OscConfig+0x430>
 80034ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b8:	d16c      	bne.n	8003594 <HAL_RCC_OscConfig+0x430>
 80034ba:	2302      	movs	r3, #2
 80034bc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80034cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d102      	bne.n	80034ea <HAL_RCC_OscConfig+0x386>
 80034e4:	4b93      	ldr	r3, [pc, #588]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e013      	b.n	8003512 <HAL_RCC_OscConfig+0x3ae>
 80034ea:	2302      	movs	r3, #2
 80034ec:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80034fc:	2302      	movs	r3, #2
 80034fe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003502:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800350e:	4b89      	ldr	r3, [pc, #548]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003512:	2202      	movs	r2, #2
 8003514:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003518:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800351c:	fa92 f2a2 	rbit	r2, r2
 8003520:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003524:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003528:	fab2 f282 	clz	r2, r2
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f002 021f 	and.w	r2, r2, #31
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCC_OscConfig+0x3f6>
 8003544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003548:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d002      	beq.n	800355a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f000 be52 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355a:	4b76      	ldr	r3, [pc, #472]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003566:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	21f8      	movs	r1, #248	@ 0xf8
 8003570:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003578:	fa91 f1a1 	rbit	r1, r1
 800357c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003580:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003584:	fab1 f181 	clz	r1, r1
 8003588:	b2c9      	uxtb	r1, r1
 800358a:	408b      	lsls	r3, r1
 800358c:	4969      	ldr	r1, [pc, #420]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e0fe      	b.n	8003792 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003598:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8088 	beq.w	80036b6 <HAL_RCC_OscConfig+0x552>
 80035a6:	2301      	movs	r3, #1
 80035a8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80035b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	461a      	mov	r2, r3
 80035ce:	2301      	movs	r3, #1
 80035d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fd fcfb 	bl	8000fcc <HAL_GetTick>
 80035d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fd fcf6 	bl	8000fcc <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d902      	bls.n	80035f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	f000 be06 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003604:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d102      	bne.n	8003622 <HAL_RCC_OscConfig+0x4be>
 800361c:	4b45      	ldr	r3, [pc, #276]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	e013      	b.n	800364a <HAL_RCC_OscConfig+0x4e6>
 8003622:	2302      	movs	r3, #2
 8003624:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003634:	2302      	movs	r3, #2
 8003636:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800363a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003646:	4b3b      	ldr	r3, [pc, #236]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	2202      	movs	r2, #2
 800364c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003650:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003654:	fa92 f2a2 	rbit	r2, r2
 8003658:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800365c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f042 0220 	orr.w	r2, r2, #32
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f002 021f 	and.w	r2, r2, #31
 8003670:	2101      	movs	r1, #1
 8003672:	fa01 f202 	lsl.w	r2, r1, r2
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0af      	beq.n	80035dc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b2d      	ldr	r3, [pc, #180]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003688:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	21f8      	movs	r1, #248	@ 0xf8
 8003692:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800369a:	fa91 f1a1 	rbit	r1, r1
 800369e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80036a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80036a6:	fab1 f181 	clz	r1, r1
 80036aa:	b2c9      	uxtb	r1, r1
 80036ac:	408b      	lsls	r3, r1
 80036ae:	4921      	ldr	r1, [pc, #132]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
 80036b4:	e06d      	b.n	8003792 <HAL_RCC_OscConfig+0x62e>
 80036b6:	2301      	movs	r3, #1
 80036b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80036c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	2300      	movs	r3, #0
 80036e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7fd fc73 	bl	8000fcc <HAL_GetTick>
 80036e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fd fc6e 	bl	8000fcc <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d902      	bls.n	8003702 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	f000 bd7e 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
 8003702:	2302      	movs	r3, #2
 8003704:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003714:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCC_OscConfig+0x5d4>
 800372c:	4b01      	ldr	r3, [pc, #4]	@ (8003734 <HAL_RCC_OscConfig+0x5d0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	e016      	b.n	8003760 <HAL_RCC_OscConfig+0x5fc>
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	2302      	movs	r3, #2
 800373a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800374a:	2302      	movs	r3, #2
 800374c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003750:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800375c:	4bbf      	ldr	r3, [pc, #764]	@ (8003a5c <HAL_RCC_OscConfig+0x8f8>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	2202      	movs	r2, #2
 8003762:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003766:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800376a:	fa92 f2a2 	rbit	r2, r2
 800376e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003772:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ac      	bne.n	80036ec <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003796:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8113 	beq.w	80039ce <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d07c      	beq.n	80038b2 <HAL_RCC_OscConfig+0x74e>
 80037b8:	2301      	movs	r3, #1
 80037ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80037ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	4ba2      	ldr	r3, [pc, #648]	@ (8003a60 <HAL_RCC_OscConfig+0x8fc>)
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	461a      	mov	r2, r3
 80037de:	2301      	movs	r3, #1
 80037e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e2:	f7fd fbf3 	bl	8000fcc <HAL_GetTick>
 80037e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fd fbee 	bl	8000fcc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d902      	bls.n	8003802 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	f000 bcfe 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
 8003802:	2302      	movs	r3, #2
 8003804:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003814:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003822:	2202      	movs	r2, #2
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800382a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	fa93 f2a3 	rbit	r2, r3
 8003834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003842:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003846:	2202      	movs	r2, #2
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003860:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	4b7e      	ldr	r3, [pc, #504]	@ (8003a5c <HAL_RCC_OscConfig+0x8f8>)
 8003864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800386a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800386e:	2102      	movs	r1, #2
 8003870:	6019      	str	r1, [r3, #0]
 8003872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003876:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f1a3 	rbit	r1, r3
 8003880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003884:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003888:	6019      	str	r1, [r3, #0]
  return result;
 800388a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d09d      	beq.n	80037ec <HAL_RCC_OscConfig+0x688>
 80038b0:	e08d      	b.n	80039ce <HAL_RCC_OscConfig+0x86a>
 80038b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038d4:	601a      	str	r2, [r3, #0]
  return result;
 80038d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <HAL_RCC_OscConfig+0x8fc>)
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	461a      	mov	r2, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f4:	f7fd fb6a 	bl	8000fcc <HAL_GetTick>
 80038f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fe:	f7fd fb65 	bl	8000fcc <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d902      	bls.n	8003914 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	f000 bc75 	b.w	80041fe <HAL_RCC_OscConfig+0x109a>
 8003914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003918:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800391c:	2202      	movs	r2, #2
 800391e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003924:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	fa93 f2a3 	rbit	r2, r3
 800392e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003932:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800393c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003940:	2202      	movs	r2, #2
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003948:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003956:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003960:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003964:	2202      	movs	r2, #2
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800396c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fa93 f2a3 	rbit	r2, r3
 8003976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800397a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800397e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <HAL_RCC_OscConfig+0x8f8>)
 8003982:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003988:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800398c:	2102      	movs	r1, #2
 800398e:	6019      	str	r1, [r3, #0]
 8003990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003994:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	fa93 f1a3 	rbit	r1, r3
 800399e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039a6:	6019      	str	r1, [r3, #0]
  return result;
 80039a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d197      	bne.n	80038fe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 81a5 	beq.w	8003d2e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b1c      	ldr	r3, [pc, #112]	@ (8003a5c <HAL_RCC_OscConfig+0x8f8>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d116      	bne.n	8003a24 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b19      	ldr	r3, [pc, #100]	@ (8003a5c <HAL_RCC_OscConfig+0x8f8>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a18      	ldr	r2, [pc, #96]	@ (8003a5c <HAL_RCC_OscConfig+0x8f8>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]
 8003a02:	4b16      	ldr	r3, [pc, #88]	@ (8003a5c <HAL_RCC_OscConfig+0x8f8>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	4b0f      	ldr	r3, [pc, #60]	@ (8003a64 <HAL_RCC_OscConfig+0x900>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d121      	bne.n	8003a74 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a30:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <HAL_RCC_OscConfig+0x900>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0b      	ldr	r2, [pc, #44]	@ (8003a64 <HAL_RCC_OscConfig+0x900>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3c:	f7fd fac6 	bl	8000fcc <HAL_GetTick>
 8003a40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e010      	b.n	8003a68 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fd fac1 	bl	8000fcc <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d908      	bls.n	8003a68 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e3d1      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	10908120 	.word	0x10908120
 8003a64:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca0 <HAL_RCC_OscConfig+0xb3c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0e8      	beq.n	8003a46 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x92e>
 8003a84:	4b87      	ldr	r3, [pc, #540]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4a86      	ldr	r2, [pc, #536]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6213      	str	r3, [r2, #32]
 8003a90:	e035      	b.n	8003afe <HAL_RCC_OscConfig+0x99a>
 8003a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x958>
 8003aa2:	4b80      	ldr	r3, [pc, #512]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	6213      	str	r3, [r2, #32]
 8003aae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	6213      	str	r3, [r2, #32]
 8003aba:	e020      	b.n	8003afe <HAL_RCC_OscConfig+0x99a>
 8003abc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b05      	cmp	r3, #5
 8003aca:	d10c      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x982>
 8003acc:	4b75      	ldr	r3, [pc, #468]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4a74      	ldr	r2, [pc, #464]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	6213      	str	r3, [r2, #32]
 8003ad8:	4b72      	ldr	r3, [pc, #456]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4a71      	ldr	r2, [pc, #452]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6213      	str	r3, [r2, #32]
 8003ae4:	e00b      	b.n	8003afe <HAL_RCC_OscConfig+0x99a>
 8003ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6213      	str	r3, [r2, #32]
 8003af2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8081 	beq.w	8003c12 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fd fa5c 	bl	8000fcc <HAL_GetTick>
 8003b14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fd fa57 	bl	8000fcc <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e365      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
 8003b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	fa93 f2a3 	rbit	r2, r3
 8003b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b50:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b5e:	2202      	movs	r2, #2
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b66:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	fa93 f2a3 	rbit	r2, r3
 8003b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b74:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b78:	601a      	str	r2, [r3, #0]
  return result;
 8003b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b7e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f043 0302 	orr.w	r3, r3, #2
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d102      	bne.n	8003b9e <HAL_RCC_OscConfig+0xa3a>
 8003b98:	4b42      	ldr	r3, [pc, #264]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	e013      	b.n	8003bc6 <HAL_RCC_OscConfig+0xa62>
 8003b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ba2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	fa93 f2a3 	rbit	r2, r3
 8003bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bbc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	4b38      	ldr	r3, [pc, #224]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bce:	2102      	movs	r1, #2
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bd6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	fa92 f1a2 	rbit	r1, r2
 8003be0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003be4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003be8:	6011      	str	r1, [r2, #0]
  return result;
 8003bea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bee:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	fab2 f282 	clz	r2, r2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f002 021f 	and.w	r2, r2, #31
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d084      	beq.n	8003b1a <HAL_RCC_OscConfig+0x9b6>
 8003c10:	e083      	b.n	8003d1a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fd f9db 	bl	8000fcc <HAL_GetTick>
 8003c16:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fd f9d6 	bl	8000fcc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e2e4      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
 8003c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c44:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	fa93 f2a3 	rbit	r2, r3
 8003c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c60:	2202      	movs	r2, #2
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	fa93 f2a3 	rbit	r2, r3
 8003c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c76:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c7a:	601a      	str	r2, [r3, #0]
  return result;
 8003c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c80:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d106      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xb44>
 8003c9a:	4b02      	ldr	r3, [pc, #8]	@ (8003ca4 <HAL_RCC_OscConfig+0xb40>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	e017      	b.n	8003cd0 <HAL_RCC_OscConfig+0xb6c>
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	fa93 f2a3 	rbit	r2, r3
 8003cc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cc6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	4bb3      	ldr	r3, [pc, #716]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cd4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003cd8:	2102      	movs	r1, #2
 8003cda:	6011      	str	r1, [r2, #0]
 8003cdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ce0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	fa92 f1a2 	rbit	r1, r2
 8003cea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cee:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003cf2:	6011      	str	r1, [r2, #0]
  return result;
 8003cf4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cf8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	fab2 f282 	clz	r2, r2
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f002 021f 	and.w	r2, r2, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d180      	bne.n	8003c1c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d1a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d22:	4b9e      	ldr	r3, [pc, #632]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a9d      	ldr	r2, [pc, #628]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 825e 	beq.w	80041fc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d40:	4b96      	ldr	r3, [pc, #600]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	f000 821f 	beq.w	800418c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	f040 8170 	bne.w	8004040 <HAL_RCC_OscConfig+0xedc>
 8003d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d64:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d72:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d80:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d84:	601a      	str	r2, [r3, #0]
  return result;
 8003d86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d8a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d8e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	461a      	mov	r2, r3
 8003da2:	2300      	movs	r3, #0
 8003da4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da6:	f7fd f911 	bl	8000fcc <HAL_GetTick>
 8003daa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dae:	e009      	b.n	8003dc4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fd f90c 	bl	8000fcc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e21c      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
 8003dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dc8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003dcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dd6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	fa93 f2a3 	rbit	r2, r3
 8003de0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003de4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003de8:	601a      	str	r2, [r3, #0]
  return result;
 8003dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003df2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_OscConfig+0xcaa>
 8003e08:	4b64      	ldr	r3, [pc, #400]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	e027      	b.n	8003e5e <HAL_RCC_OscConfig+0xcfa>
 8003e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e12:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003e16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e20:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e2e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e38:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e46:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e54:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	4b50      	ldr	r3, [pc, #320]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e62:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e66:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e6a:	6011      	str	r1, [r2, #0]
 8003e6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e70:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	fa92 f1a2 	rbit	r1, r2
 8003e7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e7e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003e82:	6011      	str	r1, [r2, #0]
  return result;
 8003e84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e88:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	fab2 f282 	clz	r2, r2
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	f042 0220 	orr.w	r2, r2, #32
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	f002 021f 	and.w	r2, r2, #31
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d182      	bne.n	8003db0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	f023 020f 	bic.w	r2, r3, #15
 8003eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	4937      	ldr	r1, [pc, #220]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003ec4:	4b35      	ldr	r3, [pc, #212]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a19      	ldr	r1, [r3, #32]
 8003ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003edc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	492d      	ldr	r1, [pc, #180]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
 8003eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ef4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003efe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f0c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f10:	601a      	str	r2, [r3, #0]
  return result;
 8003f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f16:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f1a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2301      	movs	r3, #1
 8003f30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fd f84b 	bl	8000fcc <HAL_GetTick>
 8003f36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f3a:	e009      	b.n	8003f50 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd f846 	bl	8000fcc <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e156      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
 8003f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f54:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f62:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	fa93 f2a3 	rbit	r2, r3
 8003f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f70:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f74:	601a      	str	r2, [r3, #0]
  return result;
 8003f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f7a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xe3c>
 8003f94:	4b01      	ldr	r3, [pc, #4]	@ (8003f9c <HAL_RCC_OscConfig+0xe38>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	e02a      	b.n	8003ff0 <HAL_RCC_OscConfig+0xe8c>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fa4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fb2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fa93 f2a3 	rbit	r2, r3
 8003fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fc0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003fce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fd8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	fa93 f2a3 	rbit	r2, r3
 8003fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fe6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	4b86      	ldr	r3, [pc, #536]	@ (8004208 <HAL_RCC_OscConfig+0x10a4>)
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ff4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003ff8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004002:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	fa92 f1a2 	rbit	r1, r2
 800400c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004010:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004014:	6011      	str	r1, [r2, #0]
  return result;
 8004016:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800401a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fab2 f282 	clz	r2, r2
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f042 0220 	orr.w	r2, r2, #32
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	f002 021f 	and.w	r2, r2, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f202 	lsl.w	r2, r1, r2
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	f43f af7f 	beq.w	8003f3c <HAL_RCC_OscConfig+0xdd8>
 800403e:	e0dd      	b.n	80041fc <HAL_RCC_OscConfig+0x1098>
 8004040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004044:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004048:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800404c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004052:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	fa93 f2a3 	rbit	r2, r3
 800405c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004060:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004064:	601a      	str	r2, [r3, #0]
  return result;
 8004066:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800406a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800406e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800407a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	461a      	mov	r2, r3
 8004082:	2300      	movs	r3, #0
 8004084:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fc ffa1 	bl	8000fcc <HAL_GetTick>
 800408a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408e:	e009      	b.n	80040a4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7fc ff9c 	bl	8000fcc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0ac      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
 80040a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040a8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80040ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040b6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040c8:	601a      	str	r2, [r3, #0]
  return result;
 80040ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_RCC_OscConfig+0xf8a>
 80040e8:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_OscConfig+0x10a4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e027      	b.n	800413e <HAL_RCC_OscConfig+0xfda>
 80040ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040f2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80040f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004100:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	fa93 f2a3 	rbit	r2, r3
 800410a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800410e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004118:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800411c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004126:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f2a3 	rbit	r2, r3
 8004130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004134:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	4b33      	ldr	r3, [pc, #204]	@ (8004208 <HAL_RCC_OscConfig+0x10a4>)
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004142:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004146:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800414a:	6011      	str	r1, [r2, #0]
 800414c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004150:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	fa92 f1a2 	rbit	r1, r2
 800415a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800415e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004162:	6011      	str	r1, [r2, #0]
  return result;
 8004164:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004168:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	fab2 f282 	clz	r2, r2
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	f042 0220 	orr.w	r2, r2, #32
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	f002 021f 	and.w	r2, r2, #31
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d182      	bne.n	8004090 <HAL_RCC_OscConfig+0xf2c>
 800418a:	e037      	b.n	80041fc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004190:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e02e      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041a0:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <HAL_RCC_OscConfig+0x10a4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80041a8:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <HAL_RCC_OscConfig+0x10a4>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80041b4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80041b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d117      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80041cc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041dc:	429a      	cmp	r2, r3
 80041de:	d10b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80041e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041e4:	f003 020f 	and.w	r2, r3, #15
 80041e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b09e      	sub	sp, #120	@ 0x78
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e162      	b.n	80044ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b90      	ldr	r3, [pc, #576]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d910      	bls.n	8004254 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b8d      	ldr	r3, [pc, #564]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	498b      	ldr	r1, [pc, #556]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b89      	ldr	r3, [pc, #548]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e14a      	b.n	80044ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004260:	4b82      	ldr	r3, [pc, #520]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	497f      	ldr	r1, [pc, #508]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80dc 	beq.w	8004438 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d13c      	bne.n	8004302 <HAL_RCC_ClockConfig+0xf6>
 8004288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800428c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004298:	fab3 f383 	clz	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d102      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xa6>
 80042ac:	4b6f      	ldr	r3, [pc, #444]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	e00f      	b.n	80042d2 <HAL_RCC_ClockConfig+0xc6>
 80042b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	667b      	str	r3, [r7, #100]	@ 0x64
 80042c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80042c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ce:	4b67      	ldr	r3, [pc, #412]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042da:	fa92 f2a2 	rbit	r2, r2
 80042de:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80042e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042e2:	fab2 f282 	clz	r2, r2
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f042 0220 	orr.w	r2, r2, #32
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f002 021f 	and.w	r2, r2, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d17b      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0f3      	b.n	80044ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d13c      	bne.n	8004384 <HAL_RCC_ClockConfig+0x178>
 800430a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800430e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d102      	bne.n	8004334 <HAL_RCC_ClockConfig+0x128>
 800432e:	4b4f      	ldr	r3, [pc, #316]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	e00f      	b.n	8004354 <HAL_RCC_ClockConfig+0x148>
 8004334:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004338:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
 8004342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004346:	643b      	str	r3, [r7, #64]	@ 0x40
 8004348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004350:	4b46      	ldr	r3, [pc, #280]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004358:	63ba      	str	r2, [r7, #56]	@ 0x38
 800435a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800435c:	fa92 f2a2 	rbit	r2, r2
 8004360:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004364:	fab2 f282 	clz	r2, r2
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f042 0220 	orr.w	r2, r2, #32
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	f002 021f 	and.w	r2, r2, #31
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d13a      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0b2      	b.n	80044ea <HAL_RCC_ClockConfig+0x2de>
 8004384:	2302      	movs	r3, #2
 8004386:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d102      	bne.n	80043ac <HAL_RCC_ClockConfig+0x1a0>
 80043a6:	4b31      	ldr	r3, [pc, #196]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	e00d      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1bc>
 80043ac:	2302      	movs	r3, #2
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b8:	2302      	movs	r3, #2
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	4b29      	ldr	r3, [pc, #164]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	2202      	movs	r2, #2
 80043ca:	61ba      	str	r2, [r7, #24]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	fa92 f2a2 	rbit	r2, r2
 80043d2:	617a      	str	r2, [r7, #20]
  return result;
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	fab2 f282 	clz	r2, r2
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	f042 0220 	orr.w	r2, r2, #32
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	f002 021f 	and.w	r2, r2, #31
 80043e6:	2101      	movs	r1, #1
 80043e8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e079      	b.n	80044ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f6:	4b1d      	ldr	r3, [pc, #116]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f023 0203 	bic.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	491a      	ldr	r1, [pc, #104]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004408:	f7fc fde0 	bl	8000fcc <HAL_GetTick>
 800440c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440e:	e00a      	b.n	8004426 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004410:	f7fc fddc 	bl	8000fcc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e061      	b.n	80044ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	4b11      	ldr	r3, [pc, #68]	@ (800446c <HAL_RCC_ClockConfig+0x260>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 020c 	and.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	429a      	cmp	r2, r3
 8004436:	d1eb      	bne.n	8004410 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004438:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d214      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 0207 	bic.w	r2, r3, #7
 800444e:	4906      	ldr	r1, [pc, #24]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <HAL_RCC_ClockConfig+0x25c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e040      	b.n	80044ea <HAL_RCC_ClockConfig+0x2de>
 8004468:	40022000 	.word	0x40022000
 800446c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_RCC_ClockConfig+0x2e8>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	491a      	ldr	r1, [pc, #104]	@ (80044f4 <HAL_RCC_ClockConfig+0x2e8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800449a:	4b16      	ldr	r3, [pc, #88]	@ (80044f4 <HAL_RCC_ClockConfig+0x2e8>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4912      	ldr	r1, [pc, #72]	@ (80044f4 <HAL_RCC_ClockConfig+0x2e8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044ae:	f000 f829 	bl	8004504 <HAL_RCC_GetSysClockFreq>
 80044b2:	4601      	mov	r1, r0
 80044b4:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <HAL_RCC_ClockConfig+0x2e8>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044bc:	22f0      	movs	r2, #240	@ 0xf0
 80044be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	fa92 f2a2 	rbit	r2, r2
 80044c6:	60fa      	str	r2, [r7, #12]
  return result;
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	fab2 f282 	clz	r2, r2
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	40d3      	lsrs	r3, r2
 80044d2:	4a09      	ldr	r2, [pc, #36]	@ (80044f8 <HAL_RCC_ClockConfig+0x2ec>)
 80044d4:	5cd3      	ldrb	r3, [r2, r3]
 80044d6:	fa21 f303 	lsr.w	r3, r1, r3
 80044da:	4a08      	ldr	r2, [pc, #32]	@ (80044fc <HAL_RCC_ClockConfig+0x2f0>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044de:	4b08      	ldr	r3, [pc, #32]	@ (8004500 <HAL_RCC_ClockConfig+0x2f4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc fd2e 	bl	8000f44 <HAL_InitTick>
  
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3778      	adds	r7, #120	@ 0x78
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	0800afb0 	.word	0x0800afb0
 80044fc:	20000058 	.word	0x20000058
 8004500:	2000005c 	.word	0x2000005c

08004504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	b08b      	sub	sp, #44	@ 0x2c
 8004508:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800451e:	4b2a      	ldr	r3, [pc, #168]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d002      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x30>
 800452e:	2b08      	cmp	r3, #8
 8004530:	d003      	beq.n	800453a <HAL_RCC_GetSysClockFreq+0x36>
 8004532:	e03f      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004534:	4b25      	ldr	r3, [pc, #148]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004536:	623b      	str	r3, [r7, #32]
      break;
 8004538:	e03f      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004540:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004544:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	fa92 f2a2 	rbit	r2, r2
 800454c:	607a      	str	r2, [r7, #4]
  return result;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	fab2 f282 	clz	r2, r2
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	40d3      	lsrs	r3, r2
 8004558:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800455a:	5cd3      	ldrb	r3, [r2, r3]
 800455c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800455e:	4b1a      	ldr	r3, [pc, #104]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	220f      	movs	r2, #15
 8004568:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	fa92 f2a2 	rbit	r2, r2
 8004570:	60fa      	str	r2, [r7, #12]
  return result;
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	40d3      	lsrs	r3, r2
 800457c:	4a15      	ldr	r2, [pc, #84]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800458c:	4a0f      	ldr	r2, [pc, #60]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	fbb2 f2f3 	udiv	r2, r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
 800459c:	e007      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800459e:	4a0b      	ldr	r2, [pc, #44]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	623b      	str	r3, [r7, #32]
      break;
 80045b2:	e002      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80045b6:	623b      	str	r3, [r7, #32]
      break;
 80045b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ba:	6a3b      	ldr	r3, [r7, #32]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	372c      	adds	r7, #44	@ 0x2c
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40021000 	.word	0x40021000
 80045cc:	007a1200 	.word	0x007a1200
 80045d0:	0800afc0 	.word	0x0800afc0
 80045d4:	0800afd0 	.word	0x0800afd0

080045d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b092      	sub	sp, #72	@ 0x48
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80d4 	beq.w	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10e      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	4b4b      	ldr	r3, [pc, #300]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	4a4a      	ldr	r2, [pc, #296]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004612:	61d3      	str	r3, [r2, #28]
 8004614:	4b48      	ldr	r3, [pc, #288]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b45      	ldr	r3, [pc, #276]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b42      	ldr	r3, [pc, #264]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a41      	ldr	r2, [pc, #260]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7fc fcc5 	bl	8000fcc <HAL_GetTick>
 8004642:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7fc fcc1 	bl	8000fcc <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b64      	cmp	r3, #100	@ 0x64
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e1d6      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b38      	ldr	r3, [pc, #224]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004664:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800466c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800466e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8084 	beq.w	800477e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004680:	429a      	cmp	r2, r3
 8004682:	d07c      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004684:	4b2c      	ldr	r3, [pc, #176]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800468c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800468e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004692:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b26      	ldr	r3, [pc, #152]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	461a      	mov	r2, r3
 80046ae:	2301      	movs	r3, #1
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046d6:	4a18      	ldr	r2, [pc, #96]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d04b      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fc fc71 	bl	8000fcc <HAL_GetTick>
 80046ea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ec:	e00a      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fc fc6d 	bl	8000fcc <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e180      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004704:	2302      	movs	r3, #2
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004710:	2302      	movs	r3, #2
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	61fb      	str	r3, [r7, #28]
  return result;
 800471c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d108      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004732:	4b01      	ldr	r3, [pc, #4]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	e00d      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
 8004740:	10908100 	.word	0x10908100
 8004744:	2302      	movs	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	4b9a      	ldr	r3, [pc, #616]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	2202      	movs	r2, #2
 8004756:	613a      	str	r2, [r7, #16]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	fa92 f2a2 	rbit	r2, r2
 800475e:	60fa      	str	r2, [r7, #12]
  return result;
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	fab2 f282 	clz	r2, r2
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	f002 021f 	and.w	r2, r2, #31
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f202 	lsl.w	r2, r1, r2
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0b7      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800477e:	4b8f      	ldr	r3, [pc, #572]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	498c      	ldr	r1, [pc, #560]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004790:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b88      	ldr	r3, [pc, #544]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	4a87      	ldr	r2, [pc, #540]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b0:	4b82      	ldr	r3, [pc, #520]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	f023 0203 	bic.w	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	497f      	ldr	r1, [pc, #508]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047ce:	4b7b      	ldr	r3, [pc, #492]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4978      	ldr	r1, [pc, #480]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ec:	4b73      	ldr	r3, [pc, #460]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4970      	ldr	r1, [pc, #448]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480a:	4b6c      	ldr	r3, [pc, #432]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	f023 0210 	bic.w	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4969      	ldr	r1, [pc, #420]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004828:	4b64      	ldr	r3, [pc, #400]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004834:	4961      	ldr	r1, [pc, #388]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004846:	4b5d      	ldr	r3, [pc, #372]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	f023 0220 	bic.w	r2, r3, #32
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	495a      	ldr	r1, [pc, #360]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004864:	4b55      	ldr	r3, [pc, #340]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004868:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	4952      	ldr	r1, [pc, #328]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004882:	4b4e      	ldr	r3, [pc, #312]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	494b      	ldr	r1, [pc, #300]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004890:	4313      	orrs	r3, r2
 8004892:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a0:	4b46      	ldr	r3, [pc, #280]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	4943      	ldr	r1, [pc, #268]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048be:	4b3f      	ldr	r3, [pc, #252]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	493c      	ldr	r1, [pc, #240]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048dc:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e8:	4934      	ldr	r1, [pc, #208]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048fa:	4b30      	ldr	r3, [pc, #192]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	492d      	ldr	r1, [pc, #180]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004918:	4b28      	ldr	r3, [pc, #160]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004924:	4925      	ldr	r1, [pc, #148]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004936:	4b21      	ldr	r3, [pc, #132]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	491e      	ldr	r1, [pc, #120]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004954:	4b19      	ldr	r3, [pc, #100]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	4916      	ldr	r1, [pc, #88]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004972:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497e:	490f      	ldr	r1, [pc, #60]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004990:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	4907      	ldr	r1, [pc, #28]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80049ae:	4b03      	ldr	r3, [pc, #12]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	e002      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c2:	4913      	ldr	r1, [pc, #76]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80049d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e0:	490b      	ldr	r1, [pc, #44]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80049f2:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fe:	4904      	ldr	r1, [pc, #16]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3748      	adds	r7, #72	@ 0x48
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000

08004a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e049      	b.n	8004aba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc f93e 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fc52 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_TIM_Base_Stop+0x38>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_Base_Stop+0x38>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d001      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e04f      	b.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a23      	ldr	r2, [pc, #140]	@ (8004bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b52:	d018      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1e      	ldr	r2, [pc, #120]	@ (8004bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0x76>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a19      	ldr	r2, [pc, #100]	@ (8004be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d115      	bne.n	8004bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b17      	ldr	r3, [pc, #92]	@ (8004bec <HAL_TIM_Base_Start_IT+0xdc>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d015      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	e008      	b.n	8004bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40013400 	.word	0x40013400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40015000 	.word	0x40015000
 8004bec:	00010007 	.word	0x00010007

08004bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e049      	b.n	8004c96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f841 	bl	8004c9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f000 fb64 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d122      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d11b      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f06f 0202 	mvn.w	r2, #2
 8004cde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fae2 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 8004cfa:	e005      	b.n	8004d08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fad4 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fae5 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d122      	bne.n	8004d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d11b      	bne.n	8004d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0204 	mvn.w	r2, #4
 8004d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fab8 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 8004d4e:	e005      	b.n	8004d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 faaa 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fabb 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d122      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d11b      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0208 	mvn.w	r2, #8
 8004d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa8e 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 8004da2:	e005      	b.n	8004db0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa80 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa91 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d122      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d11b      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0210 	mvn.w	r2, #16
 8004dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2208      	movs	r2, #8
 8004de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fa64 	bl	80052be <HAL_TIM_IC_CaptureCallback>
 8004df6:	e005      	b.n	8004e04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa56 	bl	80052aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa67 	bl	80052d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d10e      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0201 	mvn.w	r2, #1
 8004e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fb fbdd 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e40:	2b80      	cmp	r3, #128	@ 0x80
 8004e42:	d10e      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4e:	2b80      	cmp	r3, #128	@ 0x80
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 ffa7 	bl	8005db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e70:	d10e      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7c:	2b80      	cmp	r3, #128	@ 0x80
 8004e7e:	d107      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 ff9a 	bl	8005dc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9a:	2b40      	cmp	r3, #64	@ 0x40
 8004e9c:	d10e      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea8:	2b40      	cmp	r3, #64	@ 0x40
 8004eaa:	d107      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa15 	bl	80052e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0220 	mvn.w	r2, #32
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 ff5a 	bl	8005d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e0ff      	b.n	800510e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b14      	cmp	r3, #20
 8004f1a:	f200 80f0 	bhi.w	80050fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f79 	.word	0x08004f79
 8004f28:	080050ff 	.word	0x080050ff
 8004f2c:	080050ff 	.word	0x080050ff
 8004f30:	080050ff 	.word	0x080050ff
 8004f34:	08004fb9 	.word	0x08004fb9
 8004f38:	080050ff 	.word	0x080050ff
 8004f3c:	080050ff 	.word	0x080050ff
 8004f40:	080050ff 	.word	0x080050ff
 8004f44:	08004ffb 	.word	0x08004ffb
 8004f48:	080050ff 	.word	0x080050ff
 8004f4c:	080050ff 	.word	0x080050ff
 8004f50:	080050ff 	.word	0x080050ff
 8004f54:	0800503b 	.word	0x0800503b
 8004f58:	080050ff 	.word	0x080050ff
 8004f5c:	080050ff 	.word	0x080050ff
 8004f60:	080050ff 	.word	0x080050ff
 8004f64:	0800507d 	.word	0x0800507d
 8004f68:	080050ff 	.word	0x080050ff
 8004f6c:	080050ff 	.word	0x080050ff
 8004f70:	080050ff 	.word	0x080050ff
 8004f74:	080050bd 	.word	0x080050bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fa5a 	bl	8005438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0208 	orr.w	r2, r2, #8
 8004f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0204 	bic.w	r2, r2, #4
 8004fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6999      	ldr	r1, [r3, #24]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	619a      	str	r2, [r3, #24]
      break;
 8004fb6:	e0a5      	b.n	8005104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fad4 	bl	800556c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6999      	ldr	r1, [r3, #24]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	619a      	str	r2, [r3, #24]
      break;
 8004ff8:	e084      	b.n	8005104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fb47 	bl	8005694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0208 	orr.w	r2, r2, #8
 8005014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0204 	bic.w	r2, r2, #4
 8005024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69d9      	ldr	r1, [r3, #28]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	61da      	str	r2, [r3, #28]
      break;
 8005038:	e064      	b.n	8005104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fbb9 	bl	80057b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69d9      	ldr	r1, [r3, #28]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	021a      	lsls	r2, r3, #8
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	61da      	str	r2, [r3, #28]
      break;
 800507a:	e043      	b.n	8005104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fc08 	bl	8005898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0208 	orr.w	r2, r2, #8
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0204 	bic.w	r2, r2, #4
 80050a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050ba:	e023      	b.n	8005104 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fc52 	bl	800596c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050fc:	e002      	b.n	8005104 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
      break;
 8005102:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop

08005118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_TIM_ConfigClockSource+0x1c>
 8005130:	2302      	movs	r3, #2
 8005132:	e0b6      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x18a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005152:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800515e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005170:	d03e      	beq.n	80051f0 <HAL_TIM_ConfigClockSource+0xd8>
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005176:	f200 8087 	bhi.w	8005288 <HAL_TIM_ConfigClockSource+0x170>
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517e:	f000 8086 	beq.w	800528e <HAL_TIM_ConfigClockSource+0x176>
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005186:	d87f      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
 8005188:	2b70      	cmp	r3, #112	@ 0x70
 800518a:	d01a      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0xaa>
 800518c:	2b70      	cmp	r3, #112	@ 0x70
 800518e:	d87b      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
 8005190:	2b60      	cmp	r3, #96	@ 0x60
 8005192:	d050      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x11e>
 8005194:	2b60      	cmp	r3, #96	@ 0x60
 8005196:	d877      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
 8005198:	2b50      	cmp	r3, #80	@ 0x50
 800519a:	d03c      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0xfe>
 800519c:	2b50      	cmp	r3, #80	@ 0x50
 800519e:	d873      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
 80051a2:	d058      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0x13e>
 80051a4:	2b40      	cmp	r3, #64	@ 0x40
 80051a6:	d86f      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
 80051a8:	2b30      	cmp	r3, #48	@ 0x30
 80051aa:	d064      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x15e>
 80051ac:	2b30      	cmp	r3, #48	@ 0x30
 80051ae:	d86b      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d060      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x15e>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d867      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d05c      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x15e>
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d05a      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x15e>
 80051c0:	e062      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d2:	f000 fcb1 	bl	8005b38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	609a      	str	r2, [r3, #8]
      break;
 80051ee:	e04f      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005200:	f000 fc9a 	bl	8005b38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005212:	609a      	str	r2, [r3, #8]
      break;
 8005214:	e03c      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005222:	461a      	mov	r2, r3
 8005224:	f000 fc0e 	bl	8005a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2150      	movs	r1, #80	@ 0x50
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fc67 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 8005234:	e02c      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005242:	461a      	mov	r2, r3
 8005244:	f000 fc2d 	bl	8005aa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2160      	movs	r1, #96	@ 0x60
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fc57 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 8005254:	e01c      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005262:	461a      	mov	r2, r3
 8005264:	f000 fbee 	bl	8005a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2140      	movs	r1, #64	@ 0x40
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc47 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 8005274:	e00c      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f000 fc3e 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 8005286:	e003      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      break;
 800528c:	e000      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800528e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a42      	ldr	r2, [pc, #264]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531a:	d00f      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3f      	ldr	r2, [pc, #252]	@ (800541c <TIM_Base_SetConfig+0x120>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3e      	ldr	r2, [pc, #248]	@ (8005420 <TIM_Base_SetConfig+0x124>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3d      	ldr	r2, [pc, #244]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a3c      	ldr	r2, [pc, #240]	@ (8005428 <TIM_Base_SetConfig+0x12c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a31      	ldr	r2, [pc, #196]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01f      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535c:	d01b      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2e      	ldr	r2, [pc, #184]	@ (800541c <TIM_Base_SetConfig+0x120>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d017      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2d      	ldr	r2, [pc, #180]	@ (8005420 <TIM_Base_SetConfig+0x124>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2c      	ldr	r2, [pc, #176]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2c      	ldr	r2, [pc, #176]	@ (800542c <TIM_Base_SetConfig+0x130>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2b      	ldr	r2, [pc, #172]	@ (8005430 <TIM_Base_SetConfig+0x134>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2a      	ldr	r2, [pc, #168]	@ (8005434 <TIM_Base_SetConfig+0x138>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a25      	ldr	r2, [pc, #148]	@ (8005428 <TIM_Base_SetConfig+0x12c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <TIM_Base_SetConfig+0x100>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a13      	ldr	r2, [pc, #76]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00f      	beq.n	80053fc <TIM_Base_SetConfig+0x100>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a13      	ldr	r2, [pc, #76]	@ (800542c <TIM_Base_SetConfig+0x130>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0x100>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a12      	ldr	r2, [pc, #72]	@ (8005430 <TIM_Base_SetConfig+0x134>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0x100>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <TIM_Base_SetConfig+0x138>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x100>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005428 <TIM_Base_SetConfig+0x12c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d103      	bne.n	8005404 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	615a      	str	r2, [r3, #20]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40013400 	.word	0x40013400
 8005428:	40015000 	.word	0x40015000
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800

08005438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0201 	bic.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 0302 	bic.w	r3, r3, #2
 8005484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a30      	ldr	r2, [pc, #192]	@ (8005554 <TIM_OC1_SetConfig+0x11c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <TIM_OC1_SetConfig+0x88>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a2f      	ldr	r2, [pc, #188]	@ (8005558 <TIM_OC1_SetConfig+0x120>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00f      	beq.n	80054c0 <TIM_OC1_SetConfig+0x88>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a2e      	ldr	r2, [pc, #184]	@ (800555c <TIM_OC1_SetConfig+0x124>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_OC1_SetConfig+0x88>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005560 <TIM_OC1_SetConfig+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_OC1_SetConfig+0x88>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005564 <TIM_OC1_SetConfig+0x12c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC1_SetConfig+0x88>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005568 <TIM_OC1_SetConfig+0x130>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10c      	bne.n	80054da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0308 	bic.w	r3, r3, #8
 80054c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 0304 	bic.w	r3, r3, #4
 80054d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <TIM_OC1_SetConfig+0x11c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <TIM_OC1_SetConfig+0xd2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <TIM_OC1_SetConfig+0x120>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00f      	beq.n	800550a <TIM_OC1_SetConfig+0xd2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	@ (800555c <TIM_OC1_SetConfig+0x124>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00b      	beq.n	800550a <TIM_OC1_SetConfig+0xd2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005560 <TIM_OC1_SetConfig+0x128>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <TIM_OC1_SetConfig+0xd2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <TIM_OC1_SetConfig+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_OC1_SetConfig+0xd2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a18      	ldr	r2, [pc, #96]	@ (8005568 <TIM_OC1_SetConfig+0x130>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d111      	bne.n	800552e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40013400 	.word	0x40013400
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800
 8005568:	40015000 	.word	0x40015000

0800556c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f023 0210 	bic.w	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800559a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800559e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0320 	bic.w	r3, r3, #32
 80055ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a2c      	ldr	r2, [pc, #176]	@ (800567c <TIM_OC2_SetConfig+0x110>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_OC2_SetConfig+0x74>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005680 <TIM_OC2_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_OC2_SetConfig+0x74>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a2a      	ldr	r2, [pc, #168]	@ (8005684 <TIM_OC2_SetConfig+0x118>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d10d      	bne.n	80055fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a1f      	ldr	r2, [pc, #124]	@ (800567c <TIM_OC2_SetConfig+0x110>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <TIM_OC2_SetConfig+0xc0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <TIM_OC2_SetConfig+0x114>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_OC2_SetConfig+0xc0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a1e      	ldr	r2, [pc, #120]	@ (8005688 <TIM_OC2_SetConfig+0x11c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_OC2_SetConfig+0xc0>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <TIM_OC2_SetConfig+0x120>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_OC2_SetConfig+0xc0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a1c      	ldr	r2, [pc, #112]	@ (8005690 <TIM_OC2_SetConfig+0x124>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC2_SetConfig+0xc0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a17      	ldr	r2, [pc, #92]	@ (8005684 <TIM_OC2_SetConfig+0x118>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d113      	bne.n	8005654 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005632:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800563a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40015000 	.word	0x40015000
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800

08005694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2b      	ldr	r2, [pc, #172]	@ (80057a0 <TIM_OC3_SetConfig+0x10c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_OC3_SetConfig+0x72>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2a      	ldr	r2, [pc, #168]	@ (80057a4 <TIM_OC3_SetConfig+0x110>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC3_SetConfig+0x72>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a29      	ldr	r2, [pc, #164]	@ (80057a8 <TIM_OC3_SetConfig+0x114>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10d      	bne.n	8005722 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800570c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005720:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1e      	ldr	r2, [pc, #120]	@ (80057a0 <TIM_OC3_SetConfig+0x10c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <TIM_OC3_SetConfig+0xbe>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1d      	ldr	r2, [pc, #116]	@ (80057a4 <TIM_OC3_SetConfig+0x110>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00f      	beq.n	8005752 <TIM_OC3_SetConfig+0xbe>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1d      	ldr	r2, [pc, #116]	@ (80057ac <TIM_OC3_SetConfig+0x118>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_OC3_SetConfig+0xbe>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1c      	ldr	r2, [pc, #112]	@ (80057b0 <TIM_OC3_SetConfig+0x11c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_OC3_SetConfig+0xbe>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1b      	ldr	r2, [pc, #108]	@ (80057b4 <TIM_OC3_SetConfig+0x120>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC3_SetConfig+0xbe>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a16      	ldr	r2, [pc, #88]	@ (80057a8 <TIM_OC3_SetConfig+0x114>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d113      	bne.n	800577a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40013400 	.word	0x40013400
 80057a8:	40015000 	.word	0x40015000
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400
 80057b4:	40014800 	.word	0x40014800

080057b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	031b      	lsls	r3, r3, #12
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <TIM_OC4_SetConfig+0xc8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <TIM_OC4_SetConfig+0x8c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a19      	ldr	r2, [pc, #100]	@ (8005884 <TIM_OC4_SetConfig+0xcc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00f      	beq.n	8005844 <TIM_OC4_SetConfig+0x8c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a18      	ldr	r2, [pc, #96]	@ (8005888 <TIM_OC4_SetConfig+0xd0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_OC4_SetConfig+0x8c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a17      	ldr	r2, [pc, #92]	@ (800588c <TIM_OC4_SetConfig+0xd4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_OC4_SetConfig+0x8c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <TIM_OC4_SetConfig+0xd8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC4_SetConfig+0x8c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a15      	ldr	r2, [pc, #84]	@ (8005894 <TIM_OC4_SetConfig+0xdc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d109      	bne.n	8005858 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800584a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40013400 	.word	0x40013400
 8005888:	40014000 	.word	0x40014000
 800588c:	40014400 	.word	0x40014400
 8005890:	40014800 	.word	0x40014800
 8005894:	40015000 	.word	0x40015000

08005898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a19      	ldr	r2, [pc, #100]	@ (8005954 <TIM_OC5_SetConfig+0xbc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <TIM_OC5_SetConfig+0x82>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a18      	ldr	r2, [pc, #96]	@ (8005958 <TIM_OC5_SetConfig+0xc0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_OC5_SetConfig+0x82>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a17      	ldr	r2, [pc, #92]	@ (800595c <TIM_OC5_SetConfig+0xc4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_OC5_SetConfig+0x82>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a16      	ldr	r2, [pc, #88]	@ (8005960 <TIM_OC5_SetConfig+0xc8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_OC5_SetConfig+0x82>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a15      	ldr	r2, [pc, #84]	@ (8005964 <TIM_OC5_SetConfig+0xcc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_OC5_SetConfig+0x82>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a14      	ldr	r2, [pc, #80]	@ (8005968 <TIM_OC5_SetConfig+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d109      	bne.n	800592e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005920:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40013400 	.word	0x40013400
 800595c:	40014000 	.word	0x40014000
 8005960:	40014400 	.word	0x40014400
 8005964:	40014800 	.word	0x40014800
 8005968:	40015000 	.word	0x40015000

0800596c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	051b      	lsls	r3, r3, #20
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a2c <TIM_OC6_SetConfig+0xc0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_OC6_SetConfig+0x84>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a19      	ldr	r2, [pc, #100]	@ (8005a30 <TIM_OC6_SetConfig+0xc4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00f      	beq.n	80059f0 <TIM_OC6_SetConfig+0x84>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a18      	ldr	r2, [pc, #96]	@ (8005a34 <TIM_OC6_SetConfig+0xc8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_OC6_SetConfig+0x84>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	@ (8005a38 <TIM_OC6_SetConfig+0xcc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_OC6_SetConfig+0x84>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	@ (8005a3c <TIM_OC6_SetConfig+0xd0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_OC6_SetConfig+0x84>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a15      	ldr	r2, [pc, #84]	@ (8005a40 <TIM_OC6_SetConfig+0xd4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d109      	bne.n	8005a04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	029b      	lsls	r3, r3, #10
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800
 8005a40:	40015000 	.word	0x40015000

08005a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0201 	bic.w	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 030a 	bic.w	r3, r3, #10
 8005a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f023 0210 	bic.w	r2, r3, #16
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f043 0307 	orr.w	r3, r3, #7
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	609a      	str	r2, [r3, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e06d      	b.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a30      	ldr	r2, [pc, #192]	@ (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d108      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005bd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01d      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0c:	d018      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1c      	ldr	r2, [pc, #112]	@ (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a15      	ldr	r2, [pc, #84]	@ (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a16      	ldr	r2, [pc, #88]	@ (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10c      	bne.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40015000 	.word	0x40015000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40014000 	.word	0x40014000

08005c90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e06a      	b.n	8005d82 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	041b      	lsls	r3, r3, #16
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a17      	ldr	r2, [pc, #92]	@ (8005d94 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a16      	ldr	r2, [pc, #88]	@ (8005d98 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d115      	bne.n	8005d70 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	051b      	lsls	r3, r3, #20
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40015000 	.word	0x40015000

08005d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005de8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005dec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e0e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005e12:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	4013      	ands	r3, r2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	f107 0014 	add.w	r0, r7, #20
 8005e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	b004      	add	sp, #16
 8005e7c:	4770      	bx	lr
	...

08005e80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b09d      	sub	sp, #116	@ 0x74
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d81f      	bhi.n	8005ef2 <USB_ActivateEndpoint+0x72>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <USB_ActivateEndpoint+0x38>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	08005efb 	.word	0x08005efb
 8005ec4:	08005ed7 	.word	0x08005ed7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ec8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ecc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ed0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ed4:	e012      	b.n	8005efc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ed6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005eda:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005ede:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ee2:	e00b      	b.n	8005efc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ee4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005eec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ef0:	e004      	b.n	8005efc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005ef8:	e000      	b.n	8005efc <USB_ActivateEndpoint+0x7c>
      break;
 8005efa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	b21b      	sxth	r3, r3
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	b21a      	sxth	r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b21b      	sxth	r3, r3
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	7b1b      	ldrb	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8178 	bne.w	8006262 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8084 	beq.w	8006084 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	00da      	lsls	r2, r3, #3
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	88db      	ldrh	r3, [r3, #6]
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	827b      	strh	r3, [r7, #18]
 8005fbe:	8a7b      	ldrh	r3, [r7, #18]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01b      	beq.n	8006000 <USB_ActivateEndpoint+0x180>
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fde:	823b      	strh	r3, [r7, #16]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	8a3b      	ldrh	r3, [r7, #16]
 8005fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	78db      	ldrb	r3, [r3, #3]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d020      	beq.n	800604a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601e:	81bb      	strh	r3, [r7, #12]
 8006020:	89bb      	ldrh	r3, [r7, #12]
 8006022:	f083 0320 	eor.w	r3, r3, #32
 8006026:	81bb      	strh	r3, [r7, #12]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	89bb      	ldrh	r3, [r7, #12]
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
 8006048:	e2d5      	b.n	80065f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006060:	81fb      	strh	r3, [r7, #14]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	441a      	add	r2, r3
 800606c:	89fb      	ldrh	r3, [r7, #14]
 800606e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800607a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607e:	b29b      	uxth	r3, r3
 8006080:	8013      	strh	r3, [r2, #0]
 8006082:	e2b8      	b.n	80065f6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	4413      	add	r3, r2
 8006096:	633b      	str	r3, [r7, #48]	@ 0x30
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	00da      	lsls	r2, r3, #3
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	4413      	add	r3, r2
 80060a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	4413      	add	r3, r2
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00da      	lsls	r2, r3, #3
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80060f2:	d91d      	bls.n	8006130 <USB_ActivateEndpoint+0x2b0>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <USB_ActivateEndpoint+0x28e>
 8006108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800610a:	3b01      	subs	r3, #1
 800610c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29a      	uxth	r2, r3
 8006114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006116:	b29b      	uxth	r3, r3
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	b29b      	uxth	r3, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006128:	b29a      	uxth	r2, r3
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e026      	b.n	800617e <USB_ActivateEndpoint+0x2fe>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <USB_ActivateEndpoint+0x2ce>
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006146:	b29a      	uxth	r2, r3
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	e017      	b.n	800617e <USB_ActivateEndpoint+0x2fe>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <USB_ActivateEndpoint+0x2e8>
 8006162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006164:	3301      	adds	r3, #1
 8006166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29a      	uxth	r2, r3
 800616e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006170:	b29b      	uxth	r3, r3
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	b29b      	uxth	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b29a      	uxth	r2, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800618c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800618e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01b      	beq.n	80061ce <USB_ActivateEndpoint+0x34e>
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ac:	843b      	strh	r3, [r7, #32]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	8c3b      	ldrh	r3, [r7, #32]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d124      	bne.n	8006220 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ec:	83bb      	strh	r3, [r7, #28]
 80061ee:	8bbb      	ldrh	r3, [r7, #28]
 80061f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061f4:	83bb      	strh	r3, [r7, #28]
 80061f6:	8bbb      	ldrh	r3, [r7, #28]
 80061f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061fc:	83bb      	strh	r3, [r7, #28]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	8bbb      	ldrh	r3, [r7, #28]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
 800621e:	e1ea      	b.n	80065f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006236:	83fb      	strh	r3, [r7, #30]
 8006238:	8bfb      	ldrh	r3, [r7, #30]
 800623a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800623e:	83fb      	strh	r3, [r7, #30]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	8bfb      	ldrh	r3, [r7, #30]
 800624c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625c:	b29b      	uxth	r3, r3
 800625e:	8013      	strh	r3, [r2, #0]
 8006260:	e1c9      	b.n	80065f6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	78db      	ldrb	r3, [r3, #3]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d11e      	bne.n	80062a8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800627c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006280:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800629a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800629e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	8013      	strh	r3, [r2, #0]
 80062a6:	e01d      	b.n	80062e4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80062ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80062d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062f4:	4413      	add	r3, r2
 80062f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00da      	lsls	r2, r3, #3
 80062fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006300:	4413      	add	r3, r2
 8006302:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006306:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	891b      	ldrh	r3, [r3, #8]
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	657b      	str	r3, [r7, #84]	@ 0x54
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006328:	4413      	add	r3, r2
 800632a:	657b      	str	r3, [r7, #84]	@ 0x54
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	00da      	lsls	r2, r3, #3
 8006332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006334:	4413      	add	r3, r2
 8006336:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800633a:	653b      	str	r3, [r7, #80]	@ 0x50
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	895b      	ldrh	r3, [r3, #10]
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	b29b      	uxth	r3, r3
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800634a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b00      	cmp	r3, #0
 8006352:	f040 8093 	bne.w	800647c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800636a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01b      	beq.n	80063aa <USB_ActivateEndpoint+0x52a>
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006388:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80063b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80063ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01b      	beq.n	80063fa <USB_ActivateEndpoint+0x57a>
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80063e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800640c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006410:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006412:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006414:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006418:	873b      	strh	r3, [r7, #56]	@ 0x38
 800641a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800641c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006420:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	441a      	add	r2, r3
 800642c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006458:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
 800647a:	e0bc      	b.n	80065f6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800648c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01d      	beq.n	80064d4 <USB_ActivateEndpoint+0x654>
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80064e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80064e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01d      	beq.n	800652c <USB_ActivateEndpoint+0x6ac>
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006506:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006524:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	78db      	ldrb	r3, [r3, #3]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d024      	beq.n	800657e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800654a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800654e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006552:	f083 0320 	eor.w	r3, r3, #32
 8006556:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]
 800657c:	e01d      	b.n	80065ba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006594:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	441a      	add	r2, r3
 80065de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80065f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3774      	adds	r7, #116	@ 0x74
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop

08006608 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006608:	b480      	push	{r7}
 800660a:	b08d      	sub	sp, #52	@ 0x34
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	7b1b      	ldrb	r3, [r3, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f040 808e 	bne.w	8006738 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d044      	beq.n	80066ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	81bb      	strh	r3, [r7, #12]
 8006632:	89bb      	ldrh	r3, [r7, #12]
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01b      	beq.n	8006674 <USB_DeactivateEndpoint+0x6c>
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	817b      	strh	r3, [r7, #10]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	897b      	ldrh	r3, [r7, #10]
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800668a:	813b      	strh	r3, [r7, #8]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]
 80066ac:	e192      	b.n	80069d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	827b      	strh	r3, [r7, #18]
 80066bc:	8a7b      	ldrh	r3, [r7, #18]
 80066be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01b      	beq.n	80066fe <USB_DeactivateEndpoint+0xf6>
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066dc:	823b      	strh	r3, [r7, #16]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	441a      	add	r2, r3
 80066e8:	8a3b      	ldrh	r3, [r7, #16]
 80066ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e14d      	b.n	80069d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 80a5 	bne.w	800688c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	843b      	strh	r3, [r7, #32]
 8006750:	8c3b      	ldrh	r3, [r7, #32]
 8006752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01b      	beq.n	8006792 <USB_DeactivateEndpoint+0x18a>
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006770:	83fb      	strh	r3, [r7, #30]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	441a      	add	r2, r3
 800677c:	8bfb      	ldrh	r3, [r7, #30]
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006786:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800678a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	83bb      	strh	r3, [r7, #28]
 80067a0:	8bbb      	ldrh	r3, [r7, #28]
 80067a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01b      	beq.n	80067e2 <USB_DeactivateEndpoint+0x1da>
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c0:	837b      	strh	r3, [r7, #26]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	8b7b      	ldrh	r3, [r7, #26]
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f8:	833b      	strh	r3, [r7, #24]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	441a      	add	r2, r3
 8006804:	8b3b      	ldrh	r3, [r7, #24]
 8006806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800680a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800680e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006812:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006816:	b29b      	uxth	r3, r3
 8006818:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800682c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006830:	82fb      	strh	r3, [r7, #22]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	8afb      	ldrh	r3, [r7, #22]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006868:	82bb      	strh	r3, [r7, #20]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	8abb      	ldrh	r3, [r7, #20]
 8006876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800687a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800687e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006886:	b29b      	uxth	r3, r3
 8006888:	8013      	strh	r3, [r2, #0]
 800688a:	e0a3      	b.n	80069d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800689a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800689c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01b      	beq.n	80068dc <USB_DeactivateEndpoint+0x2d4>
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	441a      	add	r2, r3
 80068c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80068ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <USB_DeactivateEndpoint+0x324>
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006924:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800693e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006942:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006958:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800695c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800697a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	441a      	add	r2, r3
 80069be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80069c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3734      	adds	r7, #52	@ 0x34
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b0c2      	sub	sp, #264	@ 0x108
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f0:	6018      	str	r0, [r3, #0]
 80069f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	f040 86b7 	bne.w	800777c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d908      	bls.n	8006a3c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006a3a:	e007      	b.n	8006a4c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	7b1b      	ldrb	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d13a      	bne.n	8006ad2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6959      	ldr	r1, [r3, #20]
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	88da      	ldrh	r2, [r3, #6]
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a82:	6800      	ldr	r0, [r0, #0]
 8006a84:	f001 fc8c 	bl	80083a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	00da      	lsls	r2, r3, #3
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	f000 be1f 	b.w	8007710 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	f040 8462 	bne.w	80073a8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	f240 83df 	bls.w	80072c0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b28:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	441a      	add	r2, r3
 8006b46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b52:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 81c7 	beq.w	8006f32 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	785b      	ldrb	r3, [r3, #1]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d177      	bne.n	8006cb0 <USB_EPStartXfer+0x2ce>
 8006bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	4413      	add	r3, r2
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	00da      	lsls	r2, r3, #3
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c12:	d921      	bls.n	8006c58 <USB_EPStartXfer+0x276>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <USB_EPStartXfer+0x252>
 8006c2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	801a      	strh	r2, [r3, #0]
 8006c56:	e050      	b.n	8006cfa <USB_EPStartXfer+0x318>
 8006c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <USB_EPStartXfer+0x294>
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e041      	b.n	8006cfa <USB_EPStartXfer+0x318>
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d004      	beq.n	8006c96 <USB_EPStartXfer+0x2b4>
 8006c8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006c90:	3301      	adds	r3, #1
 8006c92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	029b      	lsls	r3, r3, #10
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	801a      	strh	r2, [r3, #0]
 8006cae:	e024      	b.n	8006cfa <USB_EPStartXfer+0x318>
 8006cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d11c      	bne.n	8006cfa <USB_EPStartXfer+0x318>
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	4413      	add	r3, r2
 8006cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	00da      	lsls	r2, r3, #3
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	4413      	add	r3, r2
 8006cea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	895b      	ldrh	r3, [r3, #10]
 8006d06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6959      	ldr	r1, [r3, #20]
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d28:	6800      	ldr	r0, [r0, #0]
 8006d2a:	f001 fb39 	bl	80083a0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695a      	ldr	r2, [r3, #20]
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3e:	441a      	add	r2, r3
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6a1a      	ldr	r2, [r3, #32]
 8006d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d90f      	bls.n	8006d88 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6a1a      	ldr	r2, [r3, #32]
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d78:	1ad2      	subs	r2, r2, r3
 8006d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	621a      	str	r2, [r3, #32]
 8006d86:	e00e      	b.n	8006da6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d177      	bne.n	8006ea6 <USB_EPStartXfer+0x4c4>
 8006db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	00da      	lsls	r2, r3, #3
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	4413      	add	r3, r2
 8006dec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e06:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e08:	d921      	bls.n	8006e4e <USB_EPStartXfer+0x46c>
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <USB_EPStartXfer+0x448>
 8006e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e24:	3b01      	subs	r3, #1
 8006e26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e056      	b.n	8006efc <USB_EPStartXfer+0x51a>
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <USB_EPStartXfer+0x48a>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e047      	b.n	8006efc <USB_EPStartXfer+0x51a>
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e70:	085b      	lsrs	r3, r3, #1
 8006e72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <USB_EPStartXfer+0x4aa>
 8006e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e86:	3301      	adds	r3, #1
 8006e88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	029b      	lsls	r3, r3, #10
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e02a      	b.n	8006efc <USB_EPStartXfer+0x51a>
 8006ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d122      	bne.n	8006efc <USB_EPStartXfer+0x51a>
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	623b      	str	r3, [r7, #32]
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	623b      	str	r3, [r7, #32]
 8006eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	00da      	lsls	r2, r3, #3
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	4413      	add	r3, r2
 8006eec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	891b      	ldrh	r3, [r3, #8]
 8006f08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6959      	ldr	r1, [r3, #20]
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	f001 fa38 	bl	80083a0 <USB_WritePMA>
 8006f30:	e3ee      	b.n	8007710 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d177      	bne.n	8007032 <USB_EPStartXfer+0x650>
 8006f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f62:	4413      	add	r3, r2
 8006f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	00da      	lsls	r2, r3, #3
 8006f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f94:	d921      	bls.n	8006fda <USB_EPStartXfer+0x5f8>
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <USB_EPStartXfer+0x5d4>
 8006fac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e056      	b.n	8007088 <USB_EPStartXfer+0x6a6>
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <USB_EPStartXfer+0x616>
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e047      	b.n	8007088 <USB_EPStartXfer+0x6a6>
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <USB_EPStartXfer+0x636>
 800700e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007012:	3301      	adds	r3, #1
 8007014:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007022:	b29b      	uxth	r3, r3
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	b29b      	uxth	r3, r3
 8007028:	4313      	orrs	r3, r2
 800702a:	b29a      	uxth	r2, r3
 800702c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	e02a      	b.n	8007088 <USB_EPStartXfer+0x6a6>
 8007032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d122      	bne.n	8007088 <USB_EPStartXfer+0x6a6>
 8007042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	653b      	str	r3, [r7, #80]	@ 0x50
 800704e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007062:	4413      	add	r3, r2
 8007064:	653b      	str	r3, [r7, #80]	@ 0x50
 8007066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	00da      	lsls	r2, r3, #3
 8007074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007076:	4413      	add	r3, r2
 8007078:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800707c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007082:	b29a      	uxth	r2, r3
 8007084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007086:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	891b      	ldrh	r3, [r3, #8]
 8007094:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6959      	ldr	r1, [r3, #20]
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070b6:	6800      	ldr	r0, [r0, #0]
 80070b8:	f001 f972 	bl	80083a0 <USB_WritePMA>
            ep->xfer_buff += len;
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070cc:	441a      	add	r2, r3
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a1a      	ldr	r2, [r3, #32]
 80070e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d90f      	bls.n	8007116 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80070f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007106:	1ad2      	subs	r2, r2, r3
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	621a      	str	r2, [r3, #32]
 8007114:	e00e      	b.n	8007134 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2200      	movs	r2, #0
 8007132:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d177      	bne.n	8007240 <USB_EPStartXfer+0x85e>
 8007150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007154:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	4413      	add	r3, r2
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	00da      	lsls	r2, r3, #3
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	4413      	add	r3, r2
 8007186:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34
 800718c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007196:	b29a      	uxth	r2, r3
 8007198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a2:	d921      	bls.n	80071e8 <USB_EPStartXfer+0x806>
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <USB_EPStartXfer+0x7e2>
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071be:	3b01      	subs	r3, #1
 80071c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80071c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	029b      	lsls	r3, r3, #10
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4313      	orrs	r3, r2
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	e050      	b.n	800728a <USB_EPStartXfer+0x8a8>
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <USB_EPStartXfer+0x824>
 80071f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e041      	b.n	800728a <USB_EPStartXfer+0x8a8>
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720a:	085b      	lsrs	r3, r3, #1
 800720c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <USB_EPStartXfer+0x844>
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	3301      	adds	r3, #1
 8007222:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	b29b      	uxth	r3, r3
 8007232:	029b      	lsls	r3, r3, #10
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	e024      	b.n	800728a <USB_EPStartXfer+0x8a8>
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d11c      	bne.n	800728a <USB_EPStartXfer+0x8a8>
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007264:	4413      	add	r3, r2
 8007266:	643b      	str	r3, [r7, #64]	@ 0x40
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00da      	lsls	r2, r3, #3
 8007276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007278:	4413      	add	r3, r2
 800727a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007284:	b29a      	uxth	r2, r3
 8007286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007288:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	895b      	ldrh	r3, [r3, #10]
 8007296:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6959      	ldr	r1, [r3, #20]
 80072a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072b8:	6800      	ldr	r0, [r0, #0]
 80072ba:	f001 f871 	bl	80083a0 <USB_WritePMA>
 80072be:	e227      	b.n	8007710 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80072f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80072fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800731c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007328:	b29b      	uxth	r3, r3
 800732a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800732c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007346:	b29b      	uxth	r3, r3
 8007348:	461a      	mov	r2, r3
 800734a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800734c:	4413      	add	r3, r2
 800734e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	00da      	lsls	r2, r3, #3
 800735e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007360:	4413      	add	r3, r2
 8007362:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007366:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	b29a      	uxth	r2, r3
 800736e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007370:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	891b      	ldrh	r3, [r3, #8]
 800737e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6959      	ldr	r1, [r3, #20]
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007392:	b29b      	uxth	r3, r3
 8007394:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007398:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800739c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073a0:	6800      	ldr	r0, [r0, #0]
 80073a2:	f000 fffd 	bl	80083a0 <USB_WritePMA>
 80073a6:	e1b3      	b.n	8007710 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b8:	1ad2      	subs	r2, r2, r3
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80c6 	beq.w	800757a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d177      	bne.n	80074fa <USB_EPStartXfer+0xb18>
 800740a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007424:	b29b      	uxth	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800742a:	4413      	add	r3, r2
 800742c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800742e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	00da      	lsls	r2, r3, #3
 800743c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800743e:	4413      	add	r3, r2
 8007440:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007444:	667b      	str	r3, [r7, #100]	@ 0x64
 8007446:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007450:	b29a      	uxth	r2, r3
 8007452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	2b3e      	cmp	r3, #62	@ 0x3e
 800745c:	d921      	bls.n	80074a2 <USB_EPStartXfer+0xac0>
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <USB_EPStartXfer+0xa9c>
 8007474:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007478:	3b01      	subs	r3, #1
 800747a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800747e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007488:	b29b      	uxth	r3, r3
 800748a:	029b      	lsls	r3, r3, #10
 800748c:	b29b      	uxth	r3, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	b29b      	uxth	r3, r3
 8007492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749a:	b29a      	uxth	r2, r3
 800749c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	e050      	b.n	8007544 <USB_EPStartXfer+0xb62>
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <USB_EPStartXfer+0xade>
 80074aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	e041      	b.n	8007544 <USB_EPStartXfer+0xb62>
 80074c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <USB_EPStartXfer+0xafe>
 80074d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80074da:	3301      	adds	r3, #1
 80074dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	029b      	lsls	r3, r3, #10
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4313      	orrs	r3, r2
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e024      	b.n	8007544 <USB_EPStartXfer+0xb62>
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d11c      	bne.n	8007544 <USB_EPStartXfer+0xb62>
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007518:	b29b      	uxth	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800751e:	4413      	add	r3, r2
 8007520:	673b      	str	r3, [r7, #112]	@ 0x70
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	00da      	lsls	r2, r3, #3
 8007530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007532:	4413      	add	r3, r2
 8007534:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007538:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753e:	b29a      	uxth	r2, r3
 8007540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007542:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	895b      	ldrh	r3, [r3, #10]
 8007550:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6959      	ldr	r1, [r3, #20]
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	b29b      	uxth	r3, r3
 8007566:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800756a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800756e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007572:	6800      	ldr	r0, [r0, #0]
 8007574:	f000 ff14 	bl	80083a0 <USB_WritePMA>
 8007578:	e0ca      	b.n	8007710 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800757a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d177      	bne.n	800767a <USB_EPStartXfer+0xc98>
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075aa:	4413      	add	r3, r2
 80075ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00da      	lsls	r2, r3, #3
 80075bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075be:	4413      	add	r3, r2
 80075c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075da:	2b3e      	cmp	r3, #62	@ 0x3e
 80075dc:	d921      	bls.n	8007622 <USB_EPStartXfer+0xc40>
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <USB_EPStartXfer+0xc1c>
 80075f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80075f8:	3b01      	subs	r3, #1
 80075fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29a      	uxth	r2, r3
 8007604:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007608:	b29b      	uxth	r3, r3
 800760a:	029b      	lsls	r3, r3, #10
 800760c:	b29b      	uxth	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b29b      	uxth	r3, r3
 8007612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800761a:	b29a      	uxth	r2, r3
 800761c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e05c      	b.n	80076dc <USB_EPStartXfer+0xcfa>
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <USB_EPStartXfer+0xc5e>
 800762a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007638:	b29a      	uxth	r2, r3
 800763a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e04d      	b.n	80076dc <USB_EPStartXfer+0xcfa>
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	085b      	lsrs	r3, r3, #1
 8007646:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <USB_EPStartXfer+0xc7e>
 8007656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800765a:	3301      	adds	r3, #1
 800765c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29a      	uxth	r2, r3
 8007666:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800766a:	b29b      	uxth	r3, r3
 800766c:	029b      	lsls	r3, r3, #10
 800766e:	b29b      	uxth	r3, r3
 8007670:	4313      	orrs	r3, r2
 8007672:	b29a      	uxth	r2, r3
 8007674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	e030      	b.n	80076dc <USB_EPStartXfer+0xcfa>
 800767a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d128      	bne.n	80076dc <USB_EPStartXfer+0xcfa>
 800768a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076ae:	4413      	add	r3, r2
 80076b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	00da      	lsls	r2, r3, #3
 80076c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80076da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	891b      	ldrh	r3, [r3, #8]
 80076e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6959      	ldr	r1, [r3, #20]
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007702:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007706:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800770a:	6800      	ldr	r0, [r0, #0]
 800770c:	f000 fe48 	bl	80083a0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007736:	817b      	strh	r3, [r7, #10]
 8007738:	897b      	ldrh	r3, [r7, #10]
 800773a:	f083 0310 	eor.w	r3, r3, #16
 800773e:	817b      	strh	r3, [r7, #10]
 8007740:	897b      	ldrh	r3, [r7, #10]
 8007742:	f083 0320 	eor.w	r3, r3, #32
 8007746:	817b      	strh	r3, [r7, #10]
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	897b      	ldrh	r3, [r7, #10]
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]
 8007778:	f000 bcde 	b.w	8008138 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800777c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	7b1b      	ldrb	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 80bb 	bne.w	8007904 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800778e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d917      	bls.n	80077da <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80077aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ca:	1ad2      	subs	r2, r2, r3
 80077cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	619a      	str	r2, [r3, #24]
 80077d8:	e00e      	b.n	80077f8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80077da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80077ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2200      	movs	r2, #0
 80077f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007814:	b29b      	uxth	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800781c:	4413      	add	r3, r2
 800781e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	00da      	lsls	r2, r3, #3
 8007830:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007834:	4413      	add	r3, r2
 8007836:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800783a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800783e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	2b3e      	cmp	r3, #62	@ 0x3e
 8007858:	d924      	bls.n	80078a4 <USB_EPStartXfer+0xec2>
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <USB_EPStartXfer+0xe98>
 8007870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007874:	3b01      	subs	r3, #1
 8007876:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800787a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29a      	uxth	r2, r3
 8007882:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007886:	b29b      	uxth	r3, r3
 8007888:	029b      	lsls	r3, r3, #10
 800788a:	b29b      	uxth	r3, r3
 800788c:	4313      	orrs	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007898:	b29a      	uxth	r2, r3
 800789a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	f000 bc10 	b.w	80080c4 <USB_EPStartXfer+0x16e2>
 80078a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10c      	bne.n	80078c6 <USB_EPStartXfer+0xee4>
 80078ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078bc:	b29a      	uxth	r2, r3
 80078be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078c2:	801a      	strh	r2, [r3, #0]
 80078c4:	e3fe      	b.n	80080c4 <USB_EPStartXfer+0x16e2>
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <USB_EPStartXfer+0xf04>
 80078dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80078e0:	3301      	adds	r3, #1
 80078e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	029b      	lsls	r3, r3, #10
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	4313      	orrs	r3, r2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007900:	801a      	strh	r2, [r3, #0]
 8007902:	e3df      	b.n	80080c4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	78db      	ldrb	r3, [r3, #3]
 8007910:	2b02      	cmp	r3, #2
 8007912:	f040 8218 	bne.w	8007d46 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f040 809d 	bne.w	8007a62 <USB_EPStartXfer+0x1080>
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007944:	b29b      	uxth	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800794c:	4413      	add	r3, r2
 800794e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	00da      	lsls	r2, r3, #3
 8007960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007964:	4413      	add	r3, r2
 8007966:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800796a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800796e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007990:	d92b      	bls.n	80079ea <USB_EPStartXfer+0x1008>
 8007992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <USB_EPStartXfer+0xfe0>
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079bc:	3b01      	subs	r3, #1
 80079be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	029b      	lsls	r3, r3, #10
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4313      	orrs	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	e070      	b.n	8007acc <USB_EPStartXfer+0x10ea>
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10c      	bne.n	8007a14 <USB_EPStartXfer+0x1032>
 80079fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a10:	801a      	strh	r2, [r3, #0]
 8007a12:	e05b      	b.n	8007acc <USB_EPStartXfer+0x10ea>
 8007a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	085b      	lsrs	r3, r3, #1
 8007a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <USB_EPStartXfer+0x1062>
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a3e:	3301      	adds	r3, #1
 8007a40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	029b      	lsls	r3, r3, #10
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	4313      	orrs	r3, r2
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a5e:	801a      	strh	r2, [r3, #0]
 8007a60:	e034      	b.n	8007acc <USB_EPStartXfer+0x10ea>
 8007a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d12c      	bne.n	8007acc <USB_EPStartXfer+0x10ea>
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a96:	4413      	add	r3, r2
 8007a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	00da      	lsls	r2, r3, #3
 8007aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007aae:	4413      	add	r3, r2
 8007ab0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007aca:	801a      	strh	r2, [r3, #0]
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f040 809d 	bne.w	8007c26 <USB_EPStartXfer+0x1244>
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b10:	4413      	add	r3, r2
 8007b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	00da      	lsls	r2, r3, #3
 8007b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b28:	4413      	add	r3, r2
 8007b2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b54:	d92b      	bls.n	8007bae <USB_EPStartXfer+0x11cc>
 8007b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 031f 	and.w	r3, r3, #31
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <USB_EPStartXfer+0x11a4>
 8007b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b80:	3b01      	subs	r3, #1
 8007b82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	029b      	lsls	r3, r3, #10
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e069      	b.n	8007c82 <USB_EPStartXfer+0x12a0>
 8007bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10c      	bne.n	8007bd8 <USB_EPStartXfer+0x11f6>
 8007bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	e054      	b.n	8007c82 <USB_EPStartXfer+0x12a0>
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d004      	beq.n	8007c08 <USB_EPStartXfer+0x1226>
 8007bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c02:	3301      	adds	r3, #1
 8007c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	029b      	lsls	r3, r3, #10
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	e02d      	b.n	8007c82 <USB_EPStartXfer+0x12a0>
 8007c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d125      	bne.n	8007c82 <USB_EPStartXfer+0x12a0>
 8007c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	00da      	lsls	r2, r3, #3
 8007c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c80:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8218 	beq.w	80080c4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <USB_EPStartXfer+0x12ea>
 8007cc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10d      	bne.n	8007ce8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ccc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f040 81f5 	bne.w	80080c4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f040 81ee 	bne.w	80080c4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d0e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	441a      	add	r2, r3
 8007d2c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	8013      	strh	r3, [r2, #0]
 8007d44:	e1be      	b.n	80080c4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	78db      	ldrb	r3, [r3, #3]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	f040 81b4 	bne.w	80080c0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699a      	ldr	r2, [r3, #24]
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d917      	bls.n	8007da4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699a      	ldr	r2, [r3, #24]
 8007d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	619a      	str	r2, [r3, #24]
 8007da2:	e00e      	b.n	8007dc2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 8085 	bne.w	8007ede <USB_EPStartXfer+0x14fc>
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007df8:	4413      	add	r3, r2
 8007dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	00da      	lsls	r2, r3, #3
 8007e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e10:	4413      	add	r3, r2
 8007e12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e32:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e34:	d923      	bls.n	8007e7e <USB_EPStartXfer+0x149c>
 8007e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <USB_EPStartXfer+0x1474>
 8007e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e50:	3b01      	subs	r3, #1
 8007e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	029b      	lsls	r3, r3, #10
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e7a:	801a      	strh	r2, [r3, #0]
 8007e7c:	e060      	b.n	8007f40 <USB_EPStartXfer+0x155e>
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10c      	bne.n	8007ea0 <USB_EPStartXfer+0x14be>
 8007e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e9c:	801a      	strh	r2, [r3, #0]
 8007e9e:	e04f      	b.n	8007f40 <USB_EPStartXfer+0x155e>
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d004      	beq.n	8007ec0 <USB_EPStartXfer+0x14de>
 8007eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	029b      	lsls	r3, r3, #10
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	e030      	b.n	8007f40 <USB_EPStartXfer+0x155e>
 8007ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d128      	bne.n	8007f40 <USB_EPStartXfer+0x155e>
 8007eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f12:	4413      	add	r3, r2
 8007f14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	00da      	lsls	r2, r3, #3
 8007f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f040 8085 	bne.w	800806a <USB_EPStartXfer+0x1688>
 8007f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007f84:	4413      	add	r3, r2
 8007f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	00da      	lsls	r2, r3, #3
 8007f98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fc0:	d923      	bls.n	800800a <USB_EPStartXfer+0x1628>
 8007fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc6:	095b      	lsrs	r3, r3, #5
 8007fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd0:	f003 031f 	and.w	r3, r3, #31
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <USB_EPStartXfer+0x1600>
 8007fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	029b      	lsls	r3, r3, #10
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008000:	b29a      	uxth	r2, r3
 8008002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	e05c      	b.n	80080c4 <USB_EPStartXfer+0x16e2>
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10c      	bne.n	800802c <USB_EPStartXfer+0x164a>
 8008012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008022:	b29a      	uxth	r2, r3
 8008024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	e04b      	b.n	80080c4 <USB_EPStartXfer+0x16e2>
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008030:	085b      	lsrs	r3, r3, #1
 8008032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <USB_EPStartXfer+0x166a>
 8008042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008046:	3301      	adds	r3, #1
 8008048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800804c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29a      	uxth	r2, r3
 8008054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008058:	b29b      	uxth	r3, r3
 800805a:	029b      	lsls	r3, r3, #10
 800805c:	b29b      	uxth	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b29a      	uxth	r2, r3
 8008062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	e02c      	b.n	80080c4 <USB_EPStartXfer+0x16e2>
 800806a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d124      	bne.n	80080c4 <USB_EPStartXfer+0x16e2>
 800807a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008088:	b29b      	uxth	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008090:	4413      	add	r3, r2
 8008092:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	00da      	lsls	r2, r3, #3
 80080a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80080a8:	4413      	add	r3, r2
 80080aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e001      	b.n	80080c4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e03a      	b.n	800813a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80080ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080f6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80080fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80080fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008102:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	441a      	add	r2, r3
 8008120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800812c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008134:	b29b      	uxth	r3, r3
 8008136:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d020      	beq.n	8008198 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800816c:	81bb      	strh	r3, [r7, #12]
 800816e:	89bb      	ldrh	r3, [r7, #12]
 8008170:	f083 0310 	eor.w	r3, r3, #16
 8008174:	81bb      	strh	r3, [r7, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	441a      	add	r2, r3
 8008180:	89bb      	ldrh	r3, [r7, #12]
 8008182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800818a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800818e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008192:	b29b      	uxth	r3, r3
 8008194:	8013      	strh	r3, [r2, #0]
 8008196:	e01f      	b.n	80081d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ae:	81fb      	strh	r3, [r7, #14]
 80081b0:	89fb      	ldrh	r3, [r7, #14]
 80081b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80081b6:	81fb      	strh	r3, [r7, #14]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	441a      	add	r2, r3
 80081c2:	89fb      	ldrh	r3, [r7, #14]
 80081c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b087      	sub	sp, #28
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	7b1b      	ldrb	r3, [r3, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f040 809d 	bne.w	8008334 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d04c      	beq.n	800829c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	823b      	strh	r3, [r7, #16]
 8008210:	8a3b      	ldrh	r3, [r7, #16]
 8008212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01b      	beq.n	8008252 <USB_EPClearStall+0x6c>
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800822c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008230:	81fb      	strh	r3, [r7, #14]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	441a      	add	r2, r3
 800823c:	89fb      	ldrh	r3, [r7, #14]
 800823e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800824a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800824e:	b29b      	uxth	r3, r3
 8008250:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	78db      	ldrb	r3, [r3, #3]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d06c      	beq.n	8008334 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800826c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008270:	81bb      	strh	r3, [r7, #12]
 8008272:	89bb      	ldrh	r3, [r7, #12]
 8008274:	f083 0320 	eor.w	r3, r3, #32
 8008278:	81bb      	strh	r3, [r7, #12]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	441a      	add	r2, r3
 8008284:	89bb      	ldrh	r3, [r7, #12]
 8008286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800828a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800828e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008296:	b29b      	uxth	r3, r3
 8008298:	8013      	strh	r3, [r2, #0]
 800829a:	e04b      	b.n	8008334 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	82fb      	strh	r3, [r7, #22]
 80082aa:	8afb      	ldrh	r3, [r7, #22]
 80082ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01b      	beq.n	80082ec <USB_EPClearStall+0x106>
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ca:	82bb      	strh	r3, [r7, #20]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	441a      	add	r2, r3
 80082d6:	8abb      	ldrh	r3, [r7, #20]
 80082d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008302:	827b      	strh	r3, [r7, #18]
 8008304:	8a7b      	ldrh	r3, [r7, #18]
 8008306:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800830a:	827b      	strh	r3, [r7, #18]
 800830c:	8a7b      	ldrh	r3, [r7, #18]
 800830e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008312:	827b      	strh	r3, [r7, #18]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	441a      	add	r2, r3
 800831e:	8a7b      	ldrh	r3, [r7, #18]
 8008320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800832c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008330:	b29b      	uxth	r3, r3
 8008332:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2280      	movs	r2, #128	@ 0x80
 8008358:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800838e:	b29b      	uxth	r3, r3
 8008390:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008392:	68fb      	ldr	r3, [r7, #12]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b08b      	sub	sp, #44	@ 0x2c
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4611      	mov	r1, r2
 80083ac:	461a      	mov	r2, r3
 80083ae:	460b      	mov	r3, r1
 80083b0:	80fb      	strh	r3, [r7, #6]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80083b6:	88bb      	ldrh	r3, [r7, #4]
 80083b8:	3301      	adds	r3, #1
 80083ba:	085b      	lsrs	r3, r3, #1
 80083bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083d6:	e01b      	b.n	8008410 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	3301      	adds	r3, #1
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	b21a      	sxth	r2, r3
 80083e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	b21b      	sxth	r3, r3
 80083f0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	8a7a      	ldrh	r2, [r7, #18]
 80083f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	3302      	adds	r3, #2
 80083fc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	3301      	adds	r3, #1
 8008402:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	3301      	adds	r3, #1
 8008408:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	3b01      	subs	r3, #1
 800840e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e0      	bne.n	80083d8 <USB_WritePMA+0x38>
  }
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	372c      	adds	r7, #44	@ 0x2c
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008424:	b480      	push	{r7}
 8008426:	b08b      	sub	sp, #44	@ 0x2c
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4611      	mov	r1, r2
 8008430:	461a      	mov	r2, r3
 8008432:	460b      	mov	r3, r1
 8008434:	80fb      	strh	r3, [r7, #6]
 8008436:	4613      	mov	r3, r2
 8008438:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800843a:	88bb      	ldrh	r3, [r7, #4]
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	b29b      	uxth	r3, r3
 8008440:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008454:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	627b      	str	r3, [r7, #36]	@ 0x24
 800845a:	e018      	b.n	800848e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	3302      	adds	r3, #2
 8008468:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	b2da      	uxtb	r2, r3
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	3301      	adds	r3, #1
 8008476:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	b2da      	uxtb	r2, r3
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	3301      	adds	r3, #1
 8008486:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	3b01      	subs	r3, #1
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e3      	bne.n	800845c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008494:	88bb      	ldrh	r3, [r7, #4]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	b29b      	uxth	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d007      	beq.n	80084b0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	701a      	strb	r2, [r3, #0]
  }
}
 80084b0:	bf00      	nop
 80084b2:	372c      	adds	r7, #44	@ 0x2c
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7c1b      	ldrb	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d115      	bne.n	8008500 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80084d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084d8:	2202      	movs	r2, #2
 80084da:	2181      	movs	r1, #129	@ 0x81
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 fe92 	bl	800a206 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80084e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084ec:	2202      	movs	r2, #2
 80084ee:	2101      	movs	r1, #1
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 fe88 	bl	800a206 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80084fe:	e012      	b.n	8008526 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008500:	2340      	movs	r3, #64	@ 0x40
 8008502:	2202      	movs	r2, #2
 8008504:	2181      	movs	r1, #129	@ 0x81
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 fe7d 	bl	800a206 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008512:	2340      	movs	r3, #64	@ 0x40
 8008514:	2202      	movs	r2, #2
 8008516:	2101      	movs	r1, #1
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 fe74 	bl	800a206 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008526:	2308      	movs	r3, #8
 8008528:	2203      	movs	r2, #3
 800852a:	2182      	movs	r1, #130	@ 0x82
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fe6a 	bl	800a206 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008538:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800853c:	f001 ff8c 	bl	800a458 <USBD_static_malloc>
 8008540:	4602      	mov	r2, r0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008552:	2301      	movs	r3, #1
 8008554:	73fb      	strb	r3, [r7, #15]
 8008556:	e026      	b.n	80085a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800855e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7c1b      	ldrb	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d109      	bne.n	8008596 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008588:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800858c:	2101      	movs	r1, #1
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 ff2b 	bl	800a3ea <USBD_LL_PrepareReceive>
 8008594:	e007      	b.n	80085a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800859c:	2340      	movs	r3, #64	@ 0x40
 800859e:	2101      	movs	r1, #1
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 ff22 	bl	800a3ea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085c0:	2181      	movs	r1, #129	@ 0x81
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 fe45 	bl	800a252 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085ce:	2101      	movs	r1, #1
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fe3e 	bl	800a252 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80085de:	2182      	movs	r1, #130	@ 0x82
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fe36 	bl	800a252 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008606:	4618      	mov	r0, r3
 8008608:	f001 ff34 	bl	800a474 <USBD_static_free>
    pdev->pClassData = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008644:	2b00      	cmp	r3, #0
 8008646:	d039      	beq.n	80086bc <USBD_CDC_Setup+0x9e>
 8008648:	2b20      	cmp	r3, #32
 800864a:	d17f      	bne.n	800874c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	88db      	ldrh	r3, [r3, #6]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d029      	beq.n	80086a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	b25b      	sxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	da11      	bge.n	8008682 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800866a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	88d2      	ldrh	r2, [r2, #6]
 8008670:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008672:	6939      	ldr	r1, [r7, #16]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	88db      	ldrh	r3, [r3, #6]
 8008678:	461a      	mov	r2, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 fa10 	bl	8009aa0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008680:	e06b      	b.n	800875a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	785a      	ldrb	r2, [r3, #1]
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	88db      	ldrh	r3, [r3, #6]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008698:	6939      	ldr	r1, [r7, #16]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	88db      	ldrh	r3, [r3, #6]
 800869e:	461a      	mov	r2, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fa2b 	bl	8009afc <USBD_CtlPrepareRx>
      break;
 80086a6:	e058      	b.n	800875a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	7850      	ldrb	r0, [r2, #1]
 80086b4:	2200      	movs	r2, #0
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	4798      	blx	r3
      break;
 80086ba:	e04e      	b.n	800875a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	2b0b      	cmp	r3, #11
 80086c2:	d02e      	beq.n	8008722 <USBD_CDC_Setup+0x104>
 80086c4:	2b0b      	cmp	r3, #11
 80086c6:	dc38      	bgt.n	800873a <USBD_CDC_Setup+0x11c>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <USBD_CDC_Setup+0xb4>
 80086cc:	2b0a      	cmp	r3, #10
 80086ce:	d014      	beq.n	80086fa <USBD_CDC_Setup+0xdc>
 80086d0:	e033      	b.n	800873a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d107      	bne.n	80086ec <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80086dc:	f107 030c 	add.w	r3, r7, #12
 80086e0:	2202      	movs	r2, #2
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f9db 	bl	8009aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086ea:	e02e      	b.n	800874a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 f96b 	bl	80099ca <USBD_CtlError>
            ret = USBD_FAIL;
 80086f4:	2302      	movs	r3, #2
 80086f6:	75fb      	strb	r3, [r7, #23]
          break;
 80086f8:	e027      	b.n	800874a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008700:	2b03      	cmp	r3, #3
 8008702:	d107      	bne.n	8008714 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008704:	f107 030f 	add.w	r3, r7, #15
 8008708:	2201      	movs	r2, #1
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 f9c7 	bl	8009aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008712:	e01a      	b.n	800874a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 f957 	bl	80099ca <USBD_CtlError>
            ret = USBD_FAIL;
 800871c:	2302      	movs	r3, #2
 800871e:	75fb      	strb	r3, [r7, #23]
          break;
 8008720:	e013      	b.n	800874a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008728:	2b03      	cmp	r3, #3
 800872a:	d00d      	beq.n	8008748 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 f94b 	bl	80099ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008734:	2302      	movs	r3, #2
 8008736:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008738:	e006      	b.n	8008748 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f944 	bl	80099ca <USBD_CtlError>
          ret = USBD_FAIL;
 8008742:	2302      	movs	r3, #2
 8008744:	75fb      	strb	r3, [r7, #23]
          break;
 8008746:	e000      	b.n	800874a <USBD_CDC_Setup+0x12c>
          break;
 8008748:	bf00      	nop
      }
      break;
 800874a:	e006      	b.n	800875a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 f93b 	bl	80099ca <USBD_CtlError>
      ret = USBD_FAIL;
 8008754:	2302      	movs	r3, #2
 8008756:	75fb      	strb	r3, [r7, #23]
      break;
 8008758:	bf00      	nop
  }

  return ret;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008776:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800877e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d03a      	beq.n	8008800 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	331c      	adds	r3, #28
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d029      	beq.n	80087f4 <USBD_CDC_DataIn+0x90>
 80087a0:	78fa      	ldrb	r2, [r7, #3]
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	331c      	adds	r3, #28
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	78f9      	ldrb	r1, [r7, #3]
 80087b4:	68b8      	ldr	r0, [r7, #8]
 80087b6:	460b      	mov	r3, r1
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	4403      	add	r3, r0
 80087c0:	3338      	adds	r3, #56	@ 0x38
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80087c8:	fb01 f303 	mul.w	r3, r1, r3
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d110      	bne.n	80087f4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	331c      	adds	r3, #28
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80087e6:	78f9      	ldrb	r1, [r7, #3]
 80087e8:	2300      	movs	r3, #0
 80087ea:	2200      	movs	r2, #0
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fdd9 	bl	800a3a4 <USBD_LL_Transmit>
 80087f2:	e003      	b.n	80087fc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e000      	b.n	8008802 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008800:	2302      	movs	r3, #2
  }
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 fe04 	bl	800a430 <USBD_LL_GetRxDataSize>
 8008828:	4602      	mov	r2, r0
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00d      	beq.n	8008856 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800884e:	4611      	mov	r1, r2
 8008850:	4798      	blx	r3

    return USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	e000      	b.n	8008858 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008856:	2302      	movs	r3, #2
  }
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800886e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008876:	2b00      	cmp	r3, #0
 8008878:	d014      	beq.n	80088a4 <USBD_CDC_EP0_RxReady+0x44>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008880:	2bff      	cmp	r3, #255	@ 0xff
 8008882:	d00f      	beq.n	80088a4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008892:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800889a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	22ff      	movs	r2, #255	@ 0xff
 80088a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2243      	movs	r2, #67	@ 0x43
 80088bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80088be:	4b03      	ldr	r3, [pc, #12]	@ (80088cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	200000ec 	.word	0x200000ec

080088d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2243      	movs	r2, #67	@ 0x43
 80088dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80088de:	4b03      	ldr	r3, [pc, #12]	@ (80088ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	200000a8 	.word	0x200000a8

080088f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2243      	movs	r2, #67	@ 0x43
 80088fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80088fe:	4b03      	ldr	r3, [pc, #12]	@ (800890c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	20000130 	.word	0x20000130

08008910 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	220a      	movs	r2, #10
 800891c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800891e:	4b03      	ldr	r3, [pc, #12]	@ (800892c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008920:	4618      	mov	r0, r3
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	20000064 	.word	0x20000064

08008930 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800893a:	2302      	movs	r3, #2
 800893c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800895e:	b480      	push	{r7}
 8008960:	b087      	sub	sp, #28
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	4613      	mov	r3, r2
 800896a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008972:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800897c:	88fa      	ldrh	r2, [r7, #6]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01c      	beq.n	8008a0e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d115      	bne.n	8008a0a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	2181      	movs	r1, #129	@ 0x81
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 fccf 	bl	800a3a4 <USBD_LL_Transmit>

      return USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e002      	b.n	8008a10 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008a0e:	2302      	movs	r3, #2
  }
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d017      	beq.n	8008a62 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7c1b      	ldrb	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d109      	bne.n	8008a4e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a44:	2101      	movs	r1, #1
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fccf 	bl	800a3ea <USBD_LL_PrepareReceive>
 8008a4c:	e007      	b.n	8008a5e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008a54:	2340      	movs	r3, #64	@ 0x40
 8008a56:	2101      	movs	r1, #1
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 fcc6 	bl	800a3ea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e000      	b.n	8008a64 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008a62:	2302      	movs	r3, #2
  }
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a80:	2302      	movs	r3, #2
 8008a82:	e01a      	b.n	8008aba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	79fa      	ldrb	r2, [r7, #7]
 8008ab0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f001 fb30 	bl	800a118 <USBD_LL_Init>

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d006      	beq.n	8008ae4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
 8008ae2:	e001      	b.n	8008ae8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fb66 	bl	800a1d0 <USBD_LL_Start>

  return USBD_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b30:	2302      	movs	r3, #2
 8008b32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00c      	beq.n	8008b58 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3

  return USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fedb 	bl	8009956 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008bae:	461a      	mov	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d016      	beq.n	8008bf2 <USBD_LL_SetupStage+0x6a>
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d81c      	bhi.n	8008c02 <USBD_LL_SetupStage+0x7a>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <USBD_LL_SetupStage+0x4a>
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d008      	beq.n	8008be2 <USBD_LL_SetupStage+0x5a>
 8008bd0:	e017      	b.n	8008c02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f9ce 	bl	8008f7c <USBD_StdDevReq>
      break;
 8008be0:	e01a      	b.n	8008c18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa30 	bl	8009050 <USBD_StdItfReq>
      break;
 8008bf0:	e012      	b.n	8008c18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa70 	bl	80090e0 <USBD_StdEPReq>
      break;
 8008c00:	e00a      	b.n	8008c18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008c08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 fb3d 	bl	800a290 <USBD_LL_StallEP>
      break;
 8008c16:	bf00      	nop
  }

  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d14b      	bne.n	8008cce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008c3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d134      	bne.n	8008cb2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d919      	bls.n	8008c88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	68da      	ldr	r2, [r3, #12]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	1ad2      	subs	r2, r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d203      	bcs.n	8008c76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	e002      	b.n	8008c7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 ff59 	bl	8009b38 <USBD_CtlContinueRx>
 8008c86:	e038      	b.n	8008cfa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d105      	bne.n	8008caa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 ff56 	bl	8009b5c <USBD_CtlSendStatus>
 8008cb0:	e023      	b.n	8008cfa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008cb8:	2b05      	cmp	r3, #5
 8008cba:	d11e      	bne.n	8008cfa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f001 fae2 	bl	800a290 <USBD_LL_StallEP>
 8008ccc:	e015      	b.n	8008cfa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00d      	beq.n	8008cf6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d108      	bne.n	8008cf6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	7afa      	ldrb	r2, [r7, #11]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	4798      	blx	r3
 8008cf4:	e001      	b.n	8008cfa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e000      	b.n	8008cfc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d17f      	bne.n	8008e18 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3314      	adds	r3, #20
 8008d1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d15c      	bne.n	8008de2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d915      	bls.n	8008d60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	1ad2      	subs	r2, r2, r3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	461a      	mov	r2, r3
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fec3 	bl	8009ad8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d52:	2300      	movs	r3, #0
 8008d54:	2200      	movs	r2, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f001 fb46 	bl	800a3ea <USBD_LL_PrepareReceive>
 8008d5e:	e04e      	b.n	8008dfe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	6912      	ldr	r2, [r2, #16]
 8008d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d6c:	fb01 f202 	mul.w	r2, r1, r2
 8008d70:	1a9b      	subs	r3, r3, r2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d11c      	bne.n	8008db0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d316      	bcc.n	8008db0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d20f      	bcs.n	8008db0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d90:	2200      	movs	r2, #0
 8008d92:	2100      	movs	r1, #0
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 fe9f 	bl	8009ad8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008da2:	2300      	movs	r3, #0
 8008da4:	2200      	movs	r2, #0
 8008da6:	2100      	movs	r1, #0
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f001 fb1e 	bl	800a3ea <USBD_LL_PrepareReceive>
 8008dae:	e026      	b.n	8008dfe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d105      	bne.n	8008dd2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008dd2:	2180      	movs	r1, #128	@ 0x80
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f001 fa5b 	bl	800a290 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fed1 	bl	8009b82 <USBD_CtlReceiveStatus>
 8008de0:	e00d      	b.n	8008dfe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d004      	beq.n	8008df6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008df6:	2180      	movs	r1, #128	@ 0x80
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f001 fa49 	bl	800a290 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d11d      	bne.n	8008e44 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff fe80 	bl	8008b0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008e16:	e015      	b.n	8008e44 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00d      	beq.n	8008e40 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d108      	bne.n	8008e40 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	7afa      	ldrb	r2, [r7, #11]
 8008e38:	4611      	mov	r1, r2
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	4798      	blx	r3
 8008e3e:	e001      	b.n	8008e44 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e40:	2302      	movs	r3, #2
 8008e42:	e000      	b.n	8008e46 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e56:	2340      	movs	r3, #64	@ 0x40
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 f9d2 	bl	800a206 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2240      	movs	r2, #64	@ 0x40
 8008e6e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e72:	2340      	movs	r3, #64	@ 0x40
 8008e74:	2200      	movs	r2, #0
 8008e76:	2180      	movs	r1, #128	@ 0x80
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f9c4 	bl	800a206 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2240      	movs	r2, #64	@ 0x40
 8008e88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6852      	ldr	r2, [r2, #4]
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
  }

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2204      	movs	r2, #4
 8008f08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d105      	bne.n	8008f38 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d10b      	bne.n	8008f70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f92:	2b40      	cmp	r3, #64	@ 0x40
 8008f94:	d005      	beq.n	8008fa2 <USBD_StdDevReq+0x26>
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d84f      	bhi.n	800903a <USBD_StdDevReq+0xbe>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <USBD_StdDevReq+0x36>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d14b      	bne.n	800903a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	4798      	blx	r3
      break;
 8008fb0:	e048      	b.n	8009044 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d839      	bhi.n	800902e <USBD_StdDevReq+0xb2>
 8008fba:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc0 <USBD_StdDevReq+0x44>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08009011 	.word	0x08009011
 8008fc4:	08009025 	.word	0x08009025
 8008fc8:	0800902f 	.word	0x0800902f
 8008fcc:	0800901b 	.word	0x0800901b
 8008fd0:	0800902f 	.word	0x0800902f
 8008fd4:	08008ff3 	.word	0x08008ff3
 8008fd8:	08008fe9 	.word	0x08008fe9
 8008fdc:	0800902f 	.word	0x0800902f
 8008fe0:	08009007 	.word	0x08009007
 8008fe4:	08008ffd 	.word	0x08008ffd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9dc 	bl	80093a8 <USBD_GetDescriptor>
          break;
 8008ff0:	e022      	b.n	8009038 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fb3f 	bl	8009678 <USBD_SetAddress>
          break;
 8008ffa:	e01d      	b.n	8009038 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fb7e 	bl	8009700 <USBD_SetConfig>
          break;
 8009004:	e018      	b.n	8009038 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc07 	bl	800981c <USBD_GetConfig>
          break;
 800900e:	e013      	b.n	8009038 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fc37 	bl	8009886 <USBD_GetStatus>
          break;
 8009018:	e00e      	b.n	8009038 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fc65 	bl	80098ec <USBD_SetFeature>
          break;
 8009022:	e009      	b.n	8009038 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fc74 	bl	8009914 <USBD_ClrFeature>
          break;
 800902c:	e004      	b.n	8009038 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fcca 	bl	80099ca <USBD_CtlError>
          break;
 8009036:	bf00      	nop
      }
      break;
 8009038:	e004      	b.n	8009044 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fcc4 	bl	80099ca <USBD_CtlError>
      break;
 8009042:	bf00      	nop
  }

  return ret;
 8009044:	7bfb      	ldrb	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop

08009050 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009066:	2b40      	cmp	r3, #64	@ 0x40
 8009068:	d005      	beq.n	8009076 <USBD_StdItfReq+0x26>
 800906a:	2b40      	cmp	r3, #64	@ 0x40
 800906c:	d82e      	bhi.n	80090cc <USBD_StdItfReq+0x7c>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <USBD_StdItfReq+0x26>
 8009072:	2b20      	cmp	r3, #32
 8009074:	d12a      	bne.n	80090cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800907c:	3b01      	subs	r3, #1
 800907e:	2b02      	cmp	r3, #2
 8009080:	d81d      	bhi.n	80090be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b01      	cmp	r3, #1
 800908a:	d813      	bhi.n	80090b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	4798      	blx	r3
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	88db      	ldrh	r3, [r3, #6]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d110      	bne.n	80090c8 <USBD_StdItfReq+0x78>
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10d      	bne.n	80090c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fd55 	bl	8009b5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80090b2:	e009      	b.n	80090c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fc87 	bl	80099ca <USBD_CtlError>
          break;
 80090bc:	e004      	b.n	80090c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fc82 	bl	80099ca <USBD_CtlError>
          break;
 80090c6:	e000      	b.n	80090ca <USBD_StdItfReq+0x7a>
          break;
 80090c8:	bf00      	nop
      }
      break;
 80090ca:	e004      	b.n	80090d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fc7b 	bl	80099ca <USBD_CtlError>
      break;
 80090d4:	bf00      	nop
  }

  return USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	889b      	ldrh	r3, [r3, #4]
 80090f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090fc:	2b40      	cmp	r3, #64	@ 0x40
 80090fe:	d007      	beq.n	8009110 <USBD_StdEPReq+0x30>
 8009100:	2b40      	cmp	r3, #64	@ 0x40
 8009102:	f200 8146 	bhi.w	8009392 <USBD_StdEPReq+0x2b2>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <USBD_StdEPReq+0x40>
 800910a:	2b20      	cmp	r3, #32
 800910c:	f040 8141 	bne.w	8009392 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
      break;
 800911e:	e13d      	b.n	800939c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009128:	2b20      	cmp	r3, #32
 800912a:	d10a      	bne.n	8009142 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
 800913a:	4603      	mov	r3, r0
 800913c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	e12d      	b.n	800939e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	785b      	ldrb	r3, [r3, #1]
 8009146:	2b03      	cmp	r3, #3
 8009148:	d007      	beq.n	800915a <USBD_StdEPReq+0x7a>
 800914a:	2b03      	cmp	r3, #3
 800914c:	f300 811b 	bgt.w	8009386 <USBD_StdEPReq+0x2a6>
 8009150:	2b00      	cmp	r3, #0
 8009152:	d072      	beq.n	800923a <USBD_StdEPReq+0x15a>
 8009154:	2b01      	cmp	r3, #1
 8009156:	d03a      	beq.n	80091ce <USBD_StdEPReq+0xee>
 8009158:	e115      	b.n	8009386 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009160:	2b02      	cmp	r3, #2
 8009162:	d002      	beq.n	800916a <USBD_StdEPReq+0x8a>
 8009164:	2b03      	cmp	r3, #3
 8009166:	d015      	beq.n	8009194 <USBD_StdEPReq+0xb4>
 8009168:	e02b      	b.n	80091c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00c      	beq.n	800918a <USBD_StdEPReq+0xaa>
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	2b80      	cmp	r3, #128	@ 0x80
 8009174:	d009      	beq.n	800918a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 f888 	bl	800a290 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009180:	2180      	movs	r1, #128	@ 0x80
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 f884 	bl	800a290 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009188:	e020      	b.n	80091cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fc1c 	bl	80099ca <USBD_CtlError>
              break;
 8009192:	e01b      	b.n	80091cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	885b      	ldrh	r3, [r3, #2]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10e      	bne.n	80091ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00b      	beq.n	80091ba <USBD_StdEPReq+0xda>
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	2b80      	cmp	r3, #128	@ 0x80
 80091a6:	d008      	beq.n	80091ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	88db      	ldrh	r3, [r3, #6]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d104      	bne.n	80091ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f86b 	bl	800a290 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fcce 	bl	8009b5c <USBD_CtlSendStatus>

              break;
 80091c0:	e004      	b.n	80091cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fc00 	bl	80099ca <USBD_CtlError>
              break;
 80091ca:	bf00      	nop
          }
          break;
 80091cc:	e0e0      	b.n	8009390 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d002      	beq.n	80091de <USBD_StdEPReq+0xfe>
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d015      	beq.n	8009208 <USBD_StdEPReq+0x128>
 80091dc:	e026      	b.n	800922c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00c      	beq.n	80091fe <USBD_StdEPReq+0x11e>
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	2b80      	cmp	r3, #128	@ 0x80
 80091e8:	d009      	beq.n	80091fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 f84e 	bl	800a290 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80091f4:	2180      	movs	r1, #128	@ 0x80
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 f84a 	bl	800a290 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091fc:	e01c      	b.n	8009238 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fbe2 	bl	80099ca <USBD_CtlError>
              break;
 8009206:	e017      	b.n	8009238 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	885b      	ldrh	r3, [r3, #2]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d112      	bne.n	8009236 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 f855 	bl	800a2ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fc99 	bl	8009b5c <USBD_CtlSendStatus>
              }
              break;
 800922a:	e004      	b.n	8009236 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fbcb 	bl	80099ca <USBD_CtlError>
              break;
 8009234:	e000      	b.n	8009238 <USBD_StdEPReq+0x158>
              break;
 8009236:	bf00      	nop
          }
          break;
 8009238:	e0aa      	b.n	8009390 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009240:	2b02      	cmp	r3, #2
 8009242:	d002      	beq.n	800924a <USBD_StdEPReq+0x16a>
 8009244:	2b03      	cmp	r3, #3
 8009246:	d032      	beq.n	80092ae <USBD_StdEPReq+0x1ce>
 8009248:	e097      	b.n	800937a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <USBD_StdEPReq+0x180>
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	2b80      	cmp	r3, #128	@ 0x80
 8009254:	d004      	beq.n	8009260 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fbb6 	bl	80099ca <USBD_CtlError>
                break;
 800925e:	e091      	b.n	8009384 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009264:	2b00      	cmp	r3, #0
 8009266:	da0b      	bge.n	8009280 <USBD_StdEPReq+0x1a0>
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	3310      	adds	r3, #16
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	4413      	add	r3, r2
 800927c:	3304      	adds	r3, #4
 800927e:	e00b      	b.n	8009298 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009286:	4613      	mov	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	3304      	adds	r3, #4
 8009298:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2200      	movs	r2, #0
 800929e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2202      	movs	r2, #2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fbfa 	bl	8009aa0 <USBD_CtlSendData>
              break;
 80092ac:	e06a      	b.n	8009384 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da11      	bge.n	80092da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	f003 020f 	and.w	r2, r3, #15
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	3318      	adds	r3, #24
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d117      	bne.n	8009300 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fb79 	bl	80099ca <USBD_CtlError>
                  break;
 80092d8:	e054      	b.n	8009384 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d104      	bne.n	8009300 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fb66 	bl	80099ca <USBD_CtlError>
                  break;
 80092fe:	e041      	b.n	8009384 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009304:	2b00      	cmp	r3, #0
 8009306:	da0b      	bge.n	8009320 <USBD_StdEPReq+0x240>
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	3310      	adds	r3, #16
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	4413      	add	r3, r2
 800931c:	3304      	adds	r3, #4
 800931e:	e00b      	b.n	8009338 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009326:	4613      	mov	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	4413      	add	r3, r2
 8009336:	3304      	adds	r3, #4
 8009338:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <USBD_StdEPReq+0x266>
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b80      	cmp	r3, #128	@ 0x80
 8009344:	d103      	bne.n	800934e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	e00e      	b.n	800936c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 ffda 	bl	800a30c <USBD_LL_IsStallEP>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2201      	movs	r2, #1
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e002      	b.n	800936c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2202      	movs	r2, #2
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fb94 	bl	8009aa0 <USBD_CtlSendData>
              break;
 8009378:	e004      	b.n	8009384 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fb24 	bl	80099ca <USBD_CtlError>
              break;
 8009382:	bf00      	nop
          }
          break;
 8009384:	e004      	b.n	8009390 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fb1e 	bl	80099ca <USBD_CtlError>
          break;
 800938e:	bf00      	nop
      }
      break;
 8009390:	e004      	b.n	800939c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fb18 	bl	80099ca <USBD_CtlError>
      break;
 800939a:	bf00      	nop
  }

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	0a1b      	lsrs	r3, r3, #8
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	2b06      	cmp	r3, #6
 80093ca:	f200 8128 	bhi.w	800961e <USBD_GetDescriptor+0x276>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <USBD_GetDescriptor+0x2c>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	080093f1 	.word	0x080093f1
 80093d8:	08009409 	.word	0x08009409
 80093dc:	08009449 	.word	0x08009449
 80093e0:	0800961f 	.word	0x0800961f
 80093e4:	0800961f 	.word	0x0800961f
 80093e8:	080095bf 	.word	0x080095bf
 80093ec:	080095eb 	.word	0x080095eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
 80093fc:	f107 0108 	add.w	r1, r7, #8
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
 8009404:	60f8      	str	r0, [r7, #12]
      break;
 8009406:	e112      	b.n	800962e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7c1b      	ldrb	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10d      	bne.n	800942c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009418:	f107 0208 	add.w	r2, r7, #8
 800941c:	4610      	mov	r0, r2
 800941e:	4798      	blx	r3
 8009420:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3301      	adds	r3, #1
 8009426:	2202      	movs	r2, #2
 8009428:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800942a:	e100      	b.n	800962e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	f107 0208 	add.w	r2, r7, #8
 8009438:	4610      	mov	r0, r2
 800943a:	4798      	blx	r3
 800943c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	2202      	movs	r2, #2
 8009444:	701a      	strb	r2, [r3, #0]
      break;
 8009446:	e0f2      	b.n	800962e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	885b      	ldrh	r3, [r3, #2]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b05      	cmp	r3, #5
 8009450:	f200 80ac 	bhi.w	80095ac <USBD_GetDescriptor+0x204>
 8009454:	a201      	add	r2, pc, #4	@ (adr r2, 800945c <USBD_GetDescriptor+0xb4>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	08009475 	.word	0x08009475
 8009460:	080094a9 	.word	0x080094a9
 8009464:	080094dd 	.word	0x080094dd
 8009468:	08009511 	.word	0x08009511
 800946c:	08009545 	.word	0x08009545
 8009470:	08009579 	.word	0x08009579
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	7c12      	ldrb	r2, [r2, #16]
 800948c:	f107 0108 	add.w	r1, r7, #8
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009496:	e091      	b.n	80095bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa95 	bl	80099ca <USBD_CtlError>
            err++;
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	3301      	adds	r3, #1
 80094a4:	72fb      	strb	r3, [r7, #11]
          break;
 80094a6:	e089      	b.n	80095bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00b      	beq.n	80094cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	7c12      	ldrb	r2, [r2, #16]
 80094c0:	f107 0108 	add.w	r1, r7, #8
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ca:	e077      	b.n	80095bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa7b 	bl	80099ca <USBD_CtlError>
            err++;
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	3301      	adds	r3, #1
 80094d8:	72fb      	strb	r3, [r7, #11]
          break;
 80094da:	e06f      	b.n	80095bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	7c12      	ldrb	r2, [r2, #16]
 80094f4:	f107 0108 	add.w	r1, r7, #8
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
 80094fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094fe:	e05d      	b.n	80095bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa61 	bl	80099ca <USBD_CtlError>
            err++;
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	3301      	adds	r3, #1
 800950c:	72fb      	strb	r3, [r7, #11]
          break;
 800950e:	e055      	b.n	80095bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	7c12      	ldrb	r2, [r2, #16]
 8009528:	f107 0108 	add.w	r1, r7, #8
 800952c:	4610      	mov	r0, r2
 800952e:	4798      	blx	r3
 8009530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009532:	e043      	b.n	80095bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa47 	bl	80099ca <USBD_CtlError>
            err++;
 800953c:	7afb      	ldrb	r3, [r7, #11]
 800953e:	3301      	adds	r3, #1
 8009540:	72fb      	strb	r3, [r7, #11]
          break;
 8009542:	e03b      	b.n	80095bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	7c12      	ldrb	r2, [r2, #16]
 800955c:	f107 0108 	add.w	r1, r7, #8
 8009560:	4610      	mov	r0, r2
 8009562:	4798      	blx	r3
 8009564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009566:	e029      	b.n	80095bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fa2d 	bl	80099ca <USBD_CtlError>
            err++;
 8009570:	7afb      	ldrb	r3, [r7, #11]
 8009572:	3301      	adds	r3, #1
 8009574:	72fb      	strb	r3, [r7, #11]
          break;
 8009576:	e021      	b.n	80095bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	7c12      	ldrb	r2, [r2, #16]
 8009590:	f107 0108 	add.w	r1, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800959a:	e00f      	b.n	80095bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fa13 	bl	80099ca <USBD_CtlError>
            err++;
 80095a4:	7afb      	ldrb	r3, [r7, #11]
 80095a6:	3301      	adds	r3, #1
 80095a8:	72fb      	strb	r3, [r7, #11]
          break;
 80095aa:	e007      	b.n	80095bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa0b 	bl	80099ca <USBD_CtlError>
          err++;
 80095b4:	7afb      	ldrb	r3, [r7, #11]
 80095b6:	3301      	adds	r3, #1
 80095b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80095ba:	e038      	b.n	800962e <USBD_GetDescriptor+0x286>
 80095bc:	e037      	b.n	800962e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7c1b      	ldrb	r3, [r3, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ce:	f107 0208 	add.w	r2, r7, #8
 80095d2:	4610      	mov	r0, r2
 80095d4:	4798      	blx	r3
 80095d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095d8:	e029      	b.n	800962e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f9f4 	bl	80099ca <USBD_CtlError>
        err++;
 80095e2:	7afb      	ldrb	r3, [r7, #11]
 80095e4:	3301      	adds	r3, #1
 80095e6:	72fb      	strb	r3, [r7, #11]
      break;
 80095e8:	e021      	b.n	800962e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7c1b      	ldrb	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10d      	bne.n	800960e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fa:	f107 0208 	add.w	r2, r7, #8
 80095fe:	4610      	mov	r0, r2
 8009600:	4798      	blx	r3
 8009602:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3301      	adds	r3, #1
 8009608:	2207      	movs	r2, #7
 800960a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800960c:	e00f      	b.n	800962e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f9da 	bl	80099ca <USBD_CtlError>
        err++;
 8009616:	7afb      	ldrb	r3, [r7, #11]
 8009618:	3301      	adds	r3, #1
 800961a:	72fb      	strb	r3, [r7, #11]
      break;
 800961c:	e007      	b.n	800962e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f9d2 	bl	80099ca <USBD_CtlError>
      err++;
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	3301      	adds	r3, #1
 800962a:	72fb      	strb	r3, [r7, #11]
      break;
 800962c:	bf00      	nop
  }

  if (err != 0U)
 800962e:	7afb      	ldrb	r3, [r7, #11]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11c      	bne.n	800966e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009634:	893b      	ldrh	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d011      	beq.n	800965e <USBD_GetDescriptor+0x2b6>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	88db      	ldrh	r3, [r3, #6]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00d      	beq.n	800965e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	88da      	ldrh	r2, [r3, #6]
 8009646:	893b      	ldrh	r3, [r7, #8]
 8009648:	4293      	cmp	r3, r2
 800964a:	bf28      	it	cs
 800964c:	4613      	movcs	r3, r2
 800964e:	b29b      	uxth	r3, r3
 8009650:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009652:	893b      	ldrh	r3, [r7, #8]
 8009654:	461a      	mov	r2, r3
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fa21 	bl	8009aa0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	88db      	ldrh	r3, [r3, #6]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa78 	bl	8009b5c <USBD_CtlSendStatus>
 800966c:	e000      	b.n	8009670 <USBD_GetDescriptor+0x2c8>
    return;
 800966e:	bf00      	nop
    }
  }
}
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop

08009678 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	889b      	ldrh	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d130      	bne.n	80096ec <USBD_SetAddress+0x74>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	88db      	ldrh	r3, [r3, #6]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d12c      	bne.n	80096ec <USBD_SetAddress+0x74>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	2b7f      	cmp	r3, #127	@ 0x7f
 8009698:	d828      	bhi.n	80096ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d104      	bne.n	80096ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f989 	bl	80099ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b8:	e01d      	b.n	80096f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7bfa      	ldrb	r2, [r7, #15]
 80096be:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fe4d 	bl	800a366 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fa45 	bl	8009b5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e0:	e009      	b.n	80096f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ea:	e004      	b.n	80096f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f96b 	bl	80099ca <USBD_CtlError>
  }
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	885b      	ldrh	r3, [r3, #2]
 800970e:	b2da      	uxtb	r2, r3
 8009710:	4b41      	ldr	r3, [pc, #260]	@ (8009818 <USBD_SetConfig+0x118>)
 8009712:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009714:	4b40      	ldr	r3, [pc, #256]	@ (8009818 <USBD_SetConfig+0x118>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d904      	bls.n	8009726 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f953 	bl	80099ca <USBD_CtlError>
 8009724:	e075      	b.n	8009812 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800972c:	2b02      	cmp	r3, #2
 800972e:	d002      	beq.n	8009736 <USBD_SetConfig+0x36>
 8009730:	2b03      	cmp	r3, #3
 8009732:	d023      	beq.n	800977c <USBD_SetConfig+0x7c>
 8009734:	e062      	b.n	80097fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009736:	4b38      	ldr	r3, [pc, #224]	@ (8009818 <USBD_SetConfig+0x118>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01a      	beq.n	8009774 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800973e:	4b36      	ldr	r3, [pc, #216]	@ (8009818 <USBD_SetConfig+0x118>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2203      	movs	r2, #3
 800974c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009750:	4b31      	ldr	r3, [pc, #196]	@ (8009818 <USBD_SetConfig+0x118>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff f9e4 	bl	8008b24 <USBD_SetClassConfig>
 800975c:	4603      	mov	r3, r0
 800975e:	2b02      	cmp	r3, #2
 8009760:	d104      	bne.n	800976c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f930 	bl	80099ca <USBD_CtlError>
            return;
 800976a:	e052      	b.n	8009812 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f9f5 	bl	8009b5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009772:	e04e      	b.n	8009812 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f9f1 	bl	8009b5c <USBD_CtlSendStatus>
        break;
 800977a:	e04a      	b.n	8009812 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800977c:	4b26      	ldr	r3, [pc, #152]	@ (8009818 <USBD_SetConfig+0x118>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d112      	bne.n	80097aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800978c:	4b22      	ldr	r3, [pc, #136]	@ (8009818 <USBD_SetConfig+0x118>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009796:	4b20      	ldr	r3, [pc, #128]	@ (8009818 <USBD_SetConfig+0x118>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff f9e0 	bl	8008b62 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f9da 	bl	8009b5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80097a8:	e033      	b.n	8009812 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80097aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009818 <USBD_SetConfig+0x118>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d01d      	beq.n	80097f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff f9ce 	bl	8008b62 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80097c6:	4b14      	ldr	r3, [pc, #80]	@ (8009818 <USBD_SetConfig+0x118>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097d0:	4b11      	ldr	r3, [pc, #68]	@ (8009818 <USBD_SetConfig+0x118>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff f9a4 	bl	8008b24 <USBD_SetClassConfig>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d104      	bne.n	80097ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f8f0 	bl	80099ca <USBD_CtlError>
            return;
 80097ea:	e012      	b.n	8009812 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f9b5 	bl	8009b5c <USBD_CtlSendStatus>
        break;
 80097f2:	e00e      	b.n	8009812 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f9b1 	bl	8009b5c <USBD_CtlSendStatus>
        break;
 80097fa:	e00a      	b.n	8009812 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f8e3 	bl	80099ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009804:	4b04      	ldr	r3, [pc, #16]	@ (8009818 <USBD_SetConfig+0x118>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff f9a9 	bl	8008b62 <USBD_ClrClassConfig>
        break;
 8009810:	bf00      	nop
    }
  }
}
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20000b4c 	.word	0x20000b4c

0800981c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d004      	beq.n	8009838 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f8ca 	bl	80099ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009836:	e022      	b.n	800987e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983e:	2b02      	cmp	r3, #2
 8009840:	dc02      	bgt.n	8009848 <USBD_GetConfig+0x2c>
 8009842:	2b00      	cmp	r3, #0
 8009844:	dc03      	bgt.n	800984e <USBD_GetConfig+0x32>
 8009846:	e015      	b.n	8009874 <USBD_GetConfig+0x58>
 8009848:	2b03      	cmp	r3, #3
 800984a:	d00b      	beq.n	8009864 <USBD_GetConfig+0x48>
 800984c:	e012      	b.n	8009874 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3308      	adds	r3, #8
 8009858:	2201      	movs	r2, #1
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f91f 	bl	8009aa0 <USBD_CtlSendData>
        break;
 8009862:	e00c      	b.n	800987e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3304      	adds	r3, #4
 8009868:	2201      	movs	r2, #1
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f917 	bl	8009aa0 <USBD_CtlSendData>
        break;
 8009872:	e004      	b.n	800987e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f8a7 	bl	80099ca <USBD_CtlError>
        break;
 800987c:	bf00      	nop
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009896:	3b01      	subs	r3, #1
 8009898:	2b02      	cmp	r3, #2
 800989a:	d81e      	bhi.n	80098da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	88db      	ldrh	r3, [r3, #6]
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d004      	beq.n	80098ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f88f 	bl	80099ca <USBD_CtlError>
        break;
 80098ac:	e01a      	b.n	80098e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f043 0202 	orr.w	r2, r3, #2
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	330c      	adds	r3, #12
 80098ce:	2202      	movs	r2, #2
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f8e4 	bl	8009aa0 <USBD_CtlSendData>
      break;
 80098d8:	e004      	b.n	80098e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f874 	bl	80099ca <USBD_CtlError>
      break;
 80098e2:	bf00      	nop
  }
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	885b      	ldrh	r3, [r3, #2]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d106      	bne.n	800990c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f928 	bl	8009b5c <USBD_CtlSendStatus>
  }
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009924:	3b01      	subs	r3, #1
 8009926:	2b02      	cmp	r3, #2
 8009928:	d80b      	bhi.n	8009942 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	885b      	ldrh	r3, [r3, #2]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d10c      	bne.n	800994c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f90e 	bl	8009b5c <USBD_CtlSendStatus>
      }
      break;
 8009940:	e004      	b.n	800994c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f840 	bl	80099ca <USBD_CtlError>
      break;
 800994a:	e000      	b.n	800994e <USBD_ClrFeature+0x3a>
      break;
 800994c:	bf00      	nop
  }
}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781a      	ldrb	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	785a      	ldrb	r2, [r3, #1]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	3302      	adds	r3, #2
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	3303      	adds	r3, #3
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	021b      	lsls	r3, r3, #8
 8009980:	b29b      	uxth	r3, r3
 8009982:	4413      	add	r3, r2
 8009984:	b29a      	uxth	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	3304      	adds	r3, #4
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	3305      	adds	r3, #5
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	b29b      	uxth	r3, r3
 800999c:	4413      	add	r3, r2
 800999e:	b29a      	uxth	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	3306      	adds	r3, #6
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	3307      	adds	r3, #7
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	80da      	strh	r2, [r3, #6]

}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80099d4:	2180      	movs	r1, #128	@ 0x80
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fc5a 	bl	800a290 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fc56 	bl	800a290 <USBD_LL_StallEP>
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d032      	beq.n	8009a68 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 f834 	bl	8009a70 <USBD_GetLen>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	75fa      	strb	r2, [r7, #23]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	75fa      	strb	r2, [r7, #23]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4413      	add	r3, r2
 8009a34:	2203      	movs	r2, #3
 8009a36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009a38:	e012      	b.n	8009a60 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	60fa      	str	r2, [r7, #12]
 8009a40:	7dfa      	ldrb	r2, [r7, #23]
 8009a42:	1c51      	adds	r1, r2, #1
 8009a44:	75f9      	strb	r1, [r7, #23]
 8009a46:	4611      	mov	r1, r2
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	440a      	add	r2, r1
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	75fa      	strb	r2, [r7, #23]
 8009a56:	461a      	mov	r2, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e8      	bne.n	8009a3a <USBD_GetString+0x4e>
    }
  }
}
 8009a68:	bf00      	nop
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009a7c:	e005      	b.n	8009a8a <USBD_GetLen+0x1a>
  {
    len++;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	3301      	adds	r3, #1
 8009a82:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3301      	adds	r3, #1
 8009a88:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f5      	bne.n	8009a7e <USBD_GetLen+0xe>
  }

  return len;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ab6:	88fa      	ldrh	r2, [r7, #6]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009abc:	88fa      	ldrh	r2, [r7, #6]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ac2:	88fb      	ldrh	r3, [r7, #6]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f000 fc6b 	bl	800a3a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	2100      	movs	r1, #0
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fc59 	bl	800a3a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009b12:	88fa      	ldrh	r2, [r7, #6]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009b1a:	88fa      	ldrh	r2, [r7, #6]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	2100      	movs	r1, #0
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 fc5e 	bl	800a3ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b46:	88fb      	ldrh	r3, [r7, #6]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 fc4c 	bl	800a3ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2204      	movs	r2, #4
 8009b68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2100      	movs	r1, #0
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fc16 	bl	800a3a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2205      	movs	r2, #5
 8009b8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b92:	2300      	movs	r3, #0
 8009b94:	2200      	movs	r2, #0
 8009b96:	2100      	movs	r1, #0
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc26 	bl	800a3ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009bac:	2200      	movs	r2, #0
 8009bae:	4912      	ldr	r1, [pc, #72]	@ (8009bf8 <MX_USB_DEVICE_Init+0x50>)
 8009bb0:	4812      	ldr	r0, [pc, #72]	@ (8009bfc <MX_USB_DEVICE_Init+0x54>)
 8009bb2:	f7fe ff5b 	bl	8008a6c <USBD_Init>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009bbc:	f7f7 f854 	bl	8000c68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009bc0:	490f      	ldr	r1, [pc, #60]	@ (8009c00 <MX_USB_DEVICE_Init+0x58>)
 8009bc2:	480e      	ldr	r0, [pc, #56]	@ (8009bfc <MX_USB_DEVICE_Init+0x54>)
 8009bc4:	f7fe ff7d 	bl	8008ac2 <USBD_RegisterClass>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009bce:	f7f7 f84b 	bl	8000c68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009bd2:	490c      	ldr	r1, [pc, #48]	@ (8009c04 <MX_USB_DEVICE_Init+0x5c>)
 8009bd4:	4809      	ldr	r0, [pc, #36]	@ (8009bfc <MX_USB_DEVICE_Init+0x54>)
 8009bd6:	f7fe feab 	bl	8008930 <USBD_CDC_RegisterInterface>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009be0:	f7f7 f842 	bl	8000c68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009be4:	4805      	ldr	r0, [pc, #20]	@ (8009bfc <MX_USB_DEVICE_Init+0x54>)
 8009be6:	f7fe ff86 	bl	8008af6 <USBD_Start>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009bf0:	f7f7 f83a 	bl	8000c68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009bf4:	bf00      	nop
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	20000184 	.word	0x20000184
 8009bfc:	20000b50 	.word	0x20000b50
 8009c00:	20000070 	.word	0x20000070
 8009c04:	20000174 	.word	0x20000174

08009c08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4905      	ldr	r1, [pc, #20]	@ (8009c24 <CDC_Init_FS+0x1c>)
 8009c10:	4805      	ldr	r0, [pc, #20]	@ (8009c28 <CDC_Init_FS+0x20>)
 8009c12:	f7fe fea4 	bl	800895e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c16:	4905      	ldr	r1, [pc, #20]	@ (8009c2c <CDC_Init_FS+0x24>)
 8009c18:	4803      	ldr	r0, [pc, #12]	@ (8009c28 <CDC_Init_FS+0x20>)
 8009c1a:	f7fe feba 	bl	8008992 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20001214 	.word	0x20001214
 8009c28:	20000b50 	.word	0x20000b50
 8009c2c:	20000e14 	.word	0x20000e14

08009c30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	2b23      	cmp	r3, #35	@ 0x23
 8009c54:	d84a      	bhi.n	8009cec <CDC_Control_FS+0xac>
 8009c56:	a201      	add	r2, pc, #4	@ (adr r2, 8009c5c <CDC_Control_FS+0x1c>)
 8009c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5c:	08009ced 	.word	0x08009ced
 8009c60:	08009ced 	.word	0x08009ced
 8009c64:	08009ced 	.word	0x08009ced
 8009c68:	08009ced 	.word	0x08009ced
 8009c6c:	08009ced 	.word	0x08009ced
 8009c70:	08009ced 	.word	0x08009ced
 8009c74:	08009ced 	.word	0x08009ced
 8009c78:	08009ced 	.word	0x08009ced
 8009c7c:	08009ced 	.word	0x08009ced
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009ced 	.word	0x08009ced
 8009c88:	08009ced 	.word	0x08009ced
 8009c8c:	08009ced 	.word	0x08009ced
 8009c90:	08009ced 	.word	0x08009ced
 8009c94:	08009ced 	.word	0x08009ced
 8009c98:	08009ced 	.word	0x08009ced
 8009c9c:	08009ced 	.word	0x08009ced
 8009ca0:	08009ced 	.word	0x08009ced
 8009ca4:	08009ced 	.word	0x08009ced
 8009ca8:	08009ced 	.word	0x08009ced
 8009cac:	08009ced 	.word	0x08009ced
 8009cb0:	08009ced 	.word	0x08009ced
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009ced 	.word	0x08009ced
 8009cbc:	08009ced 	.word	0x08009ced
 8009cc0:	08009ced 	.word	0x08009ced
 8009cc4:	08009ced 	.word	0x08009ced
 8009cc8:	08009ced 	.word	0x08009ced
 8009ccc:	08009ced 	.word	0x08009ced
 8009cd0:	08009ced 	.word	0x08009ced
 8009cd4:	08009ced 	.word	0x08009ced
 8009cd8:	08009ced 	.word	0x08009ced
 8009cdc:	08009ced 	.word	0x08009ced
 8009ce0:	08009ced 	.word	0x08009ced
 8009ce4:	08009ced 	.word	0x08009ced
 8009ce8:	08009ced 	.word	0x08009ced
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cec:	bf00      	nop
  }

  return (USBD_OK);
 8009cee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	4806      	ldr	r0, [pc, #24]	@ (8009d24 <CDC_Receive_FS+0x28>)
 8009d0a:	f7fe fe42 	bl	8008992 <USBD_CDC_SetRxBuffer>
  Process_USB_Command((char*)&Buf[0]);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7f6 fd8e 	bl	8000830 <Process_USB_Command>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d14:	4803      	ldr	r0, [pc, #12]	@ (8009d24 <CDC_Receive_FS+0x28>)
 8009d16:	f7fe fe7f 	bl	8008a18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d1a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20000b50 	.word	0x20000b50

08009d28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d38:	4b0d      	ldr	r3, [pc, #52]	@ (8009d70 <CDC_Transmit_FS+0x48>)
 8009d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e00b      	b.n	8009d66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d4e:	887b      	ldrh	r3, [r7, #2]
 8009d50:	461a      	mov	r2, r3
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	4806      	ldr	r0, [pc, #24]	@ (8009d70 <CDC_Transmit_FS+0x48>)
 8009d56:	f7fe fe02 	bl	800895e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d5a:	4805      	ldr	r0, [pc, #20]	@ (8009d70 <CDC_Transmit_FS+0x48>)
 8009d5c:	f7fe fe2d 	bl	80089ba <USBD_CDC_TransmitPacket>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000b50 	.word	0x20000b50

08009d74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	6039      	str	r1, [r7, #0]
 8009d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2212      	movs	r2, #18
 8009d84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d86:	4b03      	ldr	r3, [pc, #12]	@ (8009d94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	200001a0 	.word	0x200001a0

08009d98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2204      	movs	r2, #4
 8009da8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009daa:	4b03      	ldr	r3, [pc, #12]	@ (8009db8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	200001b4 	.word	0x200001b4

08009dbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	4907      	ldr	r1, [pc, #28]	@ (8009df0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009dd2:	4808      	ldr	r0, [pc, #32]	@ (8009df4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009dd4:	f7ff fe0a 	bl	80099ec <USBD_GetString>
 8009dd8:	e004      	b.n	8009de4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	4904      	ldr	r1, [pc, #16]	@ (8009df0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009dde:	4805      	ldr	r0, [pc, #20]	@ (8009df4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009de0:	f7ff fe04 	bl	80099ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009de4:	4b02      	ldr	r3, [pc, #8]	@ (8009df0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20001614 	.word	0x20001614
 8009df4:	0800af68 	.word	0x0800af68

08009df8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	4904      	ldr	r1, [pc, #16]	@ (8009e18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e08:	4804      	ldr	r0, [pc, #16]	@ (8009e1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e0a:	f7ff fdef 	bl	80099ec <USBD_GetString>
  return USBD_StrDesc;
 8009e0e:	4b02      	ldr	r3, [pc, #8]	@ (8009e18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20001614 	.word	0x20001614
 8009e1c:	0800af80 	.word	0x0800af80

08009e20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	221a      	movs	r2, #26
 8009e30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e32:	f000 f843 	bl	8009ebc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e36:	4b02      	ldr	r3, [pc, #8]	@ (8009e40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	200001b8 	.word	0x200001b8

08009e44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	6039      	str	r1, [r7, #0]
 8009e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	4907      	ldr	r1, [pc, #28]	@ (8009e78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e5a:	4808      	ldr	r0, [pc, #32]	@ (8009e7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e5c:	f7ff fdc6 	bl	80099ec <USBD_GetString>
 8009e60:	e004      	b.n	8009e6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4904      	ldr	r1, [pc, #16]	@ (8009e78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e66:	4805      	ldr	r0, [pc, #20]	@ (8009e7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e68:	f7ff fdc0 	bl	80099ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e6c:	4b02      	ldr	r3, [pc, #8]	@ (8009e78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20001614 	.word	0x20001614
 8009e7c:	0800af94 	.word	0x0800af94

08009e80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	6039      	str	r1, [r7, #0]
 8009e8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e8c:	79fb      	ldrb	r3, [r7, #7]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d105      	bne.n	8009e9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	4907      	ldr	r1, [pc, #28]	@ (8009eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e96:	4808      	ldr	r0, [pc, #32]	@ (8009eb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e98:	f7ff fda8 	bl	80099ec <USBD_GetString>
 8009e9c:	e004      	b.n	8009ea8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	4904      	ldr	r1, [pc, #16]	@ (8009eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ea2:	4805      	ldr	r0, [pc, #20]	@ (8009eb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ea4:	f7ff fda2 	bl	80099ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ea8:	4b02      	ldr	r3, [pc, #8]	@ (8009eb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20001614 	.word	0x20001614
 8009eb8:	0800afa0 	.word	0x0800afa0

08009ebc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f00 <Get_SerialNum+0x44>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8009f04 <Get_SerialNum+0x48>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ece:	4b0e      	ldr	r3, [pc, #56]	@ (8009f08 <Get_SerialNum+0x4c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4413      	add	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ee2:	2208      	movs	r2, #8
 8009ee4:	4909      	ldr	r1, [pc, #36]	@ (8009f0c <Get_SerialNum+0x50>)
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f814 	bl	8009f14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009eec:	2204      	movs	r2, #4
 8009eee:	4908      	ldr	r1, [pc, #32]	@ (8009f10 <Get_SerialNum+0x54>)
 8009ef0:	68b8      	ldr	r0, [r7, #8]
 8009ef2:	f000 f80f 	bl	8009f14 <IntToUnicode>
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	1ffff7ac 	.word	0x1ffff7ac
 8009f04:	1ffff7b0 	.word	0x1ffff7b0
 8009f08:	1ffff7b4 	.word	0x1ffff7b4
 8009f0c:	200001ba 	.word	0x200001ba
 8009f10:	200001ca 	.word	0x200001ca

08009f14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f26:	2300      	movs	r3, #0
 8009f28:	75fb      	strb	r3, [r7, #23]
 8009f2a:	e027      	b.n	8009f7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	0f1b      	lsrs	r3, r3, #28
 8009f30:	2b09      	cmp	r3, #9
 8009f32:	d80b      	bhi.n	8009f4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	0f1b      	lsrs	r3, r3, #28
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	4619      	mov	r1, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	440b      	add	r3, r1
 8009f44:	3230      	adds	r2, #48	@ 0x30
 8009f46:	b2d2      	uxtb	r2, r2
 8009f48:	701a      	strb	r2, [r3, #0]
 8009f4a:	e00a      	b.n	8009f62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	0f1b      	lsrs	r3, r3, #28
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	4619      	mov	r1, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	440b      	add	r3, r1
 8009f5c:	3237      	adds	r2, #55	@ 0x37
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4413      	add	r3, r2
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	75fb      	strb	r3, [r7, #23]
 8009f7c:	7dfa      	ldrb	r2, [r7, #23]
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d3d3      	bcc.n	8009f2c <IntToUnicode+0x18>
  }
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	371c      	adds	r7, #28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
	...

08009f94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8009fd8 <HAL_PCD_MspInit+0x44>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d113      	bne.n	8009fce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8009fdc <HAL_PCD_MspInit+0x48>)
 8009fa8:	69db      	ldr	r3, [r3, #28]
 8009faa:	4a0c      	ldr	r2, [pc, #48]	@ (8009fdc <HAL_PCD_MspInit+0x48>)
 8009fac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fb0:	61d3      	str	r3, [r2, #28]
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <HAL_PCD_MspInit+0x48>)
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	2014      	movs	r0, #20
 8009fc4:	f7f7 f90d 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009fc8:	2014      	movs	r0, #20
 8009fca:	f7f7 f926 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fce:	bf00      	nop
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	40005c00 	.word	0x40005c00
 8009fdc:	40021000 	.word	0x40021000

08009fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fe fdc6 	bl	8008b88 <USBD_LL_SetupStage>
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	6879      	ldr	r1, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	440b      	add	r3, r1
 800a024:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	4619      	mov	r1, r3
 800a02e:	f7fe fdf8 	bl	8008c22 <USBD_LL_DataOutStage>
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 02e8 	ldr.w	r0, [r3, #744]	@ 0x2e8
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	440b      	add	r3, r1
 800a05a:	333c      	adds	r3, #60	@ 0x3c
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	4619      	mov	r1, r3
 800a062:	f7fe fe4f 	bl	8008d04 <USBD_LL_DataInStage>
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe ff62 	bl	8008f46 <USBD_LL_SOF>
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d001      	beq.n	800a0a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a09e:	f7f6 fde3 	bl	8000c68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800a0a8:	7bfa      	ldrb	r2, [r7, #15]
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe ff0f 	bl	8008ed0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fec8 	bl	8008e4e <USBD_LL_Reset>
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe ff0a 	bl	8008ef0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0e4:	4b04      	ldr	r3, [pc, #16]	@ (800a0f8 <HAL_PCD_SuspendCallback+0x30>)
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	4a03      	ldr	r2, [pc, #12]	@ (800a0f8 <HAL_PCD_SuspendCallback+0x30>)
 800a0ea:	f043 0306 	orr.w	r3, r3, #6
 800a0ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	e000ed00 	.word	0xe000ed00

0800a0fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32e8 	ldr.w	r3, [r3, #744]	@ 0x2e8
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe ff05 	bl	8008f1a <USBD_LL_Resume>
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a120:	4a29      	ldr	r2, [pc, #164]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8c2 32e8 	str.w	r3, [r2, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a27      	ldr	r2, [pc, #156]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a12c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a130:	4b25      	ldr	r3, [pc, #148]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a132:	4a26      	ldr	r2, [pc, #152]	@ (800a1cc <USBD_LL_Init+0xb4>)
 800a134:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a136:	4b24      	ldr	r3, [pc, #144]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a138:	2208      	movs	r2, #8
 800a13a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a13c:	4b22      	ldr	r3, [pc, #136]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a13e:	2202      	movs	r2, #2
 800a140:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a142:	4b21      	ldr	r3, [pc, #132]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a144:	2202      	movs	r2, #2
 800a146:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a148:	4b1f      	ldr	r3, [pc, #124]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a14e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a150:	2200      	movs	r2, #0
 800a152:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a154:	4b1c      	ldr	r3, [pc, #112]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a156:	2200      	movs	r2, #0
 800a158:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a15a:	481b      	ldr	r0, [pc, #108]	@ (800a1c8 <USBD_LL_Init+0xb0>)
 800a15c:	f7f7 fb40 	bl	80017e0 <HAL_PCD_Init>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800a166:	f7f6 fd7f 	bl	8000c68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a170:	2318      	movs	r3, #24
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	f7f8 ffb2 	bl	80030de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a180:	2358      	movs	r3, #88	@ 0x58
 800a182:	2200      	movs	r2, #0
 800a184:	2180      	movs	r1, #128	@ 0x80
 800a186:	f7f8 ffaa 	bl	80030de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a190:	23c0      	movs	r3, #192	@ 0xc0
 800a192:	2200      	movs	r2, #0
 800a194:	2181      	movs	r1, #129	@ 0x81
 800a196:	f7f8 ffa2 	bl	80030de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1a0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	f7f8 ff99 	bl	80030de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2182      	movs	r1, #130	@ 0x82
 800a1ba:	f7f8 ff90 	bl	80030de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20001814 	.word	0x20001814
 800a1cc:	40005c00 	.word	0x40005c00

0800a1d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7f7 fbcc 	bl	8001984 <HAL_PCD_Start>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 f954 	bl	800a4a0 <USBD_Get_USB_Status>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	4608      	mov	r0, r1
 800a210:	4611      	mov	r1, r2
 800a212:	461a      	mov	r2, r3
 800a214:	4603      	mov	r3, r0
 800a216:	70fb      	strb	r3, [r7, #3]
 800a218:	460b      	mov	r3, r1
 800a21a:	70bb      	strb	r3, [r7, #2]
 800a21c:	4613      	mov	r3, r2
 800a21e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a22e:	78bb      	ldrb	r3, [r7, #2]
 800a230:	883a      	ldrh	r2, [r7, #0]
 800a232:	78f9      	ldrb	r1, [r7, #3]
 800a234:	f7f7 fcc5 	bl	8001bc2 <HAL_PCD_EP_Open>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f92e 	bl	800a4a0 <USBD_Get_USB_Status>
 800a244:	4603      	mov	r3, r0
 800a246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a248:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	460b      	mov	r3, r1
 800a25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a26c:	78fa      	ldrb	r2, [r7, #3]
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7f7 fd03 	bl	8001c7c <HAL_PCD_EP_Close>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f90f 	bl	800a4a0 <USBD_Get_USB_Status>
 800a282:	4603      	mov	r3, r0
 800a284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a286:	7bbb      	ldrb	r3, [r7, #14]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2aa:	78fa      	ldrb	r2, [r7, #3]
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7f7 fdac 	bl	8001e0c <HAL_PCD_EP_SetStall>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 f8f0 	bl	800a4a0 <USBD_Get_USB_Status>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2e8:	78fa      	ldrb	r2, [r7, #3]
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7f7 fddf 	bl	8001eb0 <HAL_PCD_EP_ClrStall>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f8d1 	bl	800a4a0 <USBD_Get_USB_Status>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a302:	7bbb      	ldrb	r3, [r7, #14]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a31e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a324:	2b00      	cmp	r3, #0
 800a326:	da0c      	bge.n	800a342 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	4613      	mov	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	00db      	lsls	r3, r3, #3
 800a33a:	440b      	add	r3, r1
 800a33c:	3302      	adds	r3, #2
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	e00b      	b.n	800a35a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a348:	68f9      	ldr	r1, [r7, #12]
 800a34a:	4613      	mov	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	440b      	add	r3, r1
 800a354:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a358:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	460b      	mov	r3, r1
 800a370:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a380:	78fa      	ldrb	r2, [r7, #3]
 800a382:	4611      	mov	r1, r2
 800a384:	4618      	mov	r0, r3
 800a386:	f7f7 fbf7 	bl	8001b78 <HAL_PCD_SetAddress>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f885 	bl	800a4a0 <USBD_Get_USB_Status>
 800a396:	4603      	mov	r3, r0
 800a398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	607a      	str	r2, [r7, #4]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	72fb      	strb	r3, [r7, #11]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3c6:	893b      	ldrh	r3, [r7, #8]
 800a3c8:	7af9      	ldrb	r1, [r7, #11]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	f7f7 fce7 	bl	8001d9e <HAL_PCD_EP_Transmit>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f862 	bl	800a4a0 <USBD_Get_USB_Status>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b086      	sub	sp, #24
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	72fb      	strb	r3, [r7, #11]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a40c:	893b      	ldrh	r3, [r7, #8]
 800a40e:	7af9      	ldrb	r1, [r7, #11]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	f7f7 fc7b 	bl	8001d0c <HAL_PCD_EP_Receive>
 800a416:	4603      	mov	r3, r0
 800a418:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f83f 	bl	800a4a0 <USBD_Get_USB_Status>
 800a422:	4603      	mov	r3, r0
 800a424:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a426:	7dbb      	ldrb	r3, [r7, #22]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a442:	78fa      	ldrb	r2, [r7, #3]
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f7f7 fc91 	bl	8001d6e <HAL_PCD_EP_GetRxCount>
 800a44c:	4603      	mov	r3, r0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a460:	4b03      	ldr	r3, [pc, #12]	@ (800a470 <USBD_static_malloc+0x18>)
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20001b00 	.word	0x20001b00

0800a474 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]

}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d817      	bhi.n	800a4e4 <USBD_Get_USB_Status+0x44>
 800a4b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4bc <USBD_Get_USB_Status+0x1c>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a4cd 	.word	0x0800a4cd
 800a4c0:	0800a4d3 	.word	0x0800a4d3
 800a4c4:	0800a4d9 	.word	0x0800a4d9
 800a4c8:	0800a4df 	.word	0x0800a4df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d0:	e00b      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d6:	e008      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	73fb      	strb	r3, [r7, #15]
    break;
 800a4dc:	e005      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4de:	2302      	movs	r3, #2
 800a4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e2:	e002      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e8:	bf00      	nop
  }
  return usb_status;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <atoi>:
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	f000 b87a 	b.w	800a5f4 <strtol>

0800a500 <_strtol_l.constprop.0>:
 800a500:	2b24      	cmp	r3, #36	@ 0x24
 800a502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a506:	4686      	mov	lr, r0
 800a508:	4690      	mov	r8, r2
 800a50a:	d801      	bhi.n	800a510 <_strtol_l.constprop.0+0x10>
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d106      	bne.n	800a51e <_strtol_l.constprop.0+0x1e>
 800a510:	f000 f8a2 	bl	800a658 <__errno>
 800a514:	2316      	movs	r3, #22
 800a516:	6003      	str	r3, [r0, #0]
 800a518:	2000      	movs	r0, #0
 800a51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51e:	4834      	ldr	r0, [pc, #208]	@ (800a5f0 <_strtol_l.constprop.0+0xf0>)
 800a520:	460d      	mov	r5, r1
 800a522:	462a      	mov	r2, r5
 800a524:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a528:	5d06      	ldrb	r6, [r0, r4]
 800a52a:	f016 0608 	ands.w	r6, r6, #8
 800a52e:	d1f8      	bne.n	800a522 <_strtol_l.constprop.0+0x22>
 800a530:	2c2d      	cmp	r4, #45	@ 0x2d
 800a532:	d12d      	bne.n	800a590 <_strtol_l.constprop.0+0x90>
 800a534:	782c      	ldrb	r4, [r5, #0]
 800a536:	2601      	movs	r6, #1
 800a538:	1c95      	adds	r5, r2, #2
 800a53a:	f033 0210 	bics.w	r2, r3, #16
 800a53e:	d109      	bne.n	800a554 <_strtol_l.constprop.0+0x54>
 800a540:	2c30      	cmp	r4, #48	@ 0x30
 800a542:	d12a      	bne.n	800a59a <_strtol_l.constprop.0+0x9a>
 800a544:	782a      	ldrb	r2, [r5, #0]
 800a546:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a54a:	2a58      	cmp	r2, #88	@ 0x58
 800a54c:	d125      	bne.n	800a59a <_strtol_l.constprop.0+0x9a>
 800a54e:	786c      	ldrb	r4, [r5, #1]
 800a550:	2310      	movs	r3, #16
 800a552:	3502      	adds	r5, #2
 800a554:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a558:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a55c:	2200      	movs	r2, #0
 800a55e:	fbbc f9f3 	udiv	r9, ip, r3
 800a562:	4610      	mov	r0, r2
 800a564:	fb03 ca19 	mls	sl, r3, r9, ip
 800a568:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a56c:	2f09      	cmp	r7, #9
 800a56e:	d81b      	bhi.n	800a5a8 <_strtol_l.constprop.0+0xa8>
 800a570:	463c      	mov	r4, r7
 800a572:	42a3      	cmp	r3, r4
 800a574:	dd27      	ble.n	800a5c6 <_strtol_l.constprop.0+0xc6>
 800a576:	1c57      	adds	r7, r2, #1
 800a578:	d007      	beq.n	800a58a <_strtol_l.constprop.0+0x8a>
 800a57a:	4581      	cmp	r9, r0
 800a57c:	d320      	bcc.n	800a5c0 <_strtol_l.constprop.0+0xc0>
 800a57e:	d101      	bne.n	800a584 <_strtol_l.constprop.0+0x84>
 800a580:	45a2      	cmp	sl, r4
 800a582:	db1d      	blt.n	800a5c0 <_strtol_l.constprop.0+0xc0>
 800a584:	fb00 4003 	mla	r0, r0, r3, r4
 800a588:	2201      	movs	r2, #1
 800a58a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a58e:	e7eb      	b.n	800a568 <_strtol_l.constprop.0+0x68>
 800a590:	2c2b      	cmp	r4, #43	@ 0x2b
 800a592:	bf04      	itt	eq
 800a594:	782c      	ldrbeq	r4, [r5, #0]
 800a596:	1c95      	addeq	r5, r2, #2
 800a598:	e7cf      	b.n	800a53a <_strtol_l.constprop.0+0x3a>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1da      	bne.n	800a554 <_strtol_l.constprop.0+0x54>
 800a59e:	2c30      	cmp	r4, #48	@ 0x30
 800a5a0:	bf0c      	ite	eq
 800a5a2:	2308      	moveq	r3, #8
 800a5a4:	230a      	movne	r3, #10
 800a5a6:	e7d5      	b.n	800a554 <_strtol_l.constprop.0+0x54>
 800a5a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a5ac:	2f19      	cmp	r7, #25
 800a5ae:	d801      	bhi.n	800a5b4 <_strtol_l.constprop.0+0xb4>
 800a5b0:	3c37      	subs	r4, #55	@ 0x37
 800a5b2:	e7de      	b.n	800a572 <_strtol_l.constprop.0+0x72>
 800a5b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a5b8:	2f19      	cmp	r7, #25
 800a5ba:	d804      	bhi.n	800a5c6 <_strtol_l.constprop.0+0xc6>
 800a5bc:	3c57      	subs	r4, #87	@ 0x57
 800a5be:	e7d8      	b.n	800a572 <_strtol_l.constprop.0+0x72>
 800a5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c4:	e7e1      	b.n	800a58a <_strtol_l.constprop.0+0x8a>
 800a5c6:	1c53      	adds	r3, r2, #1
 800a5c8:	d108      	bne.n	800a5dc <_strtol_l.constprop.0+0xdc>
 800a5ca:	2322      	movs	r3, #34	@ 0x22
 800a5cc:	f8ce 3000 	str.w	r3, [lr]
 800a5d0:	4660      	mov	r0, ip
 800a5d2:	f1b8 0f00 	cmp.w	r8, #0
 800a5d6:	d0a0      	beq.n	800a51a <_strtol_l.constprop.0+0x1a>
 800a5d8:	1e69      	subs	r1, r5, #1
 800a5da:	e006      	b.n	800a5ea <_strtol_l.constprop.0+0xea>
 800a5dc:	b106      	cbz	r6, 800a5e0 <_strtol_l.constprop.0+0xe0>
 800a5de:	4240      	negs	r0, r0
 800a5e0:	f1b8 0f00 	cmp.w	r8, #0
 800a5e4:	d099      	beq.n	800a51a <_strtol_l.constprop.0+0x1a>
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	d1f6      	bne.n	800a5d8 <_strtol_l.constprop.0+0xd8>
 800a5ea:	f8c8 1000 	str.w	r1, [r8]
 800a5ee:	e794      	b.n	800a51a <_strtol_l.constprop.0+0x1a>
 800a5f0:	0800afe1 	.word	0x0800afe1

0800a5f4 <strtol>:
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	460a      	mov	r2, r1
 800a5f8:	4601      	mov	r1, r0
 800a5fa:	4802      	ldr	r0, [pc, #8]	@ (800a604 <strtol+0x10>)
 800a5fc:	6800      	ldr	r0, [r0, #0]
 800a5fe:	f7ff bf7f 	b.w	800a500 <_strtol_l.constprop.0>
 800a602:	bf00      	nop
 800a604:	200001d4 	.word	0x200001d4

0800a608 <siprintf>:
 800a608:	b40e      	push	{r1, r2, r3}
 800a60a:	b500      	push	{lr}
 800a60c:	b09c      	sub	sp, #112	@ 0x70
 800a60e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a610:	9002      	str	r0, [sp, #8]
 800a612:	9006      	str	r0, [sp, #24]
 800a614:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a618:	4809      	ldr	r0, [pc, #36]	@ (800a640 <siprintf+0x38>)
 800a61a:	9107      	str	r1, [sp, #28]
 800a61c:	9104      	str	r1, [sp, #16]
 800a61e:	4909      	ldr	r1, [pc, #36]	@ (800a644 <siprintf+0x3c>)
 800a620:	f853 2b04 	ldr.w	r2, [r3], #4
 800a624:	9105      	str	r1, [sp, #20]
 800a626:	6800      	ldr	r0, [r0, #0]
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	a902      	add	r1, sp, #8
 800a62c:	f000 f994 	bl	800a958 <_svfiprintf_r>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
 800a636:	b01c      	add	sp, #112	@ 0x70
 800a638:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63c:	b003      	add	sp, #12
 800a63e:	4770      	bx	lr
 800a640:	200001d4 	.word	0x200001d4
 800a644:	ffff0208 	.word	0xffff0208

0800a648 <memset>:
 800a648:	4402      	add	r2, r0
 800a64a:	4603      	mov	r3, r0
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d100      	bne.n	800a652 <memset+0xa>
 800a650:	4770      	bx	lr
 800a652:	f803 1b01 	strb.w	r1, [r3], #1
 800a656:	e7f9      	b.n	800a64c <memset+0x4>

0800a658 <__errno>:
 800a658:	4b01      	ldr	r3, [pc, #4]	@ (800a660 <__errno+0x8>)
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	200001d4 	.word	0x200001d4

0800a664 <__libc_init_array>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	4d0d      	ldr	r5, [pc, #52]	@ (800a69c <__libc_init_array+0x38>)
 800a668:	4c0d      	ldr	r4, [pc, #52]	@ (800a6a0 <__libc_init_array+0x3c>)
 800a66a:	1b64      	subs	r4, r4, r5
 800a66c:	10a4      	asrs	r4, r4, #2
 800a66e:	2600      	movs	r6, #0
 800a670:	42a6      	cmp	r6, r4
 800a672:	d109      	bne.n	800a688 <__libc_init_array+0x24>
 800a674:	4d0b      	ldr	r5, [pc, #44]	@ (800a6a4 <__libc_init_array+0x40>)
 800a676:	4c0c      	ldr	r4, [pc, #48]	@ (800a6a8 <__libc_init_array+0x44>)
 800a678:	f000 fc66 	bl	800af48 <_init>
 800a67c:	1b64      	subs	r4, r4, r5
 800a67e:	10a4      	asrs	r4, r4, #2
 800a680:	2600      	movs	r6, #0
 800a682:	42a6      	cmp	r6, r4
 800a684:	d105      	bne.n	800a692 <__libc_init_array+0x2e>
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	f855 3b04 	ldr.w	r3, [r5], #4
 800a68c:	4798      	blx	r3
 800a68e:	3601      	adds	r6, #1
 800a690:	e7ee      	b.n	800a670 <__libc_init_array+0xc>
 800a692:	f855 3b04 	ldr.w	r3, [r5], #4
 800a696:	4798      	blx	r3
 800a698:	3601      	adds	r6, #1
 800a69a:	e7f2      	b.n	800a682 <__libc_init_array+0x1e>
 800a69c:	0800b11c 	.word	0x0800b11c
 800a6a0:	0800b11c 	.word	0x0800b11c
 800a6a4:	0800b11c 	.word	0x0800b11c
 800a6a8:	0800b120 	.word	0x0800b120

0800a6ac <__retarget_lock_acquire_recursive>:
 800a6ac:	4770      	bx	lr

0800a6ae <__retarget_lock_release_recursive>:
 800a6ae:	4770      	bx	lr

0800a6b0 <_free_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	2900      	cmp	r1, #0
 800a6b6:	d041      	beq.n	800a73c <_free_r+0x8c>
 800a6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6bc:	1f0c      	subs	r4, r1, #4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfb8      	it	lt
 800a6c2:	18e4      	addlt	r4, r4, r3
 800a6c4:	f000 f8e0 	bl	800a888 <__malloc_lock>
 800a6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a740 <_free_r+0x90>)
 800a6ca:	6813      	ldr	r3, [r2, #0]
 800a6cc:	b933      	cbnz	r3, 800a6dc <_free_r+0x2c>
 800a6ce:	6063      	str	r3, [r4, #4]
 800a6d0:	6014      	str	r4, [r2, #0]
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6d8:	f000 b8dc 	b.w	800a894 <__malloc_unlock>
 800a6dc:	42a3      	cmp	r3, r4
 800a6de:	d908      	bls.n	800a6f2 <_free_r+0x42>
 800a6e0:	6820      	ldr	r0, [r4, #0]
 800a6e2:	1821      	adds	r1, r4, r0
 800a6e4:	428b      	cmp	r3, r1
 800a6e6:	bf01      	itttt	eq
 800a6e8:	6819      	ldreq	r1, [r3, #0]
 800a6ea:	685b      	ldreq	r3, [r3, #4]
 800a6ec:	1809      	addeq	r1, r1, r0
 800a6ee:	6021      	streq	r1, [r4, #0]
 800a6f0:	e7ed      	b.n	800a6ce <_free_r+0x1e>
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	b10b      	cbz	r3, 800a6fc <_free_r+0x4c>
 800a6f8:	42a3      	cmp	r3, r4
 800a6fa:	d9fa      	bls.n	800a6f2 <_free_r+0x42>
 800a6fc:	6811      	ldr	r1, [r2, #0]
 800a6fe:	1850      	adds	r0, r2, r1
 800a700:	42a0      	cmp	r0, r4
 800a702:	d10b      	bne.n	800a71c <_free_r+0x6c>
 800a704:	6820      	ldr	r0, [r4, #0]
 800a706:	4401      	add	r1, r0
 800a708:	1850      	adds	r0, r2, r1
 800a70a:	4283      	cmp	r3, r0
 800a70c:	6011      	str	r1, [r2, #0]
 800a70e:	d1e0      	bne.n	800a6d2 <_free_r+0x22>
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	6053      	str	r3, [r2, #4]
 800a716:	4408      	add	r0, r1
 800a718:	6010      	str	r0, [r2, #0]
 800a71a:	e7da      	b.n	800a6d2 <_free_r+0x22>
 800a71c:	d902      	bls.n	800a724 <_free_r+0x74>
 800a71e:	230c      	movs	r3, #12
 800a720:	602b      	str	r3, [r5, #0]
 800a722:	e7d6      	b.n	800a6d2 <_free_r+0x22>
 800a724:	6820      	ldr	r0, [r4, #0]
 800a726:	1821      	adds	r1, r4, r0
 800a728:	428b      	cmp	r3, r1
 800a72a:	bf04      	itt	eq
 800a72c:	6819      	ldreq	r1, [r3, #0]
 800a72e:	685b      	ldreq	r3, [r3, #4]
 800a730:	6063      	str	r3, [r4, #4]
 800a732:	bf04      	itt	eq
 800a734:	1809      	addeq	r1, r1, r0
 800a736:	6021      	streq	r1, [r4, #0]
 800a738:	6054      	str	r4, [r2, #4]
 800a73a:	e7ca      	b.n	800a6d2 <_free_r+0x22>
 800a73c:	bd38      	pop	{r3, r4, r5, pc}
 800a73e:	bf00      	nop
 800a740:	20001e64 	.word	0x20001e64

0800a744 <sbrk_aligned>:
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	4e0f      	ldr	r6, [pc, #60]	@ (800a784 <sbrk_aligned+0x40>)
 800a748:	460c      	mov	r4, r1
 800a74a:	6831      	ldr	r1, [r6, #0]
 800a74c:	4605      	mov	r5, r0
 800a74e:	b911      	cbnz	r1, 800a756 <sbrk_aligned+0x12>
 800a750:	f000 fba6 	bl	800aea0 <_sbrk_r>
 800a754:	6030      	str	r0, [r6, #0]
 800a756:	4621      	mov	r1, r4
 800a758:	4628      	mov	r0, r5
 800a75a:	f000 fba1 	bl	800aea0 <_sbrk_r>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	d103      	bne.n	800a76a <sbrk_aligned+0x26>
 800a762:	f04f 34ff 	mov.w	r4, #4294967295
 800a766:	4620      	mov	r0, r4
 800a768:	bd70      	pop	{r4, r5, r6, pc}
 800a76a:	1cc4      	adds	r4, r0, #3
 800a76c:	f024 0403 	bic.w	r4, r4, #3
 800a770:	42a0      	cmp	r0, r4
 800a772:	d0f8      	beq.n	800a766 <sbrk_aligned+0x22>
 800a774:	1a21      	subs	r1, r4, r0
 800a776:	4628      	mov	r0, r5
 800a778:	f000 fb92 	bl	800aea0 <_sbrk_r>
 800a77c:	3001      	adds	r0, #1
 800a77e:	d1f2      	bne.n	800a766 <sbrk_aligned+0x22>
 800a780:	e7ef      	b.n	800a762 <sbrk_aligned+0x1e>
 800a782:	bf00      	nop
 800a784:	20001e60 	.word	0x20001e60

0800a788 <_malloc_r>:
 800a788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a78c:	1ccd      	adds	r5, r1, #3
 800a78e:	f025 0503 	bic.w	r5, r5, #3
 800a792:	3508      	adds	r5, #8
 800a794:	2d0c      	cmp	r5, #12
 800a796:	bf38      	it	cc
 800a798:	250c      	movcc	r5, #12
 800a79a:	2d00      	cmp	r5, #0
 800a79c:	4606      	mov	r6, r0
 800a79e:	db01      	blt.n	800a7a4 <_malloc_r+0x1c>
 800a7a0:	42a9      	cmp	r1, r5
 800a7a2:	d904      	bls.n	800a7ae <_malloc_r+0x26>
 800a7a4:	230c      	movs	r3, #12
 800a7a6:	6033      	str	r3, [r6, #0]
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a884 <_malloc_r+0xfc>
 800a7b2:	f000 f869 	bl	800a888 <__malloc_lock>
 800a7b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ba:	461c      	mov	r4, r3
 800a7bc:	bb44      	cbnz	r4, 800a810 <_malloc_r+0x88>
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7ff ffbf 	bl	800a744 <sbrk_aligned>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	d158      	bne.n	800a87e <_malloc_r+0xf6>
 800a7cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a7d0:	4627      	mov	r7, r4
 800a7d2:	2f00      	cmp	r7, #0
 800a7d4:	d143      	bne.n	800a85e <_malloc_r+0xd6>
 800a7d6:	2c00      	cmp	r4, #0
 800a7d8:	d04b      	beq.n	800a872 <_malloc_r+0xea>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	4639      	mov	r1, r7
 800a7de:	4630      	mov	r0, r6
 800a7e0:	eb04 0903 	add.w	r9, r4, r3
 800a7e4:	f000 fb5c 	bl	800aea0 <_sbrk_r>
 800a7e8:	4581      	cmp	r9, r0
 800a7ea:	d142      	bne.n	800a872 <_malloc_r+0xea>
 800a7ec:	6821      	ldr	r1, [r4, #0]
 800a7ee:	1a6d      	subs	r5, r5, r1
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f7ff ffa6 	bl	800a744 <sbrk_aligned>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d03a      	beq.n	800a872 <_malloc_r+0xea>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	442b      	add	r3, r5
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	f8d8 3000 	ldr.w	r3, [r8]
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	bb62      	cbnz	r2, 800a864 <_malloc_r+0xdc>
 800a80a:	f8c8 7000 	str.w	r7, [r8]
 800a80e:	e00f      	b.n	800a830 <_malloc_r+0xa8>
 800a810:	6822      	ldr	r2, [r4, #0]
 800a812:	1b52      	subs	r2, r2, r5
 800a814:	d420      	bmi.n	800a858 <_malloc_r+0xd0>
 800a816:	2a0b      	cmp	r2, #11
 800a818:	d917      	bls.n	800a84a <_malloc_r+0xc2>
 800a81a:	1961      	adds	r1, r4, r5
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	6025      	str	r5, [r4, #0]
 800a820:	bf18      	it	ne
 800a822:	6059      	strne	r1, [r3, #4]
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	bf08      	it	eq
 800a828:	f8c8 1000 	streq.w	r1, [r8]
 800a82c:	5162      	str	r2, [r4, r5]
 800a82e:	604b      	str	r3, [r1, #4]
 800a830:	4630      	mov	r0, r6
 800a832:	f000 f82f 	bl	800a894 <__malloc_unlock>
 800a836:	f104 000b 	add.w	r0, r4, #11
 800a83a:	1d23      	adds	r3, r4, #4
 800a83c:	f020 0007 	bic.w	r0, r0, #7
 800a840:	1ac2      	subs	r2, r0, r3
 800a842:	bf1c      	itt	ne
 800a844:	1a1b      	subne	r3, r3, r0
 800a846:	50a3      	strne	r3, [r4, r2]
 800a848:	e7af      	b.n	800a7aa <_malloc_r+0x22>
 800a84a:	6862      	ldr	r2, [r4, #4]
 800a84c:	42a3      	cmp	r3, r4
 800a84e:	bf0c      	ite	eq
 800a850:	f8c8 2000 	streq.w	r2, [r8]
 800a854:	605a      	strne	r2, [r3, #4]
 800a856:	e7eb      	b.n	800a830 <_malloc_r+0xa8>
 800a858:	4623      	mov	r3, r4
 800a85a:	6864      	ldr	r4, [r4, #4]
 800a85c:	e7ae      	b.n	800a7bc <_malloc_r+0x34>
 800a85e:	463c      	mov	r4, r7
 800a860:	687f      	ldr	r7, [r7, #4]
 800a862:	e7b6      	b.n	800a7d2 <_malloc_r+0x4a>
 800a864:	461a      	mov	r2, r3
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	42a3      	cmp	r3, r4
 800a86a:	d1fb      	bne.n	800a864 <_malloc_r+0xdc>
 800a86c:	2300      	movs	r3, #0
 800a86e:	6053      	str	r3, [r2, #4]
 800a870:	e7de      	b.n	800a830 <_malloc_r+0xa8>
 800a872:	230c      	movs	r3, #12
 800a874:	6033      	str	r3, [r6, #0]
 800a876:	4630      	mov	r0, r6
 800a878:	f000 f80c 	bl	800a894 <__malloc_unlock>
 800a87c:	e794      	b.n	800a7a8 <_malloc_r+0x20>
 800a87e:	6005      	str	r5, [r0, #0]
 800a880:	e7d6      	b.n	800a830 <_malloc_r+0xa8>
 800a882:	bf00      	nop
 800a884:	20001e64 	.word	0x20001e64

0800a888 <__malloc_lock>:
 800a888:	4801      	ldr	r0, [pc, #4]	@ (800a890 <__malloc_lock+0x8>)
 800a88a:	f7ff bf0f 	b.w	800a6ac <__retarget_lock_acquire_recursive>
 800a88e:	bf00      	nop
 800a890:	20001e5c 	.word	0x20001e5c

0800a894 <__malloc_unlock>:
 800a894:	4801      	ldr	r0, [pc, #4]	@ (800a89c <__malloc_unlock+0x8>)
 800a896:	f7ff bf0a 	b.w	800a6ae <__retarget_lock_release_recursive>
 800a89a:	bf00      	nop
 800a89c:	20001e5c 	.word	0x20001e5c

0800a8a0 <__ssputs_r>:
 800a8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a4:	688e      	ldr	r6, [r1, #8]
 800a8a6:	461f      	mov	r7, r3
 800a8a8:	42be      	cmp	r6, r7
 800a8aa:	680b      	ldr	r3, [r1, #0]
 800a8ac:	4682      	mov	sl, r0
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	4690      	mov	r8, r2
 800a8b2:	d82d      	bhi.n	800a910 <__ssputs_r+0x70>
 800a8b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8bc:	d026      	beq.n	800a90c <__ssputs_r+0x6c>
 800a8be:	6965      	ldr	r5, [r4, #20]
 800a8c0:	6909      	ldr	r1, [r1, #16]
 800a8c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8c6:	eba3 0901 	sub.w	r9, r3, r1
 800a8ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8ce:	1c7b      	adds	r3, r7, #1
 800a8d0:	444b      	add	r3, r9
 800a8d2:	106d      	asrs	r5, r5, #1
 800a8d4:	429d      	cmp	r5, r3
 800a8d6:	bf38      	it	cc
 800a8d8:	461d      	movcc	r5, r3
 800a8da:	0553      	lsls	r3, r2, #21
 800a8dc:	d527      	bpl.n	800a92e <__ssputs_r+0x8e>
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7ff ff52 	bl	800a788 <_malloc_r>
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	b360      	cbz	r0, 800a942 <__ssputs_r+0xa2>
 800a8e8:	6921      	ldr	r1, [r4, #16]
 800a8ea:	464a      	mov	r2, r9
 800a8ec:	f000 fae8 	bl	800aec0 <memcpy>
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8fa:	81a3      	strh	r3, [r4, #12]
 800a8fc:	6126      	str	r6, [r4, #16]
 800a8fe:	6165      	str	r5, [r4, #20]
 800a900:	444e      	add	r6, r9
 800a902:	eba5 0509 	sub.w	r5, r5, r9
 800a906:	6026      	str	r6, [r4, #0]
 800a908:	60a5      	str	r5, [r4, #8]
 800a90a:	463e      	mov	r6, r7
 800a90c:	42be      	cmp	r6, r7
 800a90e:	d900      	bls.n	800a912 <__ssputs_r+0x72>
 800a910:	463e      	mov	r6, r7
 800a912:	6820      	ldr	r0, [r4, #0]
 800a914:	4632      	mov	r2, r6
 800a916:	4641      	mov	r1, r8
 800a918:	f000 faa8 	bl	800ae6c <memmove>
 800a91c:	68a3      	ldr	r3, [r4, #8]
 800a91e:	1b9b      	subs	r3, r3, r6
 800a920:	60a3      	str	r3, [r4, #8]
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	4433      	add	r3, r6
 800a926:	6023      	str	r3, [r4, #0]
 800a928:	2000      	movs	r0, #0
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	462a      	mov	r2, r5
 800a930:	f000 fad4 	bl	800aedc <_realloc_r>
 800a934:	4606      	mov	r6, r0
 800a936:	2800      	cmp	r0, #0
 800a938:	d1e0      	bne.n	800a8fc <__ssputs_r+0x5c>
 800a93a:	6921      	ldr	r1, [r4, #16]
 800a93c:	4650      	mov	r0, sl
 800a93e:	f7ff feb7 	bl	800a6b0 <_free_r>
 800a942:	230c      	movs	r3, #12
 800a944:	f8ca 3000 	str.w	r3, [sl]
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a94e:	81a3      	strh	r3, [r4, #12]
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	e7e9      	b.n	800a92a <__ssputs_r+0x8a>
	...

0800a958 <_svfiprintf_r>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	4698      	mov	r8, r3
 800a95e:	898b      	ldrh	r3, [r1, #12]
 800a960:	061b      	lsls	r3, r3, #24
 800a962:	b09d      	sub	sp, #116	@ 0x74
 800a964:	4607      	mov	r7, r0
 800a966:	460d      	mov	r5, r1
 800a968:	4614      	mov	r4, r2
 800a96a:	d510      	bpl.n	800a98e <_svfiprintf_r+0x36>
 800a96c:	690b      	ldr	r3, [r1, #16]
 800a96e:	b973      	cbnz	r3, 800a98e <_svfiprintf_r+0x36>
 800a970:	2140      	movs	r1, #64	@ 0x40
 800a972:	f7ff ff09 	bl	800a788 <_malloc_r>
 800a976:	6028      	str	r0, [r5, #0]
 800a978:	6128      	str	r0, [r5, #16]
 800a97a:	b930      	cbnz	r0, 800a98a <_svfiprintf_r+0x32>
 800a97c:	230c      	movs	r3, #12
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	b01d      	add	sp, #116	@ 0x74
 800a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98a:	2340      	movs	r3, #64	@ 0x40
 800a98c:	616b      	str	r3, [r5, #20]
 800a98e:	2300      	movs	r3, #0
 800a990:	9309      	str	r3, [sp, #36]	@ 0x24
 800a992:	2320      	movs	r3, #32
 800a994:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a998:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99c:	2330      	movs	r3, #48	@ 0x30
 800a99e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab3c <_svfiprintf_r+0x1e4>
 800a9a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9a6:	f04f 0901 	mov.w	r9, #1
 800a9aa:	4623      	mov	r3, r4
 800a9ac:	469a      	mov	sl, r3
 800a9ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b2:	b10a      	cbz	r2, 800a9b8 <_svfiprintf_r+0x60>
 800a9b4:	2a25      	cmp	r2, #37	@ 0x25
 800a9b6:	d1f9      	bne.n	800a9ac <_svfiprintf_r+0x54>
 800a9b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9bc:	d00b      	beq.n	800a9d6 <_svfiprintf_r+0x7e>
 800a9be:	465b      	mov	r3, fp
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	f7ff ff6b 	bl	800a8a0 <__ssputs_r>
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	f000 80a7 	beq.w	800ab1e <_svfiprintf_r+0x1c6>
 800a9d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d2:	445a      	add	r2, fp
 800a9d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 809f 	beq.w	800ab1e <_svfiprintf_r+0x1c6>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ea:	f10a 0a01 	add.w	sl, sl, #1
 800a9ee:	9304      	str	r3, [sp, #16]
 800a9f0:	9307      	str	r3, [sp, #28]
 800a9f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9f8:	4654      	mov	r4, sl
 800a9fa:	2205      	movs	r2, #5
 800a9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa00:	484e      	ldr	r0, [pc, #312]	@ (800ab3c <_svfiprintf_r+0x1e4>)
 800aa02:	f7f5 fbf5 	bl	80001f0 <memchr>
 800aa06:	9a04      	ldr	r2, [sp, #16]
 800aa08:	b9d8      	cbnz	r0, 800aa42 <_svfiprintf_r+0xea>
 800aa0a:	06d0      	lsls	r0, r2, #27
 800aa0c:	bf44      	itt	mi
 800aa0e:	2320      	movmi	r3, #32
 800aa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa14:	0711      	lsls	r1, r2, #28
 800aa16:	bf44      	itt	mi
 800aa18:	232b      	movmi	r3, #43	@ 0x2b
 800aa1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa1e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa22:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa24:	d015      	beq.n	800aa52 <_svfiprintf_r+0xfa>
 800aa26:	9a07      	ldr	r2, [sp, #28]
 800aa28:	4654      	mov	r4, sl
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	f04f 0c0a 	mov.w	ip, #10
 800aa30:	4621      	mov	r1, r4
 800aa32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa36:	3b30      	subs	r3, #48	@ 0x30
 800aa38:	2b09      	cmp	r3, #9
 800aa3a:	d94b      	bls.n	800aad4 <_svfiprintf_r+0x17c>
 800aa3c:	b1b0      	cbz	r0, 800aa6c <_svfiprintf_r+0x114>
 800aa3e:	9207      	str	r2, [sp, #28]
 800aa40:	e014      	b.n	800aa6c <_svfiprintf_r+0x114>
 800aa42:	eba0 0308 	sub.w	r3, r0, r8
 800aa46:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	46a2      	mov	sl, r4
 800aa50:	e7d2      	b.n	800a9f8 <_svfiprintf_r+0xa0>
 800aa52:	9b03      	ldr	r3, [sp, #12]
 800aa54:	1d19      	adds	r1, r3, #4
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	9103      	str	r1, [sp, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bfbb      	ittet	lt
 800aa5e:	425b      	neglt	r3, r3
 800aa60:	f042 0202 	orrlt.w	r2, r2, #2
 800aa64:	9307      	strge	r3, [sp, #28]
 800aa66:	9307      	strlt	r3, [sp, #28]
 800aa68:	bfb8      	it	lt
 800aa6a:	9204      	strlt	r2, [sp, #16]
 800aa6c:	7823      	ldrb	r3, [r4, #0]
 800aa6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa70:	d10a      	bne.n	800aa88 <_svfiprintf_r+0x130>
 800aa72:	7863      	ldrb	r3, [r4, #1]
 800aa74:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa76:	d132      	bne.n	800aade <_svfiprintf_r+0x186>
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	9203      	str	r2, [sp, #12]
 800aa80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa84:	3402      	adds	r4, #2
 800aa86:	9305      	str	r3, [sp, #20]
 800aa88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab4c <_svfiprintf_r+0x1f4>
 800aa8c:	7821      	ldrb	r1, [r4, #0]
 800aa8e:	2203      	movs	r2, #3
 800aa90:	4650      	mov	r0, sl
 800aa92:	f7f5 fbad 	bl	80001f0 <memchr>
 800aa96:	b138      	cbz	r0, 800aaa8 <_svfiprintf_r+0x150>
 800aa98:	9b04      	ldr	r3, [sp, #16]
 800aa9a:	eba0 000a 	sub.w	r0, r0, sl
 800aa9e:	2240      	movs	r2, #64	@ 0x40
 800aaa0:	4082      	lsls	r2, r0
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	3401      	adds	r4, #1
 800aaa6:	9304      	str	r3, [sp, #16]
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	4824      	ldr	r0, [pc, #144]	@ (800ab40 <_svfiprintf_r+0x1e8>)
 800aaae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aab2:	2206      	movs	r2, #6
 800aab4:	f7f5 fb9c 	bl	80001f0 <memchr>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d036      	beq.n	800ab2a <_svfiprintf_r+0x1d2>
 800aabc:	4b21      	ldr	r3, [pc, #132]	@ (800ab44 <_svfiprintf_r+0x1ec>)
 800aabe:	bb1b      	cbnz	r3, 800ab08 <_svfiprintf_r+0x1b0>
 800aac0:	9b03      	ldr	r3, [sp, #12]
 800aac2:	3307      	adds	r3, #7
 800aac4:	f023 0307 	bic.w	r3, r3, #7
 800aac8:	3308      	adds	r3, #8
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aace:	4433      	add	r3, r6
 800aad0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad2:	e76a      	b.n	800a9aa <_svfiprintf_r+0x52>
 800aad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad8:	460c      	mov	r4, r1
 800aada:	2001      	movs	r0, #1
 800aadc:	e7a8      	b.n	800aa30 <_svfiprintf_r+0xd8>
 800aade:	2300      	movs	r3, #0
 800aae0:	3401      	adds	r4, #1
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	4619      	mov	r1, r3
 800aae6:	f04f 0c0a 	mov.w	ip, #10
 800aaea:	4620      	mov	r0, r4
 800aaec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf0:	3a30      	subs	r2, #48	@ 0x30
 800aaf2:	2a09      	cmp	r2, #9
 800aaf4:	d903      	bls.n	800aafe <_svfiprintf_r+0x1a6>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0c6      	beq.n	800aa88 <_svfiprintf_r+0x130>
 800aafa:	9105      	str	r1, [sp, #20]
 800aafc:	e7c4      	b.n	800aa88 <_svfiprintf_r+0x130>
 800aafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab02:	4604      	mov	r4, r0
 800ab04:	2301      	movs	r3, #1
 800ab06:	e7f0      	b.n	800aaea <_svfiprintf_r+0x192>
 800ab08:	ab03      	add	r3, sp, #12
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	462a      	mov	r2, r5
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab48 <_svfiprintf_r+0x1f0>)
 800ab10:	a904      	add	r1, sp, #16
 800ab12:	4638      	mov	r0, r7
 800ab14:	f3af 8000 	nop.w
 800ab18:	1c42      	adds	r2, r0, #1
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	d1d6      	bne.n	800aacc <_svfiprintf_r+0x174>
 800ab1e:	89ab      	ldrh	r3, [r5, #12]
 800ab20:	065b      	lsls	r3, r3, #25
 800ab22:	f53f af2d 	bmi.w	800a980 <_svfiprintf_r+0x28>
 800ab26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab28:	e72c      	b.n	800a984 <_svfiprintf_r+0x2c>
 800ab2a:	ab03      	add	r3, sp, #12
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	462a      	mov	r2, r5
 800ab30:	4b05      	ldr	r3, [pc, #20]	@ (800ab48 <_svfiprintf_r+0x1f0>)
 800ab32:	a904      	add	r1, sp, #16
 800ab34:	4638      	mov	r0, r7
 800ab36:	f000 f879 	bl	800ac2c <_printf_i>
 800ab3a:	e7ed      	b.n	800ab18 <_svfiprintf_r+0x1c0>
 800ab3c:	0800b0e1 	.word	0x0800b0e1
 800ab40:	0800b0eb 	.word	0x0800b0eb
 800ab44:	00000000 	.word	0x00000000
 800ab48:	0800a8a1 	.word	0x0800a8a1
 800ab4c:	0800b0e7 	.word	0x0800b0e7

0800ab50 <_printf_common>:
 800ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab54:	4616      	mov	r6, r2
 800ab56:	4698      	mov	r8, r3
 800ab58:	688a      	ldr	r2, [r1, #8]
 800ab5a:	690b      	ldr	r3, [r1, #16]
 800ab5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab60:	4293      	cmp	r3, r2
 800ab62:	bfb8      	it	lt
 800ab64:	4613      	movlt	r3, r2
 800ab66:	6033      	str	r3, [r6, #0]
 800ab68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	b10a      	cbz	r2, 800ab76 <_printf_common+0x26>
 800ab72:	3301      	adds	r3, #1
 800ab74:	6033      	str	r3, [r6, #0]
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	0699      	lsls	r1, r3, #26
 800ab7a:	bf42      	ittt	mi
 800ab7c:	6833      	ldrmi	r3, [r6, #0]
 800ab7e:	3302      	addmi	r3, #2
 800ab80:	6033      	strmi	r3, [r6, #0]
 800ab82:	6825      	ldr	r5, [r4, #0]
 800ab84:	f015 0506 	ands.w	r5, r5, #6
 800ab88:	d106      	bne.n	800ab98 <_printf_common+0x48>
 800ab8a:	f104 0a19 	add.w	sl, r4, #25
 800ab8e:	68e3      	ldr	r3, [r4, #12]
 800ab90:	6832      	ldr	r2, [r6, #0]
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	42ab      	cmp	r3, r5
 800ab96:	dc26      	bgt.n	800abe6 <_printf_common+0x96>
 800ab98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	3b00      	subs	r3, #0
 800aba0:	bf18      	it	ne
 800aba2:	2301      	movne	r3, #1
 800aba4:	0692      	lsls	r2, r2, #26
 800aba6:	d42b      	bmi.n	800ac00 <_printf_common+0xb0>
 800aba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abac:	4641      	mov	r1, r8
 800abae:	4638      	mov	r0, r7
 800abb0:	47c8      	blx	r9
 800abb2:	3001      	adds	r0, #1
 800abb4:	d01e      	beq.n	800abf4 <_printf_common+0xa4>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	6922      	ldr	r2, [r4, #16]
 800abba:	f003 0306 	and.w	r3, r3, #6
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	bf02      	ittt	eq
 800abc2:	68e5      	ldreq	r5, [r4, #12]
 800abc4:	6833      	ldreq	r3, [r6, #0]
 800abc6:	1aed      	subeq	r5, r5, r3
 800abc8:	68a3      	ldr	r3, [r4, #8]
 800abca:	bf0c      	ite	eq
 800abcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abd0:	2500      	movne	r5, #0
 800abd2:	4293      	cmp	r3, r2
 800abd4:	bfc4      	itt	gt
 800abd6:	1a9b      	subgt	r3, r3, r2
 800abd8:	18ed      	addgt	r5, r5, r3
 800abda:	2600      	movs	r6, #0
 800abdc:	341a      	adds	r4, #26
 800abde:	42b5      	cmp	r5, r6
 800abe0:	d11a      	bne.n	800ac18 <_printf_common+0xc8>
 800abe2:	2000      	movs	r0, #0
 800abe4:	e008      	b.n	800abf8 <_printf_common+0xa8>
 800abe6:	2301      	movs	r3, #1
 800abe8:	4652      	mov	r2, sl
 800abea:	4641      	mov	r1, r8
 800abec:	4638      	mov	r0, r7
 800abee:	47c8      	blx	r9
 800abf0:	3001      	adds	r0, #1
 800abf2:	d103      	bne.n	800abfc <_printf_common+0xac>
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295
 800abf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfc:	3501      	adds	r5, #1
 800abfe:	e7c6      	b.n	800ab8e <_printf_common+0x3e>
 800ac00:	18e1      	adds	r1, r4, r3
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	2030      	movs	r0, #48	@ 0x30
 800ac06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac0a:	4422      	add	r2, r4
 800ac0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac14:	3302      	adds	r3, #2
 800ac16:	e7c7      	b.n	800aba8 <_printf_common+0x58>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	4638      	mov	r0, r7
 800ac20:	47c8      	blx	r9
 800ac22:	3001      	adds	r0, #1
 800ac24:	d0e6      	beq.n	800abf4 <_printf_common+0xa4>
 800ac26:	3601      	adds	r6, #1
 800ac28:	e7d9      	b.n	800abde <_printf_common+0x8e>
	...

0800ac2c <_printf_i>:
 800ac2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac30:	7e0f      	ldrb	r7, [r1, #24]
 800ac32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac34:	2f78      	cmp	r7, #120	@ 0x78
 800ac36:	4691      	mov	r9, r2
 800ac38:	4680      	mov	r8, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	469a      	mov	sl, r3
 800ac3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac42:	d807      	bhi.n	800ac54 <_printf_i+0x28>
 800ac44:	2f62      	cmp	r7, #98	@ 0x62
 800ac46:	d80a      	bhi.n	800ac5e <_printf_i+0x32>
 800ac48:	2f00      	cmp	r7, #0
 800ac4a:	f000 80d2 	beq.w	800adf2 <_printf_i+0x1c6>
 800ac4e:	2f58      	cmp	r7, #88	@ 0x58
 800ac50:	f000 80b9 	beq.w	800adc6 <_printf_i+0x19a>
 800ac54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac5c:	e03a      	b.n	800acd4 <_printf_i+0xa8>
 800ac5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac62:	2b15      	cmp	r3, #21
 800ac64:	d8f6      	bhi.n	800ac54 <_printf_i+0x28>
 800ac66:	a101      	add	r1, pc, #4	@ (adr r1, 800ac6c <_printf_i+0x40>)
 800ac68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac6c:	0800acc5 	.word	0x0800acc5
 800ac70:	0800acd9 	.word	0x0800acd9
 800ac74:	0800ac55 	.word	0x0800ac55
 800ac78:	0800ac55 	.word	0x0800ac55
 800ac7c:	0800ac55 	.word	0x0800ac55
 800ac80:	0800ac55 	.word	0x0800ac55
 800ac84:	0800acd9 	.word	0x0800acd9
 800ac88:	0800ac55 	.word	0x0800ac55
 800ac8c:	0800ac55 	.word	0x0800ac55
 800ac90:	0800ac55 	.word	0x0800ac55
 800ac94:	0800ac55 	.word	0x0800ac55
 800ac98:	0800add9 	.word	0x0800add9
 800ac9c:	0800ad03 	.word	0x0800ad03
 800aca0:	0800ad93 	.word	0x0800ad93
 800aca4:	0800ac55 	.word	0x0800ac55
 800aca8:	0800ac55 	.word	0x0800ac55
 800acac:	0800adfb 	.word	0x0800adfb
 800acb0:	0800ac55 	.word	0x0800ac55
 800acb4:	0800ad03 	.word	0x0800ad03
 800acb8:	0800ac55 	.word	0x0800ac55
 800acbc:	0800ac55 	.word	0x0800ac55
 800acc0:	0800ad9b 	.word	0x0800ad9b
 800acc4:	6833      	ldr	r3, [r6, #0]
 800acc6:	1d1a      	adds	r2, r3, #4
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6032      	str	r2, [r6, #0]
 800accc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acd4:	2301      	movs	r3, #1
 800acd6:	e09d      	b.n	800ae14 <_printf_i+0x1e8>
 800acd8:	6833      	ldr	r3, [r6, #0]
 800acda:	6820      	ldr	r0, [r4, #0]
 800acdc:	1d19      	adds	r1, r3, #4
 800acde:	6031      	str	r1, [r6, #0]
 800ace0:	0606      	lsls	r6, r0, #24
 800ace2:	d501      	bpl.n	800ace8 <_printf_i+0xbc>
 800ace4:	681d      	ldr	r5, [r3, #0]
 800ace6:	e003      	b.n	800acf0 <_printf_i+0xc4>
 800ace8:	0645      	lsls	r5, r0, #25
 800acea:	d5fb      	bpl.n	800ace4 <_printf_i+0xb8>
 800acec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	da03      	bge.n	800acfc <_printf_i+0xd0>
 800acf4:	232d      	movs	r3, #45	@ 0x2d
 800acf6:	426d      	negs	r5, r5
 800acf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acfc:	4859      	ldr	r0, [pc, #356]	@ (800ae64 <_printf_i+0x238>)
 800acfe:	230a      	movs	r3, #10
 800ad00:	e011      	b.n	800ad26 <_printf_i+0xfa>
 800ad02:	6821      	ldr	r1, [r4, #0]
 800ad04:	6833      	ldr	r3, [r6, #0]
 800ad06:	0608      	lsls	r0, r1, #24
 800ad08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad0c:	d402      	bmi.n	800ad14 <_printf_i+0xe8>
 800ad0e:	0649      	lsls	r1, r1, #25
 800ad10:	bf48      	it	mi
 800ad12:	b2ad      	uxthmi	r5, r5
 800ad14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad16:	4853      	ldr	r0, [pc, #332]	@ (800ae64 <_printf_i+0x238>)
 800ad18:	6033      	str	r3, [r6, #0]
 800ad1a:	bf14      	ite	ne
 800ad1c:	230a      	movne	r3, #10
 800ad1e:	2308      	moveq	r3, #8
 800ad20:	2100      	movs	r1, #0
 800ad22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad26:	6866      	ldr	r6, [r4, #4]
 800ad28:	60a6      	str	r6, [r4, #8]
 800ad2a:	2e00      	cmp	r6, #0
 800ad2c:	bfa2      	ittt	ge
 800ad2e:	6821      	ldrge	r1, [r4, #0]
 800ad30:	f021 0104 	bicge.w	r1, r1, #4
 800ad34:	6021      	strge	r1, [r4, #0]
 800ad36:	b90d      	cbnz	r5, 800ad3c <_printf_i+0x110>
 800ad38:	2e00      	cmp	r6, #0
 800ad3a:	d04b      	beq.n	800add4 <_printf_i+0x1a8>
 800ad3c:	4616      	mov	r6, r2
 800ad3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad42:	fb03 5711 	mls	r7, r3, r1, r5
 800ad46:	5dc7      	ldrb	r7, [r0, r7]
 800ad48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad4c:	462f      	mov	r7, r5
 800ad4e:	42bb      	cmp	r3, r7
 800ad50:	460d      	mov	r5, r1
 800ad52:	d9f4      	bls.n	800ad3e <_printf_i+0x112>
 800ad54:	2b08      	cmp	r3, #8
 800ad56:	d10b      	bne.n	800ad70 <_printf_i+0x144>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	07df      	lsls	r7, r3, #31
 800ad5c:	d508      	bpl.n	800ad70 <_printf_i+0x144>
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	6861      	ldr	r1, [r4, #4]
 800ad62:	4299      	cmp	r1, r3
 800ad64:	bfde      	ittt	le
 800ad66:	2330      	movle	r3, #48	@ 0x30
 800ad68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad70:	1b92      	subs	r2, r2, r6
 800ad72:	6122      	str	r2, [r4, #16]
 800ad74:	f8cd a000 	str.w	sl, [sp]
 800ad78:	464b      	mov	r3, r9
 800ad7a:	aa03      	add	r2, sp, #12
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	4640      	mov	r0, r8
 800ad80:	f7ff fee6 	bl	800ab50 <_printf_common>
 800ad84:	3001      	adds	r0, #1
 800ad86:	d14a      	bne.n	800ae1e <_printf_i+0x1f2>
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8c:	b004      	add	sp, #16
 800ad8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	f043 0320 	orr.w	r3, r3, #32
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	4833      	ldr	r0, [pc, #204]	@ (800ae68 <_printf_i+0x23c>)
 800ad9c:	2778      	movs	r7, #120	@ 0x78
 800ad9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	6831      	ldr	r1, [r6, #0]
 800ada6:	061f      	lsls	r7, r3, #24
 800ada8:	f851 5b04 	ldr.w	r5, [r1], #4
 800adac:	d402      	bmi.n	800adb4 <_printf_i+0x188>
 800adae:	065f      	lsls	r7, r3, #25
 800adb0:	bf48      	it	mi
 800adb2:	b2ad      	uxthmi	r5, r5
 800adb4:	6031      	str	r1, [r6, #0]
 800adb6:	07d9      	lsls	r1, r3, #31
 800adb8:	bf44      	itt	mi
 800adba:	f043 0320 	orrmi.w	r3, r3, #32
 800adbe:	6023      	strmi	r3, [r4, #0]
 800adc0:	b11d      	cbz	r5, 800adca <_printf_i+0x19e>
 800adc2:	2310      	movs	r3, #16
 800adc4:	e7ac      	b.n	800ad20 <_printf_i+0xf4>
 800adc6:	4827      	ldr	r0, [pc, #156]	@ (800ae64 <_printf_i+0x238>)
 800adc8:	e7e9      	b.n	800ad9e <_printf_i+0x172>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	f023 0320 	bic.w	r3, r3, #32
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	e7f6      	b.n	800adc2 <_printf_i+0x196>
 800add4:	4616      	mov	r6, r2
 800add6:	e7bd      	b.n	800ad54 <_printf_i+0x128>
 800add8:	6833      	ldr	r3, [r6, #0]
 800adda:	6825      	ldr	r5, [r4, #0]
 800addc:	6961      	ldr	r1, [r4, #20]
 800adde:	1d18      	adds	r0, r3, #4
 800ade0:	6030      	str	r0, [r6, #0]
 800ade2:	062e      	lsls	r6, r5, #24
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	d501      	bpl.n	800adec <_printf_i+0x1c0>
 800ade8:	6019      	str	r1, [r3, #0]
 800adea:	e002      	b.n	800adf2 <_printf_i+0x1c6>
 800adec:	0668      	lsls	r0, r5, #25
 800adee:	d5fb      	bpl.n	800ade8 <_printf_i+0x1bc>
 800adf0:	8019      	strh	r1, [r3, #0]
 800adf2:	2300      	movs	r3, #0
 800adf4:	6123      	str	r3, [r4, #16]
 800adf6:	4616      	mov	r6, r2
 800adf8:	e7bc      	b.n	800ad74 <_printf_i+0x148>
 800adfa:	6833      	ldr	r3, [r6, #0]
 800adfc:	1d1a      	adds	r2, r3, #4
 800adfe:	6032      	str	r2, [r6, #0]
 800ae00:	681e      	ldr	r6, [r3, #0]
 800ae02:	6862      	ldr	r2, [r4, #4]
 800ae04:	2100      	movs	r1, #0
 800ae06:	4630      	mov	r0, r6
 800ae08:	f7f5 f9f2 	bl	80001f0 <memchr>
 800ae0c:	b108      	cbz	r0, 800ae12 <_printf_i+0x1e6>
 800ae0e:	1b80      	subs	r0, r0, r6
 800ae10:	6060      	str	r0, [r4, #4]
 800ae12:	6863      	ldr	r3, [r4, #4]
 800ae14:	6123      	str	r3, [r4, #16]
 800ae16:	2300      	movs	r3, #0
 800ae18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae1c:	e7aa      	b.n	800ad74 <_printf_i+0x148>
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	4632      	mov	r2, r6
 800ae22:	4649      	mov	r1, r9
 800ae24:	4640      	mov	r0, r8
 800ae26:	47d0      	blx	sl
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d0ad      	beq.n	800ad88 <_printf_i+0x15c>
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	079b      	lsls	r3, r3, #30
 800ae30:	d413      	bmi.n	800ae5a <_printf_i+0x22e>
 800ae32:	68e0      	ldr	r0, [r4, #12]
 800ae34:	9b03      	ldr	r3, [sp, #12]
 800ae36:	4298      	cmp	r0, r3
 800ae38:	bfb8      	it	lt
 800ae3a:	4618      	movlt	r0, r3
 800ae3c:	e7a6      	b.n	800ad8c <_printf_i+0x160>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	4632      	mov	r2, r6
 800ae42:	4649      	mov	r1, r9
 800ae44:	4640      	mov	r0, r8
 800ae46:	47d0      	blx	sl
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d09d      	beq.n	800ad88 <_printf_i+0x15c>
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	68e3      	ldr	r3, [r4, #12]
 800ae50:	9903      	ldr	r1, [sp, #12]
 800ae52:	1a5b      	subs	r3, r3, r1
 800ae54:	42ab      	cmp	r3, r5
 800ae56:	dcf2      	bgt.n	800ae3e <_printf_i+0x212>
 800ae58:	e7eb      	b.n	800ae32 <_printf_i+0x206>
 800ae5a:	2500      	movs	r5, #0
 800ae5c:	f104 0619 	add.w	r6, r4, #25
 800ae60:	e7f5      	b.n	800ae4e <_printf_i+0x222>
 800ae62:	bf00      	nop
 800ae64:	0800b0f2 	.word	0x0800b0f2
 800ae68:	0800b103 	.word	0x0800b103

0800ae6c <memmove>:
 800ae6c:	4288      	cmp	r0, r1
 800ae6e:	b510      	push	{r4, lr}
 800ae70:	eb01 0402 	add.w	r4, r1, r2
 800ae74:	d902      	bls.n	800ae7c <memmove+0x10>
 800ae76:	4284      	cmp	r4, r0
 800ae78:	4623      	mov	r3, r4
 800ae7a:	d807      	bhi.n	800ae8c <memmove+0x20>
 800ae7c:	1e43      	subs	r3, r0, #1
 800ae7e:	42a1      	cmp	r1, r4
 800ae80:	d008      	beq.n	800ae94 <memmove+0x28>
 800ae82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae8a:	e7f8      	b.n	800ae7e <memmove+0x12>
 800ae8c:	4402      	add	r2, r0
 800ae8e:	4601      	mov	r1, r0
 800ae90:	428a      	cmp	r2, r1
 800ae92:	d100      	bne.n	800ae96 <memmove+0x2a>
 800ae94:	bd10      	pop	{r4, pc}
 800ae96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae9e:	e7f7      	b.n	800ae90 <memmove+0x24>

0800aea0 <_sbrk_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d06      	ldr	r5, [pc, #24]	@ (800aebc <_sbrk_r+0x1c>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	f7f5 ffc2 	bl	8000e34 <_sbrk>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_sbrk_r+0x1a>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_sbrk_r+0x1a>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	20001e58 	.word	0x20001e58

0800aec0 <memcpy>:
 800aec0:	440a      	add	r2, r1
 800aec2:	4291      	cmp	r1, r2
 800aec4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aec8:	d100      	bne.n	800aecc <memcpy+0xc>
 800aeca:	4770      	bx	lr
 800aecc:	b510      	push	{r4, lr}
 800aece:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aed6:	4291      	cmp	r1, r2
 800aed8:	d1f9      	bne.n	800aece <memcpy+0xe>
 800aeda:	bd10      	pop	{r4, pc}

0800aedc <_realloc_r>:
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee0:	4680      	mov	r8, r0
 800aee2:	4615      	mov	r5, r2
 800aee4:	460c      	mov	r4, r1
 800aee6:	b921      	cbnz	r1, 800aef2 <_realloc_r+0x16>
 800aee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	4611      	mov	r1, r2
 800aeee:	f7ff bc4b 	b.w	800a788 <_malloc_r>
 800aef2:	b92a      	cbnz	r2, 800af00 <_realloc_r+0x24>
 800aef4:	f7ff fbdc 	bl	800a6b0 <_free_r>
 800aef8:	2400      	movs	r4, #0
 800aefa:	4620      	mov	r0, r4
 800aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af00:	f000 f81a 	bl	800af38 <_malloc_usable_size_r>
 800af04:	4285      	cmp	r5, r0
 800af06:	4606      	mov	r6, r0
 800af08:	d802      	bhi.n	800af10 <_realloc_r+0x34>
 800af0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af0e:	d8f4      	bhi.n	800aefa <_realloc_r+0x1e>
 800af10:	4629      	mov	r1, r5
 800af12:	4640      	mov	r0, r8
 800af14:	f7ff fc38 	bl	800a788 <_malloc_r>
 800af18:	4607      	mov	r7, r0
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d0ec      	beq.n	800aef8 <_realloc_r+0x1c>
 800af1e:	42b5      	cmp	r5, r6
 800af20:	462a      	mov	r2, r5
 800af22:	4621      	mov	r1, r4
 800af24:	bf28      	it	cs
 800af26:	4632      	movcs	r2, r6
 800af28:	f7ff ffca 	bl	800aec0 <memcpy>
 800af2c:	4621      	mov	r1, r4
 800af2e:	4640      	mov	r0, r8
 800af30:	f7ff fbbe 	bl	800a6b0 <_free_r>
 800af34:	463c      	mov	r4, r7
 800af36:	e7e0      	b.n	800aefa <_realloc_r+0x1e>

0800af38 <_malloc_usable_size_r>:
 800af38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3c:	1f18      	subs	r0, r3, #4
 800af3e:	2b00      	cmp	r3, #0
 800af40:	bfbc      	itt	lt
 800af42:	580b      	ldrlt	r3, [r1, r0]
 800af44:	18c0      	addlt	r0, r0, r3
 800af46:	4770      	bx	lr

0800af48 <_init>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	bf00      	nop
 800af4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4e:	bc08      	pop	{r3}
 800af50:	469e      	mov	lr, r3
 800af52:	4770      	bx	lr

0800af54 <_fini>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	bf00      	nop
 800af58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5a:	bc08      	pop	{r3}
 800af5c:	469e      	mov	lr, r3
 800af5e:	4770      	bx	lr
