
Logic Analyzer V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800aa44  0800aa44  0001aa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf8  0800abf8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800abf8  0800abf8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abf8  0800abf8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abfc  0800abfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ac00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00001bf4  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dcc  20001dcc  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012f78  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032b1  00000000  00000000  000331c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001038  00000000  00000000  00036478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c49  00000000  00000000  000374b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022fd7  00000000  00000000  000380f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015d61  00000000  00000000  0005b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca2b6  00000000  00000000  00070e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047f8  00000000  00000000  0013b0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0013f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa2c 	.word	0x0800aa2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800aa2c 	.word	0x0800aa2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000294:	f000 fcc4 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f860 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f9a4 	bl	80005e8 <MX_GPIO_Init>
  MX_TIM2_Init(0x00008CA0);
 80002a0:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80002a4:	f000 f8be 	bl	8000424 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80002a8:	f009 f9e6 	bl	8009678 <MX_USB_DEVICE_Init>
  MX_TIM16_Init(0xFFFF);
 80002ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002b0:	f000 f91e 	bl	80004f0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  state = preTrigger;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <main+0xb0>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	701a      	strb	r2, [r3, #0]


  while (1)
    {
      /* USER CODE END WHILE */
  	  switch(state){
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <main+0xb0>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d037      	beq.n	8000332 <main+0xa2>
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	dcf9      	bgt.n	80002ba <main+0x2a>
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d035      	beq.n	8000336 <main+0xa6>
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d1f5      	bne.n	80002ba <main+0x2a>
  	  	  		  break;
  	  	  	  case triggerState:

  	  	  		  break;
  	  	  	  case postTrigger:
  	  	  		 HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80002ce:	2100      	movs	r1, #0
 80002d0:	481c      	ldr	r0, [pc, #112]	; (8000344 <main+0xb4>)
 80002d2:	f004 f9af 	bl	8004634 <HAL_TIM_PWM_Stop>
  	  	  		 trigger = 0;
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <main+0xb8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
  	  	  		 //Send_Large_USB_Data((void*)buffer, 150 * sizeof(uint16_t));
  	  	  		 sprintf(msg, "%hu\r\n", buffer[val]);
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <main+0xbc>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <main+0xc0>)
 80002e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002e6:	461a      	mov	r2, r3
 80002e8:	491a      	ldr	r1, [pc, #104]	; (8000354 <main+0xc4>)
 80002ea:	481b      	ldr	r0, [pc, #108]	; (8000358 <main+0xc8>)
 80002ec:	f009 fefa 	bl	800a0e4 <siprintf>
  	  	  		 CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 80002f0:	4819      	ldr	r0, [pc, #100]	; (8000358 <main+0xc8>)
 80002f2:	f7ff ff75 	bl	80001e0 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	4816      	ldr	r0, [pc, #88]	; (8000358 <main+0xc8>)
 80002fe:	f009 fa7b 	bl	80097f8 <CDC_Transmit_FS>
  	  	  		 HAL_Delay(1);
 8000302:	2001      	movs	r0, #1
 8000304:	f000 fcf2 	bl	8000cec <HAL_Delay>
  	  	  		 val++;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <main+0xbc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	4a0f      	ldr	r2, [pc, #60]	; (800034c <main+0xbc>)
 8000310:	6013      	str	r3, [r2, #0]

  	  	  		 if(val == 1024){
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <main+0xbc>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800031a:	d10e      	bne.n	800033a <main+0xaa>
  	  	  			 val = 0;
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <main+0xbc>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]

  	  	  			HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000322:	2100      	movs	r1, #0
 8000324:	4807      	ldr	r0, [pc, #28]	; (8000344 <main+0xb4>)
 8000326:	f004 fa21 	bl	800476c <HAL_TIM_PWM_Start_IT>
  	  	  			state = triggerState;
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <main+0xb0>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]

  	  	  		 }
  	  	  			break;
 8000330:	e003      	b.n	800033a <main+0xaa>
  	  	  		  break;
 8000332:	bf00      	nop
 8000334:	e7c1      	b.n	80002ba <main+0x2a>
  	  	  		  break;
 8000336:	bf00      	nop
 8000338:	e7bf      	b.n	80002ba <main+0x2a>
  	  	  			break;
 800033a:	bf00      	nop
  	  switch(state){
 800033c:	e7bd      	b.n	80002ba <main+0x2a>
 800033e:	bf00      	nop
 8000340:	20000a0e 	.word	0x20000a0e
 8000344:	20000a14 	.word	0x20000a14
 8000348:	200009f8 	.word	0x200009f8
 800034c:	20000a08 	.word	0x20000a08
 8000350:	200001f4 	.word	0x200001f4
 8000354:	0800aa44 	.word	0x0800aa44
 8000358:	200009fc 	.word	0x200009fc

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b0a6      	sub	sp, #152	; 0x98
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000366:	2228      	movs	r2, #40	; 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f009 feda 	bl	800a124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2258      	movs	r2, #88	; 0x58
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f009 fecc 	bl	800a124 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038c:	2301      	movs	r3, #1
 800038e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fc22 	bl	8002c04 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003c6:	f000 fb0d 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 fc60 	bl	8003cac <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003f2:	f000 faf7 	bl	80009e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_TIM16
 80003f6:	f44f 0312 	mov.w	r3, #9568256	; 0x920000
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003fc:	2300      	movs	r3, #0
 80003fe:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000400:	2300      	movs	r3, #0
 8000402:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000404:	2300      	movs	r3, #0
 8000406:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fe1e 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000416:	f000 fae5 	bl	80009e4 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3798      	adds	r7, #152	; 0x98
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(uint32_t period)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08c      	sub	sp, #48	; 0x30
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <MX_TIM2_Init+0xc8>)
 800044e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000454:	4b25      	ldr	r3, [pc, #148]	; (80004ec <MX_TIM2_Init+0xc8>)
 8000456:	2201      	movs	r2, #1
 8000458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b24      	ldr	r3, [pc, #144]	; (80004ec <MX_TIM2_Init+0xc8>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = period-1;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3b01      	subs	r3, #1
 8000464:	4a21      	ldr	r2, [pc, #132]	; (80004ec <MX_TIM2_Init+0xc8>)
 8000466:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <MX_TIM2_Init+0xc8>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046e:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <MX_TIM2_Init+0xc8>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000474:	481d      	ldr	r0, [pc, #116]	; (80004ec <MX_TIM2_Init+0xc8>)
 8000476:	f004 f885 	bl	8004584 <HAL_TIM_PWM_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000480:	f000 fab0 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800048c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000490:	4619      	mov	r1, r3
 8000492:	4816      	ldr	r0, [pc, #88]	; (80004ec <MX_TIM2_Init+0xc8>)
 8000494:	f005 f8d6 	bl	8005644 <HAL_TIMEx_MasterConfigSynchronization>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800049e:	f000 faa1 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a2:	2360      	movs	r3, #96	; 0x60
 80004a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	2200      	movs	r2, #0
 80004b8:	4619      	mov	r1, r3
 80004ba:	480c      	ldr	r0, [pc, #48]	; (80004ec <MX_TIM2_Init+0xc8>)
 80004bc:	f004 fbb0 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 80004c6:	f000 fa8d 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2204      	movs	r2, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <MX_TIM2_Init+0xc8>)
 80004d4:	f004 fba4 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80004de:	f000 fa81 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	3730      	adds	r7, #48	; 0x30
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000a14 	.word	0x20000a14

080004f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(uint16_t period)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	222c      	movs	r2, #44	; 0x2c
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f009 fe04 	bl	800a124 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <MX_TIM16_Init+0xf0>)
 800051e:	4a31      	ldr	r2, [pc, #196]	; (80005e4 <MX_TIM16_Init+0xf4>)
 8000520:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <MX_TIM16_Init+0xf0>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <MX_TIM16_Init+0xf0>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = period-1;
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	3b01      	subs	r3, #1
 8000532:	461a      	mov	r2, r3
 8000534:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <MX_TIM16_Init+0xf0>)
 8000536:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MX_TIM16_Init+0xf0>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800053e:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <MX_TIM16_Init+0xf0>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <MX_TIM16_Init+0xf0>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800054a:	4825      	ldr	r0, [pc, #148]	; (80005e0 <MX_TIM16_Init+0xf0>)
 800054c:	f003 ff9c 	bl	8004488 <HAL_TIM_Base_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM16_Init+0x6a>
  {
    Error_Handler();
 8000556:	f000 fa45 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800055a:	4821      	ldr	r0, [pc, #132]	; (80005e0 <MX_TIM16_Init+0xf0>)
 800055c:	f004 f812 	bl	8004584 <HAL_TIM_PWM_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM16_Init+0x7a>
  {
    Error_Handler();
 8000566:	f000 fa3d 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056a:	2360      	movs	r3, #96	; 0x60
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000572:	2300      	movs	r3, #0
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000576:	2300      	movs	r3, #0
 8000578:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000582:	2300      	movs	r3, #0
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000586:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	4814      	ldr	r0, [pc, #80]	; (80005e0 <MX_TIM16_Init+0xf0>)
 8000590:	f004 fb46 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800059a:	f000 fa23 	bl	80009e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_TIM16_Init+0xf0>)
 80005c8:	f005 f8c8 	bl	800575c <HAL_TIMEx_ConfigBreakDeadTime>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM16_Init+0xe6>
  {
    Error_Handler();
 80005d2:	f000 fa07 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000a60 	.word	0x20000a60
 80005e4:	40014400 	.word	0x40014400

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <MX_GPIO_Init+0xe0>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <MX_GPIO_Init+0xe0>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a25      	ldr	r2, [pc, #148]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_GPIO_Init+0xe0>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <MX_GPIO_Init+0xe0>)
 800064c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_GPIO_Init+0xe0>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f000 fe01 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000670:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <MX_GPIO_Init+0xe4>)
 8000682:	f000 fc69 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000686:	2320      	movs	r3, #32
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f000 fc5a 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_GPIO_Init+0xe8>)
 80006ba:	f000 fc4d 	bl	8000f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800
 80006d0:	48000400 	.word	0x48000400

080006d4 <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t trigPin = 0x01;
uint8_t trigEdge = 0x01; //Falling Edge
int triggerCount = 300;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7f1b      	ldrb	r3, [r3, #28]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d166      	bne.n	80007b2 <HAL_TIM_PWM_PulseFinishedCallback+0xde>
		if (trigger){
 80006e4:	4b35      	ldr	r3, [pc, #212]	; (80007bc <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d011      	beq.n	8000710 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
				counter++;
 80006ec:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a33      	ldr	r2, [pc, #204]	; (80007c0 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80006f4:	6013      	str	r3, [r2, #0]
				if (counter == triggerCount){
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d106      	bne.n	8000710 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
					state = postTrigger;
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000708:	2100      	movs	r1, #0
 800070a:	4830      	ldr	r0, [pc, #192]	; (80007cc <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 800070c:	f003 ff92 	bl	8004634 <HAL_TIM_PWM_Stop>
				}
			}
			if(!trigger) {
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d139      	bne.n	800078c <HAL_TIM_PWM_PulseFinishedCallback+0xb8>
				xorResult = GPIOB->IDR^buffer[bufferPointer];
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	492d      	ldr	r1, [pc, #180]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000724:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000728:	4053      	eors	r3, r2
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800072e:	801a      	strh	r2, [r3, #0]
				uint16_t trigPinCheck = xorResult & trigPin;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x10c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	4013      	ands	r3, r2
 800073c:	81fb      	strh	r3, [r7, #14]
				uint16_t trigEdgeCheck = ~(buffer[bufferPointer]^trigEdge);
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000744:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	4053      	eors	r3, r2
 8000750:	b29b      	uxth	r3, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	81bb      	strh	r3, [r7, #12]
				trigger = (trigPinCheck & trigEdgeCheck) > 0;
 8000756:	89fa      	ldrh	r2, [r7, #14]
 8000758:	89bb      	ldrh	r3, [r7, #12]
 800075a:	4013      	ands	r3, r2
 800075c:	b29b      	uxth	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 800076c:	601a      	str	r2, [r3, #0]
				if (trigger){
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00a      	beq.n	800078c <HAL_TIM_PWM_PulseFinishedCallback+0xb8>
					//start trigger timer
					HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);
 8000776:	2100      	movs	r1, #0
 8000778:	4814      	ldr	r0, [pc, #80]	; (80007cc <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 800077a:	f003 ff5b 	bl	8004634 <HAL_TIM_PWM_Stop>
					counter = 0;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
					//state = triggerState;
					HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_2);
 8000784:	2104      	movs	r1, #4
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000788:	f003 fff0 	bl	800476c <HAL_TIM_PWM_Start_IT>
				}
			}

			//add 8 bit logic input to buffer
			buffer[bufferPointer] = GPIOB->IDR & 0xFFFF;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800078e:	691a      	ldr	r2, [r3, #16]
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b291      	uxth	r1, r2
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//increments pointer with circular logic using logic gates
			bufferPointer++;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80007a4:	6013      	str	r3, [r2, #0]
			bufferPointer &= 0x03FF;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80007b0:	6013      	str	r3, [r2, #0]
	//			}
	}



}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200009f8 	.word	0x200009f8
 80007c0:	20000a10 	.word	0x20000a10
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000a0e 	.word	0x20000a0e
 80007cc:	20000a14 	.word	0x20000a14
 80007d0:	48000400 	.word	0x48000400
 80007d4:	200009f4 	.word	0x200009f4
 80007d8:	200001f4 	.word	0x200001f4
 80007dc:	20000a0c 	.word	0x20000a0c
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000001 	.word	0x20000001

080007e8 <Process_USB_Command>:
int commandValueFlag = 2; //0 is command, 1 is value 1, 2 is value 2, repeat
uint16_t period16 = 0x0000;
uint32_t period2 = 0x00000000;
uint16_t period2LowerHalf = 0x0000;
uint32_t period2UpperHalf = 0x00000000;
void Process_USB_Command(char *cmd) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]


	commandValueFlag += 1;
 80007f0:	4b61      	ldr	r3, [pc, #388]	; (8000978 <Process_USB_Command+0x190>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a60      	ldr	r2, [pc, #384]	; (8000978 <Process_USB_Command+0x190>)
 80007f8:	6013      	str	r3, [r2, #0]
	if (commandValueFlag == 3)
 80007fa:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <Process_USB_Command+0x190>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d102      	bne.n	8000808 <Process_USB_Command+0x20>
			commandValueFlag = 0;
 8000802:	4b5d      	ldr	r3, [pc, #372]	; (8000978 <Process_USB_Command+0x190>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
	if (commandValueFlag == 0)
 8000808:	4b5b      	ldr	r3, [pc, #364]	; (8000978 <Process_USB_Command+0x190>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d106      	bne.n	800081e <Process_USB_Command+0x36>
		command = atoi(cmd);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f009 fbd7 	bl	8009fc4 <atoi>
 8000816:	4603      	mov	r3, r0
 8000818:	4a58      	ldr	r2, [pc, #352]	; (800097c <Process_USB_Command+0x194>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e09e      	b.n	800095c <Process_USB_Command+0x174>
	else{
			switch(command){
 800081e:	4b57      	ldr	r3, [pc, #348]	; (800097c <Process_USB_Command+0x194>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b0c      	cmp	r3, #12
 8000824:	f200 809a 	bhi.w	800095c <Process_USB_Command+0x174>
 8000828:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <Process_USB_Command+0x48>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000865 	.word	0x08000865
 8000834:	0800086f 	.word	0x0800086f
 8000838:	08000879 	.word	0x08000879
 800083c:	08000889 	.word	0x08000889
 8000840:	08000899 	.word	0x08000899
 8000844:	080008cb 	.word	0x080008cb
 8000848:	0800090f 	.word	0x0800090f
 800084c:	0800095d 	.word	0x0800095d
 8000850:	0800095d 	.word	0x0800095d
 8000854:	0800095d 	.word	0x0800095d
 8000858:	0800095d 	.word	0x0800095d
 800085c:	0800095d 	.word	0x0800095d
 8000860:	0800095d 	.word	0x0800095d
			case 0://start
				HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000864:	2100      	movs	r1, #0
 8000866:	4846      	ldr	r0, [pc, #280]	; (8000980 <Process_USB_Command+0x198>)
 8000868:	f003 ff80 	bl	800476c <HAL_TIM_PWM_Start_IT>
				break;
 800086c:	e076      	b.n	800095c <Process_USB_Command+0x174>
			case 1: //stop
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800086e:	2100      	movs	r1, #0
 8000870:	4843      	ldr	r0, [pc, #268]	; (8000980 <Process_USB_Command+0x198>)
 8000872:	f003 fedf 	bl	8004634 <HAL_TIM_PWM_Stop>
				break;
 8000876:	e071      	b.n	800095c <Process_USB_Command+0x174>
			case 2: //trigger Falling Edge
				trigEdge = atoi(cmd);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f009 fba3 	bl	8009fc4 <atoi>
 800087e:	4603      	mov	r3, r0
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <Process_USB_Command+0x19c>)
 8000884:	701a      	strb	r2, [r3, #0]
				break;
 8000886:	e069      	b.n	800095c <Process_USB_Command+0x174>
			case 3: //trigger Rising Edge;
				trigPin = atoi(cmd);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f009 fb9b 	bl	8009fc4 <atoi>
 800088e:	4603      	mov	r3, r0
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <Process_USB_Command+0x1a0>)
 8000894:	701a      	strb	r2, [r3, #0]
				break;
 8000896:	e061      	b.n	800095c <Process_USB_Command+0x174>
			case 4: //trigger PIN from 0 to 7
				period16 = period16 << 8;
 8000898:	4b3c      	ldr	r3, [pc, #240]	; (800098c <Process_USB_Command+0x1a4>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <Process_USB_Command+0x1a4>)
 80008a2:	801a      	strh	r2, [r3, #0]
				period16 |= atoi(cmd);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f009 fb8d 	bl	8009fc4 <atoi>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	4b37      	ldr	r3, [pc, #220]	; (800098c <Process_USB_Command+0x1a4>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b34      	ldr	r3, [pc, #208]	; (800098c <Process_USB_Command+0x1a4>)
 80008bc:	801a      	strh	r2, [r3, #0]
				change_period16(period16);
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <Process_USB_Command+0x1a4>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f87c 	bl	80009c0 <change_period16>
				break;
 80008c8:	e048      	b.n	800095c <Process_USB_Command+0x174>

			case 5:
				period2UpperHalf = period2UpperHalf << 8;
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <Process_USB_Command+0x1a8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	4a2f      	ldr	r2, [pc, #188]	; (8000990 <Process_USB_Command+0x1a8>)
 80008d2:	6013      	str	r3, [r2, #0]
				period2UpperHalf |= atoi(cmd);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f009 fb75 	bl	8009fc4 <atoi>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <Process_USB_Command+0x1a8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <Process_USB_Command+0x1a8>)
 80008e6:	6013      	str	r3, [r2, #0]
				period2 &= 0x0000FFFF;
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <Process_USB_Command+0x1ac>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4a29      	ldr	r2, [pc, #164]	; (8000994 <Process_USB_Command+0x1ac>)
 80008f0:	6013      	str	r3, [r2, #0]
				period2 |= period2UpperHalf << 16;
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <Process_USB_Command+0x1a8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	041a      	lsls	r2, r3, #16
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <Process_USB_Command+0x1ac>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	4a25      	ldr	r2, [pc, #148]	; (8000994 <Process_USB_Command+0x1ac>)
 8000900:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 8000902:	4b24      	ldr	r3, [pc, #144]	; (8000994 <Process_USB_Command+0x1ac>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f848 	bl	800099c <change_period2>
				break;
 800090c:	e026      	b.n	800095c <Process_USB_Command+0x174>
			case 6:
				period2LowerHalf = period2LowerHalf << 8;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <Process_USB_Command+0x1b0>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <Process_USB_Command+0x1b0>)
 8000918:	801a      	strh	r2, [r3, #0]
				period2LowerHalf |= atoi(cmd);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f009 fb52 	bl	8009fc4 <atoi>
 8000920:	4603      	mov	r3, r0
 8000922:	b21a      	sxth	r2, r3
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <Process_USB_Command+0x1b0>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <Process_USB_Command+0x1b0>)
 8000932:	801a      	strh	r2, [r3, #0]
				period2 &= 0xFFFF0000;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <Process_USB_Command+0x1ac>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	0c1b      	lsrs	r3, r3, #16
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	4a15      	ldr	r2, [pc, #84]	; (8000994 <Process_USB_Command+0x1ac>)
 800093e:	6013      	str	r3, [r2, #0]
				period2 |= period2LowerHalf;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <Process_USB_Command+0x1b0>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <Process_USB_Command+0x1ac>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4313      	orrs	r3, r2
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <Process_USB_Command+0x1ac>)
 800094e:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <Process_USB_Command+0x1ac>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f821 	bl	800099c <change_period2>
				break;
 800095a:	bf00      	nop
			case 12:
				//trigPin = trigPIN[8];
				break;
			}
	}
	 memset(cmd, 0, strlen(cmd));  // Clear the command string//clear command
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fc3f 	bl	80001e0 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f009 fbdb 	bl	800a124 <memset>
	 //put it back into sampling state
	 //start timer 2
	 //set trigger to 0

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	20000aac 	.word	0x20000aac
 8000980:	20000a14 	.word	0x20000a14
 8000984:	20000001 	.word	0x20000001
 8000988:	20000000 	.word	0x20000000
 800098c:	20000ab0 	.word	0x20000ab0
 8000990:	20000abc 	.word	0x20000abc
 8000994:	20000ab4 	.word	0x20000ab4
 8000998:	20000ab8 	.word	0x20000ab8

0800099c <change_period2>:
void change_period2(uint32_t period){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80009a4:	2100      	movs	r1, #0
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <change_period2+0x20>)
 80009a8:	f003 fe44 	bl	8004634 <HAL_TIM_PWM_Stop>

	MX_TIM2_Init(period);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fd39 	bl	8000424 <MX_TIM2_Init>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000a14 	.word	0x20000a14

080009c0 <change_period16>:
void change_period16(uint16_t period){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop(&htim16);
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <change_period16+0x20>)
 80009cc:	f003 fdb3 	bl	8004536 <HAL_TIM_Base_Stop>

	MX_TIM16_Init(period);
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fd8c 	bl	80004f0 <MX_TIM16_Init>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000a60 	.word	0x20000a60

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x44>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_MspInit+0x44>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x44>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 fa54 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a48:	d113      	bne.n	8000a72 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_TIM_PWM_MspInit+0x44>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <HAL_TIM_PWM_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_TIM_PWM_MspInit+0x44>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	201c      	movs	r0, #28
 8000a68:	f000 fa3f 	bl	8000eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a6c:	201c      	movs	r0, #28
 8000a6e:	f000 fa58 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_TIM_Base_MspInit+0x38>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10b      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_TIM_Base_MspInit+0x3c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_TIM_Base_MspInit+0x3c>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	6193      	str	r3, [r2, #24]
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_TIM_Base_MspInit+0x3c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40014400 	.word	0x40014400
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f8ce 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000b1a:	f000 fcac 	bl	8001476 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20001790 	.word	0x20001790

08000b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM2_IRQHandler+0x10>)
 8000b2e:	f003 ff75 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000a14 	.word	0x20000a14

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f009 fae2 	bl	800a134 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20010000 	.word	0x20010000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000ac0 	.word	0x20000ac0
 8000ba4:	20001dd0 	.word	0x20001dd0

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f009 faa1 	bl	800a140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fb47 	bl	8000290 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000c10:	0800ac00 	.word	0x0800ac00
  ldr r2, =_sbss
 8000c14:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000c18:	20001dcc 	.word	0x20001dcc

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x28>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x28>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f94f 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fed8 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f967 	bl	8000f3e <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f92f 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000000c 	.word	0x2000000c
 8000ca4:	20000014 	.word	0x20000014
 8000ca8:	20000010 	.word	0x20000010

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	20000ac4 	.word	0x20000ac4

08000cd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000ac4 	.word	0x20000ac4

08000cec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000014 	.word	0x20000014

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff29 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff3e 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff31 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa2 	bl	8000e90 <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e160      	b.n	800122a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8152 	beq.w	8001224 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <HAL_GPIO_Init+0x40>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	f003 0201 	and.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b03      	cmp	r3, #3
 8001004:	d017      	beq.n	8001036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d123      	bne.n	800108a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	6939      	ldr	r1, [r7, #16]
 8001086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0203 	and.w	r2, r3, #3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80ac 	beq.w	8001224 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	4b5e      	ldr	r3, [pc, #376]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a5d      	ldr	r2, [pc, #372]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010e4:	4a59      	ldr	r2, [pc, #356]	; (800124c <HAL_GPIO_Init+0x2f4>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110e:	d025      	beq.n	800115c <HAL_GPIO_Init+0x204>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x2f8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d01f      	beq.n	8001158 <HAL_GPIO_Init+0x200>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x2fc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d019      	beq.n	8001154 <HAL_GPIO_Init+0x1fc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x300>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1f8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x304>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1f4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x308>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1f0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x30c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1ec>
 8001140:	2306      	movs	r3, #6
 8001142:	e00c      	b.n	800115e <HAL_GPIO_Init+0x206>
 8001144:	2307      	movs	r3, #7
 8001146:	e00a      	b.n	800115e <HAL_GPIO_Init+0x206>
 8001148:	2305      	movs	r3, #5
 800114a:	e008      	b.n	800115e <HAL_GPIO_Init+0x206>
 800114c:	2304      	movs	r3, #4
 800114e:	e006      	b.n	800115e <HAL_GPIO_Init+0x206>
 8001150:	2303      	movs	r3, #3
 8001152:	e004      	b.n	800115e <HAL_GPIO_Init+0x206>
 8001154:	2302      	movs	r3, #2
 8001156:	e002      	b.n	800115e <HAL_GPIO_Init+0x206>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <HAL_GPIO_Init+0x206>
 800115c:	2300      	movs	r3, #0
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	f002 0203 	and.w	r2, r2, #3
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4093      	lsls	r3, r2
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800116e:	4937      	ldr	r1, [pc, #220]	; (800124c <HAL_GPIO_Init+0x2f4>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_GPIO_Init+0x310>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011a0:	4a31      	ldr	r2, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x310>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_GPIO_Init+0x310>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_GPIO_Init+0x310>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_GPIO_Init+0x310>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011f4:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x310>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_GPIO_Init+0x310>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_GPIO_Init+0x310>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	f47f ae97 	bne.w	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	48000400 	.word	0x48000400
 8001254:	48000800 	.word	0x48000800
 8001258:	48000c00 	.word	0x48000c00
 800125c:	48001000 	.word	0x48001000
 8001260:	48001400 	.word	0x48001400
 8001264:	48001800 	.word	0x48001800
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001288:	e002      	b.n	8001290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e0b9      	b.n	8001422 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f008 fbce 	bl	8009a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fafc 	bl	80058d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e03e      	b.n	800135e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	3311      	adds	r3, #17
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	3310      	adds	r3, #16
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3313      	adds	r3, #19
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	3320      	adds	r3, #32
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	3324      	adds	r3, #36	; 0x24
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	791b      	ldrb	r3, [r3, #4]
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3bb      	bcc.n	80012e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e044      	b.n	80013f8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	3301      	adds	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3b5      	bcc.n	800136e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3304      	adds	r3, #4
 800140a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800140e:	f004 fa7b 	bl	8005908 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_PCD_Start+0x16>
 800143c:	2302      	movs	r3, #2
 800143e:	e016      	b.n	800146e <HAL_PCD_Start+0x44>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f004 fa29 	bl	80058a4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001452:	2101      	movs	r1, #1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f008 fd7d 	bl	8009f54 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f006 fce6 	bl	8007e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f006 fcdf 	bl	8007e46 <USB_ReadInterrupts>
 8001488:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fab1 	bl	80019fc <PCD_EP_ISR_Handler>

    return;
 800149a:	e0bd      	b.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d013      	beq.n	80014ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014b8:	b292      	uxth	r2, r2
 80014ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f008 fb4b 	bl	8009b5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f8a9 	bl	800161e <HAL_PCD_SetAddress>

    return;
 80014cc:	e0a4      	b.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014ea:	b292      	uxth	r2, r2
 80014ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014f0:	e092      	b.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001504:	b29a      	uxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800150e:	b292      	uxth	r2, r2
 8001510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001514:	e080      	b.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d027      	beq.n	8001570 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001528:	b29a      	uxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0204 	bic.w	r2, r2, #4
 8001532:	b292      	uxth	r2, r2
 8001534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0208 	bic.w	r2, r2, #8
 800154a:	b292      	uxth	r2, r2
 800154c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f008 fb3b 	bl	8009bcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001568:	b292      	uxth	r2, r2
 800156a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800156e:	e053      	b.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001576:	2b00      	cmp	r3, #0
 8001578:	d027      	beq.n	80015ca <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001582:	b29a      	uxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0208 	orr.w	r2, r2, #8
 800158c:	b292      	uxth	r2, r2
 800158e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0204 	orr.w	r2, r2, #4
 80015bc:	b292      	uxth	r2, r2
 80015be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f008 fae8 	bl	8009b98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015c8:	e026      	b.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00f      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015e6:	b292      	uxth	r2, r2
 80015e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f008 faa6 	bl	8009b3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015f2:	e011      	b.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001616:	bf00      	nop
  }
}
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_PCD_SetAddress+0x1a>
 8001634:	2302      	movs	r3, #2
 8001636:	e012      	b.n	800165e <HAL_PCD_SetAddress+0x40>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f006 fbda 	bl	8007e08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	4608      	mov	r0, r1
 8001670:	4611      	mov	r1, r2
 8001672:	461a      	mov	r2, r3
 8001674:	4603      	mov	r3, r0
 8001676:	70fb      	strb	r3, [r7, #3]
 8001678:	460b      	mov	r3, r1
 800167a:	803b      	strh	r3, [r7, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da0e      	bge.n	80016aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	f003 0207 	and.w	r2, r3, #7
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	3310      	adds	r3, #16
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	705a      	strb	r2, [r3, #1]
 80016a8:	e00e      	b.n	80016c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	f003 0207 	and.w	r2, r3, #7
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016d4:	883a      	ldrh	r2, [r7, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	78ba      	ldrb	r2, [r7, #2]
 80016de:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016e0:	78bb      	ldrb	r3, [r7, #2]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d102      	bne.n	80016ec <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_PCD_EP_Open+0x94>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e00e      	b.n	8001718 <HAL_PCD_EP_Open+0xb2>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68f9      	ldr	r1, [r7, #12]
 8001708:	4618      	mov	r0, r3
 800170a:	f004 f91b 	bl	8005944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8001716:	7afb      	ldrb	r3, [r7, #11]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800172c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da0e      	bge.n	8001752 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 0207 	and.w	r2, r3, #7
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	3310      	adds	r3, #16
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	705a      	strb	r2, [r3, #1]
 8001750:	e00e      	b.n	8001770 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	f003 0207 	and.w	r2, r3, #7
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	b2da      	uxtb	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_PCD_EP_Close+0x6a>
 8001786:	2302      	movs	r3, #2
 8001788:	e00e      	b.n	80017a8 <HAL_PCD_EP_Close+0x88>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fc97 	bl	80060cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	460b      	mov	r3, r1
 80017be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	f003 0207 	and.w	r2, r3, #7
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2200      	movs	r2, #0
 80017ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fe4f 	bl	80064a6 <USB_EPStartXfer>

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	f003 0207 	and.w	r2, r3, #7
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001834:	681b      	ldr	r3, [r3, #0]
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	460b      	mov	r3, r1
 8001850:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	f003 0207 	and.w	r2, r3, #7
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	3310      	adds	r3, #16
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2201      	movs	r2, #1
 800188c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	b2da      	uxtb	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6979      	ldr	r1, [r7, #20]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fe00 	bl	80064a6 <USB_EPStartXfer>

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	7912      	ldrb	r2, [r2, #4]
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e03e      	b.n	800194c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	da0e      	bge.n	80018f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	f003 0207 	and.w	r2, r3, #7
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	3310      	adds	r3, #16
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	705a      	strb	r2, [r3, #1]
 80018f2:	e00c      	b.n	800190e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	b2da      	uxtb	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_PCD_EP_SetStall+0x7e>
 800192a:	2302      	movs	r3, #2
 800192c:	e00e      	b.n	800194c <HAL_PCD_EP_SetStall+0x9c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	4618      	mov	r0, r3
 800193e:	f006 f964 	bl	8007c0a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	7912      	ldrb	r2, [r2, #4]
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e040      	b.n	80019f4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da0e      	bge.n	8001998 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 0207 	and.w	r2, r3, #7
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	3310      	adds	r3, #16
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	705a      	strb	r2, [r3, #1]
 8001996:	e00e      	b.n	80019b6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	f003 0207 	and.w	r2, r3, #7
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_PCD_EP_ClrStall+0x82>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e00e      	b.n	80019f4 <HAL_PCD_EP_ClrStall+0xa0>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 f961 	bl	8007cac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b096      	sub	sp, #88	; 0x58
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a04:	e3ae      	b.n	8002164 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8001a20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f040 8170 	bne.w	8001d0a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d14d      	bne.n	8001ad2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a46:	81fb      	strh	r3, [r7, #14]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
 8001a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3310      	adds	r3, #16
 8001a5e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	441a      	add	r2, r3
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a96:	2100      	movs	r1, #0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f008 f836 	bl	8009b0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b1b      	ldrb	r3, [r3, #12]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 835d 	beq.w	8002164 <PCD_EP_ISR_Handler+0x768>
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8358 	bne.w	8002164 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7b1b      	ldrb	r3, [r3, #12]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	731a      	strb	r2, [r3, #12]
 8001ad0:	e348      	b.n	8002164 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ad8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ae4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d032      	beq.n	8001b56 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b24:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b28:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f006 f9dd 	bl	8007eea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	823b      	strh	r3, [r7, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	8a3a      	ldrh	r2, [r7, #16]
 8001b46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f007 ffae 	bl	8009ab0 <HAL_PCD_SetupStageCallback>
 8001b54:	e306      	b.n	8002164 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b56:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f280 8302 	bge.w	8002164 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	83fb      	strh	r3, [r7, #30]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	8bfa      	ldrh	r2, [r7, #30]
 8001b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d019      	beq.n	8001be2 <PCD_EP_ISR_Handler+0x1e6>
 8001bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbc:	6959      	ldr	r1, [r3, #20]
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f006 f98f 	bl	8007eea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	441a      	add	r2, r3
 8001bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f007 ff79 	bl	8009ad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 82b5 	bne.w	8002164 <PCD_EP_ISR_Handler+0x768>
 8001bfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001bfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001c02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001c06:	f000 82ad 	beq.w	8002164 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	4413      	add	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <PCD_EP_ISR_Handler+0x25c>
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	801a      	strh	r2, [r3, #0]
 8001c56:	e039      	b.n	8001ccc <PCD_EP_ISR_Handler+0x2d0>
 8001c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8001c5e:	d818      	bhi.n	8001c92 <PCD_EP_ISR_Handler+0x296>
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
 8001c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <PCD_EP_ISR_Handler+0x27e>
 8001c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c76:	3301      	adds	r3, #1
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	801a      	strh	r2, [r3, #0]
 8001c90:	e01c      	b.n	8001ccc <PCD_EP_ISR_Handler+0x2d0>
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	647b      	str	r3, [r7, #68]	; 0x44
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <PCD_EP_ISR_Handler+0x2b0>
 8001ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cdc:	827b      	strh	r3, [r7, #18]
 8001cde:	8a7b      	ldrh	r3, [r7, #18]
 8001ce0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ce4:	827b      	strh	r3, [r7, #18]
 8001ce6:	8a7b      	ldrh	r3, [r7, #18]
 8001ce8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cec:	827b      	strh	r3, [r7, #18]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	8a7b      	ldrh	r3, [r7, #18]
 8001cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8013      	strh	r3, [r2, #0]
 8001d08:	e22c      	b.n	8002164 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d1e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f280 80f6 	bge.w	8001f14 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d3e:	4013      	ands	r3, r2
 8001d40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d5a:	b292      	uxth	r2, r2
 8001d5c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d5e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d123      	bne.n	8001dc4 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001da4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 808e 	beq.w	8001eca <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	6959      	ldr	r1, [r3, #20]
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	88da      	ldrh	r2, [r3, #6]
 8001dba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dbe:	f006 f894 	bl	8007eea <USB_ReadPMA>
 8001dc2:	e082      	b.n	8001eca <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	78db      	ldrb	r3, [r3, #3]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d10a      	bne.n	8001de2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f9d3 	bl	8002180 <HAL_PCD_EP_DB_Receive>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001de0:	e073      	b.n	8001eca <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	441a      	add	r2, r3
 8001e0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d022      	beq.n	8001e86 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d02c      	beq.n	8001eca <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	6959      	ldr	r1, [r3, #20]
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	891a      	ldrh	r2, [r3, #8]
 8001e7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e80:	f006 f833 	bl	8007eea <USB_ReadPMA>
 8001e84:	e021      	b.n	8001eca <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eaa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001eae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebc:	6959      	ldr	r1, [r3, #20]
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	895a      	ldrh	r2, [r3, #10]
 8001ec2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ec6:	f006 f810 	bl	8007eea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ed2:	441a      	add	r2, r3
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ee0:	441a      	add	r2, r3
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <PCD_EP_ISR_Handler+0x4fe>
 8001eee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d206      	bcs.n	8001f08 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f007 fde7 	bl	8009ad4 <HAL_PCD_DataOutStageCallback>
 8001f06:	e005      	b.n	8001f14 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fac9 	bl	80064a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8121 	beq.w	8002164 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f22:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	3310      	adds	r3, #16
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f74:	78db      	ldrb	r3, [r3, #3]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	f040 80a2 	bne.w	80020c0 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	7b1b      	ldrb	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8093 	beq.w	80020b2 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d046      	beq.n	8002026 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d126      	bne.n	8001fee <PCD_EP_ISR_Handler+0x5f2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	4413      	add	r3, r2
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	00da      	lsls	r2, r3, #3
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	801a      	strh	r2, [r3, #0]
 8001fec:	e061      	b.n	80020b2 <PCD_EP_ISR_Handler+0x6b6>
 8001fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d15d      	bne.n	80020b2 <PCD_EP_ISR_Handler+0x6b6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	4413      	add	r3, r2
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00da      	lsls	r2, r3, #3
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	4413      	add	r3, r2
 8002018:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	2200      	movs	r2, #0
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	e045      	b.n	80020b2 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d126      	bne.n	8002082 <PCD_EP_ISR_Handler+0x686>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002048:	4413      	add	r3, r2
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
 800204c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	00da      	lsls	r2, r3, #3
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	4413      	add	r3, r2
 8002056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002066:	b29a      	uxth	r2, r3
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207a:	b29a      	uxth	r2, r3
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	801a      	strh	r2, [r3, #0]
 8002080:	e017      	b.n	80020b2 <PCD_EP_ISR_Handler+0x6b6>
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d113      	bne.n	80020b2 <PCD_EP_ISR_Handler+0x6b6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002098:	4413      	add	r3, r2
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00da      	lsls	r2, r3, #3
 80020a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a4:	4413      	add	r3, r2
 80020a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	2200      	movs	r2, #0
 80020b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f007 fd26 	bl	8009b0a <HAL_PCD_DataInStageCallback>
 80020be:	e051      	b.n	8002164 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d144      	bne.n	8002156 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80020f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d907      	bls.n	8002110 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002108:	1ad2      	subs	r2, r2, r3
 800210a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210c:	619a      	str	r2, [r3, #24]
 800210e:	e002      	b.n	8002116 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f007 fcf0 	bl	8009b0a <HAL_PCD_DataInStageCallback>
 800212a:	e01b      	b.n	8002164 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002134:	441a      	add	r2, r3
 8002136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002138:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800213a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002142:	441a      	add	r2, r3
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f9a9 	bl	80064a6 <USB_EPStartXfer>
 8002154:	e006      	b.n	8002164 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002156:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800215a:	461a      	mov	r2, r3
 800215c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f917 	bl	8002392 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216c:	b29b      	uxth	r3, r3
 800216e:	b21b      	sxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f6ff ac48 	blt.w	8001a06 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3758      	adds	r7, #88	; 0x58
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d07c      	beq.n	8002292 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	8b7b      	ldrh	r3, [r7, #26]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d306      	bcc.n	80021d6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	8b7b      	ldrh	r3, [r7, #26]
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	619a      	str	r2, [r3, #24]
 80021d4:	e002      	b.n	80021dc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d123      	bne.n	800222c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	833b      	strh	r3, [r7, #24]
 8002200:	8b3b      	ldrh	r3, [r7, #24]
 8002202:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002206:	833b      	strh	r3, [r7, #24]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	441a      	add	r2, r3
 8002216:	8b3b      	ldrh	r3, [r7, #24]
 8002218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	b29b      	uxth	r3, r3
 800222a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01f      	beq.n	8002276 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	82fb      	strh	r3, [r7, #22]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	441a      	add	r2, r3
 8002260:	8afb      	ldrh	r3, [r7, #22]
 8002262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800226a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002272:	b29b      	uxth	r3, r3
 8002274:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002276:	8b7b      	ldrh	r3, [r7, #26]
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8085 	beq.w	8002388 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	6959      	ldr	r1, [r3, #20]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	891a      	ldrh	r2, [r3, #8]
 800228a:	8b7b      	ldrh	r3, [r7, #26]
 800228c:	f005 fe2d 	bl	8007eea <USB_ReadPMA>
 8002290:	e07a      	b.n	8002388 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d306      	bcc.n	80022d0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	8b7b      	ldrh	r3, [r7, #26]
 80022c8:	1ad2      	subs	r2, r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	619a      	str	r2, [r3, #24]
 80022ce:	e002      	b.n	80022d6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d123      	bne.n	8002326 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f8:	83fb      	strh	r3, [r7, #30]
 80022fa:	8bfb      	ldrh	r3, [r7, #30]
 80022fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002300:	83fb      	strh	r3, [r7, #30]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	8bfb      	ldrh	r3, [r7, #30]
 8002312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d11f      	bne.n	8002370 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234a:	83bb      	strh	r3, [r7, #28]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	8bbb      	ldrh	r3, [r7, #28]
 800235c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800236c:	b29b      	uxth	r3, r3
 800236e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002370:	8b7b      	ldrh	r3, [r7, #26]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6959      	ldr	r1, [r3, #20]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	895a      	ldrh	r2, [r3, #10]
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	f005 fdb1 	bl	8007eea <USB_ReadPMA>
    }
  }

  return count;
 8002388:	8b7b      	ldrh	r3, [r7, #26]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b0a4      	sub	sp, #144	; 0x90
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	4613      	mov	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 81db 	beq.w	8002762 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80023dc:	429a      	cmp	r2, r3
 80023de:	d907      	bls.n	80023f0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80023e8:	1ad2      	subs	r2, r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	619a      	str	r2, [r3, #24]
 80023ee:	e002      	b.n	80023f6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80b9 	bne.w	8002572 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d126      	bne.n	8002456 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	4413      	add	r3, r2
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	00da      	lsls	r2, r3, #3
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	4413      	add	r3, r2
 800242a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243a:	b29a      	uxth	r2, r3
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29a      	uxth	r2, r3
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e01a      	b.n	800248c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d116      	bne.n	800248c <HAL_PCD_EP_DB_Transmit+0xfa>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002472:	4413      	add	r3, r2
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	00da      	lsls	r2, r3, #3
 800247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247e:	4413      	add	r3, r2
 8002480:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d126      	bne.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x156>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	00da      	lsls	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4413      	add	r3, r2
 80024bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	e017      	b.n	8002518 <HAL_PCD_EP_DB_Transmit+0x186>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	785b      	ldrb	r3, [r3, #1]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d113      	bne.n	8002518 <HAL_PCD_EP_DB_Transmit+0x186>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	4413      	add	r3, r2
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	00da      	lsls	r2, r3, #3
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	4413      	add	r3, r2
 800250c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f007 faf3 	bl	8009b0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 82fa 	beq.w	8002b24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	82fb      	strh	r3, [r7, #22]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	8afb      	ldrh	r3, [r7, #22]
 800255c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	b29b      	uxth	r3, r3
 800256e:	8013      	strh	r3, [r2, #0]
 8002570:	e2d8      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d021      	beq.n	80025c0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	441a      	add	r2, r3
 80025a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80025ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f040 82ac 	bne.w	8002b24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025d4:	441a      	add	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025e2:	441a      	add	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6a1a      	ldr	r2, [r3, #32]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d30b      	bcc.n	800260c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	6a1a      	ldr	r2, [r3, #32]
 8002600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002604:	1ad2      	subs	r2, r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	621a      	str	r2, [r3, #32]
 800260a:	e017      	b.n	800263c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d108      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002614:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002624:	e00a      	b.n	800263c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d165      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002658:	4413      	add	r3, r2
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	00da      	lsls	r2, r3, #3
 8002662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002664:	4413      	add	r3, r2
 8002666:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002676:	b29a      	uxth	r2, r3
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <HAL_PCD_EP_DB_Transmit+0x308>
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002692:	b29a      	uxth	r2, r3
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	e057      	b.n	800274a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800269a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800269e:	2b3e      	cmp	r3, #62	; 0x3e
 80026a0:	d818      	bhi.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x342>
 80026a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_PCD_EP_DB_Transmit+0x32a>
 80026b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b8:	3301      	adds	r3, #1
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e03a      	b.n	800274a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
 80026dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <HAL_PCD_EP_DB_Transmit+0x35c>
 80026e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ea:	3b01      	subs	r3, #1
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002708:	b29a      	uxth	r2, r3
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	e01c      	b.n	800274a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d118      	bne.n	800274a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272c:	4413      	add	r3, r2
 800272e:	647b      	str	r3, [r7, #68]	; 0x44
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	00da      	lsls	r2, r3, #3
 8002736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002738:	4413      	add	r3, r2
 800273a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800273e:	643b      	str	r3, [r7, #64]	; 0x40
 8002740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002744:	b29a      	uxth	r2, r3
 8002746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002748:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6959      	ldr	r1, [r3, #20]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	891a      	ldrh	r2, [r3, #8]
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275a:	b29b      	uxth	r3, r3
 800275c:	f005 fb83 	bl	8007e66 <USB_WritePMA>
 8002760:	e1e0      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	4413      	add	r3, r2
 800277c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002786:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002792:	429a      	cmp	r2, r3
 8002794:	d307      	bcc.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	619a      	str	r2, [r3, #24]
 80027a4:	e002      	b.n	80027ac <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f040 80c0 	bne.w	8002936 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d126      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0x47a>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027d2:	4413      	add	r3, r2
 80027d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00da      	lsls	r2, r3, #3
 80027dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027de:	4413      	add	r3, r2
 80027e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80027e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002804:	b29a      	uxth	r2, r3
 8002806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e01a      	b.n	8002842 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d116      	bne.n	8002842 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	667b      	str	r3, [r7, #100]	; 0x64
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002828:	4413      	add	r3, r2
 800282a:	667b      	str	r3, [r7, #100]	; 0x64
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00da      	lsls	r2, r3, #3
 8002832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002834:	4413      	add	r3, r2
 8002836:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800283a:	663b      	str	r3, [r7, #96]	; 0x60
 800283c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800283e:	2200      	movs	r2, #0
 8002840:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	677b      	str	r3, [r7, #116]	; 0x74
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	785b      	ldrb	r3, [r3, #1]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d12b      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x516>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002864:	4413      	add	r3, r2
 8002866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	00da      	lsls	r2, r3, #3
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	4413      	add	r3, r2
 8002872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002886:	b29a      	uxth	r2, r3
 8002888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289e:	b29a      	uxth	r2, r3
 80028a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	e017      	b.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x546>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d113      	bne.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x546>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028be:	4413      	add	r3, r2
 80028c0:	677b      	str	r3, [r7, #116]	; 0x74
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00da      	lsls	r2, r3, #3
 80028c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ca:	4413      	add	r3, r2
 80028cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028d0:	673b      	str	r3, [r7, #112]	; 0x70
 80028d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d4:	2200      	movs	r2, #0
 80028d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f007 f913 	bl	8009b0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 811a 	bne.w	8002b24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	441a      	add	r2, r3
 800291c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	b29b      	uxth	r3, r3
 8002932:	8013      	strh	r3, [r2, #0]
 8002934:	e0f6      	b.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d121      	bne.n	8002984 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	441a      	add	r2, r3
 800296c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002980:	b29b      	uxth	r3, r3
 8002982:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298a:	2b01      	cmp	r3, #1
 800298c:	f040 80ca 	bne.w	8002b24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002998:	441a      	add	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80029a6:	441a      	add	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d30b      	bcc.n	80029d0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	621a      	str	r2, [r3, #32]
 80029ce:	e017      	b.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d108      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80029d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80029dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029e8:	e00a      	b.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	657b      	str	r3, [r7, #84]	; 0x54
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d165      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x748>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a22:	4413      	add	r3, r2
 8002a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	00da      	lsls	r2, r3, #3
 8002a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2e:	4413      	add	r3, r2
 8002a30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	e054      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a68:	2b3e      	cmp	r3, #62	; 0x3e
 8002a6a:	d818      	bhi.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x70c>
 8002a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a82:	3301      	adds	r3, #1
 8002a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	e037      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x726>
 8002ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	029b      	lsls	r3, r3, #10
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	e019      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d115      	bne.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af0:	4413      	add	r3, r2
 8002af2:	657b      	str	r3, [r7, #84]	; 0x54
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	00da      	lsls	r2, r3, #3
 8002afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b02:	653b      	str	r3, [r7, #80]	; 0x50
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6959      	ldr	r1, [r3, #20]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	895a      	ldrh	r2, [r3, #10]
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f005 f9a1 	bl	8007e66 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3e:	82bb      	strh	r3, [r7, #20]
 8002b40:	8abb      	ldrh	r3, [r7, #20]
 8002b42:	f083 0310 	eor.w	r3, r3, #16
 8002b46:	82bb      	strh	r3, [r7, #20]
 8002b48:	8abb      	ldrh	r3, [r7, #20]
 8002b4a:	f083 0320 	eor.w	r3, r3, #32
 8002b4e:	82bb      	strh	r3, [r7, #20]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	8abb      	ldrh	r3, [r7, #20]
 8002b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3790      	adds	r7, #144	; 0x90
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b087      	sub	sp, #28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	817b      	strh	r3, [r7, #10]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b90:	897b      	ldrh	r3, [r7, #10]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b9c:	897b      	ldrh	r3, [r7, #10]
 8002b9e:	f003 0207 	and.w	r2, r3, #7
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	3310      	adds	r3, #16
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e009      	b.n	8002bc8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bb4:	897a      	ldrh	r2, [r7, #10]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	80da      	strh	r2, [r3, #6]
 8002bdc:	e00b      	b.n	8002bf6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2201      	movs	r2, #1
 8002be2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c14:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f001 b83a 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 816f 	beq.w	8002f1e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c40:	4bb5      	ldr	r3, [pc, #724]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c4c:	4bb2      	ldr	r3, [pc, #712]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d15c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x10e>
 8002c58:	4baf      	ldr	r3, [pc, #700]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d155      	bne.n	8002d12 <HAL_RCC_OscConfig+0x10e>
 8002c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_OscConfig+0x94>
 8002c92:	4ba1      	ldr	r3, [pc, #644]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e015      	b.n	8002cc4 <HAL_RCC_OscConfig+0xc0>
 8002c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002cb4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002cc0:	4b95      	ldr	r3, [pc, #596]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002ccc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002cd0:	fa92 f2a2 	rbit	r2, r2
 8002cd4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002cd8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	f042 0220 	orr.w	r2, r2, #32
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f002 021f 	and.w	r2, r2, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8111 	beq.w	8002f1c <HAL_RCC_OscConfig+0x318>
 8002cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8108 	bne.w	8002f1c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f000 bfc6 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12e>
 8002d24:	4b7c      	ldr	r3, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7b      	ldr	r2, [pc, #492]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e036      	b.n	8002da0 <HAL_RCC_OscConfig+0x19c>
 8002d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x158>
 8002d42:	4b75      	ldr	r3, [pc, #468]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a74      	ldr	r2, [pc, #464]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b72      	ldr	r3, [pc, #456]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a71      	ldr	r2, [pc, #452]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e021      	b.n	8002da0 <HAL_RCC_OscConfig+0x19c>
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x184>
 8002d6e:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a69      	ldr	r2, [pc, #420]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a66      	ldr	r2, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0x19c>
 8002d88:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a62      	ldr	r2, [pc, #392]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d059      	beq.n	8002e64 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fd ff90 	bl	8000cd4 <HAL_GetTick>
 8002db4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dba:	f7fd ff8b 	bl	8000cd4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d902      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	f000 bf67 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
 8002dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002de4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_RCC_OscConfig+0x1fe>
 8002dfc:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x22a>
 8002e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e1e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e32:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002e36:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002e3a:	fa92 f2a2 	rbit	r2, r2
 8002e3e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002e42:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0220 	orr.w	r2, r2, #32
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ab      	beq.n	8002dba <HAL_RCC_OscConfig+0x1b6>
 8002e62:	e05c      	b.n	8002f1e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fd ff36 	bl	8000cd4 <HAL_GetTick>
 8002e68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6e:	f7fd ff31 	bl	8000cd4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d902      	bls.n	8002e84 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	f000 bf0d 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
 8002e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e88:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002e98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2b2>
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2de>
 8002eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ece:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ed2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_RCC_OscConfig+0x314>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ee6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002eea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002eee:	fa92 f2a2 	rbit	r2, r2
 8002ef2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002ef6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002efa:	fab2 f282 	clz	r2, r2
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f042 0220 	orr.w	r2, r2, #32
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	f002 021f 	and.w	r2, r2, #31
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ab      	bne.n	8002e6e <HAL_RCC_OscConfig+0x26a>
 8002f16:	e002      	b.n	8002f1e <HAL_RCC_OscConfig+0x31a>
 8002f18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 817f 	beq.w	8003232 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f34:	4ba7      	ldr	r3, [pc, #668]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f40:	4ba4      	ldr	r3, [pc, #656]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d173      	bne.n	8003034 <HAL_RCC_OscConfig+0x430>
 8002f4c:	4ba1      	ldr	r3, [pc, #644]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f58:	d16c      	bne.n	8003034 <HAL_RCC_OscConfig+0x430>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002f6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_OscConfig+0x386>
 8002f84:	4b93      	ldr	r3, [pc, #588]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e013      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3ae>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fa2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fae:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002fb8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002fbc:	fa92 f2a2 	rbit	r2, r2
 8002fc0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002fc4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCC_OscConfig+0x3f6>
 8002fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d002      	beq.n	8002ffa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f000 be52 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003006:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	21f8      	movs	r1, #248	; 0xf8
 8003010:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003018:	fa91 f1a1 	rbit	r1, r1
 800301c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003020:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003024:	fab1 f181 	clz	r1, r1
 8003028:	b2c9      	uxtb	r1, r1
 800302a:	408b      	lsls	r3, r1
 800302c:	4969      	ldr	r1, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e0fe      	b.n	8003232 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003038:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8088 	beq.w	8003156 <HAL_RCC_OscConfig+0x552>
 8003046:	2301      	movs	r3, #1
 8003048:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003058:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003066:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	461a      	mov	r2, r3
 800306e:	2301      	movs	r3, #1
 8003070:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fd fe2f 	bl	8000cd4 <HAL_GetTick>
 8003076:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307c:	f7fd fe2a 	bl	8000cd4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d902      	bls.n	8003092 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	f000 be06 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
 8003092:	2302      	movs	r3, #2
 8003094:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80030a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_OscConfig+0x4be>
 80030bc:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	e013      	b.n	80030ea <HAL_RCC_OscConfig+0x4e6>
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80030d4:	2302      	movs	r3, #2
 80030d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2202      	movs	r2, #2
 80030ec:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80030f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80030f4:	fa92 f2a2 	rbit	r2, r2
 80030f8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80030fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0220 	orr.w	r2, r2, #32
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0af      	beq.n	800307c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003128:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	21f8      	movs	r1, #248	; 0xf8
 8003132:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800313a:	fa91 f1a1 	rbit	r1, r1
 800313e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003142:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003146:	fab1 f181 	clz	r1, r1
 800314a:	b2c9      	uxtb	r1, r1
 800314c:	408b      	lsls	r3, r1
 800314e:	4921      	ldr	r1, [pc, #132]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e06d      	b.n	8003232 <HAL_RCC_OscConfig+0x62e>
 8003156:	2301      	movs	r3, #1
 8003158:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003168:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003176:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	461a      	mov	r2, r3
 800317e:	2300      	movs	r3, #0
 8003180:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fd fda7 	bl	8000cd4 <HAL_GetTick>
 8003186:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318c:	f7fd fda2 	bl	8000cd4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d902      	bls.n	80031a2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	f000 bd7e 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80031b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5d4>
 80031cc:	4b01      	ldr	r3, [pc, #4]	; (80031d4 <HAL_RCC_OscConfig+0x5d0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	e016      	b.n	8003200 <HAL_RCC_OscConfig+0x5fc>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	2302      	movs	r3, #2
 80031da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80031ea:	2302      	movs	r3, #2
 80031ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031fc:	4bbf      	ldr	r3, [pc, #764]	; (80034fc <HAL_RCC_OscConfig+0x8f8>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2202      	movs	r2, #2
 8003202:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003206:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800320a:	fa92 f2a2 	rbit	r2, r2
 800320e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003212:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ac      	bne.n	800318c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003236:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8113 	beq.w	800346e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d07c      	beq.n	8003352 <HAL_RCC_OscConfig+0x74e>
 8003258:	2301      	movs	r3, #1
 800325a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800326a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	4ba2      	ldr	r3, [pc, #648]	; (8003500 <HAL_RCC_OscConfig+0x8fc>)
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	461a      	mov	r2, r3
 800327e:	2301      	movs	r3, #1
 8003280:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fd fd27 	bl	8000cd4 <HAL_GetTick>
 8003286:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328c:	f7fd fd22 	bl	8000cd4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d902      	bls.n	80032a2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	f000 bcfe 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
 80032a2:	2302      	movs	r3, #2
 80032a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032e6:	2202      	movs	r2, #2
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003300:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x8f8>)
 8003304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800330e:	2102      	movs	r1, #2
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003316:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f1a3 	rbit	r1, r3
 8003320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003324:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003328:	6019      	str	r1, [r3, #0]
  return result;
 800332a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d09d      	beq.n	800328c <HAL_RCC_OscConfig+0x688>
 8003350:	e08d      	b.n	800346e <HAL_RCC_OscConfig+0x86a>
 8003352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003356:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003362:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003370:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003374:	601a      	str	r2, [r3, #0]
  return result;
 8003376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800337e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x8fc>)
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	461a      	mov	r2, r3
 8003390:	2300      	movs	r3, #0
 8003392:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fd fc9e 	bl	8000cd4 <HAL_GetTick>
 8003398:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339e:	f7fd fc99 	bl	8000cd4 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	f000 bc75 	b.w	8003c9e <HAL_RCC_OscConfig+0x109a>
 80033b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80033bc:	2202      	movs	r2, #2
 80033be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	fa93 f2a3 	rbit	r2, r3
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033e0:	2202      	movs	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003400:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800341e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCC_OscConfig+0x8f8>)
 8003422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003428:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800342c:	2102      	movs	r1, #2
 800342e:	6019      	str	r1, [r3, #0]
 8003430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003434:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	fa93 f1a3 	rbit	r1, r3
 800343e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003442:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003446:	6019      	str	r1, [r3, #0]
  return result;
 8003448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800344c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d197      	bne.n	800339e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003472:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 81a5 	beq.w	80037ce <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <HAL_RCC_OscConfig+0x8f8>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_OscConfig+0x8f8>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_RCC_OscConfig+0x8f8>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	61d3      	str	r3, [r2, #28]
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_RCC_OscConfig+0x8f8>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_RCC_OscConfig+0x900>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d121      	bne.n	8003514 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x900>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x900>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034dc:	f7fd fbfa 	bl	8000cd4 <HAL_GetTick>
 80034e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e010      	b.n	8003508 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fd fbf5 	bl	8000cd4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d908      	bls.n	8003508 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e3d1      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	10908120 	.word	0x10908120
 8003504:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b8d      	ldr	r3, [pc, #564]	; (8003740 <HAL_RCC_OscConfig+0xb3c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0e8      	beq.n	80034e6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003518:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x92e>
 8003524:	4b87      	ldr	r3, [pc, #540]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a86      	ldr	r2, [pc, #536]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e035      	b.n	800359e <HAL_RCC_OscConfig+0x99a>
 8003532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003536:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x958>
 8003542:	4b80      	ldr	r3, [pc, #512]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a7f      	ldr	r2, [pc, #508]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6213      	str	r3, [r2, #32]
 800354e:	4b7d      	ldr	r3, [pc, #500]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a7c      	ldr	r2, [pc, #496]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	e020      	b.n	800359e <HAL_RCC_OscConfig+0x99a>
 800355c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003560:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d10c      	bne.n	8003586 <HAL_RCC_OscConfig+0x982>
 800356c:	4b75      	ldr	r3, [pc, #468]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a74      	ldr	r2, [pc, #464]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	4b72      	ldr	r3, [pc, #456]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4a71      	ldr	r2, [pc, #452]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6213      	str	r3, [r2, #32]
 8003584:	e00b      	b.n	800359e <HAL_RCC_OscConfig+0x99a>
 8003586:	4b6f      	ldr	r3, [pc, #444]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a6e      	ldr	r2, [pc, #440]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	4b6c      	ldr	r3, [pc, #432]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4a6b      	ldr	r2, [pc, #428]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800359e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8081 	beq.w	80036b2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fd fb90 	bl	8000cd4 <HAL_GetTick>
 80035b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fd fb8b 	bl	8000cd4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e365      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
 80035d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80035fe:	2202      	movs	r2, #2
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003606:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003614:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003618:	601a      	str	r2, [r3, #0]
  return result;
 800361a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800361e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003622:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d102      	bne.n	800363e <HAL_RCC_OscConfig+0xa3a>
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	e013      	b.n	8003666 <HAL_RCC_OscConfig+0xa62>
 800363e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003642:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003646:	2202      	movs	r2, #2
 8003648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800365c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800366a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800366e:	2102      	movs	r1, #2
 8003670:	6011      	str	r1, [r2, #0]
 8003672:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003676:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	fa92 f1a2 	rbit	r1, r2
 8003680:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003684:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003688:	6011      	str	r1, [r2, #0]
  return result;
 800368a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800368e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d084      	beq.n	80035ba <HAL_RCC_OscConfig+0x9b6>
 80036b0:	e083      	b.n	80037ba <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fb0f 	bl	8000cd4 <HAL_GetTick>
 80036b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fd fb0a 	bl	8000cd4 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e2e4      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
 80036d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80036dc:	2202      	movs	r2, #2
 80036de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fa93 f2a3 	rbit	r2, r3
 80036ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003700:	2202      	movs	r2, #2
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003708:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003716:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800371a:	601a      	str	r2, [r3, #0]
  return result;
 800371c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003720:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003724:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d106      	bne.n	8003748 <HAL_RCC_OscConfig+0xb44>
 800373a:	4b02      	ldr	r3, [pc, #8]	; (8003744 <HAL_RCC_OscConfig+0xb40>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	e017      	b.n	8003770 <HAL_RCC_OscConfig+0xb6c>
 8003740:	40007000 	.word	0x40007000
 8003744:	40021000 	.word	0x40021000
 8003748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003750:	2202      	movs	r2, #2
 8003752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003758:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003766:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	4bb3      	ldr	r3, [pc, #716]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003774:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003778:	2102      	movs	r1, #2
 800377a:	6011      	str	r1, [r2, #0]
 800377c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003780:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	fa92 f1a2 	rbit	r1, r2
 800378a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800378e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003792:	6011      	str	r1, [r2, #0]
  return result;
 8003794:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003798:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	fab2 f282 	clz	r2, r2
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d180      	bne.n	80036bc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037ba:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b9e      	ldr	r3, [pc, #632]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4a9d      	ldr	r2, [pc, #628]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 825e 	beq.w	8003c9c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e0:	4b96      	ldr	r3, [pc, #600]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	f000 821f 	beq.w	8003c2c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	f040 8170 	bne.w	8003ae0 <HAL_RCC_OscConfig+0xedc>
 8003800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003804:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800380c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003812:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	fa93 f2a3 	rbit	r2, r3
 800381c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003820:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003824:	601a      	str	r2, [r3, #0]
  return result;
 8003826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800382e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	461a      	mov	r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fd fa45 	bl	8000cd4 <HAL_GetTick>
 800384a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384e:	e009      	b.n	8003864 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003850:	f7fd fa40 	bl	8000cd4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e21c      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
 8003864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003868:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800386c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003876:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003888:	601a      	str	r2, [r3, #0]
  return result;
 800388a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003892:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_RCC_OscConfig+0xcaa>
 80038a8:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	e027      	b.n	80038fe <HAL_RCC_OscConfig+0xcfa>
 80038ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80038b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	fa93 f2a3 	rbit	r2, r3
 80038f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003902:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003906:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800390a:	6011      	str	r1, [r2, #0]
 800390c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003910:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	fa92 f1a2 	rbit	r1, r2
 800391a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800391e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003922:	6011      	str	r1, [r2, #0]
  return result;
 8003924:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003928:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	fab2 f282 	clz	r2, r2
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	f042 0220 	orr.w	r2, r2, #32
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	f002 021f 	and.w	r2, r2, #31
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d182      	bne.n	8003850 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f023 020f 	bic.w	r2, r3, #15
 8003952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	4937      	ldr	r1, [pc, #220]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 8003960:	4313      	orrs	r3, r2
 8003962:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800396c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003970:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a19      	ldr	r1, [r3, #32]
 8003978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	430b      	orrs	r3, r1
 8003986:	492d      	ldr	r1, [pc, #180]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
 800398c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003990:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	fa93 f2a3 	rbit	r2, r3
 80039a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039b0:	601a      	str	r2, [r3, #0]
  return result;
 80039b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	461a      	mov	r2, r3
 80039ce:	2301      	movs	r3, #1
 80039d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fd f97f 	bl	8000cd4 <HAL_GetTick>
 80039d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039da:	e009      	b.n	80039f0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fd f97a 	bl	8000cd4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e156      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
 80039f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a14:	601a      	str	r2, [r3, #0]
  return result;
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0xe3c>
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <HAL_RCC_OscConfig+0xe38>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	e02a      	b.n	8003a90 <HAL_RCC_OscConfig+0xe8c>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a44:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a52:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	fa93 f2a3 	rbit	r2, r3
 8003a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a60:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a78:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a86:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	4b86      	ldr	r3, [pc, #536]	; (8003ca8 <HAL_RCC_OscConfig+0x10a4>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a94:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a9c:	6011      	str	r1, [r2, #0]
 8003a9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aa2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	fa92 f1a2 	rbit	r1, r2
 8003aac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ab0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003ab4:	6011      	str	r1, [r2, #0]
  return result;
 8003ab6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aba:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	fab2 f282 	clz	r2, r2
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	f042 0220 	orr.w	r2, r2, #32
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	f002 021f 	and.w	r2, r2, #31
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f43f af7f 	beq.w	80039dc <HAL_RCC_OscConfig+0xdd8>
 8003ade:	e0dd      	b.n	8003c9c <HAL_RCC_OscConfig+0x1098>
 8003ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fa93 f2a3 	rbit	r2, r3
 8003afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b04:	601a      	str	r2, [r3, #0]
  return result;
 8003b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b0e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b10:	fab3 f383 	clz	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	461a      	mov	r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fd f8d5 	bl	8000cd4 <HAL_GetTick>
 8003b2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2e:	e009      	b.n	8003b44 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b30:	f7fd f8d0 	bl	8000cd4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0ac      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
 8003b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b48:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa93 f2a3 	rbit	r2, r3
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b68:	601a      	str	r2, [r3, #0]
  return result;
 8003b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d102      	bne.n	8003b8e <HAL_RCC_OscConfig+0xf8a>
 8003b88:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <HAL_RCC_OscConfig+0x10a4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	e027      	b.n	8003bde <HAL_RCC_OscConfig+0xfda>
 8003b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b92:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	fa93 f2a3 	rbit	r2, r3
 8003baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	fa93 f2a3 	rbit	r2, r3
 8003bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <HAL_RCC_OscConfig+0x10a4>)
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003be2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003be6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bea:	6011      	str	r1, [r2, #0]
 8003bec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bf0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	fa92 f1a2 	rbit	r1, r2
 8003bfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bfe:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003c02:	6011      	str	r1, [r2, #0]
  return result;
 8003c04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c08:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	fab2 f282 	clz	r2, r2
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	f042 0220 	orr.w	r2, r2, #32
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	f002 021f 	and.w	r2, r2, #31
 8003c1e:	2101      	movs	r1, #1
 8003c20:	fa01 f202 	lsl.w	r2, r1, r2
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d182      	bne.n	8003b30 <HAL_RCC_OscConfig+0xf2c>
 8003c2a:	e037      	b.n	8003c9c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e02e      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_RCC_OscConfig+0x10a4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <HAL_RCC_OscConfig+0x10a4>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c54:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d117      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c6c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d10b      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b09e      	sub	sp, #120	; 0x78
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e162      	b.n	8003f8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b90      	ldr	r3, [pc, #576]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d910      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b8d      	ldr	r3, [pc, #564]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 0207 	bic.w	r2, r3, #7
 8003cda:	498b      	ldr	r1, [pc, #556]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b89      	ldr	r3, [pc, #548]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e14a      	b.n	8003f8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b82      	ldr	r3, [pc, #520]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	497f      	ldr	r1, [pc, #508]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80dc 	beq.w	8003ed8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d13c      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xf6>
 8003d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d102      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xa6>
 8003d4c:	4b6f      	ldr	r3, [pc, #444]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	e00f      	b.n	8003d72 <HAL_RCC_ClockConfig+0xc6>
 8003d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d64:	663b      	str	r3, [r7, #96]	; 0x60
 8003d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6e:	4b67      	ldr	r3, [pc, #412]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d76:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d7a:	fa92 f2a2 	rbit	r2, r2
 8003d7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d82:	fab2 f282 	clz	r2, r2
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	f042 0220 	orr.w	r2, r2, #32
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	f002 021f 	and.w	r2, r2, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f202 	lsl.w	r2, r1, r2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d17b      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0f3      	b.n	8003f8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d13c      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x178>
 8003daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x128>
 8003dce:	4b4f      	ldr	r3, [pc, #316]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	e00f      	b.n	8003df4 <HAL_RCC_ClockConfig+0x148>
 8003dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	647b      	str	r3, [r7, #68]	; 0x44
 8003de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de6:	643b      	str	r3, [r7, #64]	; 0x40
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df0:	4b46      	ldr	r3, [pc, #280]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dfc:	fa92 f2a2 	rbit	r2, r2
 8003e00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e04:	fab2 f282 	clz	r2, r2
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	f042 0220 	orr.w	r2, r2, #32
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	f002 021f 	and.w	r2, r2, #31
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d13a      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0b2      	b.n	8003f8a <HAL_RCC_ClockConfig+0x2de>
 8003e24:	2302      	movs	r3, #2
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d102      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x1a0>
 8003e46:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	e00d      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1bc>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
 8003e58:	2302      	movs	r3, #2
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2202      	movs	r2, #2
 8003e6a:	61ba      	str	r2, [r7, #24]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	fa92 f2a2 	rbit	r2, r2
 8003e72:	617a      	str	r2, [r7, #20]
  return result;
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	fab2 f282 	clz	r2, r2
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	f002 021f 	and.w	r2, r2, #31
 8003e86:	2101      	movs	r1, #1
 8003e88:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e079      	b.n	8003f8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	491a      	ldr	r1, [pc, #104]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fc ff14 	bl	8000cd4 <HAL_GetTick>
 8003eac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fc ff10 	bl	8000cd4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e061      	b.n	8003f8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <HAL_RCC_ClockConfig+0x260>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d214      	bcs.n	8003f10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	4906      	ldr	r1, [pc, #24]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <HAL_RCC_ClockConfig+0x25c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e040      	b.n	8003f8a <HAL_RCC_ClockConfig+0x2de>
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_RCC_ClockConfig+0x2e8>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	491a      	ldr	r1, [pc, #104]	; (8003f94 <HAL_RCC_ClockConfig+0x2e8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_RCC_ClockConfig+0x2e8>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4912      	ldr	r1, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x2e8>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f4e:	f000 f829 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f52:	4601      	mov	r1, r0
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_RCC_ClockConfig+0x2e8>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5c:	22f0      	movs	r2, #240	; 0xf0
 8003f5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	fa92 f2a2 	rbit	r2, r2
 8003f66:	60fa      	str	r2, [r7, #12]
  return result;
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	fab2 f282 	clz	r2, r2
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	40d3      	lsrs	r3, r2
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x2ec>)
 8003f74:	5cd3      	ldrb	r3, [r2, r3]
 8003f76:	fa21 f303 	lsr.w	r3, r1, r3
 8003f7a:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <HAL_RCC_ClockConfig+0x2f0>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <HAL_RCC_ClockConfig+0x2f4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fe62 	bl	8000c4c <HAL_InitTick>
  
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3778      	adds	r7, #120	; 0x78
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	0800aa94 	.word	0x0800aa94
 8003f9c:	2000000c 	.word	0x2000000c
 8003fa0:	20000010 	.word	0x20000010

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	; (800403c <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x30>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x36>
 8003fd2:	e029      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fd6:	613b      	str	r3, [r7, #16]
      break;
 8003fd8:	e029      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fe4:	5cd3      	ldrb	r3, [r2, r3]
 8003fe6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_RCC_GetSysClockFreq+0x98>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ff2:	5cd3      	ldrb	r3, [r2, r3]
 8003ff4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004000:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	fbb2 f2f3 	udiv	r2, r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e007      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004012:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	fbb2 f2f3 	udiv	r2, r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	613b      	str	r3, [r7, #16]
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetSysClockFreq+0x9c>)
 800402a:	613b      	str	r3, [r7, #16]
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	693b      	ldr	r3, [r7, #16]
}
 8004030:	4618      	mov	r0, r3
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40021000 	.word	0x40021000
 8004040:	007a1200 	.word	0x007a1200
 8004044:	0800aaa4 	.word	0x0800aaa4
 8004048:	0800aab4 	.word	0x0800aab4

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b092      	sub	sp, #72	; 0x48
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800405c:	2300      	movs	r3, #0
 800405e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80d4 	beq.w	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004070:	4b4e      	ldr	r3, [pc, #312]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10e      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4a4a      	ldr	r2, [pc, #296]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004086:	61d3      	str	r3, [r2, #28]
 8004088:	4b48      	ldr	r3, [pc, #288]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409a:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d118      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a6:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a41      	ldr	r2, [pc, #260]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b2:	f7fc fe0f 	bl	8000cd4 <HAL_GetTick>
 80040b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b8:	e008      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ba:	f7fc fe0b 	bl	8000cd4 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b64      	cmp	r3, #100	; 0x64
 80040c6:	d901      	bls.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1d6      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8084 	beq.w	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d07c      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f8:	4b2c      	ldr	r3, [pc, #176]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	461a      	mov	r2, r3
 8004122:	2301      	movs	r3, #1
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	461a      	mov	r2, r3
 8004146:	2300      	movs	r3, #0
 8004148:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800414a:	4a18      	ldr	r2, [pc, #96]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04b      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fc fdbb 	bl	8000cd4 <HAL_GetTick>
 800415e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fc fdb7 	bl	8000cd4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e180      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004178:	2302      	movs	r3, #2
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	2302      	movs	r3, #2
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	61fb      	str	r3, [r7, #28]
  return result;
 8004190:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d108      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041a6:	4b01      	ldr	r3, [pc, #4]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	e00d      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
 80041b4:	10908100 	.word	0x10908100
 80041b8:	2302      	movs	r3, #2
 80041ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	4b9a      	ldr	r3, [pc, #616]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2202      	movs	r2, #2
 80041ca:	613a      	str	r2, [r7, #16]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	fa92 f2a2 	rbit	r2, r2
 80041d2:	60fa      	str	r2, [r7, #12]
  return result;
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	fab2 f282 	clz	r2, r2
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	f002 021f 	and.w	r2, r2, #31
 80041e6:	2101      	movs	r1, #1
 80041e8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0b7      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041f2:	4b8f      	ldr	r3, [pc, #572]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	498c      	ldr	r1, [pc, #560]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004200:	4313      	orrs	r3, r2
 8004202:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004204:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420c:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4a87      	ldr	r2, [pc, #540]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004216:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004224:	4b82      	ldr	r3, [pc, #520]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f023 0203 	bic.w	r2, r3, #3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	497f      	ldr	r1, [pc, #508]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004242:	4b7b      	ldr	r3, [pc, #492]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4978      	ldr	r1, [pc, #480]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004250:	4313      	orrs	r3, r2
 8004252:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004260:	4b73      	ldr	r3, [pc, #460]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	4970      	ldr	r1, [pc, #448]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800427e:	4b6c      	ldr	r3, [pc, #432]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f023 0210 	bic.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	4969      	ldr	r1, [pc, #420]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800429c:	4b64      	ldr	r3, [pc, #400]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	4961      	ldr	r1, [pc, #388]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ba:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f023 0220 	bic.w	r2, r3, #32
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	495a      	ldr	r1, [pc, #360]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042d8:	4b55      	ldr	r3, [pc, #340]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	4952      	ldr	r1, [pc, #328]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f6:	4b4e      	ldr	r3, [pc, #312]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	494b      	ldr	r1, [pc, #300]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004314:	4b46      	ldr	r3, [pc, #280]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	4943      	ldr	r1, [pc, #268]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004332:	4b3f      	ldr	r3, [pc, #252]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	493c      	ldr	r1, [pc, #240]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004350:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	4934      	ldr	r1, [pc, #208]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	492d      	ldr	r1, [pc, #180]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	4925      	ldr	r1, [pc, #148]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043aa:	4b21      	ldr	r3, [pc, #132]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	491e      	ldr	r1, [pc, #120]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	4916      	ldr	r1, [pc, #88]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	490f      	ldr	r1, [pc, #60]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004422:	4b03      	ldr	r3, [pc, #12]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	e002      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004436:	4913      	ldr	r1, [pc, #76]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004438:	4313      	orrs	r3, r2
 800443a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004454:	490b      	ldr	r1, [pc, #44]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004456:	4313      	orrs	r3, r2
 8004458:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	4904      	ldr	r1, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004474:	4313      	orrs	r3, r2
 8004476:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3748      	adds	r7, #72	; 0x48
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000

08004488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e049      	b.n	800452e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fae6 	bl	8000a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f000 fce6 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	f241 1311 	movw	r3, #4369	; 0x1111
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <HAL_TIM_Base_Stop+0x38>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	f240 4344 	movw	r3, #1092	; 0x444
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d107      	bne.n	800456e <HAL_TIM_Base_Stop+0x38>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e049      	b.n	800462a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc fa44 	bl	8000a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f000 fc68 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2200      	movs	r2, #0
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 ffd6 	bl	80055f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a40      	ldr	r2, [pc, #256]	; (8004754 <HAL_TIM_PWM_Stop+0x120>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_PWM_Stop+0x54>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a3f      	ldr	r2, [pc, #252]	; (8004758 <HAL_TIM_PWM_Stop+0x124>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_TIM_PWM_Stop+0x54>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3d      	ldr	r2, [pc, #244]	; (800475c <HAL_TIM_PWM_Stop+0x128>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_PWM_Stop+0x54>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3c      	ldr	r2, [pc, #240]	; (8004760 <HAL_TIM_PWM_Stop+0x12c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_PWM_Stop+0x54>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3a      	ldr	r2, [pc, #232]	; (8004764 <HAL_TIM_PWM_Stop+0x130>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_PWM_Stop+0x54>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a39      	ldr	r2, [pc, #228]	; (8004768 <HAL_TIM_PWM_Stop+0x134>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_TIM_PWM_Stop+0x58>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_TIM_PWM_Stop+0x5a>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d017      	beq.n	80046c2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	f241 1311 	movw	r3, #4369	; 0x1111
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_TIM_PWM_Stop+0x8e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	f240 4344 	movw	r3, #1092	; 0x444
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_PWM_Stop+0x8e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_TIM_PWM_Stop+0xbe>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	f240 4344 	movw	r3, #1092	; 0x444
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_PWM_Stop+0xbe>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Stop+0xce>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004700:	e023      	b.n	800474a <HAL_TIM_PWM_Stop+0x116>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Stop+0xde>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	e01b      	b.n	800474a <HAL_TIM_PWM_Stop+0x116>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Stop+0xee>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004720:	e013      	b.n	800474a <HAL_TIM_PWM_Stop+0x116>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Stop+0xfe>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004730:	e00b      	b.n	800474a <HAL_TIM_PWM_Stop+0x116>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b10      	cmp	r3, #16
 8004736:	d104      	bne.n	8004742 <HAL_TIM_PWM_Stop+0x10e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	e003      	b.n	800474a <HAL_TIM_PWM_Stop+0x116>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40013400 	.word	0x40013400
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800
 8004768:	40015000 	.word	0x40015000

0800476c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_TIM_PWM_Start_IT+0x28>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e03c      	b.n	800480e <HAL_TIM_PWM_Start_IT+0xa2>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d109      	bne.n	80047ae <HAL_TIM_PWM_Start_IT+0x42>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e02f      	b.n	800480e <HAL_TIM_PWM_Start_IT+0xa2>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start_IT+0x5c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e022      	b.n	800480e <HAL_TIM_PWM_Start_IT+0xa2>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d109      	bne.n	80047e2 <HAL_TIM_PWM_Start_IT+0x76>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e015      	b.n	800480e <HAL_TIM_PWM_Start_IT+0xa2>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d109      	bne.n	80047fc <HAL_TIM_PWM_Start_IT+0x90>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e008      	b.n	800480e <HAL_TIM_PWM_Start_IT+0xa2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0ec      	b.n	80049f0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start_IT+0xba>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004824:	e023      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x102>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start_IT+0xca>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004834:	e01b      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x102>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start_IT+0xda>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004844:	e013      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x102>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b0c      	cmp	r3, #12
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start_IT+0xea>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004854:	e00b      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x102>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b10      	cmp	r3, #16
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start_IT+0xfa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004864:	e003      	b.n	800486e <HAL_TIM_PWM_Start_IT+0x102>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d841      	bhi.n	80048f8 <HAL_TIM_PWM_Start_IT+0x18c>
 8004874:	a201      	add	r2, pc, #4	; (adr r2, 800487c <HAL_TIM_PWM_Start_IT+0x110>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048f9 	.word	0x080048f9
 8004884:	080048f9 	.word	0x080048f9
 8004888:	080048f9 	.word	0x080048f9
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048f9 	.word	0x080048f9
 8004894:	080048f9 	.word	0x080048f9
 8004898:	080048f9 	.word	0x080048f9
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048f9 	.word	0x080048f9
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	080048f9 	.word	0x080048f9
 80048ac:	080048e7 	.word	0x080048e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0202 	orr.w	r2, r2, #2
 80048be:	60da      	str	r2, [r3, #12]
      break;
 80048c0:	e01d      	b.n	80048fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0204 	orr.w	r2, r2, #4
 80048d0:	60da      	str	r2, [r3, #12]
      break;
 80048d2:	e014      	b.n	80048fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	60da      	str	r2, [r3, #12]
      break;
 80048e4:	e00b      	b.n	80048fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0210 	orr.w	r2, r2, #16
 80048f4:	60da      	str	r2, [r3, #12]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d174      	bne.n	80049ee <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2201      	movs	r2, #1
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fe73 	bl	80055f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a38      	ldr	r2, [pc, #224]	; (80049f8 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_TIM_PWM_Start_IT+0x1e2>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a36      	ldr	r2, [pc, #216]	; (80049fc <HAL_TIM_PWM_Start_IT+0x290>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a35      	ldr	r2, [pc, #212]	; (8004a00 <HAL_TIM_PWM_Start_IT+0x294>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a33      	ldr	r2, [pc, #204]	; (8004a04 <HAL_TIM_PWM_Start_IT+0x298>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_TIM_PWM_Start_IT+0x1e2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a32      	ldr	r2, [pc, #200]	; (8004a08 <HAL_TIM_PWM_Start_IT+0x29c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a30      	ldr	r2, [pc, #192]	; (8004a0c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_TIM_PWM_Start_IT+0x1e6>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_TIM_PWM_Start_IT+0x1e8>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004966:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a22      	ldr	r2, [pc, #136]	; (80049f8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01d      	beq.n	80049ae <HAL_TIM_PWM_Start_IT+0x242>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d018      	beq.n	80049ae <HAL_TIM_PWM_Start_IT+0x242>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_TIM_PWM_Start_IT+0x242>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_TIM_PWM_Start_IT+0x242>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a19      	ldr	r2, [pc, #100]	; (80049fc <HAL_TIM_PWM_Start_IT+0x290>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_TIM_PWM_Start_IT+0x242>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_TIM_PWM_Start_IT+0x294>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_TIM_PWM_Start_IT+0x242>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_TIM_PWM_Start_IT+0x2a0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d115      	bne.n	80049da <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <HAL_TIM_PWM_Start_IT+0x2ac>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b06      	cmp	r3, #6
 80049be:	d015      	beq.n	80049ec <HAL_TIM_PWM_Start_IT+0x280>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c6:	d011      	beq.n	80049ec <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	e008      	b.n	80049ec <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e000      	b.n	80049ee <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800
 8004a0c:	40015000 	.word	0x40015000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	00010007 	.word	0x00010007

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d020      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01b      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa02 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9f4 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fb fe2d 	bl	80006d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0204 	mvn.w	r2, #4
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9dc 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9ce 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fb fe07 	bl	80006d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d020      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0208 	mvn.w	r2, #8
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2204      	movs	r2, #4
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9b6 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9a8 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fb fde1 	bl	80006d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d020      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0210 	mvn.w	r2, #16
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f990 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f982 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fb fdbb 	bl	80006d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0201 	mvn.w	r2, #1
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f960 	bl	8004e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fe68 	bl	800587c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fe60 	bl	8005890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f948 	bl	8004e84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0220 	mvn.w	r2, #32
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fe28 	bl	8005868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0ff      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b14      	cmp	r3, #20
 8004c4a:	f200 80f0 	bhi.w	8004e2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004ca9 	.word	0x08004ca9
 8004c58:	08004e2f 	.word	0x08004e2f
 8004c5c:	08004e2f 	.word	0x08004e2f
 8004c60:	08004e2f 	.word	0x08004e2f
 8004c64:	08004ce9 	.word	0x08004ce9
 8004c68:	08004e2f 	.word	0x08004e2f
 8004c6c:	08004e2f 	.word	0x08004e2f
 8004c70:	08004e2f 	.word	0x08004e2f
 8004c74:	08004d2b 	.word	0x08004d2b
 8004c78:	08004e2f 	.word	0x08004e2f
 8004c7c:	08004e2f 	.word	0x08004e2f
 8004c80:	08004e2f 	.word	0x08004e2f
 8004c84:	08004d6b 	.word	0x08004d6b
 8004c88:	08004e2f 	.word	0x08004e2f
 8004c8c:	08004e2f 	.word	0x08004e2f
 8004c90:	08004e2f 	.word	0x08004e2f
 8004c94:	08004dad 	.word	0x08004dad
 8004c98:	08004e2f 	.word	0x08004e2f
 8004c9c:	08004e2f 	.word	0x08004e2f
 8004ca0:	08004e2f 	.word	0x08004e2f
 8004ca4:	08004ded 	.word	0x08004ded
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f99c 	bl	8004fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
      break;
 8004ce6:	e0a5      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fa16 	bl	8005120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
      break;
 8004d28:	e084      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa89 	bl	8005248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0204 	bic.w	r2, r2, #4
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
      break;
 8004d68:	e064      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fafb 	bl	800536c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
      break;
 8004daa:	e043      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fb4a 	bl	800544c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0208 	orr.w	r2, r2, #8
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0204 	bic.w	r2, r2, #4
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dea:	e023      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fb94 	bl	8005520 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	021a      	lsls	r2, r3, #8
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e2c:	e002      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
      break;
 8004e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop

08004e48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a48      	ldr	r2, [pc, #288]	; (8004fcc <TIM_Base_SetConfig+0x134>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb6:	d00f      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a45      	ldr	r2, [pc, #276]	; (8004fd0 <TIM_Base_SetConfig+0x138>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a44      	ldr	r2, [pc, #272]	; (8004fd4 <TIM_Base_SetConfig+0x13c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a43      	ldr	r2, [pc, #268]	; (8004fd8 <TIM_Base_SetConfig+0x140>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <TIM_Base_SetConfig+0x144>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d108      	bne.n	8004eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a37      	ldr	r2, [pc, #220]	; (8004fcc <TIM_Base_SetConfig+0x134>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01f      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d01b      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a34      	ldr	r2, [pc, #208]	; (8004fd0 <TIM_Base_SetConfig+0x138>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d017      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <TIM_Base_SetConfig+0x13c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a32      	ldr	r2, [pc, #200]	; (8004fd8 <TIM_Base_SetConfig+0x140>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00f      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <TIM_Base_SetConfig+0x148>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a31      	ldr	r2, [pc, #196]	; (8004fe4 <TIM_Base_SetConfig+0x14c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a30      	ldr	r2, [pc, #192]	; (8004fe8 <TIM_Base_SetConfig+0x150>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_Base_SetConfig+0x9a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <TIM_Base_SetConfig+0x144>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <TIM_Base_SetConfig+0x134>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <TIM_Base_SetConfig+0x100>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <TIM_Base_SetConfig+0x140>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_Base_SetConfig+0x100>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a19      	ldr	r2, [pc, #100]	; (8004fe0 <TIM_Base_SetConfig+0x148>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_Base_SetConfig+0x100>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <TIM_Base_SetConfig+0x14c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_Base_SetConfig+0x100>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <TIM_Base_SetConfig+0x150>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_Base_SetConfig+0x100>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a12      	ldr	r2, [pc, #72]	; (8004fdc <TIM_Base_SetConfig+0x144>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d103      	bne.n	8004fa0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d105      	bne.n	8004fbe <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	611a      	str	r2, [r3, #16]
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40015000 	.word	0x40015000
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f023 0201 	bic.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 0302 	bic.w	r3, r3, #2
 8005038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a30      	ldr	r2, [pc, #192]	; (8005108 <TIM_OC1_SetConfig+0x11c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <TIM_OC1_SetConfig+0x88>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a2f      	ldr	r2, [pc, #188]	; (800510c <TIM_OC1_SetConfig+0x120>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00f      	beq.n	8005074 <TIM_OC1_SetConfig+0x88>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <TIM_OC1_SetConfig+0x124>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_OC1_SetConfig+0x88>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <TIM_OC1_SetConfig+0x128>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <TIM_OC1_SetConfig+0x88>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <TIM_OC1_SetConfig+0x12c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC1_SetConfig+0x88>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2b      	ldr	r2, [pc, #172]	; (800511c <TIM_OC1_SetConfig+0x130>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10c      	bne.n	800508e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0308 	bic.w	r3, r3, #8
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 0304 	bic.w	r3, r3, #4
 800508c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a1d      	ldr	r2, [pc, #116]	; (8005108 <TIM_OC1_SetConfig+0x11c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_OC1_SetConfig+0xd2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <TIM_OC1_SetConfig+0x120>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_OC1_SetConfig+0xd2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <TIM_OC1_SetConfig+0x124>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_OC1_SetConfig+0xd2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <TIM_OC1_SetConfig+0x128>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_OC1_SetConfig+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <TIM_OC1_SetConfig+0x12c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_OC1_SetConfig+0xd2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a18      	ldr	r2, [pc, #96]	; (800511c <TIM_OC1_SetConfig+0x130>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d111      	bne.n	80050e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	621a      	str	r2, [r3, #32]
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40013400 	.word	0x40013400
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800
 800511c:	40015000 	.word	0x40015000

08005120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f023 0210 	bic.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0320 	bic.w	r3, r3, #32
 800516e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <TIM_OC2_SetConfig+0x110>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_OC2_SetConfig+0x74>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a2b      	ldr	r2, [pc, #172]	; (8005234 <TIM_OC2_SetConfig+0x114>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC2_SetConfig+0x74>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a2a      	ldr	r2, [pc, #168]	; (8005238 <TIM_OC2_SetConfig+0x118>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10d      	bne.n	80051b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1f      	ldr	r2, [pc, #124]	; (8005230 <TIM_OC2_SetConfig+0x110>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <TIM_OC2_SetConfig+0xc0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <TIM_OC2_SetConfig+0x114>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_OC2_SetConfig+0xc0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1e      	ldr	r2, [pc, #120]	; (800523c <TIM_OC2_SetConfig+0x11c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <TIM_OC2_SetConfig+0xc0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <TIM_OC2_SetConfig+0x120>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_OC2_SetConfig+0xc0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <TIM_OC2_SetConfig+0x124>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC2_SetConfig+0xc0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <TIM_OC2_SetConfig+0x118>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d113      	bne.n	8005208 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40015000 	.word	0x40015000
 800523c:	40014000 	.word	0x40014000
 8005240:	40014400 	.word	0x40014400
 8005244:	40014800 	.word	0x40014800

08005248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2b      	ldr	r2, [pc, #172]	; (8005354 <TIM_OC3_SetConfig+0x10c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_OC3_SetConfig+0x72>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2a      	ldr	r2, [pc, #168]	; (8005358 <TIM_OC3_SetConfig+0x110>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC3_SetConfig+0x72>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a29      	ldr	r2, [pc, #164]	; (800535c <TIM_OC3_SetConfig+0x114>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10d      	bne.n	80052d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <TIM_OC3_SetConfig+0x10c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <TIM_OC3_SetConfig+0xbe>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <TIM_OC3_SetConfig+0x110>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00f      	beq.n	8005306 <TIM_OC3_SetConfig+0xbe>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <TIM_OC3_SetConfig+0x118>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00b      	beq.n	8005306 <TIM_OC3_SetConfig+0xbe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <TIM_OC3_SetConfig+0x11c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <TIM_OC3_SetConfig+0xbe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <TIM_OC3_SetConfig+0x120>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC3_SetConfig+0xbe>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <TIM_OC3_SetConfig+0x114>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d113      	bne.n	800532e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800530c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40013400 	.word	0x40013400
 800535c:	40015000 	.word	0x40015000
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	031b      	lsls	r3, r3, #12
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <TIM_OC4_SetConfig+0xc8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <TIM_OC4_SetConfig+0x8c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a19      	ldr	r2, [pc, #100]	; (8005438 <TIM_OC4_SetConfig+0xcc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00f      	beq.n	80053f8 <TIM_OC4_SetConfig+0x8c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a18      	ldr	r2, [pc, #96]	; (800543c <TIM_OC4_SetConfig+0xd0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00b      	beq.n	80053f8 <TIM_OC4_SetConfig+0x8c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a17      	ldr	r2, [pc, #92]	; (8005440 <TIM_OC4_SetConfig+0xd4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d007      	beq.n	80053f8 <TIM_OC4_SetConfig+0x8c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a16      	ldr	r2, [pc, #88]	; (8005444 <TIM_OC4_SetConfig+0xd8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_OC4_SetConfig+0x8c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a15      	ldr	r2, [pc, #84]	; (8005448 <TIM_OC4_SetConfig+0xdc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d109      	bne.n	800540c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40014000 	.word	0x40014000
 8005440:	40014400 	.word	0x40014400
 8005444:	40014800 	.word	0x40014800
 8005448:	40015000 	.word	0x40015000

0800544c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC5_SetConfig+0xbc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a18      	ldr	r2, [pc, #96]	; (800550c <TIM_OC5_SetConfig+0xc0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC5_SetConfig+0xc4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC5_SetConfig+0xc8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <TIM_OC5_SetConfig+0xcc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a14      	ldr	r2, [pc, #80]	; (800551c <TIM_OC5_SetConfig+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d109      	bne.n	80054e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800
 800551c:	40015000 	.word	0x40015000

08005520 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a1a      	ldr	r2, [pc, #104]	; (80055e0 <TIM_OC6_SetConfig+0xc0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <TIM_OC6_SetConfig+0xc4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00f      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <TIM_OC6_SetConfig+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00b      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <TIM_OC6_SetConfig+0xcc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d007      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <TIM_OC6_SetConfig+0xd0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <TIM_OC6_SetConfig+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d109      	bne.n	80055b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800
 80055f4:	40015000 	.word	0x40015000

080055f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	2201      	movs	r2, #1
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1a      	ldr	r2, [r3, #32]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	43db      	mvns	r3, r3
 800561a:	401a      	ands	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005658:	2302      	movs	r3, #2
 800565a:	e06d      	b.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a30      	ldr	r2, [pc, #192]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2f      	ldr	r2, [pc, #188]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2d      	ldr	r2, [pc, #180]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d108      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d01d      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d8:	d018      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1c      	ldr	r2, [pc, #112]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a15      	ldr	r2, [pc, #84]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a16      	ldr	r2, [pc, #88]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005712:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40015000 	.word	0x40015000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40014000 	.word	0x40014000

0800575c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005774:	2302      	movs	r3, #2
 8005776:	e06a      	b.n	800584e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a19      	ldr	r2, [pc, #100]	; (800585c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a17      	ldr	r2, [pc, #92]	; (8005860 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d115      	bne.n	800583c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40013400 	.word	0x40013400
 8005864:	40015000 	.word	0x40015000

08005868 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058da:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4013      	ands	r3, r2
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005944:	b480      	push	{r7}
 8005946:	b09d      	sub	sp, #116	; 0x74
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	78db      	ldrb	r3, [r3, #3]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d81f      	bhi.n	80059b6 <USB_ActivateEndpoint+0x72>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <USB_ActivateEndpoint+0x38>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	0800598d 	.word	0x0800598d
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059bf 	.word	0x080059bf
 8005988:	0800599b 	.word	0x0800599b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800598c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005994:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005998:	e012      	b.n	80059c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800599a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800599e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80059a6:	e00b      	b.n	80059c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80059b4:	e004      	b.n	80059c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80059bc:	e000      	b.n	80059c0 <USB_ActivateEndpoint+0x7c>
      break;
 80059be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	441a      	add	r2, r3
 80059ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059de:	b29b      	uxth	r3, r3
 80059e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	b21a      	sxth	r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b21b      	sxth	r3, r3
 8005a02:	4313      	orrs	r3, r2
 8005a04:	b21b      	sxth	r3, r3
 8005a06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	7b1b      	ldrb	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 8178 	bne.w	8005d26 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8084 	beq.w	8005b48 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	4413      	add	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	00da      	lsls	r2, r3, #3
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	88db      	ldrh	r3, [r3, #6]
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	827b      	strh	r3, [r7, #18]
 8005a82:	8a7b      	ldrh	r3, [r7, #18]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <USB_ActivateEndpoint+0x180>
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	823b      	strh	r3, [r7, #16]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	441a      	add	r2, r3
 8005aae:	8a3b      	ldrh	r3, [r7, #16]
 8005ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	78db      	ldrb	r3, [r3, #3]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d020      	beq.n	8005b0e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae2:	81bb      	strh	r3, [r7, #12]
 8005ae4:	89bb      	ldrh	r3, [r7, #12]
 8005ae6:	f083 0320 	eor.w	r3, r3, #32
 8005aea:	81bb      	strh	r3, [r7, #12]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	89bb      	ldrh	r3, [r7, #12]
 8005af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	8013      	strh	r3, [r2, #0]
 8005b0c:	e2d5      	b.n	80060ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b24:	81fb      	strh	r3, [r7, #14]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	89fb      	ldrh	r3, [r7, #14]
 8005b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	8013      	strh	r3, [r2, #0]
 8005b46:	e2b8      	b.n	80060ba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	4413      	add	r3, r2
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	00da      	lsls	r2, r3, #3
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	4413      	add	r3, r2
 8005b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	88db      	ldrh	r3, [r3, #6]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	4413      	add	r3, r2
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	00da      	lsls	r2, r3, #3
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <USB_ActivateEndpoint+0x28a>
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	e039      	b.n	8005c42 <USB_ActivateEndpoint+0x2fe>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd4:	d818      	bhi.n	8005c08 <USB_ActivateEndpoint+0x2c4>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <USB_ActivateEndpoint+0x2ac>
 8005bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bec:	3301      	adds	r3, #1
 8005bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	029b      	lsls	r3, r3, #10
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	e01c      	b.n	8005c42 <USB_ActivateEndpoint+0x2fe>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <USB_ActivateEndpoint+0x2de>
 8005c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	4313      	orrs	r3, r2
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01b      	beq.n	8005c92 <USB_ActivateEndpoint+0x34e>
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c70:	843b      	strh	r3, [r7, #32]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	441a      	add	r2, r3
 8005c7c:	8c3b      	ldrh	r3, [r7, #32]
 8005c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d124      	bne.n	8005ce4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb0:	83bb      	strh	r3, [r7, #28]
 8005cb2:	8bbb      	ldrh	r3, [r7, #28]
 8005cb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cb8:	83bb      	strh	r3, [r7, #28]
 8005cba:	8bbb      	ldrh	r3, [r7, #28]
 8005cbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cc0:	83bb      	strh	r3, [r7, #28]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	8bbb      	ldrh	r3, [r7, #28]
 8005cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	8013      	strh	r3, [r2, #0]
 8005ce2:	e1ea      	b.n	80060ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	83fb      	strh	r3, [r7, #30]
 8005cfc:	8bfb      	ldrh	r3, [r7, #30]
 8005cfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d02:	83fb      	strh	r3, [r7, #30]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	8bfb      	ldrh	r3, [r7, #30]
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
 8005d24:	e1c9      	b.n	80060ba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	78db      	ldrb	r3, [r3, #3]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d11e      	bne.n	8005d6c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	8013      	strh	r3, [r2, #0]
 8005d6a:	e01d      	b.n	8005da8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db8:	4413      	add	r3, r2
 8005dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	00da      	lsls	r2, r3, #3
 8005dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	891b      	ldrh	r3, [r3, #8]
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	657b      	str	r3, [r7, #84]	; 0x54
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dec:	4413      	add	r3, r2
 8005dee:	657b      	str	r3, [r7, #84]	; 0x54
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	00da      	lsls	r2, r3, #3
 8005df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df8:	4413      	add	r3, r2
 8005dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	895b      	ldrh	r3, [r3, #10]
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 8093 	bne.w	8005f40 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <USB_ActivateEndpoint+0x52a>
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005e7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01b      	beq.n	8005ebe <USB_ActivateEndpoint+0x57a>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ed6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ed8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005edc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ede:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ee0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ee4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]
 8005f3e:	e0bc      	b.n	80060ba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005f50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01d      	beq.n	8005f98 <USB_ActivateEndpoint+0x654>
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005fa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01d      	beq.n	8005ff0 <USB_ActivateEndpoint+0x6ac>
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	441a      	add	r2, r3
 8005fd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	78db      	ldrb	r3, [r3, #3]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d024      	beq.n	8006042 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006012:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006016:	f083 0320 	eor.w	r3, r3, #32
 800601a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]
 8006040:	e01d      	b.n	800607e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006058:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	441a      	add	r2, r3
 8006066:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006094:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80060ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3774      	adds	r7, #116	; 0x74
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop

080060cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b08d      	sub	sp, #52	; 0x34
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	7b1b      	ldrb	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 808e 	bne.w	80061fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d044      	beq.n	8006172 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	81bb      	strh	r3, [r7, #12]
 80060f6:	89bb      	ldrh	r3, [r7, #12]
 80060f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01b      	beq.n	8006138 <USB_DeactivateEndpoint+0x6c>
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	817b      	strh	r3, [r7, #10]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	897b      	ldrh	r3, [r7, #10]
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614e:	813b      	strh	r3, [r7, #8]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	893b      	ldrh	r3, [r7, #8]
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]
 8006170:	e192      	b.n	8006498 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	827b      	strh	r3, [r7, #18]
 8006180:	8a7b      	ldrh	r3, [r7, #18]
 8006182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01b      	beq.n	80061c2 <USB_DeactivateEndpoint+0xf6>
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a0:	823b      	strh	r3, [r7, #16]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	8a3b      	ldrh	r3, [r7, #16]
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	81fb      	strh	r3, [r7, #14]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	89fb      	ldrh	r3, [r7, #14]
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]
 80061fa:	e14d      	b.n	8006498 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f040 80a5 	bne.w	8006350 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	843b      	strh	r3, [r7, #32]
 8006214:	8c3b      	ldrh	r3, [r7, #32]
 8006216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01b      	beq.n	8006256 <USB_DeactivateEndpoint+0x18a>
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	83fb      	strh	r3, [r7, #30]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8bfb      	ldrh	r3, [r7, #30]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	83bb      	strh	r3, [r7, #28]
 8006264:	8bbb      	ldrh	r3, [r7, #28]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01b      	beq.n	80062a6 <USB_DeactivateEndpoint+0x1da>
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	837b      	strh	r3, [r7, #26]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	441a      	add	r2, r3
 8006290:	8b7b      	ldrh	r3, [r7, #26]
 8006292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062bc:	833b      	strh	r3, [r7, #24]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	8b3b      	ldrh	r3, [r7, #24]
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	82fb      	strh	r3, [r7, #22]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	441a      	add	r2, r3
 8006300:	8afb      	ldrh	r3, [r7, #22]
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632c:	82bb      	strh	r3, [r7, #20]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	441a      	add	r2, r3
 8006338:	8abb      	ldrh	r3, [r7, #20]
 800633a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634a:	b29b      	uxth	r3, r3
 800634c:	8013      	strh	r3, [r2, #0]
 800634e:	e0a3      	b.n	8006498 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800635e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01b      	beq.n	80063a0 <USB_DeactivateEndpoint+0x2d4>
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80063ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01b      	beq.n	80063f0 <USB_DeactivateEndpoint+0x324>
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	441a      	add	r2, r3
 80063da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	441a      	add	r2, r3
 8006412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	847b      	strh	r3, [r7, #34]	; 0x22
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	441a      	add	r2, r3
 8006482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3734      	adds	r7, #52	; 0x34
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b0c2      	sub	sp, #264	; 0x108
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b4:	6018      	str	r0, [r3, #0]
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064be:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	f040 86b7 	bne.w	8007240 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d908      	bls.n	8006500 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064fe:	e007      	b.n	8006510 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d13a      	bne.n	8006596 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6959      	ldr	r1, [r3, #20]
 800652c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	88da      	ldrh	r2, [r3, #6]
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653c:	b29b      	uxth	r3, r3
 800653e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006542:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006546:	6800      	ldr	r0, [r0, #0]
 8006548:	f001 fc8d 	bl	8007e66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800654c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4413      	add	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	00da      	lsls	r2, r3, #3
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4413      	add	r3, r2
 8006582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	f000 be1f 	b.w	80071d4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	78db      	ldrb	r3, [r3, #3]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	f040 8462 	bne.w	8006e6c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80065a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a1a      	ldr	r2, [r3, #32]
 80065b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	f240 83df 	bls.w	8006d84 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80065f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006616:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800661a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a1a      	ldr	r2, [r3, #32]
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006632:	1ad2      	subs	r2, r2, r3
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 81c7 	beq.w	80069f6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
 8006674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d177      	bne.n	8006774 <USB_EPStartXfer+0x2ce>
 8006684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	4413      	add	r3, r2
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	00da      	lsls	r2, r3, #3
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <USB_EPStartXfer+0x248>
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e067      	b.n	80067be <USB_EPStartXfer+0x318>
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f2:	2b3e      	cmp	r3, #62	; 0x3e
 80066f4:	d81c      	bhi.n	8006730 <USB_EPStartXfer+0x28a>
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <USB_EPStartXfer+0x270>
 800670c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006710:	3301      	adds	r3, #1
 8006712:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006720:	b29b      	uxth	r3, r3
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	b29b      	uxth	r3, r3
 8006726:	4313      	orrs	r3, r2
 8006728:	b29a      	uxth	r2, r3
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	e046      	b.n	80067be <USB_EPStartXfer+0x318>
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2b00      	cmp	r3, #0
 8006744:	d104      	bne.n	8006750 <USB_EPStartXfer+0x2aa>
 8006746:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800674a:	3b01      	subs	r3, #1
 800674c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b29b      	uxth	r3, r3
 8006764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676c:	b29a      	uxth	r2, r3
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e024      	b.n	80067be <USB_EPStartXfer+0x318>
 8006774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d11c      	bne.n	80067be <USB_EPStartXfer+0x318>
 8006784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006792:	b29b      	uxth	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	4413      	add	r3, r2
 800679a:	633b      	str	r3, [r7, #48]	; 0x30
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	00da      	lsls	r2, r3, #3
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	895b      	ldrh	r3, [r3, #10]
 80067ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6959      	ldr	r1, [r3, #20]
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f001 fb3a 	bl	8007e66 <USB_WritePMA>
            ep->xfer_buff += len;
 80067f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006802:	441a      	add	r2, r3
 8006804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	429a      	cmp	r2, r3
 800682a:	d90f      	bls.n	800684c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a1a      	ldr	r2, [r3, #32]
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683c:	1ad2      	subs	r2, r2, r3
 800683e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	621a      	str	r2, [r3, #32]
 800684a:	e00e      	b.n	800686a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d177      	bne.n	800696a <USB_EPStartXfer+0x4c4>
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006894:	b29b      	uxth	r3, r3
 8006896:	461a      	mov	r2, r3
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	4413      	add	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	00da      	lsls	r2, r3, #3
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <USB_EPStartXfer+0x43e>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068dc:	b29a      	uxth	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	e06d      	b.n	80069c0 <USB_EPStartXfer+0x51a>
 80068e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e8:	2b3e      	cmp	r3, #62	; 0x3e
 80068ea:	d81c      	bhi.n	8006926 <USB_EPStartXfer+0x480>
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <USB_EPStartXfer+0x466>
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006906:	3301      	adds	r3, #1
 8006908:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29a      	uxth	r2, r3
 8006912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006916:	b29b      	uxth	r3, r3
 8006918:	029b      	lsls	r3, r3, #10
 800691a:	b29b      	uxth	r3, r3
 800691c:	4313      	orrs	r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e04c      	b.n	80069c0 <USB_EPStartXfer+0x51a>
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USB_EPStartXfer+0x4a0>
 800693c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006940:	3b01      	subs	r3, #1
 8006942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29a      	uxth	r2, r3
 800694c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006950:	b29b      	uxth	r3, r3
 8006952:	029b      	lsls	r3, r3, #10
 8006954:	b29b      	uxth	r3, r3
 8006956:	4313      	orrs	r3, r2
 8006958:	b29b      	uxth	r3, r3
 800695a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006962:	b29a      	uxth	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	e02a      	b.n	80069c0 <USB_EPStartXfer+0x51a>
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d122      	bne.n	80069c0 <USB_EPStartXfer+0x51a>
 800697a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	4413      	add	r3, r2
 800699c:	623b      	str	r3, [r7, #32]
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	00da      	lsls	r2, r3, #3
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	4413      	add	r3, r2
 80069b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	891b      	ldrh	r3, [r3, #8]
 80069cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6959      	ldr	r1, [r3, #20]
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069ee:	6800      	ldr	r0, [r0, #0]
 80069f0:	f001 fa39 	bl	8007e66 <USB_WritePMA>
 80069f4:	e3ee      	b.n	80071d4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	785b      	ldrb	r3, [r3, #1]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d177      	bne.n	8006af6 <USB_EPStartXfer+0x650>
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a26:	4413      	add	r3, r2
 8006a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	00da      	lsls	r2, r3, #3
 8006a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
 8006a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <USB_EPStartXfer+0x5ca>
 8006a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	e06d      	b.n	8006b4c <USB_EPStartXfer+0x6a6>
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a74:	2b3e      	cmp	r3, #62	; 0x3e
 8006a76:	d81c      	bhi.n	8006ab2 <USB_EPStartXfer+0x60c>
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <USB_EPStartXfer+0x5f2>
 8006a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a92:	3301      	adds	r3, #1
 8006a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	029b      	lsls	r3, r3, #10
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	e04c      	b.n	8006b4c <USB_EPStartXfer+0x6a6>
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <USB_EPStartXfer+0x62c>
 8006ac8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006acc:	3b01      	subs	r3, #1
 8006ace:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	029b      	lsls	r3, r3, #10
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e02a      	b.n	8006b4c <USB_EPStartXfer+0x6a6>
 8006af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d122      	bne.n	8006b4c <USB_EPStartXfer+0x6a6>
 8006b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	653b      	str	r3, [r7, #80]	; 0x50
 8006b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b26:	4413      	add	r3, r2
 8006b28:	653b      	str	r3, [r7, #80]	; 0x50
 8006b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	00da      	lsls	r2, r3, #3
 8006b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	891b      	ldrh	r3, [r3, #8]
 8006b58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6959      	ldr	r1, [r3, #20]
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b7a:	6800      	ldr	r0, [r0, #0]
 8006b7c:	f001 f973 	bl	8007e66 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695a      	ldr	r2, [r3, #20]
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b90:	441a      	add	r2, r3
 8006b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d90f      	bls.n	8006bda <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a1a      	ldr	r2, [r3, #32]
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	621a      	str	r2, [r3, #32]
 8006bd8:	e00e      	b.n	8006bf8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	643b      	str	r3, [r7, #64]	; 0x40
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d177      	bne.n	8006d04 <USB_EPStartXfer+0x85e>
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	4413      	add	r3, r2
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	00da      	lsls	r2, r3, #3
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	4413      	add	r3, r2
 8006c4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <USB_EPStartXfer+0x7d8>
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	e067      	b.n	8006d4e <USB_EPStartXfer+0x8a8>
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c82:	2b3e      	cmp	r3, #62	; 0x3e
 8006c84:	d81c      	bhi.n	8006cc0 <USB_EPStartXfer+0x81a>
 8006c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <USB_EPStartXfer+0x800>
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbc:	801a      	strh	r2, [r3, #0]
 8006cbe:	e046      	b.n	8006d4e <USB_EPStartXfer+0x8a8>
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <USB_EPStartXfer+0x83a>
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	029b      	lsls	r3, r3, #10
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e024      	b.n	8006d4e <USB_EPStartXfer+0x8a8>
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d11c      	bne.n	8006d4e <USB_EPStartXfer+0x8a8>
 8006d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d28:	4413      	add	r3, r2
 8006d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	00da      	lsls	r2, r3, #3
 8006d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	895b      	ldrh	r3, [r3, #10]
 8006d5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6959      	ldr	r1, [r3, #20]
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d7c:	6800      	ldr	r0, [r0, #0]
 8006d7e:	f001 f872 	bl	8007e66 <USB_WritePMA>
 8006d82:	e227      	b.n	80071d4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e10:	4413      	add	r3, r2
 8006e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	00da      	lsls	r2, r3, #3
 8006e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e24:	4413      	add	r3, r2
 8006e26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	891b      	ldrh	r3, [r3, #8]
 8006e42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6959      	ldr	r1, [r3, #20]
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e64:	6800      	ldr	r0, [r0, #0]
 8006e66:	f000 fffe 	bl	8007e66 <USB_WritePMA>
 8006e6a:	e1b3      	b.n	80071d4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a1a      	ldr	r2, [r3, #32]
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	1ad2      	subs	r2, r2, r3
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80c6 	beq.w	800703e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	673b      	str	r3, [r7, #112]	; 0x70
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d177      	bne.n	8006fbe <USB_EPStartXfer+0xb18>
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eee:	4413      	add	r3, r2
 8006ef0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	00da      	lsls	r2, r3, #3
 8006f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f02:	4413      	add	r3, r2
 8006f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f08:	667b      	str	r3, [r7, #100]	; 0x64
 8006f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <USB_EPStartXfer+0xa92>
 8006f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	e067      	b.n	8007008 <USB_EPStartXfer+0xb62>
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3e:	d81c      	bhi.n	8006f7a <USB_EPStartXfer+0xad4>
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <USB_EPStartXfer+0xaba>
 8006f56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	029b      	lsls	r3, r3, #10
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	4313      	orrs	r3, r2
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	e046      	b.n	8007008 <USB_EPStartXfer+0xb62>
 8006f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f88:	f003 031f 	and.w	r3, r3, #31
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <USB_EPStartXfer+0xaf4>
 8006f90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f94:	3b01      	subs	r3, #1
 8006f96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	4313      	orrs	r3, r2
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e024      	b.n	8007008 <USB_EPStartXfer+0xb62>
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d11c      	bne.n	8007008 <USB_EPStartXfer+0xb62>
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fe2:	4413      	add	r3, r2
 8006fe4:	673b      	str	r3, [r7, #112]	; 0x70
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	00da      	lsls	r2, r3, #3
 8006ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007002:	b29a      	uxth	r2, r3
 8007004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007006:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	895b      	ldrh	r3, [r3, #10]
 8007014:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6959      	ldr	r1, [r3, #20]
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007028:	b29b      	uxth	r3, r3
 800702a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800702e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007032:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	f000 ff15 	bl	8007e66 <USB_WritePMA>
 800703c:	e0ca      	b.n	80071d4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d177      	bne.n	800713e <USB_EPStartXfer+0xc98>
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	67fb      	str	r3, [r7, #124]	; 0x7c
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007068:	b29b      	uxth	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800706e:	4413      	add	r3, r2
 8007070:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	00da      	lsls	r2, r3, #3
 8007080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007082:	4413      	add	r3, r2
 8007084:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007088:	67bb      	str	r3, [r7, #120]	; 0x78
 800708a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007094:	b29a      	uxth	r2, r3
 8007096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <USB_EPStartXfer+0xc12>
 80070a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	e073      	b.n	80071a0 <USB_EPStartXfer+0xcfa>
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070bc:	2b3e      	cmp	r3, #62	; 0x3e
 80070be:	d81c      	bhi.n	80070fa <USB_EPStartXfer+0xc54>
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <USB_EPStartXfer+0xc3a>
 80070d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070da:	3301      	adds	r3, #1
 80070dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	029b      	lsls	r3, r3, #10
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	4313      	orrs	r3, r2
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e052      	b.n	80071a0 <USB_EPStartXfer+0xcfa>
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <USB_EPStartXfer+0xc74>
 8007110:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007114:	3b01      	subs	r3, #1
 8007116:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800711a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007124:	b29b      	uxth	r3, r3
 8007126:	029b      	lsls	r3, r3, #10
 8007128:	b29b      	uxth	r3, r3
 800712a:	4313      	orrs	r3, r2
 800712c:	b29b      	uxth	r3, r3
 800712e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007136:	b29a      	uxth	r2, r3
 8007138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	e030      	b.n	80071a0 <USB_EPStartXfer+0xcfa>
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d128      	bne.n	80071a0 <USB_EPStartXfer+0xcfa>
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007172:	4413      	add	r3, r2
 8007174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	00da      	lsls	r2, r3, #3
 8007186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800718a:	4413      	add	r3, r2
 800718c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007198:	b29a      	uxth	r2, r3
 800719a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800719e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	891b      	ldrh	r3, [r3, #8]
 80071ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6959      	ldr	r1, [r3, #20]
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071ce:	6800      	ldr	r0, [r0, #0]
 80071d0:	f000 fe49 	bl	8007e66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fa:	817b      	strh	r3, [r7, #10]
 80071fc:	897b      	ldrh	r3, [r7, #10]
 80071fe:	f083 0310 	eor.w	r3, r3, #16
 8007202:	817b      	strh	r3, [r7, #10]
 8007204:	897b      	ldrh	r3, [r7, #10]
 8007206:	f083 0320 	eor.w	r3, r3, #32
 800720a:	817b      	strh	r3, [r7, #10]
 800720c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	897b      	ldrh	r3, [r7, #10]
 8007228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800722c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007238:	b29b      	uxth	r3, r3
 800723a:	8013      	strh	r3, [r2, #0]
 800723c:	f000 bcdf 	b.w	8007bfe <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	7b1b      	ldrb	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 80bc 	bne.w	80073ca <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	429a      	cmp	r2, r3
 800726c:	d917      	bls.n	800729e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800726e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	619a      	str	r2, [r3, #24]
 800729c:	e00e      	b.n	80072bc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800729e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d8:	b29b      	uxth	r3, r3
 80072da:	461a      	mov	r2, r3
 80072dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e0:	4413      	add	r3, r2
 80072e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	00da      	lsls	r2, r3, #3
 80072f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072f8:	4413      	add	r3, r2
 80072fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10d      	bne.n	800733a <USB_EPStartXfer+0xe94>
 800731e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	f000 bc28 	b.w	8007b8a <USB_EPStartXfer+0x16e4>
 800733a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733e:	2b3e      	cmp	r3, #62	; 0x3e
 8007340:	d81f      	bhi.n	8007382 <USB_EPStartXfer+0xedc>
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <USB_EPStartXfer+0xebc>
 8007358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800735c:	3301      	adds	r3, #1
 800735e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800736e:	b29b      	uxth	r3, r3
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	b29b      	uxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b29a      	uxth	r2, r3
 8007378:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	f000 bc04 	b.w	8007b8a <USB_EPStartXfer+0x16e4>
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <USB_EPStartXfer+0xefc>
 8007398:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800739c:	3b01      	subs	r3, #1
 800739e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	e3df      	b.n	8007b8a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	78db      	ldrb	r3, [r3, #3]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	f040 8218 	bne.w	800780c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f040 809d 	bne.w	8007528 <USB_EPStartXfer+0x1082>
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740a:	b29b      	uxth	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007412:	4413      	add	r3, r2
 8007414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	00da      	lsls	r2, r3, #3
 8007426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800742a:	4413      	add	r3, r2
 800742c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007440:	b29a      	uxth	r2, r3
 8007442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10c      	bne.n	8007472 <USB_EPStartXfer+0xfcc>
 8007458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29a      	uxth	r2, r3
 800746a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	e08f      	b.n	8007592 <USB_EPStartXfer+0x10ec>
 8007472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b3e      	cmp	r3, #62	; 0x3e
 8007480:	d826      	bhi.n	80074d0 <USB_EPStartXfer+0x102a>
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <USB_EPStartXfer+0x100c>
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ac:	3301      	adds	r3, #1
 80074ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074be:	b29b      	uxth	r3, r3
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4313      	orrs	r3, r2
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e060      	b.n	8007592 <USB_EPStartXfer+0x10ec>
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d104      	bne.n	8007500 <USB_EPStartXfer+0x105a>
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fa:	3b01      	subs	r3, #1
 80074fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29a      	uxth	r2, r3
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750c:	b29b      	uxth	r3, r3
 800750e:	029b      	lsls	r3, r3, #10
 8007510:	b29b      	uxth	r3, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	b29b      	uxth	r3, r3
 8007516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800751a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751e:	b29a      	uxth	r2, r3
 8007520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007524:	801a      	strh	r2, [r3, #0]
 8007526:	e034      	b.n	8007592 <USB_EPStartXfer+0x10ec>
 8007528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d12c      	bne.n	8007592 <USB_EPStartXfer+0x10ec>
 8007538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800755c:	4413      	add	r3, r2
 800755e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	00da      	lsls	r2, r3, #3
 8007570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007574:	4413      	add	r3, r2
 8007576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800757a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	b29a      	uxth	r2, r3
 800758c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007590:	801a      	strh	r2, [r3, #0]
 8007592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 809d 	bne.w	80076ec <USB_EPStartXfer+0x1246>
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075d6:	4413      	add	r3, r2
 80075d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	00da      	lsls	r2, r3, #3
 80075ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075ee:	4413      	add	r3, r2
 80075f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007604:	b29a      	uxth	r2, r3
 8007606:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10c      	bne.n	8007636 <USB_EPStartXfer+0x1190>
 800761c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	e088      	b.n	8007748 <USB_EPStartXfer+0x12a2>
 8007636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b3e      	cmp	r3, #62	; 0x3e
 8007644:	d826      	bhi.n	8007694 <USB_EPStartXfer+0x11ee>
 8007646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <USB_EPStartXfer+0x11d0>
 800766c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007670:	3301      	adds	r3, #1
 8007672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007676:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29a      	uxth	r2, r3
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	b29b      	uxth	r3, r3
 8007684:	029b      	lsls	r3, r3, #10
 8007686:	b29b      	uxth	r3, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	b29a      	uxth	r2, r3
 800768c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007690:	801a      	strh	r2, [r3, #0]
 8007692:	e059      	b.n	8007748 <USB_EPStartXfer+0x12a2>
 8007694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	095b      	lsrs	r3, r3, #5
 80076a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <USB_EPStartXfer+0x121e>
 80076ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076be:	3b01      	subs	r3, #1
 80076c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	029b      	lsls	r3, r3, #10
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	4313      	orrs	r3, r2
 80076d8:	b29b      	uxth	r3, r3
 80076da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076e8:	801a      	strh	r2, [r3, #0]
 80076ea:	e02d      	b.n	8007748 <USB_EPStartXfer+0x12a2>
 80076ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	785b      	ldrb	r3, [r3, #1]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d125      	bne.n	8007748 <USB_EPStartXfer+0x12a2>
 80076fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770a:	b29b      	uxth	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007712:	4413      	add	r3, r2
 8007714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00da      	lsls	r2, r3, #3
 8007726:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800772a:	4413      	add	r3, r2
 800772c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	b29a      	uxth	r2, r3
 8007742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007746:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8218 	beq.w	8007b8a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800775a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800777a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800777e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <USB_EPStartXfer+0x12ec>
 8007786:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10d      	bne.n	80077ae <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007792:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 81f5 	bne.w	8007b8a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f040 81ee 	bne.w	8007b8a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80077ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]
 800780a:	e1be      	b.n	8007b8a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	78db      	ldrb	r3, [r3, #3]
 8007818:	2b01      	cmp	r3, #1
 800781a:	f040 81b4 	bne.w	8007b86 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800781e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d917      	bls.n	800786a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800783a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	619a      	str	r2, [r3, #24]
 8007868:	e00e      	b.n	8007888 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800787a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2200      	movs	r2, #0
 8007886:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f040 8085 	bne.w	80079a4 <USB_EPStartXfer+0x14fe>
 800789a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078be:	4413      	add	r3, r2
 80078c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	00da      	lsls	r2, r3, #3
 80078d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078d6:	4413      	add	r3, r2
 80078d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10c      	bne.n	8007916 <USB_EPStartXfer+0x1470>
 80078fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790c:	b29a      	uxth	r2, r3
 800790e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007912:	801a      	strh	r2, [r3, #0]
 8007914:	e077      	b.n	8007a06 <USB_EPStartXfer+0x1560>
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791a:	2b3e      	cmp	r3, #62	; 0x3e
 800791c:	d81e      	bhi.n	800795c <USB_EPStartXfer+0x14b6>
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <USB_EPStartXfer+0x1498>
 8007934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007938:	3301      	adds	r3, #1
 800793a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800793e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29a      	uxth	r2, r3
 8007946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794a:	b29b      	uxth	r3, r3
 800794c:	029b      	lsls	r3, r3, #10
 800794e:	b29b      	uxth	r3, r3
 8007950:	4313      	orrs	r3, r2
 8007952:	b29a      	uxth	r2, r3
 8007954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	e054      	b.n	8007a06 <USB_EPStartXfer+0x1560>
 800795c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007960:	095b      	lsrs	r3, r3, #5
 8007962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796a:	f003 031f 	and.w	r3, r3, #31
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <USB_EPStartXfer+0x14d6>
 8007972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007976:	3b01      	subs	r3, #1
 8007978:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800797c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29a      	uxth	r2, r3
 8007984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007988:	b29b      	uxth	r3, r3
 800798a:	029b      	lsls	r3, r3, #10
 800798c:	b29b      	uxth	r3, r3
 800798e:	4313      	orrs	r3, r2
 8007990:	b29b      	uxth	r3, r3
 8007992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799a:	b29a      	uxth	r2, r3
 800799c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	e030      	b.n	8007a06 <USB_EPStartXfer+0x1560>
 80079a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d128      	bne.n	8007a06 <USB_EPStartXfer+0x1560>
 80079b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079d8:	4413      	add	r3, r2
 80079da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	00da      	lsls	r2, r3, #3
 80079ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a04:	801a      	strh	r2, [r3, #0]
 8007a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 8085 	bne.w	8007b30 <USB_EPStartXfer+0x168a>
 8007a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	00da      	lsls	r2, r3, #3
 8007a5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a62:	4413      	add	r3, r2
 8007a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10c      	bne.n	8007aa2 <USB_EPStartXfer+0x15fc>
 8007a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	e073      	b.n	8007b8a <USB_EPStartXfer+0x16e4>
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8007aa8:	d81e      	bhi.n	8007ae8 <USB_EPStartXfer+0x1642>
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <USB_EPStartXfer+0x1624>
 8007ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	029b      	lsls	r3, r3, #10
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	4313      	orrs	r3, r2
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae4:	801a      	strh	r2, [r3, #0]
 8007ae6:	e050      	b.n	8007b8a <USB_EPStartXfer+0x16e4>
 8007ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aec:	095b      	lsrs	r3, r3, #5
 8007aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af6:	f003 031f 	and.w	r3, r3, #31
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d104      	bne.n	8007b08 <USB_EPStartXfer+0x1662>
 8007afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b02:	3b01      	subs	r3, #1
 8007b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	029b      	lsls	r3, r3, #10
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e02c      	b.n	8007b8a <USB_EPStartXfer+0x16e4>
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d124      	bne.n	8007b8a <USB_EPStartXfer+0x16e4>
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b56:	4413      	add	r3, r2
 8007b58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	00da      	lsls	r2, r3, #3
 8007b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b6e:	4413      	add	r3, r2
 8007b70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	e001      	b.n	8007b8a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e03a      	b.n	8007c00 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007bb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007bc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bc8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d020      	beq.n	8007c5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c32:	81bb      	strh	r3, [r7, #12]
 8007c34:	89bb      	ldrh	r3, [r7, #12]
 8007c36:	f083 0310 	eor.w	r3, r3, #16
 8007c3a:	81bb      	strh	r3, [r7, #12]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	89bb      	ldrh	r3, [r7, #12]
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
 8007c5c:	e01f      	b.n	8007c9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	81fb      	strh	r3, [r7, #14]
 8007c76:	89fb      	ldrh	r3, [r7, #14]
 8007c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c7c:	81fb      	strh	r3, [r7, #14]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	7b1b      	ldrb	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 809d 	bne.w	8007dfa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d04c      	beq.n	8007d62 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	823b      	strh	r3, [r7, #16]
 8007cd6:	8a3b      	ldrh	r3, [r7, #16]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <USB_EPClearStall+0x6c>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	81fb      	strh	r3, [r7, #14]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	89fb      	ldrh	r3, [r7, #14]
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	78db      	ldrb	r3, [r3, #3]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d06c      	beq.n	8007dfa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d36:	81bb      	strh	r3, [r7, #12]
 8007d38:	89bb      	ldrh	r3, [r7, #12]
 8007d3a:	f083 0320 	eor.w	r3, r3, #32
 8007d3e:	81bb      	strh	r3, [r7, #12]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	89bb      	ldrh	r3, [r7, #12]
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	e04b      	b.n	8007dfa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	82fb      	strh	r3, [r7, #22]
 8007d70:	8afb      	ldrh	r3, [r7, #22]
 8007d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d01b      	beq.n	8007db2 <USB_EPClearStall+0x106>
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d90:	82bb      	strh	r3, [r7, #20]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	8abb      	ldrh	r3, [r7, #20]
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc8:	827b      	strh	r3, [r7, #18]
 8007dca:	8a7b      	ldrh	r3, [r7, #18]
 8007dcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dd0:	827b      	strh	r3, [r7, #18]
 8007dd2:	8a7b      	ldrh	r3, [r7, #18]
 8007dd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dd8:	827b      	strh	r3, [r7, #18]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	441a      	add	r2, r3
 8007de4:	8a7b      	ldrh	r3, [r7, #18]
 8007de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e58:	68fb      	ldr	r3, [r7, #12]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b08b      	sub	sp, #44	; 0x2c
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	4611      	mov	r1, r2
 8007e72:	461a      	mov	r2, r3
 8007e74:	460b      	mov	r3, r1
 8007e76:	80fb      	strh	r3, [r7, #6]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e7c:	88bb      	ldrh	r3, [r7, #4]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e96:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9c:	e01b      	b.n	8007ed6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	b21a      	sxth	r2, r3
 8007eae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	b21b      	sxth	r3, r3
 8007eb6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	8a7a      	ldrh	r2, [r7, #18]
 8007ebc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e0      	bne.n	8007e9e <USB_WritePMA+0x38>
  }
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	372c      	adds	r7, #44	; 0x2c
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b08b      	sub	sp, #44	; 0x2c
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	460b      	mov	r3, r1
 8007efa:	80fb      	strh	r3, [r7, #6]
 8007efc:	4613      	mov	r3, r2
 8007efe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f00:	88bb      	ldrh	r3, [r7, #4]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f10:	88fa      	ldrh	r2, [r7, #6]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f1a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	e018      	b.n	8007f54 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	3302      	adds	r3, #2
 8007f2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	3b01      	subs	r3, #1
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e3      	bne.n	8007f22 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f5a:	88bb      	ldrh	r3, [r7, #4]
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	701a      	strb	r2, [r3, #0]
  }
}
 8007f76:	bf00      	nop
 8007f78:	372c      	adds	r7, #44	; 0x2c
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7c1b      	ldrb	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d115      	bne.n	8007fc6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	2181      	movs	r1, #129	; 0x81
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fe97 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fe8d 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007fc4:	e012      	b.n	8007fec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fc6:	2340      	movs	r3, #64	; 0x40
 8007fc8:	2202      	movs	r2, #2
 8007fca:	2181      	movs	r1, #129	; 0x81
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fe82 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	2202      	movs	r2, #2
 8007fdc:	2101      	movs	r1, #1
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fe79 	bl	8009cd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fec:	2308      	movs	r3, #8
 8007fee:	2203      	movs	r2, #3
 8007ff0:	2182      	movs	r1, #130	; 0x82
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 fe6f 	bl	8009cd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ffe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008002:	f001 ff8f 	bl	8009f24 <USBD_static_malloc>
 8008006:	4602      	mov	r2, r0
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
 800801c:	e026      	b.n	800806c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7c1b      	ldrb	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800804e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008052:	2101      	movs	r1, #1
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 ff2f 	bl	8009eb8 <USBD_LL_PrepareReceive>
 800805a:	e007      	b.n	800806c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008062:	2340      	movs	r3, #64	; 0x40
 8008064:	2101      	movs	r1, #1
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 ff26 	bl	8009eb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008086:	2181      	movs	r1, #129	; 0x81
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fe4a 	bl	8009d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008094:	2101      	movs	r1, #1
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 fe43 	bl	8009d22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080a4:	2182      	movs	r1, #130	; 0x82
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 fe3b 	bl	8009d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00e      	beq.n	80080da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 ff37 	bl	8009f40 <USBD_static_free>
    pdev->pClassData = NULL;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800810a:	2b00      	cmp	r3, #0
 800810c:	d039      	beq.n	8008182 <USBD_CDC_Setup+0x9e>
 800810e:	2b20      	cmp	r3, #32
 8008110:	d17f      	bne.n	8008212 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	88db      	ldrh	r3, [r3, #6]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d029      	beq.n	800816e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b25b      	sxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	da11      	bge.n	8008148 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008130:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	88d2      	ldrh	r2, [r2, #6]
 8008136:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008138:	6939      	ldr	r1, [r7, #16]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	461a      	mov	r2, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 fa14 	bl	800956e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008146:	e06b      	b.n	8008220 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	785a      	ldrb	r2, [r3, #1]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	88db      	ldrh	r3, [r3, #6]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800815e:	6939      	ldr	r1, [r7, #16]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	88db      	ldrh	r3, [r3, #6]
 8008164:	461a      	mov	r2, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fa2f 	bl	80095ca <USBD_CtlPrepareRx>
      break;
 800816c:	e058      	b.n	8008220 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	7850      	ldrb	r0, [r2, #1]
 800817a:	2200      	movs	r2, #0
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	4798      	blx	r3
      break;
 8008180:	e04e      	b.n	8008220 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b0b      	cmp	r3, #11
 8008188:	d02e      	beq.n	80081e8 <USBD_CDC_Setup+0x104>
 800818a:	2b0b      	cmp	r3, #11
 800818c:	dc38      	bgt.n	8008200 <USBD_CDC_Setup+0x11c>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <USBD_CDC_Setup+0xb4>
 8008192:	2b0a      	cmp	r3, #10
 8008194:	d014      	beq.n	80081c0 <USBD_CDC_Setup+0xdc>
 8008196:	e033      	b.n	8008200 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d107      	bne.n	80081b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80081a2:	f107 030c 	add.w	r3, r7, #12
 80081a6:	2202      	movs	r2, #2
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 f9df 	bl	800956e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081b0:	e02e      	b.n	8008210 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f96f 	bl	8009498 <USBD_CtlError>
            ret = USBD_FAIL;
 80081ba:	2302      	movs	r3, #2
 80081bc:	75fb      	strb	r3, [r7, #23]
          break;
 80081be:	e027      	b.n	8008210 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d107      	bne.n	80081da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081ca:	f107 030f 	add.w	r3, r7, #15
 80081ce:	2201      	movs	r2, #1
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f9cb 	bl	800956e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081d8:	e01a      	b.n	8008210 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 f95b 	bl	8009498 <USBD_CtlError>
            ret = USBD_FAIL;
 80081e2:	2302      	movs	r3, #2
 80081e4:	75fb      	strb	r3, [r7, #23]
          break;
 80081e6:	e013      	b.n	8008210 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d00d      	beq.n	800820e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f94f 	bl	8009498 <USBD_CtlError>
            ret = USBD_FAIL;
 80081fa:	2302      	movs	r3, #2
 80081fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081fe:	e006      	b.n	800820e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f948 	bl	8009498 <USBD_CtlError>
          ret = USBD_FAIL;
 8008208:	2302      	movs	r3, #2
 800820a:	75fb      	strb	r3, [r7, #23]
          break;
 800820c:	e000      	b.n	8008210 <USBD_CDC_Setup+0x12c>
          break;
 800820e:	bf00      	nop
      }
      break;
 8008210:	e006      	b.n	8008220 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f93f 	bl	8009498 <USBD_CtlError>
      ret = USBD_FAIL;
 800821a:	2302      	movs	r3, #2
 800821c:	75fb      	strb	r3, [r7, #23]
      break;
 800821e:	bf00      	nop
  }

  return ret;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008244:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d03a      	beq.n	80082c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008250:	78fa      	ldrb	r2, [r7, #3]
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	331c      	adds	r3, #28
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d029      	beq.n	80082ba <USBD_CDC_DataIn+0x90>
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	331c      	adds	r3, #28
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	78f9      	ldrb	r1, [r7, #3]
 800827a:	68b8      	ldr	r0, [r7, #8]
 800827c:	460b      	mov	r3, r1
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	4403      	add	r3, r0
 8008286:	3320      	adds	r3, #32
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	fbb2 f1f3 	udiv	r1, r2, r3
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d110      	bne.n	80082ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008298:	78fa      	ldrb	r2, [r7, #3]
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	331c      	adds	r3, #28
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082ac:	78f9      	ldrb	r1, [r7, #3]
 80082ae:	2300      	movs	r3, #0
 80082b0:	2200      	movs	r2, #0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fddd 	bl	8009e72 <USBD_LL_Transmit>
 80082b8:	e003      	b.n	80082c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e000      	b.n	80082c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80082c6:	2302      	movs	r3, #2
  }
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fe08 	bl	8009efe <USBD_LL_GetRxDataSize>
 80082ee:	4602      	mov	r2, r0
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00d      	beq.n	800831c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008314:	4611      	mov	r1, r2
 8008316:	4798      	blx	r3

    return USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	e000      	b.n	800831e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800831c:	2302      	movs	r3, #2
  }
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008334:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800833c:	2b00      	cmp	r3, #0
 800833e:	d015      	beq.n	800836c <USBD_CDC_EP0_RxReady+0x46>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008346:	2bff      	cmp	r3, #255	; 0xff
 8008348:	d010      	beq.n	800836c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008358:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008360:	b292      	uxth	r2, r2
 8008362:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	22ff      	movs	r2, #255	; 0xff
 8008368:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2243      	movs	r2, #67	; 0x43
 8008384:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008386:	4b03      	ldr	r3, [pc, #12]	; (8008394 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	200000a0 	.word	0x200000a0

08008398 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2243      	movs	r2, #67	; 0x43
 80083a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80083a6:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	2000005c 	.word	0x2000005c

080083b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2243      	movs	r2, #67	; 0x43
 80083c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80083c6:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	200000e4 	.word	0x200000e4

080083d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	220a      	movs	r2, #10
 80083e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80083e6:	4b03      	ldr	r3, [pc, #12]	; (80083f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	20000018 	.word	0x20000018

080083f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008402:	2302      	movs	r3, #2
 8008404:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008426:	b480      	push	{r7}
 8008428:	b087      	sub	sp, #28
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	4613      	mov	r3, r2
 8008432:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008490:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01c      	beq.n	80084d6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d115      	bne.n	80084d2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2181      	movs	r1, #129	; 0x81
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 fcd2 	bl	8009e72 <USBD_LL_Transmit>

      return USBD_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e002      	b.n	80084d8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80084d6:	2302      	movs	r3, #2
  }
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d017      	beq.n	800852a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7c1b      	ldrb	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800850c:	2101      	movs	r1, #1
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 fcd2 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8008514:	e007      	b.n	8008526 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800851c:	2340      	movs	r3, #64	; 0x40
 800851e:	2101      	movs	r1, #1
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fcc9 	bl	8009eb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008548:	2302      	movs	r3, #2
 800854a:	e01a      	b.n	8008582 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	79fa      	ldrb	r2, [r7, #7]
 8008578:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f001 fb34 	bl	8009be8 <USBD_LL_Init>

  return USBD_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d006      	beq.n	80085ac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
 80085aa:	e001      	b.n	80085b0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80085ac:	2302      	movs	r3, #2
 80085ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 fb6a 	bl	8009ca0 <USBD_LL_Start>

  return USBD_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085f8:	2302      	movs	r3, #2
 80085fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00c      	beq.n	8008620 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	4611      	mov	r1, r2
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	4611      	mov	r1, r2
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3

  return USBD_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fedb 	bl	800941e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	2b02      	cmp	r3, #2
 800868a:	d016      	beq.n	80086ba <USBD_LL_SetupStage+0x6a>
 800868c:	2b02      	cmp	r3, #2
 800868e:	d81c      	bhi.n	80086ca <USBD_LL_SetupStage+0x7a>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <USBD_LL_SetupStage+0x4a>
 8008694:	2b01      	cmp	r3, #1
 8008696:	d008      	beq.n	80086aa <USBD_LL_SetupStage+0x5a>
 8008698:	e017      	b.n	80086ca <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9ce 	bl	8008a44 <USBD_StdDevReq>
      break;
 80086a8:	e01a      	b.n	80086e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa30 	bl	8008b18 <USBD_StdItfReq>
      break;
 80086b8:	e012      	b.n	80086e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa70 	bl	8008ba8 <USBD_StdEPReq>
      break;
 80086c8:	e00a      	b.n	80086e0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fb41 	bl	8009d60 <USBD_LL_StallEP>
      break;
 80086de:	bf00      	nop
  }

  return USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b086      	sub	sp, #24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	460b      	mov	r3, r1
 80086f4:	607a      	str	r2, [r7, #4]
 80086f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d14b      	bne.n	8008796 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008704:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800870c:	2b03      	cmp	r3, #3
 800870e:	d134      	bne.n	800877a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	429a      	cmp	r2, r3
 800871a:	d919      	bls.n	8008750 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	1ad2      	subs	r2, r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008732:	429a      	cmp	r2, r3
 8008734:	d203      	bcs.n	800873e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800873a:	b29b      	uxth	r3, r3
 800873c:	e002      	b.n	8008744 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008742:	b29b      	uxth	r3, r3
 8008744:	461a      	mov	r2, r3
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 ff5c 	bl	8009606 <USBD_CtlContinueRx>
 800874e:	e038      	b.n	80087c2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00a      	beq.n	8008772 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008762:	2b03      	cmp	r3, #3
 8008764:	d105      	bne.n	8008772 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 ff59 	bl	800962a <USBD_CtlSendStatus>
 8008778:	e023      	b.n	80087c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008780:	2b05      	cmp	r3, #5
 8008782:	d11e      	bne.n	80087c2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800878c:	2100      	movs	r1, #0
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f001 fae6 	bl	8009d60 <USBD_LL_StallEP>
 8008794:	e015      	b.n	80087c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00d      	beq.n	80087be <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d108      	bne.n	80087be <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	7afa      	ldrb	r2, [r7, #11]
 80087b6:	4611      	mov	r1, r2
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	4798      	blx	r3
 80087bc:	e001      	b.n	80087c2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087be:	2302      	movs	r3, #2
 80087c0:	e000      	b.n	80087c4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	460b      	mov	r3, r1
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d17f      	bne.n	80088e0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3314      	adds	r3, #20
 80087e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d15c      	bne.n	80088aa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d915      	bls.n	8008828 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	1ad2      	subs	r2, r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	b29b      	uxth	r3, r3
 8008810:	461a      	mov	r2, r3
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 fec6 	bl	80095a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800881a:	2300      	movs	r3, #0
 800881c:	2200      	movs	r2, #0
 800881e:	2100      	movs	r1, #0
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f001 fb49 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8008826:	e04e      	b.n	80088c6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	6912      	ldr	r2, [r2, #16]
 8008830:	fbb3 f1f2 	udiv	r1, r3, r2
 8008834:	fb01 f202 	mul.w	r2, r1, r2
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d11c      	bne.n	8008878 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008846:	429a      	cmp	r2, r3
 8008848:	d316      	bcc.n	8008878 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008854:	429a      	cmp	r2, r3
 8008856:	d20f      	bcs.n	8008878 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008858:	2200      	movs	r2, #0
 800885a:	2100      	movs	r1, #0
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fea2 	bl	80095a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800886a:	2300      	movs	r3, #0
 800886c:	2200      	movs	r2, #0
 800886e:	2100      	movs	r1, #0
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f001 fb21 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8008876:	e026      	b.n	80088c6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800888a:	2b03      	cmp	r3, #3
 800888c:	d105      	bne.n	800889a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800889a:	2180      	movs	r1, #128	; 0x80
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f001 fa5f 	bl	8009d60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 fed4 	bl	8009650 <USBD_CtlReceiveStatus>
 80088a8:	e00d      	b.n	80088c6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d004      	beq.n	80088be <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d103      	bne.n	80088c6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088be:	2180      	movs	r1, #128	; 0x80
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f001 fa4d 	bl	8009d60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d11d      	bne.n	800890c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fe80 	bl	80085d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088de:	e015      	b.n	800890c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00d      	beq.n	8008908 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d108      	bne.n	8008908 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	7afa      	ldrb	r2, [r7, #11]
 8008900:	4611      	mov	r1, r2
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	4798      	blx	r3
 8008906:	e001      	b.n	800890c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008908:	2302      	movs	r3, #2
 800890a:	e000      	b.n	800890e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800891e:	2340      	movs	r3, #64	; 0x40
 8008920:	2200      	movs	r2, #0
 8008922:	2100      	movs	r1, #0
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f9d6 	bl	8009cd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2240      	movs	r2, #64	; 0x40
 8008936:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	2200      	movs	r2, #0
 800893e:	2180      	movs	r1, #128	; 0x80
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 f9c8 	bl	8009cd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2240      	movs	r2, #64	; 0x40
 8008950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d009      	beq.n	800898e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6852      	ldr	r2, [r2, #4]
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	4611      	mov	r1, r2
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
  }

  return USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2204      	movs	r2, #4
 80089d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d105      	bne.n	8008a00 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d10b      	bne.n	8008a38 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a5a:	2b40      	cmp	r3, #64	; 0x40
 8008a5c:	d005      	beq.n	8008a6a <USBD_StdDevReq+0x26>
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	d84f      	bhi.n	8008b02 <USBD_StdDevReq+0xbe>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <USBD_StdDevReq+0x36>
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	d14b      	bne.n	8008b02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	4798      	blx	r3
      break;
 8008a78:	e048      	b.n	8008b0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	785b      	ldrb	r3, [r3, #1]
 8008a7e:	2b09      	cmp	r3, #9
 8008a80:	d839      	bhi.n	8008af6 <USBD_StdDevReq+0xb2>
 8008a82:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <USBD_StdDevReq+0x44>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008aed 	.word	0x08008aed
 8008a90:	08008af7 	.word	0x08008af7
 8008a94:	08008ae3 	.word	0x08008ae3
 8008a98:	08008af7 	.word	0x08008af7
 8008a9c:	08008abb 	.word	0x08008abb
 8008aa0:	08008ab1 	.word	0x08008ab1
 8008aa4:	08008af7 	.word	0x08008af7
 8008aa8:	08008acf 	.word	0x08008acf
 8008aac:	08008ac5 	.word	0x08008ac5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9dc 	bl	8008e70 <USBD_GetDescriptor>
          break;
 8008ab8:	e022      	b.n	8008b00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fb3f 	bl	8009140 <USBD_SetAddress>
          break;
 8008ac2:	e01d      	b.n	8008b00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fb7e 	bl	80091c8 <USBD_SetConfig>
          break;
 8008acc:	e018      	b.n	8008b00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fc07 	bl	80092e4 <USBD_GetConfig>
          break;
 8008ad6:	e013      	b.n	8008b00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc37 	bl	800934e <USBD_GetStatus>
          break;
 8008ae0:	e00e      	b.n	8008b00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fc65 	bl	80093b4 <USBD_SetFeature>
          break;
 8008aea:	e009      	b.n	8008b00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fc74 	bl	80093dc <USBD_ClrFeature>
          break;
 8008af4:	e004      	b.n	8008b00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fccd 	bl	8009498 <USBD_CtlError>
          break;
 8008afe:	bf00      	nop
      }
      break;
 8008b00:	e004      	b.n	8008b0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fcc7 	bl	8009498 <USBD_CtlError>
      break;
 8008b0a:	bf00      	nop
  }

  return ret;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop

08008b18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b2e:	2b40      	cmp	r3, #64	; 0x40
 8008b30:	d005      	beq.n	8008b3e <USBD_StdItfReq+0x26>
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d82e      	bhi.n	8008b94 <USBD_StdItfReq+0x7c>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <USBD_StdItfReq+0x26>
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	d12a      	bne.n	8008b94 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	3b01      	subs	r3, #1
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d81d      	bhi.n	8008b86 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	889b      	ldrh	r3, [r3, #4]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d813      	bhi.n	8008b7c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	88db      	ldrh	r3, [r3, #6]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d110      	bne.n	8008b90 <USBD_StdItfReq+0x78>
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10d      	bne.n	8008b90 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fd58 	bl	800962a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b7a:	e009      	b.n	8008b90 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fc8a 	bl	8009498 <USBD_CtlError>
          break;
 8008b84:	e004      	b.n	8008b90 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fc85 	bl	8009498 <USBD_CtlError>
          break;
 8008b8e:	e000      	b.n	8008b92 <USBD_StdItfReq+0x7a>
          break;
 8008b90:	bf00      	nop
      }
      break;
 8008b92:	e004      	b.n	8008b9e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fc7e 	bl	8009498 <USBD_CtlError>
      break;
 8008b9c:	bf00      	nop
  }

  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	889b      	ldrh	r3, [r3, #4]
 8008bba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bc4:	2b40      	cmp	r3, #64	; 0x40
 8008bc6:	d007      	beq.n	8008bd8 <USBD_StdEPReq+0x30>
 8008bc8:	2b40      	cmp	r3, #64	; 0x40
 8008bca:	f200 8146 	bhi.w	8008e5a <USBD_StdEPReq+0x2b2>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00a      	beq.n	8008be8 <USBD_StdEPReq+0x40>
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	f040 8141 	bne.w	8008e5a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4798      	blx	r3
      break;
 8008be6:	e13d      	b.n	8008e64 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d10a      	bne.n	8008c0a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	e12d      	b.n	8008e66 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d007      	beq.n	8008c22 <USBD_StdEPReq+0x7a>
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	f300 811b 	bgt.w	8008e4e <USBD_StdEPReq+0x2a6>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d072      	beq.n	8008d02 <USBD_StdEPReq+0x15a>
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d03a      	beq.n	8008c96 <USBD_StdEPReq+0xee>
 8008c20:	e115      	b.n	8008e4e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d002      	beq.n	8008c32 <USBD_StdEPReq+0x8a>
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d015      	beq.n	8008c5c <USBD_StdEPReq+0xb4>
 8008c30:	e02b      	b.n	8008c8a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00c      	beq.n	8008c52 <USBD_StdEPReq+0xaa>
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b80      	cmp	r3, #128	; 0x80
 8008c3c:	d009      	beq.n	8008c52 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 f88c 	bl	8009d60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c48:	2180      	movs	r1, #128	; 0x80
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f888 	bl	8009d60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c50:	e020      	b.n	8008c94 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc1f 	bl	8009498 <USBD_CtlError>
              break;
 8008c5a:	e01b      	b.n	8008c94 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	885b      	ldrh	r3, [r3, #2]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10e      	bne.n	8008c82 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <USBD_StdEPReq+0xda>
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b80      	cmp	r3, #128	; 0x80
 8008c6e:	d008      	beq.n	8008c82 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	88db      	ldrh	r3, [r3, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 f86f 	bl	8009d60 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fcd1 	bl	800962a <USBD_CtlSendStatus>

              break;
 8008c88:	e004      	b.n	8008c94 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fc03 	bl	8009498 <USBD_CtlError>
              break;
 8008c92:	bf00      	nop
          }
          break;
 8008c94:	e0e0      	b.n	8008e58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d002      	beq.n	8008ca6 <USBD_StdEPReq+0xfe>
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d015      	beq.n	8008cd0 <USBD_StdEPReq+0x128>
 8008ca4:	e026      	b.n	8008cf4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00c      	beq.n	8008cc6 <USBD_StdEPReq+0x11e>
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	2b80      	cmp	r3, #128	; 0x80
 8008cb0:	d009      	beq.n	8008cc6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 f852 	bl	8009d60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cbc:	2180      	movs	r1, #128	; 0x80
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 f84e 	bl	8009d60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cc4:	e01c      	b.n	8008d00 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fbe5 	bl	8009498 <USBD_CtlError>
              break;
 8008cce:	e017      	b.n	8008d00 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	885b      	ldrh	r3, [r3, #2]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d112      	bne.n	8008cfe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 f859 	bl	8009d9e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc9c 	bl	800962a <USBD_CtlSendStatus>
              }
              break;
 8008cf2:	e004      	b.n	8008cfe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fbce 	bl	8009498 <USBD_CtlError>
              break;
 8008cfc:	e000      	b.n	8008d00 <USBD_StdEPReq+0x158>
              break;
 8008cfe:	bf00      	nop
          }
          break;
 8008d00:	e0aa      	b.n	8008e58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d002      	beq.n	8008d12 <USBD_StdEPReq+0x16a>
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d032      	beq.n	8008d76 <USBD_StdEPReq+0x1ce>
 8008d10:	e097      	b.n	8008e42 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d007      	beq.n	8008d28 <USBD_StdEPReq+0x180>
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	2b80      	cmp	r3, #128	; 0x80
 8008d1c:	d004      	beq.n	8008d28 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fbb9 	bl	8009498 <USBD_CtlError>
                break;
 8008d26:	e091      	b.n	8008e4c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	da0b      	bge.n	8008d48 <USBD_StdEPReq+0x1a0>
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	3310      	adds	r3, #16
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	4413      	add	r3, r2
 8008d44:	3304      	adds	r3, #4
 8008d46:	e00b      	b.n	8008d60 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	3304      	adds	r3, #4
 8008d60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fbfd 	bl	800956e <USBD_CtlSendData>
              break;
 8008d74:	e06a      	b.n	8008e4c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da11      	bge.n	8008da2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	f003 020f 	and.w	r2, r3, #15
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	440b      	add	r3, r1
 8008d90:	3318      	adds	r3, #24
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d117      	bne.n	8008dc8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fb7c 	bl	8009498 <USBD_CtlError>
                  break;
 8008da0:	e054      	b.n	8008e4c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	f003 020f 	and.w	r2, r3, #15
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb69 	bl	8009498 <USBD_CtlError>
                  break;
 8008dc6:	e041      	b.n	8008e4c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da0b      	bge.n	8008de8 <USBD_StdEPReq+0x240>
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	3310      	adds	r3, #16
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	3304      	adds	r3, #4
 8008de6:	e00b      	b.n	8008e00 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3304      	adds	r3, #4
 8008e00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <USBD_StdEPReq+0x266>
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	2b80      	cmp	r3, #128	; 0x80
 8008e0c:	d103      	bne.n	8008e16 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	e00e      	b.n	8008e34 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 ffde 	bl	8009ddc <USBD_LL_IsStallEP>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	e002      	b.n	8008e34 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2202      	movs	r2, #2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fb97 	bl	800956e <USBD_CtlSendData>
              break;
 8008e40:	e004      	b.n	8008e4c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fb27 	bl	8009498 <USBD_CtlError>
              break;
 8008e4a:	bf00      	nop
          }
          break;
 8008e4c:	e004      	b.n	8008e58 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fb21 	bl	8009498 <USBD_CtlError>
          break;
 8008e56:	bf00      	nop
      }
      break;
 8008e58:	e004      	b.n	8008e64 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fb1b 	bl	8009498 <USBD_CtlError>
      break;
 8008e62:	bf00      	nop
  }

  return ret;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	885b      	ldrh	r3, [r3, #2]
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	2b06      	cmp	r3, #6
 8008e92:	f200 8128 	bhi.w	80090e6 <USBD_GetDescriptor+0x276>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBD_GetDescriptor+0x2c>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008eb9 	.word	0x08008eb9
 8008ea0:	08008ed1 	.word	0x08008ed1
 8008ea4:	08008f11 	.word	0x08008f11
 8008ea8:	080090e7 	.word	0x080090e7
 8008eac:	080090e7 	.word	0x080090e7
 8008eb0:	08009087 	.word	0x08009087
 8008eb4:	080090b3 	.word	0x080090b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7c12      	ldrb	r2, [r2, #16]
 8008ec4:	f107 0108 	add.w	r1, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
      break;
 8008ece:	e112      	b.n	80090f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	7c1b      	ldrb	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10d      	bne.n	8008ef4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee0:	f107 0208 	add.w	r2, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3301      	adds	r3, #1
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ef2:	e100      	b.n	80090f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	f107 0208 	add.w	r2, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	701a      	strb	r2, [r3, #0]
      break;
 8008f0e:	e0f2      	b.n	80090f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	885b      	ldrh	r3, [r3, #2]
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	f200 80ac 	bhi.w	8009074 <USBD_GetDescriptor+0x204>
 8008f1c:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <USBD_GetDescriptor+0xb4>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f3d 	.word	0x08008f3d
 8008f28:	08008f71 	.word	0x08008f71
 8008f2c:	08008fa5 	.word	0x08008fa5
 8008f30:	08008fd9 	.word	0x08008fd9
 8008f34:	0800900d 	.word	0x0800900d
 8008f38:	08009041 	.word	0x08009041
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00b      	beq.n	8008f60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	7c12      	ldrb	r2, [r2, #16]
 8008f54:	f107 0108 	add.w	r1, r7, #8
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
 8008f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f5e:	e091      	b.n	8009084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa98 	bl	8009498 <USBD_CtlError>
            err++;
 8008f68:	7afb      	ldrb	r3, [r7, #11]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f6e:	e089      	b.n	8009084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00b      	beq.n	8008f94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	7c12      	ldrb	r2, [r2, #16]
 8008f88:	f107 0108 	add.w	r1, r7, #8
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4798      	blx	r3
 8008f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f92:	e077      	b.n	8009084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fa7e 	bl	8009498 <USBD_CtlError>
            err++;
 8008f9c:	7afb      	ldrb	r3, [r7, #11]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fa2:	e06f      	b.n	8009084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	7c12      	ldrb	r2, [r2, #16]
 8008fbc:	f107 0108 	add.w	r1, r7, #8
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc6:	e05d      	b.n	8009084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fa64 	bl	8009498 <USBD_CtlError>
            err++;
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd6:	e055      	b.n	8009084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00b      	beq.n	8008ffc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	7c12      	ldrb	r2, [r2, #16]
 8008ff0:	f107 0108 	add.w	r1, r7, #8
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
 8008ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ffa:	e043      	b.n	8009084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa4a 	bl	8009498 <USBD_CtlError>
            err++;
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	3301      	adds	r3, #1
 8009008:	72fb      	strb	r3, [r7, #11]
          break;
 800900a:	e03b      	b.n	8009084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7c12      	ldrb	r2, [r2, #16]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902e:	e029      	b.n	8009084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa30 	bl	8009498 <USBD_CtlError>
            err++;
 8009038:	7afb      	ldrb	r3, [r7, #11]
 800903a:	3301      	adds	r3, #1
 800903c:	72fb      	strb	r3, [r7, #11]
          break;
 800903e:	e021      	b.n	8009084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009062:	e00f      	b.n	8009084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa16 	bl	8009498 <USBD_CtlError>
            err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
          break;
 8009072:	e007      	b.n	8009084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa0e 	bl	8009498 <USBD_CtlError>
          err++;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	3301      	adds	r3, #1
 8009080:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009082:	e038      	b.n	80090f6 <USBD_GetDescriptor+0x286>
 8009084:	e037      	b.n	80090f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	7c1b      	ldrb	r3, [r3, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d109      	bne.n	80090a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009096:	f107 0208 	add.w	r2, r7, #8
 800909a:	4610      	mov	r0, r2
 800909c:	4798      	blx	r3
 800909e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090a0:	e029      	b.n	80090f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f9f7 	bl	8009498 <USBD_CtlError>
        err++;
 80090aa:	7afb      	ldrb	r3, [r7, #11]
 80090ac:	3301      	adds	r3, #1
 80090ae:	72fb      	strb	r3, [r7, #11]
      break;
 80090b0:	e021      	b.n	80090f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7c1b      	ldrb	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10d      	bne.n	80090d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f107 0208 	add.w	r2, r7, #8
 80090c6:	4610      	mov	r0, r2
 80090c8:	4798      	blx	r3
 80090ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	2207      	movs	r2, #7
 80090d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090d4:	e00f      	b.n	80090f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9dd 	bl	8009498 <USBD_CtlError>
        err++;
 80090de:	7afb      	ldrb	r3, [r7, #11]
 80090e0:	3301      	adds	r3, #1
 80090e2:	72fb      	strb	r3, [r7, #11]
      break;
 80090e4:	e007      	b.n	80090f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9d5 	bl	8009498 <USBD_CtlError>
      err++;
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	3301      	adds	r3, #1
 80090f2:	72fb      	strb	r3, [r7, #11]
      break;
 80090f4:	bf00      	nop
  }

  if (err != 0U)
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11c      	bne.n	8009136 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090fc:	893b      	ldrh	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d011      	beq.n	8009126 <USBD_GetDescriptor+0x2b6>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	88db      	ldrh	r3, [r3, #6]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00d      	beq.n	8009126 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	88da      	ldrh	r2, [r3, #6]
 800910e:	893b      	ldrh	r3, [r7, #8]
 8009110:	4293      	cmp	r3, r2
 8009112:	bf28      	it	cs
 8009114:	4613      	movcs	r3, r2
 8009116:	b29b      	uxth	r3, r3
 8009118:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800911a:	893b      	ldrh	r3, [r7, #8]
 800911c:	461a      	mov	r2, r3
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa24 	bl	800956e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	88db      	ldrh	r3, [r3, #6]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa7b 	bl	800962a <USBD_CtlSendStatus>
 8009134:	e000      	b.n	8009138 <USBD_GetDescriptor+0x2c8>
    return;
 8009136:	bf00      	nop
    }
  }
}
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop

08009140 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	889b      	ldrh	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d130      	bne.n	80091b4 <USBD_SetAddress+0x74>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	88db      	ldrh	r3, [r3, #6]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d12c      	bne.n	80091b4 <USBD_SetAddress+0x74>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	885b      	ldrh	r3, [r3, #2]
 800915e:	2b7f      	cmp	r3, #127	; 0x7f
 8009160:	d828      	bhi.n	80091b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	885b      	ldrh	r3, [r3, #2]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800916c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009174:	2b03      	cmp	r3, #3
 8009176:	d104      	bne.n	8009182 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f98c 	bl	8009498 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009180:	e01d      	b.n	80091be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7bfa      	ldrb	r2, [r7, #15]
 8009186:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fe50 	bl	8009e34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fa48 	bl	800962a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a8:	e009      	b.n	80091be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b2:	e004      	b.n	80091be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f96e 	bl	8009498 <USBD_CtlError>
  }
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	885b      	ldrh	r3, [r3, #2]
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	4b41      	ldr	r3, [pc, #260]	; (80092e0 <USBD_SetConfig+0x118>)
 80091da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091dc:	4b40      	ldr	r3, [pc, #256]	; (80092e0 <USBD_SetConfig+0x118>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d904      	bls.n	80091ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f956 	bl	8009498 <USBD_CtlError>
 80091ec:	e075      	b.n	80092da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d002      	beq.n	80091fe <USBD_SetConfig+0x36>
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d023      	beq.n	8009244 <USBD_SetConfig+0x7c>
 80091fc:	e062      	b.n	80092c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091fe:	4b38      	ldr	r3, [pc, #224]	; (80092e0 <USBD_SetConfig+0x118>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01a      	beq.n	800923c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009206:	4b36      	ldr	r3, [pc, #216]	; (80092e0 <USBD_SetConfig+0x118>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2203      	movs	r2, #3
 8009214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009218:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <USBD_SetConfig+0x118>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff f9e4 	bl	80085ec <USBD_SetClassConfig>
 8009224:	4603      	mov	r3, r0
 8009226:	2b02      	cmp	r3, #2
 8009228:	d104      	bne.n	8009234 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f933 	bl	8009498 <USBD_CtlError>
            return;
 8009232:	e052      	b.n	80092da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f9f8 	bl	800962a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800923a:	e04e      	b.n	80092da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9f4 	bl	800962a <USBD_CtlSendStatus>
        break;
 8009242:	e04a      	b.n	80092da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009244:	4b26      	ldr	r3, [pc, #152]	; (80092e0 <USBD_SetConfig+0x118>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d112      	bne.n	8009272 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009254:	4b22      	ldr	r3, [pc, #136]	; (80092e0 <USBD_SetConfig+0x118>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800925e:	4b20      	ldr	r3, [pc, #128]	; (80092e0 <USBD_SetConfig+0x118>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff f9e0 	bl	800862a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f9dd 	bl	800962a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009270:	e033      	b.n	80092da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009272:	4b1b      	ldr	r3, [pc, #108]	; (80092e0 <USBD_SetConfig+0x118>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	429a      	cmp	r2, r3
 800927e:	d01d      	beq.n	80092bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff f9ce 	bl	800862a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <USBD_SetConfig+0x118>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009298:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <USBD_SetConfig+0x118>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7ff f9a4 	bl	80085ec <USBD_SetClassConfig>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d104      	bne.n	80092b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f8f3 	bl	8009498 <USBD_CtlError>
            return;
 80092b2:	e012      	b.n	80092da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f9b8 	bl	800962a <USBD_CtlSendStatus>
        break;
 80092ba:	e00e      	b.n	80092da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f9b4 	bl	800962a <USBD_CtlSendStatus>
        break;
 80092c2:	e00a      	b.n	80092da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f8e6 	bl	8009498 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092cc:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <USBD_SetConfig+0x118>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff f9a9 	bl	800862a <USBD_ClrClassConfig>
        break;
 80092d8:	bf00      	nop
    }
  }
}
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20000ac8 	.word	0x20000ac8

080092e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	88db      	ldrh	r3, [r3, #6]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d004      	beq.n	8009300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f8cd 	bl	8009498 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092fe:	e022      	b.n	8009346 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009306:	2b02      	cmp	r3, #2
 8009308:	dc02      	bgt.n	8009310 <USBD_GetConfig+0x2c>
 800930a:	2b00      	cmp	r3, #0
 800930c:	dc03      	bgt.n	8009316 <USBD_GetConfig+0x32>
 800930e:	e015      	b.n	800933c <USBD_GetConfig+0x58>
 8009310:	2b03      	cmp	r3, #3
 8009312:	d00b      	beq.n	800932c <USBD_GetConfig+0x48>
 8009314:	e012      	b.n	800933c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3308      	adds	r3, #8
 8009320:	2201      	movs	r2, #1
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f922 	bl	800956e <USBD_CtlSendData>
        break;
 800932a:	e00c      	b.n	8009346 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	2201      	movs	r2, #1
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f91a 	bl	800956e <USBD_CtlSendData>
        break;
 800933a:	e004      	b.n	8009346 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f8aa 	bl	8009498 <USBD_CtlError>
        break;
 8009344:	bf00      	nop
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935e:	3b01      	subs	r3, #1
 8009360:	2b02      	cmp	r3, #2
 8009362:	d81e      	bhi.n	80093a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	88db      	ldrh	r3, [r3, #6]
 8009368:	2b02      	cmp	r3, #2
 800936a:	d004      	beq.n	8009376 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f892 	bl	8009498 <USBD_CtlError>
        break;
 8009374:	e01a      	b.n	80093ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f043 0202 	orr.w	r2, r3, #2
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	330c      	adds	r3, #12
 8009396:	2202      	movs	r2, #2
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f8e7 	bl	800956e <USBD_CtlSendData>
      break;
 80093a0:	e004      	b.n	80093ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f877 	bl	8009498 <USBD_CtlError>
      break;
 80093aa:	bf00      	nop
  }
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d106      	bne.n	80093d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f92b 	bl	800962a <USBD_CtlSendStatus>
  }
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	3b01      	subs	r3, #1
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d80b      	bhi.n	800940a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	885b      	ldrh	r3, [r3, #2]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d10c      	bne.n	8009414 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f911 	bl	800962a <USBD_CtlSendStatus>
      }
      break;
 8009408:	e004      	b.n	8009414 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f843 	bl	8009498 <USBD_CtlError>
      break;
 8009412:	e000      	b.n	8009416 <USBD_ClrFeature+0x3a>
      break;
 8009414:	bf00      	nop
  }
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781a      	ldrb	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	785a      	ldrb	r2, [r3, #1]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	3302      	adds	r3, #2
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	b29a      	uxth	r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	3303      	adds	r3, #3
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	b29b      	uxth	r3, r3
 800944c:	4413      	add	r3, r2
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	3304      	adds	r3, #4
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b29a      	uxth	r2, r3
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	3305      	adds	r3, #5
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	021b      	lsls	r3, r3, #8
 8009466:	b29b      	uxth	r3, r3
 8009468:	4413      	add	r3, r2
 800946a:	b29a      	uxth	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	3306      	adds	r3, #6
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	b29a      	uxth	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	3307      	adds	r3, #7
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	b29b      	uxth	r3, r3
 8009480:	021b      	lsls	r3, r3, #8
 8009482:	b29b      	uxth	r3, r3
 8009484:	4413      	add	r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	80da      	strh	r2, [r3, #6]

}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80094a2:	2180      	movs	r1, #128	; 0x80
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fc5b 	bl	8009d60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fc57 	bl	8009d60 <USBD_LL_StallEP>
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b086      	sub	sp, #24
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d032      	beq.n	8009536 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f834 	bl	800953e <USBD_GetLen>
 80094d6:	4603      	mov	r3, r0
 80094d8:	3301      	adds	r3, #1
 80094da:	b29b      	uxth	r3, r3
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	b29a      	uxth	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	75fa      	strb	r2, [r7, #23]
 80094ea:	461a      	mov	r2, r3
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4413      	add	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094f6:	7dfb      	ldrb	r3, [r7, #23]
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	75fa      	strb	r2, [r7, #23]
 80094fc:	461a      	mov	r2, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	2203      	movs	r2, #3
 8009504:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009506:	e012      	b.n	800952e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	60fa      	str	r2, [r7, #12]
 800950e:	7dfa      	ldrb	r2, [r7, #23]
 8009510:	1c51      	adds	r1, r2, #1
 8009512:	75f9      	strb	r1, [r7, #23]
 8009514:	4611      	mov	r1, r2
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	440a      	add	r2, r1
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	75fa      	strb	r2, [r7, #23]
 8009524:	461a      	mov	r2, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4413      	add	r3, r2
 800952a:	2200      	movs	r2, #0
 800952c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e8      	bne.n	8009508 <USBD_GetString+0x4e>
    }
  }
}
 8009536:	bf00      	nop
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800954a:	e005      	b.n	8009558 <USBD_GetLen+0x1a>
  {
    len++;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	3301      	adds	r3, #1
 8009550:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3301      	adds	r3, #1
 8009556:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1f5      	bne.n	800954c <USBD_GetLen+0xe>
  }

  return len;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	4613      	mov	r3, r2
 800957a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2202      	movs	r2, #2
 8009580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009584:	88fa      	ldrh	r2, [r7, #6]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800958a:	88fa      	ldrh	r2, [r7, #6]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009590:	88fb      	ldrh	r3, [r7, #6]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	2100      	movs	r1, #0
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fc6b 	bl	8009e72 <USBD_LL_Transmit>

  return USBD_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	4613      	mov	r3, r2
 80095b2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	2100      	movs	r1, #0
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 fc59 	bl	8009e72 <USBD_LL_Transmit>

  return USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	4613      	mov	r3, r2
 80095d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2203      	movs	r2, #3
 80095dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095e0:	88fa      	ldrh	r2, [r7, #6]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095e8:	88fa      	ldrh	r2, [r7, #6]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095f0:	88fb      	ldrh	r3, [r7, #6]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	2100      	movs	r1, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 fc5e 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	4613      	mov	r3, r2
 8009612:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	2100      	movs	r1, #0
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 fc4c 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2204      	movs	r2, #4
 8009636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800963a:	2300      	movs	r3, #0
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc16 	bl	8009e72 <USBD_LL_Transmit>

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2205      	movs	r2, #5
 800965c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009660:	2300      	movs	r3, #0
 8009662:	2200      	movs	r2, #0
 8009664:	2100      	movs	r1, #0
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fc26 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800967c:	2200      	movs	r2, #0
 800967e:	4912      	ldr	r1, [pc, #72]	; (80096c8 <MX_USB_DEVICE_Init+0x50>)
 8009680:	4812      	ldr	r0, [pc, #72]	; (80096cc <MX_USB_DEVICE_Init+0x54>)
 8009682:	f7fe ff57 	bl	8008534 <USBD_Init>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800968c:	f7f7 f9aa 	bl	80009e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009690:	490f      	ldr	r1, [pc, #60]	; (80096d0 <MX_USB_DEVICE_Init+0x58>)
 8009692:	480e      	ldr	r0, [pc, #56]	; (80096cc <MX_USB_DEVICE_Init+0x54>)
 8009694:	f7fe ff79 	bl	800858a <USBD_RegisterClass>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800969e:	f7f7 f9a1 	bl	80009e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096a2:	490c      	ldr	r1, [pc, #48]	; (80096d4 <MX_USB_DEVICE_Init+0x5c>)
 80096a4:	4809      	ldr	r0, [pc, #36]	; (80096cc <MX_USB_DEVICE_Init+0x54>)
 80096a6:	f7fe fea7 	bl	80083f8 <USBD_CDC_RegisterInterface>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096b0:	f7f7 f998 	bl	80009e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096b4:	4805      	ldr	r0, [pc, #20]	; (80096cc <MX_USB_DEVICE_Init+0x54>)
 80096b6:	f7fe ff82 	bl	80085be <USBD_Start>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096c0:	f7f7 f990 	bl	80009e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096c4:	bf00      	nop
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20000138 	.word	0x20000138
 80096cc:	20000acc 	.word	0x20000acc
 80096d0:	20000024 	.word	0x20000024
 80096d4:	20000128 	.word	0x20000128

080096d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096dc:	2200      	movs	r2, #0
 80096de:	4905      	ldr	r1, [pc, #20]	; (80096f4 <CDC_Init_FS+0x1c>)
 80096e0:	4805      	ldr	r0, [pc, #20]	; (80096f8 <CDC_Init_FS+0x20>)
 80096e2:	f7fe fea0 	bl	8008426 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096e6:	4905      	ldr	r1, [pc, #20]	; (80096fc <CDC_Init_FS+0x24>)
 80096e8:	4803      	ldr	r0, [pc, #12]	; (80096f8 <CDC_Init_FS+0x20>)
 80096ea:	f7fe feb6 	bl	800845a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20001190 	.word	0x20001190
 80096f8:	20000acc 	.word	0x20000acc
 80096fc:	20000d90 	.word	0x20000d90

08009700 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009704:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009706:	4618      	mov	r0, r3
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
 800971c:	4613      	mov	r3, r2
 800971e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	2b23      	cmp	r3, #35	; 0x23
 8009724:	d84a      	bhi.n	80097bc <CDC_Control_FS+0xac>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <CDC_Control_FS+0x1c>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	080097bd 	.word	0x080097bd
 8009730:	080097bd 	.word	0x080097bd
 8009734:	080097bd 	.word	0x080097bd
 8009738:	080097bd 	.word	0x080097bd
 800973c:	080097bd 	.word	0x080097bd
 8009740:	080097bd 	.word	0x080097bd
 8009744:	080097bd 	.word	0x080097bd
 8009748:	080097bd 	.word	0x080097bd
 800974c:	080097bd 	.word	0x080097bd
 8009750:	080097bd 	.word	0x080097bd
 8009754:	080097bd 	.word	0x080097bd
 8009758:	080097bd 	.word	0x080097bd
 800975c:	080097bd 	.word	0x080097bd
 8009760:	080097bd 	.word	0x080097bd
 8009764:	080097bd 	.word	0x080097bd
 8009768:	080097bd 	.word	0x080097bd
 800976c:	080097bd 	.word	0x080097bd
 8009770:	080097bd 	.word	0x080097bd
 8009774:	080097bd 	.word	0x080097bd
 8009778:	080097bd 	.word	0x080097bd
 800977c:	080097bd 	.word	0x080097bd
 8009780:	080097bd 	.word	0x080097bd
 8009784:	080097bd 	.word	0x080097bd
 8009788:	080097bd 	.word	0x080097bd
 800978c:	080097bd 	.word	0x080097bd
 8009790:	080097bd 	.word	0x080097bd
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097bd 	.word	0x080097bd
 800979c:	080097bd 	.word	0x080097bd
 80097a0:	080097bd 	.word	0x080097bd
 80097a4:	080097bd 	.word	0x080097bd
 80097a8:	080097bd 	.word	0x080097bd
 80097ac:	080097bd 	.word	0x080097bd
 80097b0:	080097bd 	.word	0x080097bd
 80097b4:	080097bd 	.word	0x080097bd
 80097b8:	080097bd 	.word	0x080097bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097bc:	bf00      	nop
  }

  return (USBD_OK);
 80097be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	4806      	ldr	r0, [pc, #24]	; (80097f4 <CDC_Receive_FS+0x28>)
 80097da:	f7fe fe3e 	bl	800845a <USBD_CDC_SetRxBuffer>
  Process_USB_Command((char*)&Buf[0]);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7f7 f802 	bl	80007e8 <Process_USB_Command>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097e4:	4803      	ldr	r0, [pc, #12]	; (80097f4 <CDC_Receive_FS+0x28>)
 80097e6:	f7fe fe7b 	bl	80084e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20000acc 	.word	0x20000acc

080097f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <CDC_Transmit_FS+0x48>)
 800980a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800981a:	2301      	movs	r3, #1
 800981c:	e00b      	b.n	8009836 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800981e:	887b      	ldrh	r3, [r7, #2]
 8009820:	461a      	mov	r2, r3
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	4806      	ldr	r0, [pc, #24]	; (8009840 <CDC_Transmit_FS+0x48>)
 8009826:	f7fe fdfe 	bl	8008426 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <CDC_Transmit_FS+0x48>)
 800982c:	f7fe fe29 	bl	8008482 <USBD_CDC_TransmitPacket>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000acc 	.word	0x20000acc

08009844 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2212      	movs	r2, #18
 8009854:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009856:	4b03      	ldr	r3, [pc, #12]	; (8009864 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	20000154 	.word	0x20000154

08009868 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	6039      	str	r1, [r7, #0]
 8009872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2204      	movs	r2, #4
 8009878:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800987a:	4b03      	ldr	r3, [pc, #12]	; (8009888 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800987c:	4618      	mov	r0, r3
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	20000168 	.word	0x20000168

0800988c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d105      	bne.n	80098aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4907      	ldr	r1, [pc, #28]	; (80098c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098a2:	4808      	ldr	r0, [pc, #32]	; (80098c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098a4:	f7ff fe09 	bl	80094ba <USBD_GetString>
 80098a8:	e004      	b.n	80098b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	4904      	ldr	r1, [pc, #16]	; (80098c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098ae:	4805      	ldr	r0, [pc, #20]	; (80098c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098b0:	f7ff fe03 	bl	80094ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80098b4:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20001590 	.word	0x20001590
 80098c4:	0800aa4c 	.word	0x0800aa4c

080098c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	6039      	str	r1, [r7, #0]
 80098d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	4904      	ldr	r1, [pc, #16]	; (80098e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098d8:	4804      	ldr	r0, [pc, #16]	; (80098ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098da:	f7ff fdee 	bl	80094ba <USBD_GetString>
  return USBD_StrDesc;
 80098de:	4b02      	ldr	r3, [pc, #8]	; (80098e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20001590 	.word	0x20001590
 80098ec:	0800aa64 	.word	0x0800aa64

080098f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	6039      	str	r1, [r7, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	221a      	movs	r2, #26
 8009900:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009902:	f000 f843 	bl	800998c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009906:	4b02      	ldr	r3, [pc, #8]	; (8009910 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	2000016c 	.word	0x2000016c

08009914 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	6039      	str	r1, [r7, #0]
 800991e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d105      	bne.n	8009932 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4907      	ldr	r1, [pc, #28]	; (8009948 <USBD_FS_ConfigStrDescriptor+0x34>)
 800992a:	4808      	ldr	r0, [pc, #32]	; (800994c <USBD_FS_ConfigStrDescriptor+0x38>)
 800992c:	f7ff fdc5 	bl	80094ba <USBD_GetString>
 8009930:	e004      	b.n	800993c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009936:	4805      	ldr	r0, [pc, #20]	; (800994c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009938:	f7ff fdbf 	bl	80094ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20001590 	.word	0x20001590
 800994c:	0800aa78 	.word	0x0800aa78

08009950 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	6039      	str	r1, [r7, #0]
 800995a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d105      	bne.n	800996e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4907      	ldr	r1, [pc, #28]	; (8009984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009966:	4808      	ldr	r0, [pc, #32]	; (8009988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009968:	f7ff fda7 	bl	80094ba <USBD_GetString>
 800996c:	e004      	b.n	8009978 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	4904      	ldr	r1, [pc, #16]	; (8009984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009972:	4805      	ldr	r0, [pc, #20]	; (8009988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009974:	f7ff fda1 	bl	80094ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009978:	4b02      	ldr	r3, [pc, #8]	; (8009984 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20001590 	.word	0x20001590
 8009988:	0800aa84 	.word	0x0800aa84

0800998c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009992:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <Get_SerialNum+0x44>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009998:	4b0e      	ldr	r3, [pc, #56]	; (80099d4 <Get_SerialNum+0x48>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800999e:	4b0e      	ldr	r3, [pc, #56]	; (80099d8 <Get_SerialNum+0x4c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4413      	add	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099b2:	2208      	movs	r2, #8
 80099b4:	4909      	ldr	r1, [pc, #36]	; (80099dc <Get_SerialNum+0x50>)
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 f814 	bl	80099e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099bc:	2204      	movs	r2, #4
 80099be:	4908      	ldr	r1, [pc, #32]	; (80099e0 <Get_SerialNum+0x54>)
 80099c0:	68b8      	ldr	r0, [r7, #8]
 80099c2:	f000 f80f 	bl	80099e4 <IntToUnicode>
  }
}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	1ffff7ac 	.word	0x1ffff7ac
 80099d4:	1ffff7b0 	.word	0x1ffff7b0
 80099d8:	1ffff7b4 	.word	0x1ffff7b4
 80099dc:	2000016e 	.word	0x2000016e
 80099e0:	2000017e 	.word	0x2000017e

080099e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	4613      	mov	r3, r2
 80099f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099f6:	2300      	movs	r3, #0
 80099f8:	75fb      	strb	r3, [r7, #23]
 80099fa:	e027      	b.n	8009a4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	0f1b      	lsrs	r3, r3, #28
 8009a00:	2b09      	cmp	r3, #9
 8009a02:	d80b      	bhi.n	8009a1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	0f1b      	lsrs	r3, r3, #28
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	440b      	add	r3, r1
 8009a14:	3230      	adds	r2, #48	; 0x30
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	e00a      	b.n	8009a32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	0f1b      	lsrs	r3, r3, #28
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	4619      	mov	r1, r3
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	440b      	add	r3, r1
 8009a2c:	3237      	adds	r2, #55	; 0x37
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	4413      	add	r3, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	75fb      	strb	r3, [r7, #23]
 8009a4c:	7dfa      	ldrb	r2, [r7, #23]
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d3d3      	bcc.n	80099fc <IntToUnicode+0x18>
  }
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
	...

08009a64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a0d      	ldr	r2, [pc, #52]	; (8009aa8 <HAL_PCD_MspInit+0x44>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d113      	bne.n	8009a9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a76:	4b0d      	ldr	r3, [pc, #52]	; (8009aac <HAL_PCD_MspInit+0x48>)
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	4a0c      	ldr	r2, [pc, #48]	; (8009aac <HAL_PCD_MspInit+0x48>)
 8009a7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a80:	61d3      	str	r3, [r2, #28]
 8009a82:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <HAL_PCD_MspInit+0x48>)
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2100      	movs	r1, #0
 8009a92:	2014      	movs	r0, #20
 8009a94:	f7f7 fa29 	bl	8000eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009a98:	2014      	movs	r0, #20
 8009a9a:	f7f7 fa42 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a9e:	bf00      	nop
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	40005c00 	.word	0x40005c00
 8009aac:	40021000 	.word	0x40021000

08009ab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7fe fdc2 	bl	8008650 <USBD_LL_SetupStage>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 8009ae6:	78fa      	ldrb	r2, [r7, #3]
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	440b      	add	r3, r1
 8009af4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	4619      	mov	r1, r3
 8009afe:	f7fe fdf4 	bl	80086ea <USBD_LL_DataOutStage>
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	460b      	mov	r3, r1
 8009b14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 8009b1c:	78fa      	ldrb	r2, [r7, #3]
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	440b      	add	r3, r1
 8009b2a:	3324      	adds	r3, #36	; 0x24
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	4619      	mov	r1, r3
 8009b32:	f7fe fe4b 	bl	80087cc <USBD_LL_DataInStage>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe ff5e 	bl	8008a0e <USBD_LL_SOF>
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b62:	2301      	movs	r3, #1
 8009b64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	795b      	ldrb	r3, [r3, #5]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d001      	beq.n	8009b72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b6e:	f7f6 ff39 	bl	80009e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009b78:	7bfa      	ldrb	r2, [r7, #15]
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fe ff0b 	bl	8008998 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe fec4 	bl	8008916 <USBD_LL_Reset>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe ff06 	bl	80089b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	7a5b      	ldrb	r3, [r3, #9]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bb4:	4b04      	ldr	r3, [pc, #16]	; (8009bc8 <HAL_PCD_SuspendCallback+0x30>)
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	4a03      	ldr	r2, [pc, #12]	; (8009bc8 <HAL_PCD_SuspendCallback+0x30>)
 8009bba:	f043 0306 	orr.w	r3, r3, #6
 8009bbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	e000ed00 	.word	0xe000ed00

08009bcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe ff01 	bl	80089e2 <USBD_LL_Resume>
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009bf0:	4a29      	ldr	r2, [pc, #164]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a27      	ldr	r2, [pc, #156]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009bfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009c00:	4b25      	ldr	r3, [pc, #148]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c02:	4a26      	ldr	r2, [pc, #152]	; (8009c9c <USBD_LL_Init+0xb4>)
 8009c04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c08:	2208      	movs	r2, #8
 8009c0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c0c:	4b22      	ldr	r3, [pc, #136]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c0e:	2202      	movs	r2, #2
 8009c10:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c12:	4b21      	ldr	r3, [pc, #132]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c14:	2202      	movs	r2, #2
 8009c16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c18:	4b1f      	ldr	r3, [pc, #124]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009c1e:	4b1e      	ldr	r3, [pc, #120]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c24:	4b1c      	ldr	r3, [pc, #112]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c2a:	481b      	ldr	r0, [pc, #108]	; (8009c98 <USBD_LL_Init+0xb0>)
 8009c2c:	f7f7 fb36 	bl	800129c <HAL_PCD_Init>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009c36:	f7f6 fed5 	bl	80009e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c40:	2318      	movs	r3, #24
 8009c42:	2200      	movs	r2, #0
 8009c44:	2100      	movs	r1, #0
 8009c46:	f7f8 ff9a 	bl	8002b7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c50:	2358      	movs	r3, #88	; 0x58
 8009c52:	2200      	movs	r2, #0
 8009c54:	2180      	movs	r1, #128	; 0x80
 8009c56:	f7f8 ff92 	bl	8002b7e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c60:	23c0      	movs	r3, #192	; 0xc0
 8009c62:	2200      	movs	r2, #0
 8009c64:	2181      	movs	r1, #129	; 0x81
 8009c66:	f7f8 ff8a 	bl	8002b7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c70:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c74:	2200      	movs	r2, #0
 8009c76:	2101      	movs	r1, #1
 8009c78:	f7f8 ff81 	bl	8002b7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c86:	2200      	movs	r2, #0
 8009c88:	2182      	movs	r1, #130	; 0x82
 8009c8a:	f7f8 ff78 	bl	8002b7e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	20001790 	.word	0x20001790
 8009c9c:	40005c00 	.word	0x40005c00

08009ca0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f7 fbb7 	bl	800142a <HAL_PCD_Start>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 f952 	bl	8009f6c <USBD_Get_USB_Status>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	4608      	mov	r0, r1
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	70fb      	strb	r3, [r7, #3]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70bb      	strb	r3, [r7, #2]
 8009cec:	4613      	mov	r3, r2
 8009cee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cfe:	78bb      	ldrb	r3, [r7, #2]
 8009d00:	883a      	ldrh	r2, [r7, #0]
 8009d02:	78f9      	ldrb	r1, [r7, #3]
 8009d04:	f7f7 fcaf 	bl	8001666 <HAL_PCD_EP_Open>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f92c 	bl	8009f6c <USBD_Get_USB_Status>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3c:	78fa      	ldrb	r2, [r7, #3]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7f7 fced 	bl	8001720 <HAL_PCD_EP_Close>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f90d 	bl	8009f6c <USBD_Get_USB_Status>
 8009d52:	4603      	mov	r3, r0
 8009d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f7 fd96 	bl	80018b0 <HAL_PCD_EP_SetStall>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 f8ee 	bl	8009f6c <USBD_Get_USB_Status>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f7 fdc9 	bl	8001954 <HAL_PCD_EP_ClrStall>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f8cf 	bl	8009f6c <USBD_Get_USB_Status>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	da0b      	bge.n	8009e10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	440b      	add	r3, r1
 8009e0a:	3312      	adds	r3, #18
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	e00b      	b.n	8009e28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	440b      	add	r3, r1
 8009e22:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8009e26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e4e:	78fa      	ldrb	r2, [r7, #3]
 8009e50:	4611      	mov	r1, r2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f7 fbe3 	bl	800161e <HAL_PCD_SetAddress>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 f884 	bl	8009f6c <USBD_Get_USB_Status>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	460b      	mov	r3, r1
 8009e80:	72fb      	strb	r3, [r7, #11]
 8009e82:	4613      	mov	r3, r2
 8009e84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e94:	893b      	ldrh	r3, [r7, #8]
 8009e96:	7af9      	ldrb	r1, [r7, #11]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f7f7 fcd2 	bl	8001842 <HAL_PCD_EP_Transmit>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 f861 	bl	8009f6c <USBD_Get_USB_Status>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eae:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	72fb      	strb	r3, [r7, #11]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009eda:	893b      	ldrh	r3, [r7, #8]
 8009edc:	7af9      	ldrb	r1, [r7, #11]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	f7f7 fc66 	bl	80017b0 <HAL_PCD_EP_Receive>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f83e 	bl	8009f6c <USBD_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ef4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f10:	78fa      	ldrb	r2, [r7, #3]
 8009f12:	4611      	mov	r1, r2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7f7 fc7c 	bl	8001812 <HAL_PCD_EP_GetRxCount>
 8009f1a:	4603      	mov	r3, r0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f2c:	4b03      	ldr	r3, [pc, #12]	; (8009f3c <USBD_static_malloc+0x18>)
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	20001a64 	.word	0x20001a64

08009f40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f7a:	79fb      	ldrb	r3, [r7, #7]
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d817      	bhi.n	8009fb0 <USBD_Get_USB_Status+0x44>
 8009f80:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <USBD_Get_USB_Status+0x1c>)
 8009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f86:	bf00      	nop
 8009f88:	08009f99 	.word	0x08009f99
 8009f8c:	08009f9f 	.word	0x08009f9f
 8009f90:	08009fa5 	.word	0x08009fa5
 8009f94:	08009fab 	.word	0x08009fab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9c:	e00b      	b.n	8009fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa2:	e008      	b.n	8009fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa8:	e005      	b.n	8009fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009faa:	2302      	movs	r3, #2
 8009fac:	73fb      	strb	r3, [r7, #15]
    break;
 8009fae:	e002      	b.n	8009fb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb4:	bf00      	nop
  }
  return usb_status;
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <atoi>:
 8009fc4:	220a      	movs	r2, #10
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	f000 b882 	b.w	800a0d0 <strtol>

08009fcc <_strtol_l.constprop.0>:
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd2:	d001      	beq.n	8009fd8 <_strtol_l.constprop.0+0xc>
 8009fd4:	2b24      	cmp	r3, #36	; 0x24
 8009fd6:	d906      	bls.n	8009fe6 <_strtol_l.constprop.0+0x1a>
 8009fd8:	f000 f8ac 	bl	800a134 <__errno>
 8009fdc:	2316      	movs	r3, #22
 8009fde:	6003      	str	r3, [r0, #0]
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0cc <_strtol_l.constprop.0+0x100>
 8009fea:	460d      	mov	r5, r1
 8009fec:	462e      	mov	r6, r5
 8009fee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ff2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009ff6:	f017 0708 	ands.w	r7, r7, #8
 8009ffa:	d1f7      	bne.n	8009fec <_strtol_l.constprop.0+0x20>
 8009ffc:	2c2d      	cmp	r4, #45	; 0x2d
 8009ffe:	d132      	bne.n	800a066 <_strtol_l.constprop.0+0x9a>
 800a000:	782c      	ldrb	r4, [r5, #0]
 800a002:	2701      	movs	r7, #1
 800a004:	1cb5      	adds	r5, r6, #2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d05b      	beq.n	800a0c2 <_strtol_l.constprop.0+0xf6>
 800a00a:	2b10      	cmp	r3, #16
 800a00c:	d109      	bne.n	800a022 <_strtol_l.constprop.0+0x56>
 800a00e:	2c30      	cmp	r4, #48	; 0x30
 800a010:	d107      	bne.n	800a022 <_strtol_l.constprop.0+0x56>
 800a012:	782c      	ldrb	r4, [r5, #0]
 800a014:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a018:	2c58      	cmp	r4, #88	; 0x58
 800a01a:	d14d      	bne.n	800a0b8 <_strtol_l.constprop.0+0xec>
 800a01c:	786c      	ldrb	r4, [r5, #1]
 800a01e:	2310      	movs	r3, #16
 800a020:	3502      	adds	r5, #2
 800a022:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a026:	f108 38ff 	add.w	r8, r8, #4294967295
 800a02a:	f04f 0e00 	mov.w	lr, #0
 800a02e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a032:	4676      	mov	r6, lr
 800a034:	fb03 8a19 	mls	sl, r3, r9, r8
 800a038:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a03c:	f1bc 0f09 	cmp.w	ip, #9
 800a040:	d816      	bhi.n	800a070 <_strtol_l.constprop.0+0xa4>
 800a042:	4664      	mov	r4, ip
 800a044:	42a3      	cmp	r3, r4
 800a046:	dd24      	ble.n	800a092 <_strtol_l.constprop.0+0xc6>
 800a048:	f1be 3fff 	cmp.w	lr, #4294967295
 800a04c:	d008      	beq.n	800a060 <_strtol_l.constprop.0+0x94>
 800a04e:	45b1      	cmp	r9, r6
 800a050:	d31c      	bcc.n	800a08c <_strtol_l.constprop.0+0xc0>
 800a052:	d101      	bne.n	800a058 <_strtol_l.constprop.0+0x8c>
 800a054:	45a2      	cmp	sl, r4
 800a056:	db19      	blt.n	800a08c <_strtol_l.constprop.0+0xc0>
 800a058:	fb06 4603 	mla	r6, r6, r3, r4
 800a05c:	f04f 0e01 	mov.w	lr, #1
 800a060:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a064:	e7e8      	b.n	800a038 <_strtol_l.constprop.0+0x6c>
 800a066:	2c2b      	cmp	r4, #43	; 0x2b
 800a068:	bf04      	itt	eq
 800a06a:	782c      	ldrbeq	r4, [r5, #0]
 800a06c:	1cb5      	addeq	r5, r6, #2
 800a06e:	e7ca      	b.n	800a006 <_strtol_l.constprop.0+0x3a>
 800a070:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a074:	f1bc 0f19 	cmp.w	ip, #25
 800a078:	d801      	bhi.n	800a07e <_strtol_l.constprop.0+0xb2>
 800a07a:	3c37      	subs	r4, #55	; 0x37
 800a07c:	e7e2      	b.n	800a044 <_strtol_l.constprop.0+0x78>
 800a07e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a082:	f1bc 0f19 	cmp.w	ip, #25
 800a086:	d804      	bhi.n	800a092 <_strtol_l.constprop.0+0xc6>
 800a088:	3c57      	subs	r4, #87	; 0x57
 800a08a:	e7db      	b.n	800a044 <_strtol_l.constprop.0+0x78>
 800a08c:	f04f 3eff 	mov.w	lr, #4294967295
 800a090:	e7e6      	b.n	800a060 <_strtol_l.constprop.0+0x94>
 800a092:	f1be 3fff 	cmp.w	lr, #4294967295
 800a096:	d105      	bne.n	800a0a4 <_strtol_l.constprop.0+0xd8>
 800a098:	2322      	movs	r3, #34	; 0x22
 800a09a:	6003      	str	r3, [r0, #0]
 800a09c:	4646      	mov	r6, r8
 800a09e:	b942      	cbnz	r2, 800a0b2 <_strtol_l.constprop.0+0xe6>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	e79e      	b.n	8009fe2 <_strtol_l.constprop.0+0x16>
 800a0a4:	b107      	cbz	r7, 800a0a8 <_strtol_l.constprop.0+0xdc>
 800a0a6:	4276      	negs	r6, r6
 800a0a8:	2a00      	cmp	r2, #0
 800a0aa:	d0f9      	beq.n	800a0a0 <_strtol_l.constprop.0+0xd4>
 800a0ac:	f1be 0f00 	cmp.w	lr, #0
 800a0b0:	d000      	beq.n	800a0b4 <_strtol_l.constprop.0+0xe8>
 800a0b2:	1e69      	subs	r1, r5, #1
 800a0b4:	6011      	str	r1, [r2, #0]
 800a0b6:	e7f3      	b.n	800a0a0 <_strtol_l.constprop.0+0xd4>
 800a0b8:	2430      	movs	r4, #48	; 0x30
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1b1      	bne.n	800a022 <_strtol_l.constprop.0+0x56>
 800a0be:	2308      	movs	r3, #8
 800a0c0:	e7af      	b.n	800a022 <_strtol_l.constprop.0+0x56>
 800a0c2:	2c30      	cmp	r4, #48	; 0x30
 800a0c4:	d0a5      	beq.n	800a012 <_strtol_l.constprop.0+0x46>
 800a0c6:	230a      	movs	r3, #10
 800a0c8:	e7ab      	b.n	800a022 <_strtol_l.constprop.0+0x56>
 800a0ca:	bf00      	nop
 800a0cc:	0800aac5 	.word	0x0800aac5

0800a0d0 <strtol>:
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	4802      	ldr	r0, [pc, #8]	; (800a0e0 <strtol+0x10>)
 800a0d8:	6800      	ldr	r0, [r0, #0]
 800a0da:	f7ff bf77 	b.w	8009fcc <_strtol_l.constprop.0>
 800a0de:	bf00      	nop
 800a0e0:	200001d4 	.word	0x200001d4

0800a0e4 <siprintf>:
 800a0e4:	b40e      	push	{r1, r2, r3}
 800a0e6:	b500      	push	{lr}
 800a0e8:	b09c      	sub	sp, #112	; 0x70
 800a0ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a0ec:	9002      	str	r0, [sp, #8]
 800a0ee:	9006      	str	r0, [sp, #24]
 800a0f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0f4:	4809      	ldr	r0, [pc, #36]	; (800a11c <siprintf+0x38>)
 800a0f6:	9107      	str	r1, [sp, #28]
 800a0f8:	9104      	str	r1, [sp, #16]
 800a0fa:	4909      	ldr	r1, [pc, #36]	; (800a120 <siprintf+0x3c>)
 800a0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a100:	9105      	str	r1, [sp, #20]
 800a102:	6800      	ldr	r0, [r0, #0]
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	a902      	add	r1, sp, #8
 800a108:	f000 f992 	bl	800a430 <_svfiprintf_r>
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	2200      	movs	r2, #0
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	b01c      	add	sp, #112	; 0x70
 800a114:	f85d eb04 	ldr.w	lr, [sp], #4
 800a118:	b003      	add	sp, #12
 800a11a:	4770      	bx	lr
 800a11c:	200001d4 	.word	0x200001d4
 800a120:	ffff0208 	.word	0xffff0208

0800a124 <memset>:
 800a124:	4402      	add	r2, r0
 800a126:	4603      	mov	r3, r0
 800a128:	4293      	cmp	r3, r2
 800a12a:	d100      	bne.n	800a12e <memset+0xa>
 800a12c:	4770      	bx	lr
 800a12e:	f803 1b01 	strb.w	r1, [r3], #1
 800a132:	e7f9      	b.n	800a128 <memset+0x4>

0800a134 <__errno>:
 800a134:	4b01      	ldr	r3, [pc, #4]	; (800a13c <__errno+0x8>)
 800a136:	6818      	ldr	r0, [r3, #0]
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	200001d4 	.word	0x200001d4

0800a140 <__libc_init_array>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	4d0d      	ldr	r5, [pc, #52]	; (800a178 <__libc_init_array+0x38>)
 800a144:	4c0d      	ldr	r4, [pc, #52]	; (800a17c <__libc_init_array+0x3c>)
 800a146:	1b64      	subs	r4, r4, r5
 800a148:	10a4      	asrs	r4, r4, #2
 800a14a:	2600      	movs	r6, #0
 800a14c:	42a6      	cmp	r6, r4
 800a14e:	d109      	bne.n	800a164 <__libc_init_array+0x24>
 800a150:	4d0b      	ldr	r5, [pc, #44]	; (800a180 <__libc_init_array+0x40>)
 800a152:	4c0c      	ldr	r4, [pc, #48]	; (800a184 <__libc_init_array+0x44>)
 800a154:	f000 fc6a 	bl	800aa2c <_init>
 800a158:	1b64      	subs	r4, r4, r5
 800a15a:	10a4      	asrs	r4, r4, #2
 800a15c:	2600      	movs	r6, #0
 800a15e:	42a6      	cmp	r6, r4
 800a160:	d105      	bne.n	800a16e <__libc_init_array+0x2e>
 800a162:	bd70      	pop	{r4, r5, r6, pc}
 800a164:	f855 3b04 	ldr.w	r3, [r5], #4
 800a168:	4798      	blx	r3
 800a16a:	3601      	adds	r6, #1
 800a16c:	e7ee      	b.n	800a14c <__libc_init_array+0xc>
 800a16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a172:	4798      	blx	r3
 800a174:	3601      	adds	r6, #1
 800a176:	e7f2      	b.n	800a15e <__libc_init_array+0x1e>
 800a178:	0800abf8 	.word	0x0800abf8
 800a17c:	0800abf8 	.word	0x0800abf8
 800a180:	0800abf8 	.word	0x0800abf8
 800a184:	0800abfc 	.word	0x0800abfc

0800a188 <__retarget_lock_acquire_recursive>:
 800a188:	4770      	bx	lr

0800a18a <__retarget_lock_release_recursive>:
 800a18a:	4770      	bx	lr

0800a18c <_free_r>:
 800a18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a18e:	2900      	cmp	r1, #0
 800a190:	d044      	beq.n	800a21c <_free_r+0x90>
 800a192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a196:	9001      	str	r0, [sp, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f1a1 0404 	sub.w	r4, r1, #4
 800a19e:	bfb8      	it	lt
 800a1a0:	18e4      	addlt	r4, r4, r3
 800a1a2:	f000 f8df 	bl	800a364 <__malloc_lock>
 800a1a6:	4a1e      	ldr	r2, [pc, #120]	; (800a220 <_free_r+0x94>)
 800a1a8:	9801      	ldr	r0, [sp, #4]
 800a1aa:	6813      	ldr	r3, [r2, #0]
 800a1ac:	b933      	cbnz	r3, 800a1bc <_free_r+0x30>
 800a1ae:	6063      	str	r3, [r4, #4]
 800a1b0:	6014      	str	r4, [r2, #0]
 800a1b2:	b003      	add	sp, #12
 800a1b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1b8:	f000 b8da 	b.w	800a370 <__malloc_unlock>
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	d908      	bls.n	800a1d2 <_free_r+0x46>
 800a1c0:	6825      	ldr	r5, [r4, #0]
 800a1c2:	1961      	adds	r1, r4, r5
 800a1c4:	428b      	cmp	r3, r1
 800a1c6:	bf01      	itttt	eq
 800a1c8:	6819      	ldreq	r1, [r3, #0]
 800a1ca:	685b      	ldreq	r3, [r3, #4]
 800a1cc:	1949      	addeq	r1, r1, r5
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	e7ed      	b.n	800a1ae <_free_r+0x22>
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	b10b      	cbz	r3, 800a1dc <_free_r+0x50>
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	d9fa      	bls.n	800a1d2 <_free_r+0x46>
 800a1dc:	6811      	ldr	r1, [r2, #0]
 800a1de:	1855      	adds	r5, r2, r1
 800a1e0:	42a5      	cmp	r5, r4
 800a1e2:	d10b      	bne.n	800a1fc <_free_r+0x70>
 800a1e4:	6824      	ldr	r4, [r4, #0]
 800a1e6:	4421      	add	r1, r4
 800a1e8:	1854      	adds	r4, r2, r1
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	6011      	str	r1, [r2, #0]
 800a1ee:	d1e0      	bne.n	800a1b2 <_free_r+0x26>
 800a1f0:	681c      	ldr	r4, [r3, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	6053      	str	r3, [r2, #4]
 800a1f6:	440c      	add	r4, r1
 800a1f8:	6014      	str	r4, [r2, #0]
 800a1fa:	e7da      	b.n	800a1b2 <_free_r+0x26>
 800a1fc:	d902      	bls.n	800a204 <_free_r+0x78>
 800a1fe:	230c      	movs	r3, #12
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	e7d6      	b.n	800a1b2 <_free_r+0x26>
 800a204:	6825      	ldr	r5, [r4, #0]
 800a206:	1961      	adds	r1, r4, r5
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf04      	itt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	6063      	str	r3, [r4, #4]
 800a212:	bf04      	itt	eq
 800a214:	1949      	addeq	r1, r1, r5
 800a216:	6021      	streq	r1, [r4, #0]
 800a218:	6054      	str	r4, [r2, #4]
 800a21a:	e7ca      	b.n	800a1b2 <_free_r+0x26>
 800a21c:	b003      	add	sp, #12
 800a21e:	bd30      	pop	{r4, r5, pc}
 800a220:	20001dc4 	.word	0x20001dc4

0800a224 <sbrk_aligned>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	4e0e      	ldr	r6, [pc, #56]	; (800a260 <sbrk_aligned+0x3c>)
 800a228:	460c      	mov	r4, r1
 800a22a:	6831      	ldr	r1, [r6, #0]
 800a22c:	4605      	mov	r5, r0
 800a22e:	b911      	cbnz	r1, 800a236 <sbrk_aligned+0x12>
 800a230:	f000 fba6 	bl	800a980 <_sbrk_r>
 800a234:	6030      	str	r0, [r6, #0]
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 fba1 	bl	800a980 <_sbrk_r>
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	d00a      	beq.n	800a258 <sbrk_aligned+0x34>
 800a242:	1cc4      	adds	r4, r0, #3
 800a244:	f024 0403 	bic.w	r4, r4, #3
 800a248:	42a0      	cmp	r0, r4
 800a24a:	d007      	beq.n	800a25c <sbrk_aligned+0x38>
 800a24c:	1a21      	subs	r1, r4, r0
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 fb96 	bl	800a980 <_sbrk_r>
 800a254:	3001      	adds	r0, #1
 800a256:	d101      	bne.n	800a25c <sbrk_aligned+0x38>
 800a258:	f04f 34ff 	mov.w	r4, #4294967295
 800a25c:	4620      	mov	r0, r4
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	20001dc8 	.word	0x20001dc8

0800a264 <_malloc_r>:
 800a264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a268:	1ccd      	adds	r5, r1, #3
 800a26a:	f025 0503 	bic.w	r5, r5, #3
 800a26e:	3508      	adds	r5, #8
 800a270:	2d0c      	cmp	r5, #12
 800a272:	bf38      	it	cc
 800a274:	250c      	movcc	r5, #12
 800a276:	2d00      	cmp	r5, #0
 800a278:	4607      	mov	r7, r0
 800a27a:	db01      	blt.n	800a280 <_malloc_r+0x1c>
 800a27c:	42a9      	cmp	r1, r5
 800a27e:	d905      	bls.n	800a28c <_malloc_r+0x28>
 800a280:	230c      	movs	r3, #12
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	2600      	movs	r6, #0
 800a286:	4630      	mov	r0, r6
 800a288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a360 <_malloc_r+0xfc>
 800a290:	f000 f868 	bl	800a364 <__malloc_lock>
 800a294:	f8d8 3000 	ldr.w	r3, [r8]
 800a298:	461c      	mov	r4, r3
 800a29a:	bb5c      	cbnz	r4, 800a2f4 <_malloc_r+0x90>
 800a29c:	4629      	mov	r1, r5
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f7ff ffc0 	bl	800a224 <sbrk_aligned>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	d155      	bne.n	800a356 <_malloc_r+0xf2>
 800a2aa:	f8d8 4000 	ldr.w	r4, [r8]
 800a2ae:	4626      	mov	r6, r4
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	d145      	bne.n	800a340 <_malloc_r+0xdc>
 800a2b4:	2c00      	cmp	r4, #0
 800a2b6:	d048      	beq.n	800a34a <_malloc_r+0xe6>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4638      	mov	r0, r7
 800a2be:	eb04 0903 	add.w	r9, r4, r3
 800a2c2:	f000 fb5d 	bl	800a980 <_sbrk_r>
 800a2c6:	4581      	cmp	r9, r0
 800a2c8:	d13f      	bne.n	800a34a <_malloc_r+0xe6>
 800a2ca:	6821      	ldr	r1, [r4, #0]
 800a2cc:	1a6d      	subs	r5, r5, r1
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff ffa7 	bl	800a224 <sbrk_aligned>
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d037      	beq.n	800a34a <_malloc_r+0xe6>
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	442b      	add	r3, r5
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d038      	beq.n	800a35a <_malloc_r+0xf6>
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	42a2      	cmp	r2, r4
 800a2ec:	d12b      	bne.n	800a346 <_malloc_r+0xe2>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	605a      	str	r2, [r3, #4]
 800a2f2:	e00f      	b.n	800a314 <_malloc_r+0xb0>
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	1b52      	subs	r2, r2, r5
 800a2f8:	d41f      	bmi.n	800a33a <_malloc_r+0xd6>
 800a2fa:	2a0b      	cmp	r2, #11
 800a2fc:	d917      	bls.n	800a32e <_malloc_r+0xca>
 800a2fe:	1961      	adds	r1, r4, r5
 800a300:	42a3      	cmp	r3, r4
 800a302:	6025      	str	r5, [r4, #0]
 800a304:	bf18      	it	ne
 800a306:	6059      	strne	r1, [r3, #4]
 800a308:	6863      	ldr	r3, [r4, #4]
 800a30a:	bf08      	it	eq
 800a30c:	f8c8 1000 	streq.w	r1, [r8]
 800a310:	5162      	str	r2, [r4, r5]
 800a312:	604b      	str	r3, [r1, #4]
 800a314:	4638      	mov	r0, r7
 800a316:	f104 060b 	add.w	r6, r4, #11
 800a31a:	f000 f829 	bl	800a370 <__malloc_unlock>
 800a31e:	f026 0607 	bic.w	r6, r6, #7
 800a322:	1d23      	adds	r3, r4, #4
 800a324:	1af2      	subs	r2, r6, r3
 800a326:	d0ae      	beq.n	800a286 <_malloc_r+0x22>
 800a328:	1b9b      	subs	r3, r3, r6
 800a32a:	50a3      	str	r3, [r4, r2]
 800a32c:	e7ab      	b.n	800a286 <_malloc_r+0x22>
 800a32e:	42a3      	cmp	r3, r4
 800a330:	6862      	ldr	r2, [r4, #4]
 800a332:	d1dd      	bne.n	800a2f0 <_malloc_r+0x8c>
 800a334:	f8c8 2000 	str.w	r2, [r8]
 800a338:	e7ec      	b.n	800a314 <_malloc_r+0xb0>
 800a33a:	4623      	mov	r3, r4
 800a33c:	6864      	ldr	r4, [r4, #4]
 800a33e:	e7ac      	b.n	800a29a <_malloc_r+0x36>
 800a340:	4634      	mov	r4, r6
 800a342:	6876      	ldr	r6, [r6, #4]
 800a344:	e7b4      	b.n	800a2b0 <_malloc_r+0x4c>
 800a346:	4613      	mov	r3, r2
 800a348:	e7cc      	b.n	800a2e4 <_malloc_r+0x80>
 800a34a:	230c      	movs	r3, #12
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4638      	mov	r0, r7
 800a350:	f000 f80e 	bl	800a370 <__malloc_unlock>
 800a354:	e797      	b.n	800a286 <_malloc_r+0x22>
 800a356:	6025      	str	r5, [r4, #0]
 800a358:	e7dc      	b.n	800a314 <_malloc_r+0xb0>
 800a35a:	605b      	str	r3, [r3, #4]
 800a35c:	deff      	udf	#255	; 0xff
 800a35e:	bf00      	nop
 800a360:	20001dc4 	.word	0x20001dc4

0800a364 <__malloc_lock>:
 800a364:	4801      	ldr	r0, [pc, #4]	; (800a36c <__malloc_lock+0x8>)
 800a366:	f7ff bf0f 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800a36a:	bf00      	nop
 800a36c:	20001dc0 	.word	0x20001dc0

0800a370 <__malloc_unlock>:
 800a370:	4801      	ldr	r0, [pc, #4]	; (800a378 <__malloc_unlock+0x8>)
 800a372:	f7ff bf0a 	b.w	800a18a <__retarget_lock_release_recursive>
 800a376:	bf00      	nop
 800a378:	20001dc0 	.word	0x20001dc0

0800a37c <__ssputs_r>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	688e      	ldr	r6, [r1, #8]
 800a382:	461f      	mov	r7, r3
 800a384:	42be      	cmp	r6, r7
 800a386:	680b      	ldr	r3, [r1, #0]
 800a388:	4682      	mov	sl, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	4690      	mov	r8, r2
 800a38e:	d82c      	bhi.n	800a3ea <__ssputs_r+0x6e>
 800a390:	898a      	ldrh	r2, [r1, #12]
 800a392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a396:	d026      	beq.n	800a3e6 <__ssputs_r+0x6a>
 800a398:	6965      	ldr	r5, [r4, #20]
 800a39a:	6909      	ldr	r1, [r1, #16]
 800a39c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3a0:	eba3 0901 	sub.w	r9, r3, r1
 800a3a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3a8:	1c7b      	adds	r3, r7, #1
 800a3aa:	444b      	add	r3, r9
 800a3ac:	106d      	asrs	r5, r5, #1
 800a3ae:	429d      	cmp	r5, r3
 800a3b0:	bf38      	it	cc
 800a3b2:	461d      	movcc	r5, r3
 800a3b4:	0553      	lsls	r3, r2, #21
 800a3b6:	d527      	bpl.n	800a408 <__ssputs_r+0x8c>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f7ff ff53 	bl	800a264 <_malloc_r>
 800a3be:	4606      	mov	r6, r0
 800a3c0:	b360      	cbz	r0, 800a41c <__ssputs_r+0xa0>
 800a3c2:	6921      	ldr	r1, [r4, #16]
 800a3c4:	464a      	mov	r2, r9
 800a3c6:	f000 faeb 	bl	800a9a0 <memcpy>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	6126      	str	r6, [r4, #16]
 800a3d8:	6165      	str	r5, [r4, #20]
 800a3da:	444e      	add	r6, r9
 800a3dc:	eba5 0509 	sub.w	r5, r5, r9
 800a3e0:	6026      	str	r6, [r4, #0]
 800a3e2:	60a5      	str	r5, [r4, #8]
 800a3e4:	463e      	mov	r6, r7
 800a3e6:	42be      	cmp	r6, r7
 800a3e8:	d900      	bls.n	800a3ec <__ssputs_r+0x70>
 800a3ea:	463e      	mov	r6, r7
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	4632      	mov	r2, r6
 800a3f0:	4641      	mov	r1, r8
 800a3f2:	f000 faab 	bl	800a94c <memmove>
 800a3f6:	68a3      	ldr	r3, [r4, #8]
 800a3f8:	1b9b      	subs	r3, r3, r6
 800a3fa:	60a3      	str	r3, [r4, #8]
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	4433      	add	r3, r6
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	2000      	movs	r0, #0
 800a404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a408:	462a      	mov	r2, r5
 800a40a:	f000 fad7 	bl	800a9bc <_realloc_r>
 800a40e:	4606      	mov	r6, r0
 800a410:	2800      	cmp	r0, #0
 800a412:	d1e0      	bne.n	800a3d6 <__ssputs_r+0x5a>
 800a414:	6921      	ldr	r1, [r4, #16]
 800a416:	4650      	mov	r0, sl
 800a418:	f7ff feb8 	bl	800a18c <_free_r>
 800a41c:	230c      	movs	r3, #12
 800a41e:	f8ca 3000 	str.w	r3, [sl]
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	f04f 30ff 	mov.w	r0, #4294967295
 800a42e:	e7e9      	b.n	800a404 <__ssputs_r+0x88>

0800a430 <_svfiprintf_r>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	4698      	mov	r8, r3
 800a436:	898b      	ldrh	r3, [r1, #12]
 800a438:	061b      	lsls	r3, r3, #24
 800a43a:	b09d      	sub	sp, #116	; 0x74
 800a43c:	4607      	mov	r7, r0
 800a43e:	460d      	mov	r5, r1
 800a440:	4614      	mov	r4, r2
 800a442:	d50e      	bpl.n	800a462 <_svfiprintf_r+0x32>
 800a444:	690b      	ldr	r3, [r1, #16]
 800a446:	b963      	cbnz	r3, 800a462 <_svfiprintf_r+0x32>
 800a448:	2140      	movs	r1, #64	; 0x40
 800a44a:	f7ff ff0b 	bl	800a264 <_malloc_r>
 800a44e:	6028      	str	r0, [r5, #0]
 800a450:	6128      	str	r0, [r5, #16]
 800a452:	b920      	cbnz	r0, 800a45e <_svfiprintf_r+0x2e>
 800a454:	230c      	movs	r3, #12
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	e0d0      	b.n	800a600 <_svfiprintf_r+0x1d0>
 800a45e:	2340      	movs	r3, #64	; 0x40
 800a460:	616b      	str	r3, [r5, #20]
 800a462:	2300      	movs	r3, #0
 800a464:	9309      	str	r3, [sp, #36]	; 0x24
 800a466:	2320      	movs	r3, #32
 800a468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a46c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a470:	2330      	movs	r3, #48	; 0x30
 800a472:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a618 <_svfiprintf_r+0x1e8>
 800a476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a47a:	f04f 0901 	mov.w	r9, #1
 800a47e:	4623      	mov	r3, r4
 800a480:	469a      	mov	sl, r3
 800a482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a486:	b10a      	cbz	r2, 800a48c <_svfiprintf_r+0x5c>
 800a488:	2a25      	cmp	r2, #37	; 0x25
 800a48a:	d1f9      	bne.n	800a480 <_svfiprintf_r+0x50>
 800a48c:	ebba 0b04 	subs.w	fp, sl, r4
 800a490:	d00b      	beq.n	800a4aa <_svfiprintf_r+0x7a>
 800a492:	465b      	mov	r3, fp
 800a494:	4622      	mov	r2, r4
 800a496:	4629      	mov	r1, r5
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff ff6f 	bl	800a37c <__ssputs_r>
 800a49e:	3001      	adds	r0, #1
 800a4a0:	f000 80a9 	beq.w	800a5f6 <_svfiprintf_r+0x1c6>
 800a4a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a6:	445a      	add	r2, fp
 800a4a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 80a1 	beq.w	800a5f6 <_svfiprintf_r+0x1c6>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4be:	f10a 0a01 	add.w	sl, sl, #1
 800a4c2:	9304      	str	r3, [sp, #16]
 800a4c4:	9307      	str	r3, [sp, #28]
 800a4c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a4cc:	4654      	mov	r4, sl
 800a4ce:	2205      	movs	r2, #5
 800a4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d4:	4850      	ldr	r0, [pc, #320]	; (800a618 <_svfiprintf_r+0x1e8>)
 800a4d6:	f7f5 fe8b 	bl	80001f0 <memchr>
 800a4da:	9a04      	ldr	r2, [sp, #16]
 800a4dc:	b9d8      	cbnz	r0, 800a516 <_svfiprintf_r+0xe6>
 800a4de:	06d0      	lsls	r0, r2, #27
 800a4e0:	bf44      	itt	mi
 800a4e2:	2320      	movmi	r3, #32
 800a4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e8:	0711      	lsls	r1, r2, #28
 800a4ea:	bf44      	itt	mi
 800a4ec:	232b      	movmi	r3, #43	; 0x2b
 800a4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f8:	d015      	beq.n	800a526 <_svfiprintf_r+0xf6>
 800a4fa:	9a07      	ldr	r2, [sp, #28]
 800a4fc:	4654      	mov	r4, sl
 800a4fe:	2000      	movs	r0, #0
 800a500:	f04f 0c0a 	mov.w	ip, #10
 800a504:	4621      	mov	r1, r4
 800a506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a50a:	3b30      	subs	r3, #48	; 0x30
 800a50c:	2b09      	cmp	r3, #9
 800a50e:	d94d      	bls.n	800a5ac <_svfiprintf_r+0x17c>
 800a510:	b1b0      	cbz	r0, 800a540 <_svfiprintf_r+0x110>
 800a512:	9207      	str	r2, [sp, #28]
 800a514:	e014      	b.n	800a540 <_svfiprintf_r+0x110>
 800a516:	eba0 0308 	sub.w	r3, r0, r8
 800a51a:	fa09 f303 	lsl.w	r3, r9, r3
 800a51e:	4313      	orrs	r3, r2
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	46a2      	mov	sl, r4
 800a524:	e7d2      	b.n	800a4cc <_svfiprintf_r+0x9c>
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	1d19      	adds	r1, r3, #4
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	9103      	str	r1, [sp, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bfbb      	ittet	lt
 800a532:	425b      	neglt	r3, r3
 800a534:	f042 0202 	orrlt.w	r2, r2, #2
 800a538:	9307      	strge	r3, [sp, #28]
 800a53a:	9307      	strlt	r3, [sp, #28]
 800a53c:	bfb8      	it	lt
 800a53e:	9204      	strlt	r2, [sp, #16]
 800a540:	7823      	ldrb	r3, [r4, #0]
 800a542:	2b2e      	cmp	r3, #46	; 0x2e
 800a544:	d10c      	bne.n	800a560 <_svfiprintf_r+0x130>
 800a546:	7863      	ldrb	r3, [r4, #1]
 800a548:	2b2a      	cmp	r3, #42	; 0x2a
 800a54a:	d134      	bne.n	800a5b6 <_svfiprintf_r+0x186>
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	9203      	str	r2, [sp, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfb8      	it	lt
 800a558:	f04f 33ff 	movlt.w	r3, #4294967295
 800a55c:	3402      	adds	r4, #2
 800a55e:	9305      	str	r3, [sp, #20]
 800a560:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a628 <_svfiprintf_r+0x1f8>
 800a564:	7821      	ldrb	r1, [r4, #0]
 800a566:	2203      	movs	r2, #3
 800a568:	4650      	mov	r0, sl
 800a56a:	f7f5 fe41 	bl	80001f0 <memchr>
 800a56e:	b138      	cbz	r0, 800a580 <_svfiprintf_r+0x150>
 800a570:	9b04      	ldr	r3, [sp, #16]
 800a572:	eba0 000a 	sub.w	r0, r0, sl
 800a576:	2240      	movs	r2, #64	; 0x40
 800a578:	4082      	lsls	r2, r0
 800a57a:	4313      	orrs	r3, r2
 800a57c:	3401      	adds	r4, #1
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a584:	4825      	ldr	r0, [pc, #148]	; (800a61c <_svfiprintf_r+0x1ec>)
 800a586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a58a:	2206      	movs	r2, #6
 800a58c:	f7f5 fe30 	bl	80001f0 <memchr>
 800a590:	2800      	cmp	r0, #0
 800a592:	d038      	beq.n	800a606 <_svfiprintf_r+0x1d6>
 800a594:	4b22      	ldr	r3, [pc, #136]	; (800a620 <_svfiprintf_r+0x1f0>)
 800a596:	bb1b      	cbnz	r3, 800a5e0 <_svfiprintf_r+0x1b0>
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	3307      	adds	r3, #7
 800a59c:	f023 0307 	bic.w	r3, r3, #7
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	9303      	str	r3, [sp, #12]
 800a5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a6:	4433      	add	r3, r6
 800a5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5aa:	e768      	b.n	800a47e <_svfiprintf_r+0x4e>
 800a5ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	e7a6      	b.n	800a504 <_svfiprintf_r+0xd4>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	3401      	adds	r4, #1
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f04f 0c0a 	mov.w	ip, #10
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5c8:	3a30      	subs	r2, #48	; 0x30
 800a5ca:	2a09      	cmp	r2, #9
 800a5cc:	d903      	bls.n	800a5d6 <_svfiprintf_r+0x1a6>
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0c6      	beq.n	800a560 <_svfiprintf_r+0x130>
 800a5d2:	9105      	str	r1, [sp, #20]
 800a5d4:	e7c4      	b.n	800a560 <_svfiprintf_r+0x130>
 800a5d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5da:	4604      	mov	r4, r0
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e7f0      	b.n	800a5c2 <_svfiprintf_r+0x192>
 800a5e0:	ab03      	add	r3, sp, #12
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	462a      	mov	r2, r5
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	; (800a624 <_svfiprintf_r+0x1f4>)
 800a5e8:	a904      	add	r1, sp, #16
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	f3af 8000 	nop.w
 800a5f0:	1c42      	adds	r2, r0, #1
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	d1d6      	bne.n	800a5a4 <_svfiprintf_r+0x174>
 800a5f6:	89ab      	ldrh	r3, [r5, #12]
 800a5f8:	065b      	lsls	r3, r3, #25
 800a5fa:	f53f af2d 	bmi.w	800a458 <_svfiprintf_r+0x28>
 800a5fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a600:	b01d      	add	sp, #116	; 0x74
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	ab03      	add	r3, sp, #12
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	462a      	mov	r2, r5
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <_svfiprintf_r+0x1f4>)
 800a60e:	a904      	add	r1, sp, #16
 800a610:	4638      	mov	r0, r7
 800a612:	f000 f879 	bl	800a708 <_printf_i>
 800a616:	e7eb      	b.n	800a5f0 <_svfiprintf_r+0x1c0>
 800a618:	0800abc5 	.word	0x0800abc5
 800a61c:	0800abcf 	.word	0x0800abcf
 800a620:	00000000 	.word	0x00000000
 800a624:	0800a37d 	.word	0x0800a37d
 800a628:	0800abcb 	.word	0x0800abcb

0800a62c <_printf_common>:
 800a62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a630:	4616      	mov	r6, r2
 800a632:	4699      	mov	r9, r3
 800a634:	688a      	ldr	r2, [r1, #8]
 800a636:	690b      	ldr	r3, [r1, #16]
 800a638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a63c:	4293      	cmp	r3, r2
 800a63e:	bfb8      	it	lt
 800a640:	4613      	movlt	r3, r2
 800a642:	6033      	str	r3, [r6, #0]
 800a644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a648:	4607      	mov	r7, r0
 800a64a:	460c      	mov	r4, r1
 800a64c:	b10a      	cbz	r2, 800a652 <_printf_common+0x26>
 800a64e:	3301      	adds	r3, #1
 800a650:	6033      	str	r3, [r6, #0]
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	0699      	lsls	r1, r3, #26
 800a656:	bf42      	ittt	mi
 800a658:	6833      	ldrmi	r3, [r6, #0]
 800a65a:	3302      	addmi	r3, #2
 800a65c:	6033      	strmi	r3, [r6, #0]
 800a65e:	6825      	ldr	r5, [r4, #0]
 800a660:	f015 0506 	ands.w	r5, r5, #6
 800a664:	d106      	bne.n	800a674 <_printf_common+0x48>
 800a666:	f104 0a19 	add.w	sl, r4, #25
 800a66a:	68e3      	ldr	r3, [r4, #12]
 800a66c:	6832      	ldr	r2, [r6, #0]
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	42ab      	cmp	r3, r5
 800a672:	dc26      	bgt.n	800a6c2 <_printf_common+0x96>
 800a674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a678:	1e13      	subs	r3, r2, #0
 800a67a:	6822      	ldr	r2, [r4, #0]
 800a67c:	bf18      	it	ne
 800a67e:	2301      	movne	r3, #1
 800a680:	0692      	lsls	r2, r2, #26
 800a682:	d42b      	bmi.n	800a6dc <_printf_common+0xb0>
 800a684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a688:	4649      	mov	r1, r9
 800a68a:	4638      	mov	r0, r7
 800a68c:	47c0      	blx	r8
 800a68e:	3001      	adds	r0, #1
 800a690:	d01e      	beq.n	800a6d0 <_printf_common+0xa4>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	6922      	ldr	r2, [r4, #16]
 800a696:	f003 0306 	and.w	r3, r3, #6
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	bf02      	ittt	eq
 800a69e:	68e5      	ldreq	r5, [r4, #12]
 800a6a0:	6833      	ldreq	r3, [r6, #0]
 800a6a2:	1aed      	subeq	r5, r5, r3
 800a6a4:	68a3      	ldr	r3, [r4, #8]
 800a6a6:	bf0c      	ite	eq
 800a6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6ac:	2500      	movne	r5, #0
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	bfc4      	itt	gt
 800a6b2:	1a9b      	subgt	r3, r3, r2
 800a6b4:	18ed      	addgt	r5, r5, r3
 800a6b6:	2600      	movs	r6, #0
 800a6b8:	341a      	adds	r4, #26
 800a6ba:	42b5      	cmp	r5, r6
 800a6bc:	d11a      	bne.n	800a6f4 <_printf_common+0xc8>
 800a6be:	2000      	movs	r0, #0
 800a6c0:	e008      	b.n	800a6d4 <_printf_common+0xa8>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	4652      	mov	r2, sl
 800a6c6:	4649      	mov	r1, r9
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	47c0      	blx	r8
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	d103      	bne.n	800a6d8 <_printf_common+0xac>
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d8:	3501      	adds	r5, #1
 800a6da:	e7c6      	b.n	800a66a <_printf_common+0x3e>
 800a6dc:	18e1      	adds	r1, r4, r3
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	2030      	movs	r0, #48	; 0x30
 800a6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6e6:	4422      	add	r2, r4
 800a6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6f0:	3302      	adds	r3, #2
 800a6f2:	e7c7      	b.n	800a684 <_printf_common+0x58>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	47c0      	blx	r8
 800a6fe:	3001      	adds	r0, #1
 800a700:	d0e6      	beq.n	800a6d0 <_printf_common+0xa4>
 800a702:	3601      	adds	r6, #1
 800a704:	e7d9      	b.n	800a6ba <_printf_common+0x8e>
	...

0800a708 <_printf_i>:
 800a708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a70c:	7e0f      	ldrb	r7, [r1, #24]
 800a70e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a710:	2f78      	cmp	r7, #120	; 0x78
 800a712:	4691      	mov	r9, r2
 800a714:	4680      	mov	r8, r0
 800a716:	460c      	mov	r4, r1
 800a718:	469a      	mov	sl, r3
 800a71a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a71e:	d807      	bhi.n	800a730 <_printf_i+0x28>
 800a720:	2f62      	cmp	r7, #98	; 0x62
 800a722:	d80a      	bhi.n	800a73a <_printf_i+0x32>
 800a724:	2f00      	cmp	r7, #0
 800a726:	f000 80d4 	beq.w	800a8d2 <_printf_i+0x1ca>
 800a72a:	2f58      	cmp	r7, #88	; 0x58
 800a72c:	f000 80c0 	beq.w	800a8b0 <_printf_i+0x1a8>
 800a730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a738:	e03a      	b.n	800a7b0 <_printf_i+0xa8>
 800a73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a73e:	2b15      	cmp	r3, #21
 800a740:	d8f6      	bhi.n	800a730 <_printf_i+0x28>
 800a742:	a101      	add	r1, pc, #4	; (adr r1, 800a748 <_printf_i+0x40>)
 800a744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a748:	0800a7a1 	.word	0x0800a7a1
 800a74c:	0800a7b5 	.word	0x0800a7b5
 800a750:	0800a731 	.word	0x0800a731
 800a754:	0800a731 	.word	0x0800a731
 800a758:	0800a731 	.word	0x0800a731
 800a75c:	0800a731 	.word	0x0800a731
 800a760:	0800a7b5 	.word	0x0800a7b5
 800a764:	0800a731 	.word	0x0800a731
 800a768:	0800a731 	.word	0x0800a731
 800a76c:	0800a731 	.word	0x0800a731
 800a770:	0800a731 	.word	0x0800a731
 800a774:	0800a8b9 	.word	0x0800a8b9
 800a778:	0800a7e1 	.word	0x0800a7e1
 800a77c:	0800a873 	.word	0x0800a873
 800a780:	0800a731 	.word	0x0800a731
 800a784:	0800a731 	.word	0x0800a731
 800a788:	0800a8db 	.word	0x0800a8db
 800a78c:	0800a731 	.word	0x0800a731
 800a790:	0800a7e1 	.word	0x0800a7e1
 800a794:	0800a731 	.word	0x0800a731
 800a798:	0800a731 	.word	0x0800a731
 800a79c:	0800a87b 	.word	0x0800a87b
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	1d1a      	adds	r2, r3, #4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	602a      	str	r2, [r5, #0]
 800a7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e09f      	b.n	800a8f4 <_printf_i+0x1ec>
 800a7b4:	6820      	ldr	r0, [r4, #0]
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	0607      	lsls	r7, r0, #24
 800a7ba:	f103 0104 	add.w	r1, r3, #4
 800a7be:	6029      	str	r1, [r5, #0]
 800a7c0:	d501      	bpl.n	800a7c6 <_printf_i+0xbe>
 800a7c2:	681e      	ldr	r6, [r3, #0]
 800a7c4:	e003      	b.n	800a7ce <_printf_i+0xc6>
 800a7c6:	0646      	lsls	r6, r0, #25
 800a7c8:	d5fb      	bpl.n	800a7c2 <_printf_i+0xba>
 800a7ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	da03      	bge.n	800a7da <_printf_i+0xd2>
 800a7d2:	232d      	movs	r3, #45	; 0x2d
 800a7d4:	4276      	negs	r6, r6
 800a7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7da:	485a      	ldr	r0, [pc, #360]	; (800a944 <_printf_i+0x23c>)
 800a7dc:	230a      	movs	r3, #10
 800a7de:	e012      	b.n	800a806 <_printf_i+0xfe>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	6820      	ldr	r0, [r4, #0]
 800a7e4:	1d19      	adds	r1, r3, #4
 800a7e6:	6029      	str	r1, [r5, #0]
 800a7e8:	0605      	lsls	r5, r0, #24
 800a7ea:	d501      	bpl.n	800a7f0 <_printf_i+0xe8>
 800a7ec:	681e      	ldr	r6, [r3, #0]
 800a7ee:	e002      	b.n	800a7f6 <_printf_i+0xee>
 800a7f0:	0641      	lsls	r1, r0, #25
 800a7f2:	d5fb      	bpl.n	800a7ec <_printf_i+0xe4>
 800a7f4:	881e      	ldrh	r6, [r3, #0]
 800a7f6:	4853      	ldr	r0, [pc, #332]	; (800a944 <_printf_i+0x23c>)
 800a7f8:	2f6f      	cmp	r7, #111	; 0x6f
 800a7fa:	bf0c      	ite	eq
 800a7fc:	2308      	moveq	r3, #8
 800a7fe:	230a      	movne	r3, #10
 800a800:	2100      	movs	r1, #0
 800a802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a806:	6865      	ldr	r5, [r4, #4]
 800a808:	60a5      	str	r5, [r4, #8]
 800a80a:	2d00      	cmp	r5, #0
 800a80c:	bfa2      	ittt	ge
 800a80e:	6821      	ldrge	r1, [r4, #0]
 800a810:	f021 0104 	bicge.w	r1, r1, #4
 800a814:	6021      	strge	r1, [r4, #0]
 800a816:	b90e      	cbnz	r6, 800a81c <_printf_i+0x114>
 800a818:	2d00      	cmp	r5, #0
 800a81a:	d04b      	beq.n	800a8b4 <_printf_i+0x1ac>
 800a81c:	4615      	mov	r5, r2
 800a81e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a822:	fb03 6711 	mls	r7, r3, r1, r6
 800a826:	5dc7      	ldrb	r7, [r0, r7]
 800a828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a82c:	4637      	mov	r7, r6
 800a82e:	42bb      	cmp	r3, r7
 800a830:	460e      	mov	r6, r1
 800a832:	d9f4      	bls.n	800a81e <_printf_i+0x116>
 800a834:	2b08      	cmp	r3, #8
 800a836:	d10b      	bne.n	800a850 <_printf_i+0x148>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	07de      	lsls	r6, r3, #31
 800a83c:	d508      	bpl.n	800a850 <_printf_i+0x148>
 800a83e:	6923      	ldr	r3, [r4, #16]
 800a840:	6861      	ldr	r1, [r4, #4]
 800a842:	4299      	cmp	r1, r3
 800a844:	bfde      	ittt	le
 800a846:	2330      	movle	r3, #48	; 0x30
 800a848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a84c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a850:	1b52      	subs	r2, r2, r5
 800a852:	6122      	str	r2, [r4, #16]
 800a854:	f8cd a000 	str.w	sl, [sp]
 800a858:	464b      	mov	r3, r9
 800a85a:	aa03      	add	r2, sp, #12
 800a85c:	4621      	mov	r1, r4
 800a85e:	4640      	mov	r0, r8
 800a860:	f7ff fee4 	bl	800a62c <_printf_common>
 800a864:	3001      	adds	r0, #1
 800a866:	d14a      	bne.n	800a8fe <_printf_i+0x1f6>
 800a868:	f04f 30ff 	mov.w	r0, #4294967295
 800a86c:	b004      	add	sp, #16
 800a86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	f043 0320 	orr.w	r3, r3, #32
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	4833      	ldr	r0, [pc, #204]	; (800a948 <_printf_i+0x240>)
 800a87c:	2778      	movs	r7, #120	; 0x78
 800a87e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	6829      	ldr	r1, [r5, #0]
 800a886:	061f      	lsls	r7, r3, #24
 800a888:	f851 6b04 	ldr.w	r6, [r1], #4
 800a88c:	d402      	bmi.n	800a894 <_printf_i+0x18c>
 800a88e:	065f      	lsls	r7, r3, #25
 800a890:	bf48      	it	mi
 800a892:	b2b6      	uxthmi	r6, r6
 800a894:	07df      	lsls	r7, r3, #31
 800a896:	bf48      	it	mi
 800a898:	f043 0320 	orrmi.w	r3, r3, #32
 800a89c:	6029      	str	r1, [r5, #0]
 800a89e:	bf48      	it	mi
 800a8a0:	6023      	strmi	r3, [r4, #0]
 800a8a2:	b91e      	cbnz	r6, 800a8ac <_printf_i+0x1a4>
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	f023 0320 	bic.w	r3, r3, #32
 800a8aa:	6023      	str	r3, [r4, #0]
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	e7a7      	b.n	800a800 <_printf_i+0xf8>
 800a8b0:	4824      	ldr	r0, [pc, #144]	; (800a944 <_printf_i+0x23c>)
 800a8b2:	e7e4      	b.n	800a87e <_printf_i+0x176>
 800a8b4:	4615      	mov	r5, r2
 800a8b6:	e7bd      	b.n	800a834 <_printf_i+0x12c>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	6826      	ldr	r6, [r4, #0]
 800a8bc:	6961      	ldr	r1, [r4, #20]
 800a8be:	1d18      	adds	r0, r3, #4
 800a8c0:	6028      	str	r0, [r5, #0]
 800a8c2:	0635      	lsls	r5, r6, #24
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	d501      	bpl.n	800a8cc <_printf_i+0x1c4>
 800a8c8:	6019      	str	r1, [r3, #0]
 800a8ca:	e002      	b.n	800a8d2 <_printf_i+0x1ca>
 800a8cc:	0670      	lsls	r0, r6, #25
 800a8ce:	d5fb      	bpl.n	800a8c8 <_printf_i+0x1c0>
 800a8d0:	8019      	strh	r1, [r3, #0]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	6123      	str	r3, [r4, #16]
 800a8d6:	4615      	mov	r5, r2
 800a8d8:	e7bc      	b.n	800a854 <_printf_i+0x14c>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	1d1a      	adds	r2, r3, #4
 800a8de:	602a      	str	r2, [r5, #0]
 800a8e0:	681d      	ldr	r5, [r3, #0]
 800a8e2:	6862      	ldr	r2, [r4, #4]
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f7f5 fc82 	bl	80001f0 <memchr>
 800a8ec:	b108      	cbz	r0, 800a8f2 <_printf_i+0x1ea>
 800a8ee:	1b40      	subs	r0, r0, r5
 800a8f0:	6060      	str	r0, [r4, #4]
 800a8f2:	6863      	ldr	r3, [r4, #4]
 800a8f4:	6123      	str	r3, [r4, #16]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8fc:	e7aa      	b.n	800a854 <_printf_i+0x14c>
 800a8fe:	6923      	ldr	r3, [r4, #16]
 800a900:	462a      	mov	r2, r5
 800a902:	4649      	mov	r1, r9
 800a904:	4640      	mov	r0, r8
 800a906:	47d0      	blx	sl
 800a908:	3001      	adds	r0, #1
 800a90a:	d0ad      	beq.n	800a868 <_printf_i+0x160>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	079b      	lsls	r3, r3, #30
 800a910:	d413      	bmi.n	800a93a <_printf_i+0x232>
 800a912:	68e0      	ldr	r0, [r4, #12]
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	4298      	cmp	r0, r3
 800a918:	bfb8      	it	lt
 800a91a:	4618      	movlt	r0, r3
 800a91c:	e7a6      	b.n	800a86c <_printf_i+0x164>
 800a91e:	2301      	movs	r3, #1
 800a920:	4632      	mov	r2, r6
 800a922:	4649      	mov	r1, r9
 800a924:	4640      	mov	r0, r8
 800a926:	47d0      	blx	sl
 800a928:	3001      	adds	r0, #1
 800a92a:	d09d      	beq.n	800a868 <_printf_i+0x160>
 800a92c:	3501      	adds	r5, #1
 800a92e:	68e3      	ldr	r3, [r4, #12]
 800a930:	9903      	ldr	r1, [sp, #12]
 800a932:	1a5b      	subs	r3, r3, r1
 800a934:	42ab      	cmp	r3, r5
 800a936:	dcf2      	bgt.n	800a91e <_printf_i+0x216>
 800a938:	e7eb      	b.n	800a912 <_printf_i+0x20a>
 800a93a:	2500      	movs	r5, #0
 800a93c:	f104 0619 	add.w	r6, r4, #25
 800a940:	e7f5      	b.n	800a92e <_printf_i+0x226>
 800a942:	bf00      	nop
 800a944:	0800abd6 	.word	0x0800abd6
 800a948:	0800abe7 	.word	0x0800abe7

0800a94c <memmove>:
 800a94c:	4288      	cmp	r0, r1
 800a94e:	b510      	push	{r4, lr}
 800a950:	eb01 0402 	add.w	r4, r1, r2
 800a954:	d902      	bls.n	800a95c <memmove+0x10>
 800a956:	4284      	cmp	r4, r0
 800a958:	4623      	mov	r3, r4
 800a95a:	d807      	bhi.n	800a96c <memmove+0x20>
 800a95c:	1e43      	subs	r3, r0, #1
 800a95e:	42a1      	cmp	r1, r4
 800a960:	d008      	beq.n	800a974 <memmove+0x28>
 800a962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a96a:	e7f8      	b.n	800a95e <memmove+0x12>
 800a96c:	4402      	add	r2, r0
 800a96e:	4601      	mov	r1, r0
 800a970:	428a      	cmp	r2, r1
 800a972:	d100      	bne.n	800a976 <memmove+0x2a>
 800a974:	bd10      	pop	{r4, pc}
 800a976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a97e:	e7f7      	b.n	800a970 <memmove+0x24>

0800a980 <_sbrk_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4d06      	ldr	r5, [pc, #24]	; (800a99c <_sbrk_r+0x1c>)
 800a984:	2300      	movs	r3, #0
 800a986:	4604      	mov	r4, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	602b      	str	r3, [r5, #0]
 800a98c:	f7f6 f8d6 	bl	8000b3c <_sbrk>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_sbrk_r+0x1a>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_sbrk_r+0x1a>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	20001dbc 	.word	0x20001dbc

0800a9a0 <memcpy>:
 800a9a0:	440a      	add	r2, r1
 800a9a2:	4291      	cmp	r1, r2
 800a9a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9a8:	d100      	bne.n	800a9ac <memcpy+0xc>
 800a9aa:	4770      	bx	lr
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	d1f9      	bne.n	800a9ae <memcpy+0xe>
 800a9ba:	bd10      	pop	{r4, pc}

0800a9bc <_realloc_r>:
 800a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	4614      	mov	r4, r2
 800a9c4:	460e      	mov	r6, r1
 800a9c6:	b921      	cbnz	r1, 800a9d2 <_realloc_r+0x16>
 800a9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	f7ff bc49 	b.w	800a264 <_malloc_r>
 800a9d2:	b92a      	cbnz	r2, 800a9e0 <_realloc_r+0x24>
 800a9d4:	f7ff fbda 	bl	800a18c <_free_r>
 800a9d8:	4625      	mov	r5, r4
 800a9da:	4628      	mov	r0, r5
 800a9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e0:	f000 f81b 	bl	800aa1a <_malloc_usable_size_r>
 800a9e4:	4284      	cmp	r4, r0
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	d802      	bhi.n	800a9f0 <_realloc_r+0x34>
 800a9ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9ee:	d812      	bhi.n	800aa16 <_realloc_r+0x5a>
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	f7ff fc36 	bl	800a264 <_malloc_r>
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d0ed      	beq.n	800a9da <_realloc_r+0x1e>
 800a9fe:	42bc      	cmp	r4, r7
 800aa00:	4622      	mov	r2, r4
 800aa02:	4631      	mov	r1, r6
 800aa04:	bf28      	it	cs
 800aa06:	463a      	movcs	r2, r7
 800aa08:	f7ff ffca 	bl	800a9a0 <memcpy>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4640      	mov	r0, r8
 800aa10:	f7ff fbbc 	bl	800a18c <_free_r>
 800aa14:	e7e1      	b.n	800a9da <_realloc_r+0x1e>
 800aa16:	4635      	mov	r5, r6
 800aa18:	e7df      	b.n	800a9da <_realloc_r+0x1e>

0800aa1a <_malloc_usable_size_r>:
 800aa1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1e:	1f18      	subs	r0, r3, #4
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bfbc      	itt	lt
 800aa24:	580b      	ldrlt	r3, [r1, r0]
 800aa26:	18c0      	addlt	r0, r0, r3
 800aa28:	4770      	bx	lr
	...

0800aa2c <_init>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	bf00      	nop
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr

0800aa38 <_fini>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr
