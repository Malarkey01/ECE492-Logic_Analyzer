
Logic Analyzer V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800acf4  0800acf4  0000bcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aea8  0800aea8  0000c1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aea8  0800aea8  0000bea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aeb0  0800aeb0  0000c1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeb0  0800aeb0  0000beb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aeb4  0800aeb4  0000beb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800aeb8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d0  2**0
                  CONTENTS
 10 .bss          00001d94  200001d0  200001d0  0000c1d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f64  20001f64  0000c1d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fdc  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c0  00000000  00000000  0001f1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  000224a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5a  00000000  00000000  000234f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002300c  00000000  00000000  0002414a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e50  00000000  00000000  00047156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca38a  00000000  00000000  0005cfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127330  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004854  00000000  00000000  00127374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0012bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acdc 	.word	0x0800acdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	0800acdc 	.word	0x0800acdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
	SixteenBit = 0xFFFF
} NumBits;


int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000294:	f000 fd1c 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f876 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f974 	bl	8000588 <MX_GPIO_Init>
  MX_TIM2_Init(0x00008CA0);
 80002a0:	f648 40a0 	movw	r0, #36000	@ 0x8ca0
 80002a4:	f000 f8d4 	bl	8000450 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80002a8:	f009 fb4a 	bl	8009940 <MX_USB_DEVICE_Init>
  MX_TIM16_Init(0xFFFF, 1);
 80002ac:	2101      	movs	r1, #1
 80002ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80002b2:	f000 f933 	bl	800051c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  state = preTrigger;
 80002b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000364 <main+0xd4>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	701a      	strb	r2, [r3, #0]

 // HAL_TIM_Base_Start_IT(&htim16);//test remove later.
  while (1)
    {
      /* USER CODE END WHILE */
  	  switch(state){
 80002bc:	4b29      	ldr	r3, [pc, #164]	@ (8000364 <main+0xd4>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d048      	beq.n	8000356 <main+0xc6>
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	dcf9      	bgt.n	80002bc <main+0x2c>
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d046      	beq.n	800035a <main+0xca>
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d1f5      	bne.n	80002bc <main+0x2c>
  	  	  	  case triggerState:

  	  	  		  break;
  	  	  	  case postTrigger:

  	  	  		 trigger = 0;
 80002d0:	4b25      	ldr	r3, [pc, #148]	@ (8000368 <main+0xd8>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
  	  	  		 //Send_Large_USB_Data((void*)buffer, 150 * sizeof(uint16_t));
				 counter++;
 80002d6:	4b25      	ldr	r3, [pc, #148]	@ (800036c <main+0xdc>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	4a23      	ldr	r2, [pc, #140]	@ (800036c <main+0xdc>)
 80002de:	6013      	str	r3, [r2, #0]
  	  	  		 sprintf(msg, "%hu\r\n", buffer[val]);
 80002e0:	4b23      	ldr	r3, [pc, #140]	@ (8000370 <main+0xe0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a23      	ldr	r2, [pc, #140]	@ (8000374 <main+0xe4>)
 80002e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ea:	461a      	mov	r2, r3
 80002ec:	4922      	ldr	r1, [pc, #136]	@ (8000378 <main+0xe8>)
 80002ee:	4823      	ldr	r0, [pc, #140]	@ (800037c <main+0xec>)
 80002f0:	f00a f854 	bl	800a39c <siprintf>
  	  	  		 CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 80002f4:	4821      	ldr	r0, [pc, #132]	@ (800037c <main+0xec>)
 80002f6:	f7ff ff73 	bl	80001e0 <strlen>
 80002fa:	4603      	mov	r3, r0
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	4619      	mov	r1, r3
 8000300:	481e      	ldr	r0, [pc, #120]	@ (800037c <main+0xec>)
 8000302:	f009 fbdd 	bl	8009ac0 <CDC_Transmit_FS>
  	  	  		 HAL_Delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 fd48 	bl	8000d9c <HAL_Delay>
  	  	  		 val++;
 800030c:	4b18      	ldr	r3, [pc, #96]	@ (8000370 <main+0xe0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	4a17      	ldr	r2, [pc, #92]	@ (8000370 <main+0xe0>)
 8000314:	6013      	str	r3, [r2, #0]
/// creat a counter starting from 0 to 1024 and send the data from bufferpointer to 1024
  	  	  		 if(val == BUFFER_SIZE){
 8000316:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <main+0xe0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800031e:	d102      	bne.n	8000326 <main+0x96>
  	  	  			 val = 0;
 8000320:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <main+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
  	  	  		 }
  	  	  		 if (val == bufferPointer) {
 8000326:	4b16      	ldr	r3, [pc, #88]	@ (8000380 <main+0xf0>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <main+0xe0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	d114      	bne.n	800035e <main+0xce>
  	  	  			counter = 0;
 8000334:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <main+0xdc>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
  	  	  			memset(buffer, 0, sizeof(buffer));
 800033a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800033e:	2100      	movs	r1, #0
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <main+0xe4>)
 8000342:	f00a f84b 	bl	800a3dc <memset>
					HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000346:	2100      	movs	r1, #0
 8000348:	480e      	ldr	r0, [pc, #56]	@ (8000384 <main+0xf4>)
 800034a:	f004 fb1f 	bl	800498c <HAL_TIM_PWM_Start_IT>
					state = preTrigger;
 800034e:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <main+0xd4>)
 8000350:	2202      	movs	r2, #2
 8000352:	701a      	strb	r2, [r3, #0]
  	  	  		 }
  	  	  			break;
 8000354:	e003      	b.n	800035e <main+0xce>
  	  	  		  break;
 8000356:	bf00      	nop
 8000358:	e7b0      	b.n	80002bc <main+0x2c>
  	  	  		  break;
 800035a:	bf00      	nop
 800035c:	e7ae      	b.n	80002bc <main+0x2c>
  	  	  			break;
 800035e:	bf00      	nop
  	  switch(state){
 8000360:	e7ac      	b.n	80002bc <main+0x2c>
 8000362:	bf00      	nop
 8000364:	20000a06 	.word	0x20000a06
 8000368:	200009f0 	.word	0x200009f0
 800036c:	20000a08 	.word	0x20000a08
 8000370:	20000a00 	.word	0x20000a00
 8000374:	200001ec 	.word	0x200001ec
 8000378:	0800acf4 	.word	0x0800acf4
 800037c:	200009f4 	.word	0x200009f4
 8000380:	200009ec 	.word	0x200009ec
 8000384:	20000a10 	.word	0x20000a10

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b0a6      	sub	sp, #152	@ 0x98
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000392:	2228      	movs	r2, #40	@ 0x28
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f00a f820 	bl	800a3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2258      	movs	r2, #88	@ 0x58
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f00a f812 	bl	800a3dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b8:	2301      	movs	r3, #1
 80003ba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c0:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	2302      	movs	r3, #2
 80003c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fc7e 	bl	8002ce8 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f2:	f000 fb39 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000406:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fcbc 	bl	8003d90 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800041e:	f000 fb23 	bl	8000a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_TIM16
 8000422:	f44f 0312 	mov.w	r3, #9568256	@ 0x920000
 8000426:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000428:	2300      	movs	r3, #0
 800042a:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800042c:	2300      	movs	r3, #0
 800042e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000430:	2300      	movs	r3, #0
 8000432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fe7a 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000442:	f000 fb11 	bl	8000a68 <Error_Handler>
  }
}
 8000446:	bf00      	nop
 8000448:	3798      	adds	r7, #152	@ 0x98
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(uint32_t period)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08c      	sub	sp, #48	@ 0x30
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
 8000474:	615a      	str	r2, [r3, #20]
 8000476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000478:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <MX_TIM2_Init+0xc8>)
 800047a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800047e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000480:	4b25      	ldr	r3, [pc, #148]	@ (8000518 <MX_TIM2_Init+0xc8>)
 8000482:	2201      	movs	r2, #1
 8000484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000486:	4b24      	ldr	r3, [pc, #144]	@ (8000518 <MX_TIM2_Init+0xc8>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = period-1;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3b01      	subs	r3, #1
 8000490:	4a21      	ldr	r2, [pc, #132]	@ (8000518 <MX_TIM2_Init+0xc8>)
 8000492:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000494:	4b20      	ldr	r3, [pc, #128]	@ (8000518 <MX_TIM2_Init+0xc8>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049a:	4b1f      	ldr	r3, [pc, #124]	@ (8000518 <MX_TIM2_Init+0xc8>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004a0:	481d      	ldr	r0, [pc, #116]	@ (8000518 <MX_TIM2_Init+0xc8>)
 80004a2:	f004 f980 	bl	80047a6 <HAL_TIM_PWM_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 80004ac:	f000 fadc 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004bc:	4619      	mov	r1, r3
 80004be:	4816      	ldr	r0, [pc, #88]	@ (8000518 <MX_TIM2_Init+0xc8>)
 80004c0:	f005 fab0 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004ca:	f000 facd 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ce:	2360      	movs	r3, #96	@ 0x60
 80004d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	480c      	ldr	r0, [pc, #48]	@ (8000518 <MX_TIM2_Init+0xc8>)
 80004e8:	f004 fd94 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 80004f2:	f000 fab9 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	2204      	movs	r2, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	4806      	ldr	r0, [pc, #24]	@ (8000518 <MX_TIM2_Init+0xc8>)
 8000500:	f004 fd88 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 800050a:	f000 faad 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	3730      	adds	r7, #48	@ 0x30
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000a10 	.word	0x20000a10

0800051c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(uint16_t period, uint16_t prescalar)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	460a      	mov	r2, r1
 8000526:	80fb      	strh	r3, [r7, #6]
 8000528:	4613      	mov	r3, r2
 800052a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <MX_TIM16_Init+0x64>)
 800052e:	4a15      	ldr	r2, [pc, #84]	@ (8000584 <MX_TIM16_Init+0x68>)
 8000530:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler =prescalar ;
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	4a12      	ldr	r2, [pc, #72]	@ (8000580 <MX_TIM16_Init+0x64>)
 8000536:	6053      	str	r3, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_TIM16_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = period;
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	4a0f      	ldr	r2, [pc, #60]	@ (8000580 <MX_TIM16_Init+0x64>)
 8000542:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000544:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <MX_TIM16_Init+0x64>)
 8000546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800054a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <MX_TIM16_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <MX_TIM16_Init+0x64>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <MX_TIM16_Init+0x64>)
 800055a:	f004 f807 	bl	800456c <HAL_TIM_Base_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM16_Init+0x4c>
  {
    Error_Handler();
 8000564:	f000 fa80 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <MX_TIM16_Init+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	68da      	ldr	r2, [r3, #12]
 800056e:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <MX_TIM16_Init+0x64>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f042 0201 	orr.w	r2, r2, #1
 8000576:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM16_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000a5c 	.word	0x20000a5c
 8000584:	40014400 	.word	0x40014400

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	@ 0x28
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a31      	ldr	r2, [pc, #196]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a25      	ldr	r2, [pc, #148]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_GPIO_Init+0xe0>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000606:	f000 fe89 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000610:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4812      	ldr	r0, [pc, #72]	@ (800066c <MX_GPIO_Init+0xe4>)
 8000622:	f000 fcf1 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000626:	2320      	movs	r3, #32
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f000 fce2 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000648:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800064e:	2302      	movs	r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_GPIO_Init+0xe8>)
 800065a:	f000 fcd5 	bl	8001008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	@ 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	48000800 	.word	0x48000800
 8000670:	48000400 	.word	0x48000400

08000674 <HAL_TIM_PeriodElapsedCallback>:
uint8_t trigEdge = 0x00; //Falling Edge
int triggerCount = 300;
int Cutter=0;

// ISR for Timer 16
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	if(htim == &htim16){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d113      	bne.n	80006ac <HAL_TIM_PeriodElapsedCallback+0x38>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000684:	2120      	movs	r1, #32
 8000686:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068a:	f000 fe5f 	bl	800134c <HAL_GPIO_TogglePin>
		state = postTrigger;
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		val = bufferPointer;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800069c:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 800069e:	2100      	movs	r1, #0
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80006a2:	f004 facb 	bl	8004c3c <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim16);
 80006a6:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006a8:	f004 f84e 	bl	8004748 <HAL_TIM_Base_Stop_IT>
	}

	}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000a5c 	.word	0x20000a5c
 80006b8:	20000a06 	.word	0x20000a06
 80006bc:	200009ec 	.word	0x200009ec
 80006c0:	20000a00 	.word	0x20000a00
 80006c4:	20000a10 	.word	0x20000a10

080006c8 <HAL_TIM_PWM_PulseFinishedCallback>:

uint8_t IncFlag = 0; // Flag to see if we're on the second value.

// ISR for Timer 2
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

	// Read the current value from the input pin
	uint16_t currentValue = GPIOB->IDR;
 80006d0:	4b32      	ldr	r3, [pc, #200]	@ (800079c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	81fb      	strh	r3, [r7, #14]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7f1b      	ldrb	r3, [r3, #28]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d143      	bne.n	8000766 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
        if (!trigger && IncFlag) {
 80006de:	4b30      	ldr	r3, [pc, #192]	@ (80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d13f      	bne.n	8000766 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d03b      	beq.n	8000766 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
            xorResult = currentValue ^ buffer[bufferPointer];
 80006ee:	4b2e      	ldr	r3, [pc, #184]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b2d      	ldr	r3, [pc, #180]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 80006f6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	4053      	eors	r3, r2
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 8000702:	801a      	strh	r2, [r3, #0]
            uint16_t trigPinCheck = xorResult & trigPin;
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	4013      	ands	r3, r2
 8000710:	81bb      	strh	r3, [r7, #12]
            uint16_t trigEdgeCheck = ~(buffer[bufferPointer] ^ trigEdge);
 8000712:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 800071a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800071e:	4a26      	ldr	r2, [pc, #152]	@ (80007b8 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	4053      	eors	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	817b      	strh	r3, [r7, #10]
            trigger = (trigPinCheck & trigEdgeCheck) > 0;
 800072a:	89ba      	ldrh	r2, [r7, #12]
 800072c:	897b      	ldrh	r3, [r7, #10]
 800072e:	4013      	ands	r3, r2
 8000730:	b29b      	uxth	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf14      	ite	ne
 8000736:	2301      	movne	r3, #1
 8000738:	2300      	moveq	r3, #0
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 8000740:	601a      	str	r2, [r3, #0]
            if (trigger) {
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00d      	beq.n	8000766 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
            	IncFlag = 0;
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
                state = triggerState;
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <HAL_TIM_PWM_PulseFinishedCallback+0xf4>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
                trigPointer = bufferPointer;
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 800075e:	601a      	str	r2, [r3, #0]
                HAL_TIM_Base_Start_IT(&htim16); // Start timer 16
 8000760:	4818      	ldr	r0, [pc, #96]	@ (80007c4 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000762:	f003 ff81 	bl	8004668 <HAL_TIM_Base_Start_IT>
            }
        }
    }

	// Add 8-bit logic input to the buffer if not disconnected
	buffer[bufferPointer] = currentValue;
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	4619      	mov	r1, r3
 800076c:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	// Increment pointer with circular logic
	bufferPointer++;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	b29a      	uxth	r2, r3
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 800077e:	801a      	strh	r2, [r3, #0]
	bufferPointer &= TenBit; // Default: 0x03FF for 10 Bits
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 800078c:	801a      	strh	r2, [r3, #0]

	IncFlag = 1; // We got the second value.
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	48000400 	.word	0x48000400
 80007a0:	200009f0 	.word	0x200009f0
 80007a4:	20000aaa 	.word	0x20000aaa
 80007a8:	200009ec 	.word	0x200009ec
 80007ac:	200001ec 	.word	0x200001ec
 80007b0:	20000a04 	.word	0x20000a04
 80007b4:	20000aa8 	.word	0x20000aa8
 80007b8:	20000aa9 	.word	0x20000aa9
 80007bc:	20000a06 	.word	0x20000a06
 80007c0:	20000a0c 	.word	0x20000a0c
 80007c4:	20000a5c 	.word	0x20000a5c

080007c8 <Process_USB_Command>:
uint16_t period2LowerHalf = 0x0000;
uint32_t period2UpperHalf = 0x00000000;
uint16_t prescalar16 = 0x0000;
int puff[100];
int i = 0;
void Process_USB_Command(char *cmd) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]




	commandValueFlag += 1;
 80007d0:	4b70      	ldr	r3, [pc, #448]	@ (8000994 <Process_USB_Command+0x1cc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a6f      	ldr	r2, [pc, #444]	@ (8000994 <Process_USB_Command+0x1cc>)
 80007d8:	6013      	str	r3, [r2, #0]
	if (commandValueFlag == 3)
 80007da:	4b6e      	ldr	r3, [pc, #440]	@ (8000994 <Process_USB_Command+0x1cc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d102      	bne.n	80007e8 <Process_USB_Command+0x20>
			commandValueFlag = 0;
 80007e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000994 <Process_USB_Command+0x1cc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
	if (commandValueFlag == 0){
 80007e8:	4b6a      	ldr	r3, [pc, #424]	@ (8000994 <Process_USB_Command+0x1cc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d110      	bne.n	8000812 <Process_USB_Command+0x4a>
		command = atoi(cmd);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f009 fd4b 	bl	800a28c <atoi>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a67      	ldr	r2, [pc, #412]	@ (8000998 <Process_USB_Command+0x1d0>)
 80007fa:	6013      	str	r3, [r2, #0]
		puff[i++] = command;
 80007fc:	4b67      	ldr	r3, [pc, #412]	@ (800099c <Process_USB_Command+0x1d4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4966      	ldr	r1, [pc, #408]	@ (800099c <Process_USB_Command+0x1d4>)
 8000804:	600a      	str	r2, [r1, #0]
 8000806:	4a64      	ldr	r2, [pc, #400]	@ (8000998 <Process_USB_Command+0x1d0>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	4965      	ldr	r1, [pc, #404]	@ (80009a0 <Process_USB_Command+0x1d8>)
 800080c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000810:	e0b3      	b.n	800097a <Process_USB_Command+0x1b2>
	}
	else{
			switch(command){
 8000812:	4b61      	ldr	r3, [pc, #388]	@ (8000998 <Process_USB_Command+0x1d0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b07      	cmp	r3, #7
 8000818:	f200 80af 	bhi.w	800097a <Process_USB_Command+0x1b2>
 800081c:	a201      	add	r2, pc, #4	@ (adr r2, 8000824 <Process_USB_Command+0x5c>)
 800081e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000822:	bf00      	nop
 8000824:	08000845 	.word	0x08000845
 8000828:	08000855 	.word	0x08000855
 800082c:	08000865 	.word	0x08000865
 8000830:	08000875 	.word	0x08000875
 8000834:	08000885 	.word	0x08000885
 8000838:	080008b7 	.word	0x080008b7
 800083c:	080008fb 	.word	0x080008fb
 8000840:	08000949 	.word	0x08000949
			case 0://start
				HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000844:	2100      	movs	r1, #0
 8000846:	4857      	ldr	r0, [pc, #348]	@ (80009a4 <Process_USB_Command+0x1dc>)
 8000848:	f004 f8a0 	bl	800498c <HAL_TIM_PWM_Start_IT>
				state = preTrigger;
 800084c:	4b56      	ldr	r3, [pc, #344]	@ (80009a8 <Process_USB_Command+0x1e0>)
 800084e:	2202      	movs	r2, #2
 8000850:	701a      	strb	r2, [r3, #0]
				break;
 8000852:	e092      	b.n	800097a <Process_USB_Command+0x1b2>
			case 1: //stop
				trigger = 0;
 8000854:	4b55      	ldr	r3, [pc, #340]	@ (80009ac <Process_USB_Command+0x1e4>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800085a:	2100      	movs	r1, #0
 800085c:	4851      	ldr	r0, [pc, #324]	@ (80009a4 <Process_USB_Command+0x1dc>)
 800085e:	f003 fff9 	bl	8004854 <HAL_TIM_PWM_Stop>
				break;
 8000862:	e08a      	b.n	800097a <Process_USB_Command+0x1b2>
			case 2: // set trig edge
				trigEdge = atoi(cmd);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f009 fd11 	bl	800a28c <atoi>
 800086a:	4603      	mov	r3, r0
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b50      	ldr	r3, [pc, #320]	@ (80009b0 <Process_USB_Command+0x1e8>)
 8000870:	701a      	strb	r2, [r3, #0]
				break;
 8000872:	e082      	b.n	800097a <Process_USB_Command+0x1b2>
			case 3: // set trig pin
				trigPin = atoi(cmd);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f009 fd09 	bl	800a28c <atoi>
 800087a:	4603      	mov	r3, r0
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b4d      	ldr	r3, [pc, #308]	@ (80009b4 <Process_USB_Command+0x1ec>)
 8000880:	701a      	strb	r2, [r3, #0]
				break;
 8000882:	e07a      	b.n	800097a <Process_USB_Command+0x1b2>
			case 4: //trigger PIN from 0 to 7
				period16 = period16 << 8;
 8000884:	4b4c      	ldr	r3, [pc, #304]	@ (80009b8 <Process_USB_Command+0x1f0>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b4a      	ldr	r3, [pc, #296]	@ (80009b8 <Process_USB_Command+0x1f0>)
 800088e:	801a      	strh	r2, [r3, #0]
				period16 |= atoi(cmd);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f009 fcfb 	bl	800a28c <atoi>
 8000896:	4603      	mov	r3, r0
 8000898:	b21a      	sxth	r2, r3
 800089a:	4b47      	ldr	r3, [pc, #284]	@ (80009b8 <Process_USB_Command+0x1f0>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	b21b      	sxth	r3, r3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b44      	ldr	r3, [pc, #272]	@ (80009b8 <Process_USB_Command+0x1f0>)
 80008a8:	801a      	strh	r2, [r3, #0]
				change_period16(period16);
 80008aa:	4b43      	ldr	r3, [pc, #268]	@ (80009b8 <Process_USB_Command+0x1f0>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f8aa 	bl	8000a08 <change_period16>
				break;
 80008b4:	e061      	b.n	800097a <Process_USB_Command+0x1b2>

			case 5:
				period2UpperHalf = period2UpperHalf << 8;
 80008b6:	4b41      	ldr	r3, [pc, #260]	@ (80009bc <Process_USB_Command+0x1f4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	4a3f      	ldr	r2, [pc, #252]	@ (80009bc <Process_USB_Command+0x1f4>)
 80008be:	6013      	str	r3, [r2, #0]
				period2UpperHalf |= atoi(cmd);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f009 fce3 	bl	800a28c <atoi>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b3c      	ldr	r3, [pc, #240]	@ (80009bc <Process_USB_Command+0x1f4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	4a3a      	ldr	r2, [pc, #232]	@ (80009bc <Process_USB_Command+0x1f4>)
 80008d2:	6013      	str	r3, [r2, #0]
				period2 &= 0x0000FFFF;
 80008d4:	4b3a      	ldr	r3, [pc, #232]	@ (80009c0 <Process_USB_Command+0x1f8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4a39      	ldr	r2, [pc, #228]	@ (80009c0 <Process_USB_Command+0x1f8>)
 80008dc:	6013      	str	r3, [r2, #0]
				period2 |= period2UpperHalf << 16;
 80008de:	4b37      	ldr	r3, [pc, #220]	@ (80009bc <Process_USB_Command+0x1f4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	041a      	lsls	r2, r3, #16
 80008e4:	4b36      	ldr	r3, [pc, #216]	@ (80009c0 <Process_USB_Command+0x1f8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	4a35      	ldr	r2, [pc, #212]	@ (80009c0 <Process_USB_Command+0x1f8>)
 80008ec:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 80008ee:	4b34      	ldr	r3, [pc, #208]	@ (80009c0 <Process_USB_Command+0x1f8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f86a 	bl	80009cc <change_period2>
				break;
 80008f8:	e03f      	b.n	800097a <Process_USB_Command+0x1b2>
			case 6:
				period2LowerHalf = period2LowerHalf << 8;
 80008fa:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <Process_USB_Command+0x1fc>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b30      	ldr	r3, [pc, #192]	@ (80009c4 <Process_USB_Command+0x1fc>)
 8000904:	801a      	strh	r2, [r3, #0]
				period2LowerHalf |= atoi(cmd);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f009 fcc0 	bl	800a28c <atoi>
 800090c:	4603      	mov	r3, r0
 800090e:	b21a      	sxth	r2, r3
 8000910:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <Process_USB_Command+0x1fc>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	b21b      	sxth	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b21b      	sxth	r3, r3
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <Process_USB_Command+0x1fc>)
 800091e:	801a      	strh	r2, [r3, #0]
				period2 &= 0xFFFF0000;
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <Process_USB_Command+0x1f8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	0c1b      	lsrs	r3, r3, #16
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	4a25      	ldr	r2, [pc, #148]	@ (80009c0 <Process_USB_Command+0x1f8>)
 800092a:	6013      	str	r3, [r2, #0]
				period2 |= period2LowerHalf;
 800092c:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <Process_USB_Command+0x1fc>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <Process_USB_Command+0x1f8>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4313      	orrs	r3, r2
 8000938:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <Process_USB_Command+0x1f8>)
 800093a:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 800093c:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <Process_USB_Command+0x1f8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f843 	bl	80009cc <change_period2>
				break;
 8000946:	e018      	b.n	800097a <Process_USB_Command+0x1b2>
			case 7:
				prescalar16 = prescalar16 << 8;
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <Process_USB_Command+0x200>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <Process_USB_Command+0x200>)
 8000952:	801a      	strh	r2, [r3, #0]
				prescalar16 |= atoi(cmd);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f009 fc99 	bl	800a28c <atoi>
 800095a:	4603      	mov	r3, r0
 800095c:	b21a      	sxth	r2, r3
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <Process_USB_Command+0x200>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21b      	sxth	r3, r3
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <Process_USB_Command+0x200>)
 800096c:	801a      	strh	r2, [r3, #0]
				change_prescalar16(prescalar16);
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <Process_USB_Command+0x200>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f860 	bl	8000a38 <change_prescalar16>
				break;
 8000978:	bf00      	nop
			}
	}
	 memset(cmd, 0, strlen(cmd));  // Clear the command string//clear command
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fc30 	bl	80001e0 <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f009 fd28 	bl	800a3dc <memset>

}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000aac 	.word	0x20000aac
 800099c:	20000c54 	.word	0x20000c54
 80009a0:	20000ac4 	.word	0x20000ac4
 80009a4:	20000a10 	.word	0x20000a10
 80009a8:	20000a06 	.word	0x20000a06
 80009ac:	200009f0 	.word	0x200009f0
 80009b0:	20000aa9 	.word	0x20000aa9
 80009b4:	20000aa8 	.word	0x20000aa8
 80009b8:	20000ab0 	.word	0x20000ab0
 80009bc:	20000abc 	.word	0x20000abc
 80009c0:	20000ab4 	.word	0x20000ab4
 80009c4:	20000ab8 	.word	0x20000ab8
 80009c8:	20000ac0 	.word	0x20000ac0

080009cc <change_period2>:
void change_period2(uint32_t period){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80009d4:	2100      	movs	r1, #0
 80009d6:	480a      	ldr	r0, [pc, #40]	@ (8000a00 <change_period2+0x34>)
 80009d8:	f003 ff3c 	bl	8004854 <HAL_TIM_PWM_Stop>

	memset(buffer, 0, sizeof(buffer));
 80009dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009e0:	2100      	movs	r1, #0
 80009e2:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <change_period2+0x38>)
 80009e4:	f009 fcfa 	bl	800a3dc <memset>

	MX_TIM2_Init(period);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff fd31 	bl	8000450 <MX_TIM2_Init>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80009ee:	2100      	movs	r1, #0
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <change_period2+0x34>)
 80009f2:	f003 ffcb 	bl	800498c <HAL_TIM_PWM_Start_IT>

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000a10 	.word	0x20000a10
 8000a04:	200001ec 	.word	0x200001ec

08000a08 <change_period16>:
void change_period16(uint16_t period){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop(&htim16);
 8000a12:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <change_period16+0x28>)
 8000a14:	f003 fe01 	bl	800461a <HAL_TIM_Base_Stop>

	MX_TIM16_Init(period, prescalar16);
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <change_period16+0x2c>)
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fd7b 	bl	800051c <MX_TIM16_Init>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000a5c 	.word	0x20000a5c
 8000a34:	20000ac0 	.word	0x20000ac0

08000a38 <change_prescalar16>:
void change_prescalar16(uint16_t prescalar){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop(&htim16);
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <change_prescalar16+0x28>)
 8000a44:	f003 fde9 	bl	800461a <HAL_TIM_Base_Stop>

	MX_TIM16_Init(period16, prescalar);
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <change_prescalar16+0x2c>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	88fa      	ldrh	r2, [r7, #6]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fd63 	bl	800051c <MX_TIM16_Init>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000a5c 	.word	0x20000a5c
 8000a64:	20000ab0 	.word	0x20000ab0

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aaa:	2007      	movs	r0, #7
 8000aac:	f000 fa6a 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000acc:	d113      	bne.n	8000af6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x44>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x44>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	201c      	movs	r0, #28
 8000aec:	f000 fa55 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af0:	201c      	movs	r0, #28
 8000af2:	f000 fa6e 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d113      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2019      	movs	r0, #25
 8000b34:	f000 fa31 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b38:	2019      	movs	r0, #25
 8000b3a:	f000 fa4a 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40014400 	.word	0x40014400
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f8d9 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000bb6:	f000 fcd0 	bl	800155a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20001928 	.word	0x20001928

08000bc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bca:	f004 f921 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000a5c 	.word	0x20000a5c

08000bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <TIM2_IRQHandler+0x10>)
 8000bde:	f004 f917 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000a10 	.word	0x20000a10

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f009 fbe6 	bl	800a3ec <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20010000 	.word	0x20010000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	20000c58 	.word	0x20000c58
 8000c54:	20001f68 	.word	0x20001f68

08000c58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopForever+0xe>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopForever+0x16>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f009 fba5 	bl	800a3f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cae:	f7ff faef 	bl	8000290 <main>

08000cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000cc0:	0800aeb8 	.word	0x0800aeb8
  ldr r2, =_sbss
 8000cc4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000cc8:	20001f64 	.word	0x20001f64

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_Init+0x28>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_Init+0x28>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f94f 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fec2 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f967 	bl	8000fee <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f92f 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000004 	.word	0x20000004
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000c5c 	.word	0x20000c5c

08000d84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000c5c 	.word	0x20000c5c

08000d9c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000000c 	.word	0x2000000c

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	@ (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	@ (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	@ 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff29 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff3e 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff31 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa2 	bl	8000f40 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	e160      	b.n	80012da <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8152 	beq.w	80012d4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <HAL_GPIO_Init+0x40>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0201 	and.w	r2, r3, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d017      	beq.n	80010e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d123      	bne.n	800113a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0203 	and.w	r2, r3, #3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80ac 	beq.w	80012d4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117c:	4b5e      	ldr	r3, [pc, #376]	@ (80012f8 <HAL_GPIO_Init+0x2f0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a5d      	ldr	r2, [pc, #372]	@ (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <HAL_GPIO_Init+0x2f0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001194:	4a59      	ldr	r2, [pc, #356]	@ (80012fc <HAL_GPIO_Init+0x2f4>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011be:	d025      	beq.n	800120c <HAL_GPIO_Init+0x204>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001300 <HAL_GPIO_Init+0x2f8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d01f      	beq.n	8001208 <HAL_GPIO_Init+0x200>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001304 <HAL_GPIO_Init+0x2fc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d019      	beq.n	8001204 <HAL_GPIO_Init+0x1fc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001308 <HAL_GPIO_Init+0x300>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d013      	beq.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4c      	ldr	r2, [pc, #304]	@ (800130c <HAL_GPIO_Init+0x304>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00d      	beq.n	80011fc <HAL_GPIO_Init+0x1f4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001310 <HAL_GPIO_Init+0x308>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d007      	beq.n	80011f8 <HAL_GPIO_Init+0x1f0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001314 <HAL_GPIO_Init+0x30c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_GPIO_Init+0x1ec>
 80011f0:	2306      	movs	r3, #6
 80011f2:	e00c      	b.n	800120e <HAL_GPIO_Init+0x206>
 80011f4:	2307      	movs	r3, #7
 80011f6:	e00a      	b.n	800120e <HAL_GPIO_Init+0x206>
 80011f8:	2305      	movs	r3, #5
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0x206>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x206>
 8001200:	2303      	movs	r3, #3
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x206>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x206>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x206>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	@ (80012fc <HAL_GPIO_Init+0x2f4>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122c:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <HAL_GPIO_Init+0x310>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001250:	4a31      	ldr	r2, [pc, #196]	@ (8001318 <HAL_GPIO_Init+0x310>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <HAL_GPIO_Init+0x310>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800127a:	4a27      	ldr	r2, [pc, #156]	@ (8001318 <HAL_GPIO_Init+0x310>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <HAL_GPIO_Init+0x310>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <HAL_GPIO_Init+0x310>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_GPIO_Init+0x310>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <HAL_GPIO_Init+0x310>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae97 	bne.w	8001018 <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	48001800 	.word	0x48001800
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4013      	ands	r3, r2
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43d9      	mvns	r1, r3
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	400b      	ands	r3, r1
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0b9      	b.n	8001506 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f008 fcc0 	bl	8009d2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fbf4 	bl	8005ba6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e03e      	b.n	8001442 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	3311      	adds	r3, #17
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3310      	adds	r3, #16
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3313      	adds	r3, #19
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3320      	adds	r3, #32
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3324      	adds	r3, #36	@ 0x24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3301      	adds	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3bb      	bcc.n	80013c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e044      	b.n	80014dc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	791b      	ldrb	r3, [r3, #4]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d3b5      	bcc.n	8001452 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3304      	adds	r3, #4
 80014ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014f2:	f004 fb73 	bl	8005bdc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_PCD_Start+0x16>
 8001520:	2302      	movs	r3, #2
 8001522:	e016      	b.n	8001552 <HAL_PCD_Start+0x44>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f004 fb21 	bl	8005b78 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001536:	2101      	movs	r1, #1
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f008 fe6f 	bl	800a21c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f006 fdde 	bl	8008104 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f006 fdd7 	bl	800811a <USB_ReadInterrupts>
 800156c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 fab1 	bl	8001ae0 <PCD_EP_ISR_Handler>

    return;
 800157e:	e0bd      	b.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001586:	2b00      	cmp	r3, #0
 8001588:	d013      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800159c:	b292      	uxth	r2, r2
 800159e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f008 fc3d 	bl	8009e22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015a8:	2100      	movs	r1, #0
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f8a9 	bl	8001702 <HAL_PCD_SetAddress>

    return;
 80015b0:	e0a4      	b.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80015ce:	b292      	uxth	r2, r2
 80015d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015d4:	e092      	b.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015f2:	b292      	uxth	r2, r2
 80015f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015f8:	e080      	b.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d027      	beq.n	8001654 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800160c:	b29a      	uxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	b292      	uxth	r2, r2
 8001618:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001624:	b29a      	uxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0208 	bic.w	r2, r2, #8
 800162e:	b292      	uxth	r2, r2
 8001630:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f008 fc2d 	bl	8009e94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800164c:	b292      	uxth	r2, r2
 800164e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001652:	e053      	b.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800165a:	2b00      	cmp	r3, #0
 800165c:	d027      	beq.n	80016ae <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0208 	orr.w	r2, r2, #8
 8001670:	b292      	uxth	r2, r2
 8001672:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001688:	b292      	uxth	r2, r2
 800168a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0204 	orr.w	r2, r2, #4
 80016a0:	b292      	uxth	r2, r2
 80016a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f008 fbda 	bl	8009e60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016ac:	e026      	b.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00f      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016ca:	b292      	uxth	r2, r2
 80016cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f008 fb98 	bl	8009e06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016d6:	e011      	b.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016f4:	b292      	uxth	r2, r2
 80016f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80016fa:	bf00      	nop
  }
}
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_PCD_SetAddress+0x1a>
 8001718:	2302      	movs	r3, #2
 800171a:	e012      	b.n	8001742 <HAL_PCD_SetAddress+0x40>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f006 fcd2 	bl	80080dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	4608      	mov	r0, r1
 8001754:	4611      	mov	r1, r2
 8001756:	461a      	mov	r2, r3
 8001758:	4603      	mov	r3, r0
 800175a:	70fb      	strb	r3, [r7, #3]
 800175c:	460b      	mov	r3, r1
 800175e:	803b      	strh	r3, [r7, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800176c:	2b00      	cmp	r3, #0
 800176e:	da0e      	bge.n	800178e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 0207 	and.w	r2, r3, #7
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	3310      	adds	r3, #16
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	705a      	strb	r2, [r3, #1]
 800178c:	e00e      	b.n	80017ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	f003 0207 	and.w	r2, r3, #7
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017b8:	883a      	ldrh	r2, [r7, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	78ba      	ldrb	r2, [r7, #2]
 80017c2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017c4:	78bb      	ldrb	r3, [r7, #2]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d102      	bne.n	80017d0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_PCD_EP_Open+0x94>
 80017da:	2302      	movs	r3, #2
 80017dc:	e00e      	b.n	80017fc <HAL_PCD_EP_Open+0xb2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 fa13 	bl	8005c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80017fa:	7afb      	ldrb	r3, [r7, #11]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da0e      	bge.n	8001836 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f003 0207 	and.w	r2, r3, #7
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	3310      	adds	r3, #16
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	705a      	strb	r2, [r3, #1]
 8001834:	e00e      	b.n	8001854 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	f003 0207 	and.w	r2, r3, #7
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	b2da      	uxtb	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_PCD_EP_Close+0x6a>
 800186a:	2302      	movs	r3, #2
 800186c:	e00e      	b.n	800188c <HAL_PCD_EP_Close+0x88>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68f9      	ldr	r1, [r7, #12]
 800187c:	4618      	mov	r0, r3
 800187e:	f004 fd8f 	bl	80063a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	460b      	mov	r3, r1
 80018a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	f003 0207 	and.w	r2, r3, #7
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2200      	movs	r2, #0
 80018d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6979      	ldr	r1, [r7, #20]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 ff47 	bl	800677a <USB_EPStartXfer>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 0207 	and.w	r2, r3, #7
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001918:	681b      	ldr	r3, [r3, #0]
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	460b      	mov	r3, r1
 8001934:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001936:	7afb      	ldrb	r3, [r7, #11]
 8001938:	f003 0207 	and.w	r2, r3, #7
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	3310      	adds	r3, #16
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2200      	movs	r2, #0
 800196a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2201      	movs	r2, #1
 8001970:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	b2da      	uxtb	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6979      	ldr	r1, [r7, #20]
 8001984:	4618      	mov	r0, r3
 8001986:	f004 fef8 	bl	800677a <USB_EPStartXfer>

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	7912      	ldrb	r2, [r2, #4]
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e03e      	b.n	8001a30 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0e      	bge.n	80019d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 0207 	and.w	r2, r3, #7
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	3310      	adds	r3, #16
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	705a      	strb	r2, [r3, #1]
 80019d6:	e00c      	b.n	80019f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_PCD_EP_SetStall+0x7e>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e00e      	b.n	8001a30 <HAL_PCD_EP_SetStall+0x9c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f006 fa5c 	bl	8007ede <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	7912      	ldrb	r2, [r2, #4]
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e040      	b.n	8001ad8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da0e      	bge.n	8001a7c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 0207 	and.w	r2, r3, #7
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	3310      	adds	r3, #16
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	705a      	strb	r2, [r3, #1]
 8001a7a:	e00e      	b.n	8001a9a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	f003 0207 	and.w	r2, r3, #7
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_EP_ClrStall+0x82>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e00e      	b.n	8001ad8 <HAL_PCD_EP_ClrStall+0xa0>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f006 fa59 	bl	8007f80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b096      	sub	sp, #88	@ 0x58
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ae8:	e3ad      	b.n	8002246 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001af6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001b04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 816f 	bne.w	8001dec <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d14c      	bne.n	8001bb4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b2a:	81fb      	strh	r3, [r7, #14]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	89fb      	ldrh	r3, [r7, #14]
 8001b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3310      	adds	r3, #16
 8001b42:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	441a      	add	r2, r3
 8001b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f008 f928 	bl	8009dd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7b1b      	ldrb	r3, [r3, #12]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 835c 	beq.w	8002246 <PCD_EP_ISR_Handler+0x766>
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8357 	bne.w	8002246 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7b1b      	ldrb	r3, [r3, #12]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	731a      	strb	r2, [r3, #12]
 8001bb2:	e348      	b.n	8002246 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bba:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d032      	beq.n	8001c38 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f006 fad6 	bl	80081be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c1e:	4013      	ands	r3, r2
 8001c20:	823b      	strh	r3, [r7, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	8a3a      	ldrh	r2, [r7, #16]
 8001c28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f008 f8a1 	bl	8009d78 <HAL_PCD_SetupStageCallback>
 8001c36:	e306      	b.n	8002246 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c38:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f280 8302 	bge.w	8002246 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c4e:	4013      	ands	r3, r2
 8001c50:	83fb      	strh	r3, [r7, #30]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	8bfa      	ldrh	r2, [r7, #30]
 8001c58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d019      	beq.n	8001cc4 <PCD_EP_ISR_Handler+0x1e4>
 8001c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9e:	6959      	ldr	r1, [r3, #20]
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f006 fa88 	bl	80081be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	441a      	add	r2, r3
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f008 f86c 	bl	8009d9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001cce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 82b5 	bne.w	8002246 <PCD_EP_ISR_Handler+0x766>
 8001cdc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ce0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001ce4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ce8:	f000 82ad 	beq.w	8002246 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4413      	add	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <PCD_EP_ISR_Handler+0x25a>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	e039      	b.n	8001dae <PCD_EP_ISR_Handler+0x2ce>
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d40:	d818      	bhi.n	8001d74 <PCD_EP_ISR_Handler+0x294>
 8001d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <PCD_EP_ISR_Handler+0x27c>
 8001d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d58:	3301      	adds	r3, #1
 8001d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	e01c      	b.n	8001dae <PCD_EP_ISR_Handler+0x2ce>
 8001d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <PCD_EP_ISR_Handler+0x2ae>
 8001d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dbe:	827b      	strh	r3, [r7, #18]
 8001dc0:	8a7b      	ldrh	r3, [r7, #18]
 8001dc2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001dc6:	827b      	strh	r3, [r7, #18]
 8001dc8:	8a7b      	ldrh	r3, [r7, #18]
 8001dca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001dce:	827b      	strh	r3, [r7, #18]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	8a7b      	ldrh	r3, [r7, #18]
 8001dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	8013      	strh	r3, [r2, #0]
 8001dea:	e22c      	b.n	8002246 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f280 80f6 	bge.w	8001ff6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e20:	4013      	ands	r3, r2
 8001e22:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001e38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e40:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e58:	7b1b      	ldrb	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d123      	bne.n	8001ea6 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001e86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 808e 	beq.w	8001fac <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e96:	6959      	ldr	r1, [r3, #20]
 8001e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9a:	88da      	ldrh	r2, [r3, #6]
 8001e9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ea0:	f006 f98d 	bl	80081be <USB_ReadPMA>
 8001ea4:	e082      	b.n	8001fac <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea8:	78db      	ldrb	r3, [r3, #3]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d10a      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001eae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f9d3 	bl	8002262 <HAL_PCD_EP_DB_Receive>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001ec2:	e073      	b.n	8001fac <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ede:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	441a      	add	r2, r3
 8001ef0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d022      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001f4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d02c      	beq.n	8001fac <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f58:	6959      	ldr	r1, [r3, #20]
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5c:	891a      	ldrh	r2, [r3, #8]
 8001f5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f62:	f006 f92c 	bl	80081be <USB_ReadPMA>
 8001f66:	e021      	b.n	8001fac <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001f90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f9e:	6959      	ldr	r1, [r3, #20]
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa2:	895a      	ldrh	r2, [r3, #10]
 8001fa4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fa8:	f006 f909 	bl	80081be <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fb4:	441a      	add	r2, r3
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001fc2:	441a      	add	r2, r3
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <PCD_EP_ISR_Handler+0x4fc>
 8001fd0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d206      	bcs.n	8001fea <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f007 feda 	bl	8009d9c <HAL_PCD_DataOutStageCallback>
 8001fe8:	e005      	b.n	8001ff6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fbc2 	bl	800677a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ff6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8121 	beq.w	8002246 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8002004:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	3310      	adds	r3, #16
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002032:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	441a      	add	r2, r3
 8002044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800204c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002050:	b29b      	uxth	r3, r3
 8002052:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002056:	78db      	ldrb	r3, [r3, #3]
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 80a2 	bne.w	80021a2 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800205e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002066:	7b1b      	ldrb	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8093 	beq.w	8002194 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800206e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d046      	beq.n	8002108 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800207a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d126      	bne.n	80020d0 <PCD_EP_ISR_Handler+0x5f0>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	4413      	add	r3, r2
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
 800209a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	00da      	lsls	r2, r3, #3
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	4413      	add	r3, r2
 80020a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	e061      	b.n	8002194 <PCD_EP_ISR_Handler+0x6b4>
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d15d      	bne.n	8002194 <PCD_EP_ISR_Handler+0x6b4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ec:	4413      	add	r3, r2
 80020ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	00da      	lsls	r2, r3, #3
 80020f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f8:	4413      	add	r3, r2
 80020fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002102:	2200      	movs	r2, #0
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	e045      	b.n	8002194 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d126      	bne.n	8002164 <PCD_EP_ISR_Handler+0x684>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800212a:	4413      	add	r3, r2
 800212c:	637b      	str	r3, [r7, #52]	@ 0x34
 800212e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	00da      	lsls	r2, r3, #3
 8002134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002136:	4413      	add	r3, r2
 8002138:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
 800213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002148:	b29a      	uxth	r2, r3
 800214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214c:	801a      	strh	r2, [r3, #0]
 800214e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800215c:	b29a      	uxth	r2, r3
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	801a      	strh	r2, [r3, #0]
 8002162:	e017      	b.n	8002194 <PCD_EP_ISR_Handler+0x6b4>
 8002164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d113      	bne.n	8002194 <PCD_EP_ISR_Handler+0x6b4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002174:	b29b      	uxth	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217a:	4413      	add	r3, r2
 800217c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	00da      	lsls	r2, r3, #3
 8002184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002186:	4413      	add	r3, r2
 8002188:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800218c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800218e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002190:	2200      	movs	r2, #0
 8002192:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f007 fe19 	bl	8009dd2 <HAL_PCD_DataInStageCallback>
 80021a0:	e051      	b.n	8002246 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d144      	bne.n	8002238 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80021d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021de:	429a      	cmp	r2, r3
 80021e0:	d907      	bls.n	80021f2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80021e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021ea:	1ad2      	subs	r2, r2, r3
 80021ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ee:	619a      	str	r2, [r3, #24]
 80021f0:	e002      	b.n	80021f8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80021f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80021f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d106      	bne.n	800220e <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f007 fde3 	bl	8009dd2 <HAL_PCD_DataInStageCallback>
 800220c:	e01b      	b.n	8002246 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800220e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002216:	441a      	add	r2, r3
 8002218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800221c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002224:	441a      	add	r2, r3
 8002226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002228:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002230:	4618      	mov	r0, r3
 8002232:	f004 faa2 	bl	800677a <USB_EPStartXfer>
 8002236:	e006      	b.n	8002246 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002238:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800223c:	461a      	mov	r2, r3
 800223e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f917 	bl	8002474 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800224e:	b29b      	uxth	r3, r3
 8002250:	b21b      	sxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	f6ff ac49 	blt.w	8001aea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3758      	adds	r7, #88	@ 0x58
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b088      	sub	sp, #32
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	4613      	mov	r3, r2
 800226e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d07c      	beq.n	8002374 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002282:	b29b      	uxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	4413      	add	r3, r2
 8002294:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	8b7b      	ldrh	r3, [r7, #26]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d306      	bcc.n	80022b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	8b7b      	ldrh	r3, [r7, #26]
 80022b0:	1ad2      	subs	r2, r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	619a      	str	r2, [r3, #24]
 80022b6:	e002      	b.n	80022be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d123      	bne.n	800230e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e0:	833b      	strh	r3, [r7, #24]
 80022e2:	8b3b      	ldrh	r3, [r7, #24]
 80022e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022e8:	833b      	strh	r3, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	441a      	add	r2, r3
 80022f8:	8b3b      	ldrh	r3, [r7, #24]
 80022fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800230a:	b29b      	uxth	r3, r3
 800230c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01f      	beq.n	8002358 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800232e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002332:	82fb      	strh	r3, [r7, #22]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800234c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002350:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002354:	b29b      	uxth	r3, r3
 8002356:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002358:	8b7b      	ldrh	r3, [r7, #26]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8085 	beq.w	800246a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6959      	ldr	r1, [r3, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	891a      	ldrh	r2, [r3, #8]
 800236c:	8b7b      	ldrh	r3, [r7, #26]
 800236e:	f005 ff26 	bl	80081be <USB_ReadPMA>
 8002372:	e07a      	b.n	800246a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4413      	add	r3, r2
 800238e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002398:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	8b7b      	ldrh	r3, [r7, #26]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d306      	bcc.n	80023b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	8b7b      	ldrh	r3, [r7, #26]
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	e002      	b.n	80023b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d123      	bne.n	8002408 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023da:	83fb      	strh	r3, [r7, #30]
 80023dc:	8bfb      	ldrh	r3, [r7, #30]
 80023de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80023e2:	83fb      	strh	r3, [r7, #30]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	8bfb      	ldrh	r3, [r7, #30]
 80023f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002404:	b29b      	uxth	r3, r3
 8002406:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800242c:	83bb      	strh	r3, [r7, #28]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	441a      	add	r2, r3
 800243c:	8bbb      	ldrh	r3, [r7, #28]
 800243e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800244a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800244e:	b29b      	uxth	r3, r3
 8002450:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002452:	8b7b      	ldrh	r3, [r7, #26]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	6959      	ldr	r1, [r3, #20]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	895a      	ldrh	r2, [r3, #10]
 8002464:	8b7b      	ldrh	r3, [r7, #26]
 8002466:	f005 feaa 	bl	80081be <USB_ReadPMA>
    }
  }

  return count;
 800246a:	8b7b      	ldrh	r3, [r7, #26]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b0a4      	sub	sp, #144	@ 0x90
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 81db 	beq.w	8002844 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80024be:	429a      	cmp	r2, r3
 80024c0:	d907      	bls.n	80024d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e002      	b.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 80b9 	bne.w	8002654 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d126      	bne.n	8002538 <HAL_PCD_EP_DB_Transmit+0xc4>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fe:	4413      	add	r3, r2
 8002500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	00da      	lsls	r2, r3, #3
 8002508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250a:	4413      	add	r3, r2
 800250c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251c:	b29a      	uxth	r2, r3
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002530:	b29a      	uxth	r2, r3
 8002532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	e01a      	b.n	800256e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d116      	bne.n	800256e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800254e:	b29b      	uxth	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002554:	4413      	add	r3, r2
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00da      	lsls	r2, r3, #3
 800255e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002560:	4413      	add	r3, r2
 8002562:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002566:	633b      	str	r3, [r7, #48]	@ 0x30
 8002568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256a:	2200      	movs	r2, #0
 800256c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d126      	bne.n	80025ca <HAL_PCD_EP_DB_Transmit+0x156>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00da      	lsls	r2, r3, #3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	e017      	b.n	80025fa <HAL_PCD_EP_DB_Transmit+0x186>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d113      	bne.n	80025fa <HAL_PCD_EP_DB_Transmit+0x186>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	4413      	add	r3, r2
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	00da      	lsls	r2, r3, #3
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	4413      	add	r3, r2
 80025ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f007 fbe6 	bl	8009dd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 82fa 	beq.w	8002c06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800262c:	82fb      	strh	r3, [r7, #22]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	441a      	add	r2, r3
 800263c:	8afb      	ldrh	r3, [r7, #22]
 800263e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800264a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800264e:	b29b      	uxth	r3, r3
 8002650:	8013      	strh	r3, [r2, #0]
 8002652:	e2d8      	b.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d021      	beq.n	80026a2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002678:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	441a      	add	r2, r3
 800268a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800269a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	f040 82ac 	bne.w	8002c06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026b6:	441a      	add	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026c4:	441a      	add	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d30b      	bcc.n	80026ee <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6a1a      	ldr	r2, [r3, #32]
 80026e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026e6:	1ad2      	subs	r2, r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	621a      	str	r2, [r3, #32]
 80026ec:	e017      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80026f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002706:	e00a      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d165      	bne.n	80027f2 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800273a:	4413      	add	r3, r2
 800273c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	00da      	lsls	r2, r3, #3
 8002744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002746:	4413      	add	r3, r2
 8002748:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800274e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	b29a      	uxth	r2, r3
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x308>
 8002766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002774:	b29a      	uxth	r2, r3
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	e057      	b.n	800282c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800277c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002780:	2b3e      	cmp	r3, #62	@ 0x3e
 8002782:	d818      	bhi.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x342>
 8002784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800278c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_PCD_EP_DB_Transmit+0x32a>
 8002798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800279a:	3301      	adds	r3, #1
 800279c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	029b      	lsls	r3, r3, #10
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	801a      	strh	r2, [r3, #0]
 80027b4:	e03a      	b.n	800282c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x35c>
 80027ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027cc:	3b01      	subs	r3, #1
 80027ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027d8:	b29b      	uxth	r3, r3
 80027da:	029b      	lsls	r3, r3, #10
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4313      	orrs	r3, r2
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	e01c      	b.n	800282c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d118      	bne.n	800282c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002808:	b29b      	uxth	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800280e:	4413      	add	r3, r2
 8002810:	647b      	str	r3, [r7, #68]	@ 0x44
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	00da      	lsls	r2, r3, #3
 8002818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281a:	4413      	add	r3, r2
 800281c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002820:	643b      	str	r3, [r7, #64]	@ 0x40
 8002822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002826:	b29a      	uxth	r2, r3
 8002828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800282a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6959      	ldr	r1, [r3, #20]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	891a      	ldrh	r2, [r3, #8]
 8002838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800283c:	b29b      	uxth	r3, r3
 800283e:	f005 fc7c 	bl	800813a <USB_WritePMA>
 8002842:	e1e0      	b.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800284c:	b29b      	uxth	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4413      	add	r3, r2
 800285e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002868:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002874:	429a      	cmp	r2, r3
 8002876:	d307      	bcc.n	8002888 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002880:	1ad2      	subs	r2, r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	e002      	b.n	800288e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 80c0 	bne.w	8002a18 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d126      	bne.n	80028ee <HAL_PCD_EP_DB_Transmit+0x47a>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028b4:	4413      	add	r3, r2
 80028b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	00da      	lsls	r2, r3, #3
 80028be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028c0:	4413      	add	r3, r2
 80028c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80028c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	e01a      	b.n	8002924 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d116      	bne.n	8002924 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002904:	b29b      	uxth	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800290a:	4413      	add	r3, r2
 800290c:	667b      	str	r3, [r7, #100]	@ 0x64
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	00da      	lsls	r2, r3, #3
 8002914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002916:	4413      	add	r3, r2
 8002918:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800291c:	663b      	str	r3, [r7, #96]	@ 0x60
 800291e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002920:	2200      	movs	r2, #0
 8002922:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	677b      	str	r3, [r7, #116]	@ 0x74
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	785b      	ldrb	r3, [r3, #1]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d12b      	bne.n	800298a <HAL_PCD_EP_DB_Transmit+0x516>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002946:	4413      	add	r3, r2
 8002948:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	00da      	lsls	r2, r3, #3
 8002950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002952:	4413      	add	r3, r2
 8002954:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800295c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002968:	b29a      	uxth	r2, r3
 800296a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800296e:	801a      	strh	r2, [r3, #0]
 8002970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002980:	b29a      	uxth	r2, r3
 8002982:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002986:	801a      	strh	r2, [r3, #0]
 8002988:	e017      	b.n	80029ba <HAL_PCD_EP_DB_Transmit+0x546>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d113      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0x546>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a0:	4413      	add	r3, r2
 80029a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00da      	lsls	r2, r3, #3
 80029aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ac:	4413      	add	r3, r2
 80029ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80029b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80029b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f007 fa06 	bl	8009dd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 811a 	bne.w	8002c06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ec:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]
 8002a16:	e0f6      	b.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d121      	bne.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f040 80ca 	bne.w	8002c06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a7a:	441a      	add	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002a88:	441a      	add	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d30b      	bcc.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	621a      	str	r2, [r3, #32]
 8002ab0:	e017      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d108      	bne.n	8002acc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002aba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002abe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002aca:	e00a      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d165      	bne.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x748>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b04:	4413      	add	r3, r2
 8002b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	00da      	lsls	r2, r3, #3
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b10:	4413      	add	r3, r2
 8002b12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002b16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002b30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b42:	801a      	strh	r2, [r3, #0]
 8002b44:	e054      	b.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b4c:	d818      	bhi.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x70c>
 8002b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b64:	3301      	adds	r3, #1
 8002b66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	e037      	b.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_PCD_EP_DB_Transmit+0x726>
 8002b94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b96:	3b01      	subs	r3, #1
 8002b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	029b      	lsls	r3, r3, #10
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	e019      	b.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d115      	bne.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd2:	4413      	add	r3, r2
 8002bd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00da      	lsls	r2, r3, #3
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bde:	4413      	add	r3, r2
 8002be0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002be4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6959      	ldr	r1, [r3, #20]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	895a      	ldrh	r2, [r3, #10]
 8002bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f005 fa9a 	bl	800813a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c20:	82bb      	strh	r3, [r7, #20]
 8002c22:	8abb      	ldrh	r3, [r7, #20]
 8002c24:	f083 0310 	eor.w	r3, r3, #16
 8002c28:	82bb      	strh	r3, [r7, #20]
 8002c2a:	8abb      	ldrh	r3, [r7, #20]
 8002c2c:	f083 0320 	eor.w	r3, r3, #32
 8002c30:	82bb      	strh	r3, [r7, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	441a      	add	r2, r3
 8002c40:	8abb      	ldrh	r3, [r7, #20]
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3790      	adds	r7, #144	@ 0x90
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	817b      	strh	r3, [r7, #10]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	f003 0207 	and.w	r2, r3, #7
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	3310      	adds	r3, #16
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e009      	b.n	8002caa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c96:	897a      	ldrh	r2, [r7, #10]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002caa:	893b      	ldrh	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	80da      	strh	r2, [r3, #6]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f001 b83a 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 816f 	beq.w	8003002 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d24:	4bb5      	ldr	r3, [pc, #724]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d00c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d30:	4bb2      	ldr	r3, [pc, #712]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d15c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x10e>
 8002d3c:	4baf      	ldr	r3, [pc, #700]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d48:	d155      	bne.n	8002df6 <HAL_RCC_OscConfig+0x10e>
 8002d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d4e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_OscConfig+0x94>
 8002d76:	4ba1      	ldr	r3, [pc, #644]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	e015      	b.n	8002da8 <HAL_RCC_OscConfig+0xc0>
 8002d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d80:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d94:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002d98:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002da4:	4b95      	ldr	r3, [pc, #596]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dac:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002db0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002db4:	fa92 f2a2 	rbit	r2, r2
 8002db8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002dbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f042 0220 	orr.w	r2, r2, #32
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8111 	beq.w	8003000 <HAL_RCC_OscConfig+0x318>
 8002dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 8108 	bne.w	8003000 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f000 bfc6 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x12e>
 8002e08:	4b7c      	ldr	r3, [pc, #496]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7b      	ldr	r2, [pc, #492]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e036      	b.n	8002e84 <HAL_RCC_OscConfig+0x19c>
 8002e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x158>
 8002e26:	4b75      	ldr	r3, [pc, #468]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a74      	ldr	r2, [pc, #464]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b72      	ldr	r3, [pc, #456]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a71      	ldr	r2, [pc, #452]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e021      	b.n	8002e84 <HAL_RCC_OscConfig+0x19c>
 8002e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x184>
 8002e52:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a69      	ldr	r2, [pc, #420]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b67      	ldr	r3, [pc, #412]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a66      	ldr	r2, [pc, #408]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0x19c>
 8002e6c:	4b63      	ldr	r3, [pc, #396]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a62      	ldr	r2, [pc, #392]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b60      	ldr	r3, [pc, #384]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e82:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d059      	beq.n	8002f48 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fd ff76 	bl	8000d84 <HAL_GetTick>
 8002e98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9e:	f7fd ff71 	bl	8000d84 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f000 bf67 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
 8002eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eb8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002ec8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x1fe>
 8002ee0:	4b46      	ldr	r3, [pc, #280]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x22a>
 8002ee6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002efa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002efe:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002f02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f16:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002f1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002f1e:	fa92 f2a2 	rbit	r2, r2
 8002f22:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002f26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ab      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1b6>
 8002f46:	e05c      	b.n	8003002 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fd ff1c 	bl	8000d84 <HAL_GetTick>
 8002f4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f52:	f7fd ff17 	bl	8000d84 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	@ 0x64
 8002f60:	d902      	bls.n	8002f68 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	f000 bf0d 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
 8002f68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f6c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002f7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_OscConfig+0x2b2>
 8002f94:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2de>
 8002f9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002fb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_RCC_OscConfig+0x314>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fca:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002fce:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002fda:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ab      	bne.n	8002f52 <HAL_RCC_OscConfig+0x26a>
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_OscConfig+0x31a>
 8002ffc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003006:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 817f 	beq.w	8003316 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003018:	4ba7      	ldr	r3, [pc, #668]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00c      	beq.n	800303e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003024:	4ba4      	ldr	r3, [pc, #656]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	d173      	bne.n	8003118 <HAL_RCC_OscConfig+0x430>
 8003030:	4ba1      	ldr	r3, [pc, #644]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800303c:	d16c      	bne.n	8003118 <HAL_RCC_OscConfig+0x430>
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003050:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0x386>
 8003068:	4b93      	ldr	r3, [pc, #588]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e013      	b.n	8003096 <HAL_RCC_OscConfig+0x3ae>
 800306e:	2302      	movs	r3, #2
 8003070:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003086:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003092:	4b89      	ldr	r3, [pc, #548]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	2202      	movs	r2, #2
 8003098:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800309c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80030a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80030ac:	fab2 f282 	clz	r2, r2
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	f042 0220 	orr.w	r2, r2, #32
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f002 021f 	and.w	r2, r2, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f202 	lsl.w	r2, r1, r2
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCC_OscConfig+0x3f6>
 80030c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f000 be52 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b76      	ldr	r3, [pc, #472]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	21f8      	movs	r1, #248	@ 0xf8
 80030f4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80030fc:	fa91 f1a1 	rbit	r1, r1
 8003100:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003104:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003108:	fab1 f181 	clz	r1, r1
 800310c:	b2c9      	uxtb	r1, r1
 800310e:	408b      	lsls	r3, r1
 8003110:	4969      	ldr	r1, [pc, #420]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	e0fe      	b.n	8003316 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8088 	beq.w	800323a <HAL_RCC_OscConfig+0x552>
 800312a:	2301      	movs	r3, #1
 800312c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800313c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800314a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	461a      	mov	r2, r3
 8003152:	2301      	movs	r3, #1
 8003154:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fd fe15 	bl	8000d84 <HAL_GetTick>
 800315a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003160:	f7fd fe10 	bl	8000d84 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d902      	bls.n	8003176 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	f000 be06 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
 8003176:	2302      	movs	r3, #2
 8003178:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003188:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <HAL_RCC_OscConfig+0x4be>
 80031a0:	4b45      	ldr	r3, [pc, #276]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	e013      	b.n	80031ce <HAL_RCC_OscConfig+0x4e6>
 80031a6:	2302      	movs	r3, #2
 80031a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80031b8:	2302      	movs	r3, #2
 80031ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80031be:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80031ca:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	2202      	movs	r2, #2
 80031d0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80031d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80031e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80031e4:	fab2 f282 	clz	r2, r2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f042 0220 	orr.w	r2, r2, #32
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f002 021f 	and.w	r2, r2, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f202 	lsl.w	r2, r1, r2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0af      	beq.n	8003160 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800320c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	21f8      	movs	r1, #248	@ 0xf8
 8003216:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800321e:	fa91 f1a1 	rbit	r1, r1
 8003222:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003226:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800322a:	fab1 f181 	clz	r1, r1
 800322e:	b2c9      	uxtb	r1, r1
 8003230:	408b      	lsls	r3, r1
 8003232:	4921      	ldr	r1, [pc, #132]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e06d      	b.n	8003316 <HAL_RCC_OscConfig+0x62e>
 800323a:	2301      	movs	r3, #1
 800323c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800324c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800325a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	461a      	mov	r2, r3
 8003262:	2300      	movs	r3, #0
 8003264:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fd fd8d 	bl	8000d84 <HAL_GetTick>
 800326a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003270:	f7fd fd88 	bl	8000d84 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d902      	bls.n	8003286 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	f000 bd7e 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
 8003286:	2302      	movs	r3, #2
 8003288:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003298:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x5d4>
 80032b0:	4b01      	ldr	r3, [pc, #4]	@ (80032b8 <HAL_RCC_OscConfig+0x5d0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	e016      	b.n	80032e4 <HAL_RCC_OscConfig+0x5fc>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	2302      	movs	r3, #2
 80032be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80032ce:	2302      	movs	r3, #2
 80032d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80032d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80032e0:	4bbf      	ldr	r3, [pc, #764]	@ (80035e0 <HAL_RCC_OscConfig+0x8f8>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	2202      	movs	r2, #2
 80032e6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80032ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80032ee:	fa92 f2a2 	rbit	r2, r2
 80032f2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80032f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80032fa:	fab2 f282 	clz	r2, r2
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f042 0220 	orr.w	r2, r2, #32
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f002 021f 	and.w	r2, r2, #31
 800330a:	2101      	movs	r1, #1
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ac      	bne.n	8003270 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8113 	beq.w	8003552 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800332c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003330:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d07c      	beq.n	8003436 <HAL_RCC_OscConfig+0x74e>
 800333c:	2301      	movs	r3, #1
 800333e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800334e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	4ba2      	ldr	r3, [pc, #648]	@ (80035e4 <HAL_RCC_OscConfig+0x8fc>)
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	461a      	mov	r2, r3
 8003362:	2301      	movs	r3, #1
 8003364:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fd fd0d 	bl	8000d84 <HAL_GetTick>
 800336a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336e:	e00a      	b.n	8003386 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003370:	f7fd fd08 	bl	8000d84 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d902      	bls.n	8003386 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	f000 bcfe 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
 8003386:	2302      	movs	r3, #2
 8003388:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003390:	fa93 f2a3 	rbit	r2, r3
 8003394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003398:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033a6:	2202      	movs	r2, #2
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033ca:	2202      	movs	r2, #2
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80033e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	4b7e      	ldr	r3, [pc, #504]	@ (80035e0 <HAL_RCC_OscConfig+0x8f8>)
 80033e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80033f2:	2102      	movs	r1, #2
 80033f4:	6019      	str	r1, [r3, #0]
 80033f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f1a3 	rbit	r1, r3
 8003404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003408:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800340c:	6019      	str	r1, [r3, #0]
  return result;
 800340e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003412:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d09d      	beq.n	8003370 <HAL_RCC_OscConfig+0x688>
 8003434:	e08d      	b.n	8003552 <HAL_RCC_OscConfig+0x86a>
 8003436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800343a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003446:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003454:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003458:	601a      	str	r2, [r3, #0]
  return result;
 800345a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003462:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	4b5d      	ldr	r3, [pc, #372]	@ (80035e4 <HAL_RCC_OscConfig+0x8fc>)
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	461a      	mov	r2, r3
 8003474:	2300      	movs	r3, #0
 8003476:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fd fc84 	bl	8000d84 <HAL_GetTick>
 800347c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003482:	f7fd fc7f 	bl	8000d84 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d902      	bls.n	8003498 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	f000 bc75 	b.w	8003d82 <HAL_RCC_OscConfig+0x109a>
 8003498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034a0:	2202      	movs	r2, #2
 80034a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80034c4:	2202      	movs	r2, #2
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	fa93 f2a3 	rbit	r2, r3
 80034d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80034e8:	2202      	movs	r2, #2
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	fa93 f2a3 	rbit	r2, r3
 80034fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003502:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b36      	ldr	r3, [pc, #216]	@ (80035e0 <HAL_RCC_OscConfig+0x8f8>)
 8003506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003510:	2102      	movs	r1, #2
 8003512:	6019      	str	r1, [r3, #0]
 8003514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003518:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f1a3 	rbit	r1, r3
 8003522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003526:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800352a:	6019      	str	r1, [r3, #0]
  return result;
 800352c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003530:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d197      	bne.n	8003482 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003556:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 81a5 	beq.w	80038b2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b1c      	ldr	r3, [pc, #112]	@ (80035e0 <HAL_RCC_OscConfig+0x8f8>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	4b19      	ldr	r3, [pc, #100]	@ (80035e0 <HAL_RCC_OscConfig+0x8f8>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <HAL_RCC_OscConfig+0x8f8>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003584:	61d3      	str	r3, [r2, #28]
 8003586:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <HAL_RCC_OscConfig+0x8f8>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800358e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003592:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800359c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <HAL_RCC_OscConfig+0x900>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d121      	bne.n	80035f8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <HAL_RCC_OscConfig+0x900>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0b      	ldr	r2, [pc, #44]	@ (80035e8 <HAL_RCC_OscConfig+0x900>)
 80035ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c0:	f7fd fbe0 	bl	8000d84 <HAL_GetTick>
 80035c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	e010      	b.n	80035ec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ca:	f7fd fbdb 	bl	8000d84 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d908      	bls.n	80035ec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e3d1      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	10908120 	.word	0x10908120
 80035e8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003824 <HAL_RCC_OscConfig+0xb3c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0e8      	beq.n	80035ca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x92e>
 8003608:	4b87      	ldr	r3, [pc, #540]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4a86      	ldr	r2, [pc, #536]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6213      	str	r3, [r2, #32]
 8003614:	e035      	b.n	8003682 <HAL_RCC_OscConfig+0x99a>
 8003616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x958>
 8003626:	4b80      	ldr	r3, [pc, #512]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a7f      	ldr	r2, [pc, #508]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b7d      	ldr	r3, [pc, #500]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a7c      	ldr	r2, [pc, #496]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	e020      	b.n	8003682 <HAL_RCC_OscConfig+0x99a>
 8003640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003644:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b05      	cmp	r3, #5
 800364e:	d10c      	bne.n	800366a <HAL_RCC_OscConfig+0x982>
 8003650:	4b75      	ldr	r3, [pc, #468]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a74      	ldr	r2, [pc, #464]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	6213      	str	r3, [r2, #32]
 800365c:	4b72      	ldr	r3, [pc, #456]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a71      	ldr	r2, [pc, #452]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6213      	str	r3, [r2, #32]
 8003668:	e00b      	b.n	8003682 <HAL_RCC_OscConfig+0x99a>
 800366a:	4b6f      	ldr	r3, [pc, #444]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a6e      	ldr	r2, [pc, #440]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	4b6c      	ldr	r3, [pc, #432]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a6b      	ldr	r2, [pc, #428]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003686:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8081 	beq.w	8003796 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003694:	f7fd fb76 	bl	8000d84 <HAL_GetTick>
 8003698:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e00b      	b.n	80036b6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fd fb71 	bl	8000d84 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e365      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
 80036b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80036be:	2202      	movs	r2, #2
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	fa93 f2a3 	rbit	r2, r3
 80036d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80036e2:	2202      	movs	r2, #2
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80036fc:	601a      	str	r2, [r3, #0]
  return result;
 80036fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003702:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003706:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d102      	bne.n	8003722 <HAL_RCC_OscConfig+0xa3a>
 800371c:	4b42      	ldr	r3, [pc, #264]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	e013      	b.n	800374a <HAL_RCC_OscConfig+0xa62>
 8003722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003726:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800372a:	2202      	movs	r2, #2
 800372c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003732:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	fa93 f2a3 	rbit	r2, r3
 800373c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003740:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	4b38      	ldr	r3, [pc, #224]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800374e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003752:	2102      	movs	r1, #2
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800375a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	fa92 f1a2 	rbit	r1, r2
 8003764:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003768:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800376c:	6011      	str	r1, [r2, #0]
  return result;
 800376e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003772:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	fab2 f282 	clz	r2, r2
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f002 021f 	and.w	r2, r2, #31
 8003788:	2101      	movs	r1, #1
 800378a:	fa01 f202 	lsl.w	r2, r1, r2
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d084      	beq.n	800369e <HAL_RCC_OscConfig+0x9b6>
 8003794:	e083      	b.n	800389e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7fd faf5 	bl	8000d84 <HAL_GetTick>
 800379a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fd faf0 	bl	8000d84 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e2e4      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
 80037b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80037c0:	2202      	movs	r2, #2
 80037c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f2a3 	rbit	r2, r3
 80037d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80037e4:	2202      	movs	r2, #2
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80037fe:	601a      	str	r2, [r3, #0]
  return result;
 8003800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003804:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003808:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d106      	bne.n	800382c <HAL_RCC_OscConfig+0xb44>
 800381e:	4b02      	ldr	r3, [pc, #8]	@ (8003828 <HAL_RCC_OscConfig+0xb40>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	e017      	b.n	8003854 <HAL_RCC_OscConfig+0xb6c>
 8003824:	40007000 	.word	0x40007000
 8003828:	40021000 	.word	0x40021000
 800382c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003830:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003834:	2202      	movs	r2, #2
 8003836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800383c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	fa93 f2a3 	rbit	r2, r3
 8003846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	4bb3      	ldr	r3, [pc, #716]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003858:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800385c:	2102      	movs	r1, #2
 800385e:	6011      	str	r1, [r2, #0]
 8003860:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003864:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	fa92 f1a2 	rbit	r1, r2
 800386e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003872:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003876:	6011      	str	r1, [r2, #0]
  return result;
 8003878:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800387c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	fab2 f282 	clz	r2, r2
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f002 021f 	and.w	r2, r2, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d180      	bne.n	80037a0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800389e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4b9e      	ldr	r3, [pc, #632]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4a9d      	ldr	r2, [pc, #628]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 825e 	beq.w	8003d80 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c4:	4b96      	ldr	r3, [pc, #600]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	f000 821f 	beq.w	8003d10 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	f040 8170 	bne.w	8003bc4 <HAL_RCC_OscConfig+0xedc>
 80038e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80038ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003904:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003908:	601a      	str	r2, [r3, #0]
  return result;
 800390a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800390e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003912:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800391e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	461a      	mov	r2, r3
 8003926:	2300      	movs	r3, #0
 8003928:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fd fa2b 	bl	8000d84 <HAL_GetTick>
 800392e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003932:	e009      	b.n	8003948 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fd fa26 	bl	8000d84 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e21c      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
 8003948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800394c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003950:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f2a3 	rbit	r2, r3
 8003964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003968:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800396c:	601a      	str	r2, [r3, #0]
  return result;
 800396e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003972:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003976:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d102      	bne.n	8003992 <HAL_RCC_OscConfig+0xcaa>
 800398c:	4b64      	ldr	r3, [pc, #400]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	e027      	b.n	80039e2 <HAL_RCC_OscConfig+0xcfa>
 8003992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003996:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800399a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800399e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fa93 f2a3 	rbit	r2, r3
 80039ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80039c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f2a3 	rbit	r2, r3
 80039d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039d8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	4b50      	ldr	r3, [pc, #320]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039e6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80039ea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039ee:	6011      	str	r1, [r2, #0]
 80039f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	fa92 f1a2 	rbit	r1, r2
 80039fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a02:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003a06:	6011      	str	r1, [r2, #0]
  return result;
 8003a08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a0c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	fab2 f282 	clz	r2, r2
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	f042 0220 	orr.w	r2, r2, #32
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	f002 021f 	and.w	r2, r2, #31
 8003a22:	2101      	movs	r1, #1
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d182      	bne.n	8003934 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	f023 020f 	bic.w	r2, r3, #15
 8003a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	4937      	ldr	r1, [pc, #220]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003a48:	4b35      	ldr	r3, [pc, #212]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a19      	ldr	r1, [r3, #32]
 8003a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	492d      	ldr	r1, [pc, #180]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a74:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	fa93 f2a3 	rbit	r2, r3
 8003a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a90:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a94:	601a      	str	r2, [r3, #0]
  return result;
 8003a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003a9e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003aaa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fd f965 	bl	8000d84 <HAL_GetTick>
 8003aba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003abe:	e009      	b.n	8003ad4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd f960 	bl	8000d84 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e156      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
 8003ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003adc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	fa93 f2a3 	rbit	r2, r3
 8003af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003af8:	601a      	str	r2, [r3, #0]
  return result;
 8003afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003afe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003b02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCC_OscConfig+0xe3c>
 8003b18:	4b01      	ldr	r3, [pc, #4]	@ (8003b20 <HAL_RCC_OscConfig+0xe38>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	e02a      	b.n	8003b74 <HAL_RCC_OscConfig+0xe8c>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa93 f2a3 	rbit	r2, r3
 8003b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b44:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	fa93 f2a3 	rbit	r2, r3
 8003b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	4b86      	ldr	r3, [pc, #536]	@ (8003d8c <HAL_RCC_OscConfig+0x10a4>)
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b78:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b80:	6011      	str	r1, [r2, #0]
 8003b82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b86:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fa92 f1a2 	rbit	r1, r2
 8003b90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b94:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003b98:	6011      	str	r1, [r2, #0]
  return result;
 8003b9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b9e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	fab2 f282 	clz	r2, r2
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f042 0220 	orr.w	r2, r2, #32
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f002 021f 	and.w	r2, r2, #31
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f43f af7f 	beq.w	8003ac0 <HAL_RCC_OscConfig+0xdd8>
 8003bc2:	e0dd      	b.n	8003d80 <HAL_RCC_OscConfig+0x1098>
 8003bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bc8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003bcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	fa93 f2a3 	rbit	r2, r3
 8003be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003be4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003be8:	601a      	str	r2, [r3, #0]
  return result;
 8003bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003bf2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bfe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	461a      	mov	r2, r3
 8003c06:	2300      	movs	r3, #0
 8003c08:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fd f8bb 	bl	8000d84 <HAL_GetTick>
 8003c0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c12:	e009      	b.n	8003c28 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fd f8b6 	bl	8000d84 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0ac      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
 8003c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fa93 f2a3 	rbit	r2, r3
 8003c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003c4c:	601a      	str	r2, [r3, #0]
  return result;
 8003c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c52:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003c56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d102      	bne.n	8003c72 <HAL_RCC_OscConfig+0xf8a>
 8003c6c:	4b47      	ldr	r3, [pc, #284]	@ (8003d8c <HAL_RCC_OscConfig+0x10a4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	e027      	b.n	8003cc2 <HAL_RCC_OscConfig+0xfda>
 8003c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c76:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c84:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	fa93 f2a3 	rbit	r2, r3
 8003c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c9c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003caa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <HAL_RCC_OscConfig+0x10a4>)
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cc6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003cca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003cce:	6011      	str	r1, [r2, #0]
 8003cd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cd4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	fa92 f1a2 	rbit	r1, r2
 8003cde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ce2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003ce6:	6011      	str	r1, [r2, #0]
  return result;
 8003ce8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cec:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	fab2 f282 	clz	r2, r2
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	f042 0220 	orr.w	r2, r2, #32
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	f002 021f 	and.w	r2, r2, #31
 8003d02:	2101      	movs	r1, #1
 8003d04:	fa01 f202 	lsl.w	r2, r1, r2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d182      	bne.n	8003c14 <HAL_RCC_OscConfig+0xf2c>
 8003d0e:	e037      	b.n	8003d80 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e02e      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_RCC_OscConfig+0x10a4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003d2c:	4b17      	ldr	r3, [pc, #92]	@ (8003d8c <HAL_RCC_OscConfig+0x10a4>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d38:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d117      	bne.n	8003d7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d50:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d10b      	bne.n	8003d7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000

08003d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b09e      	sub	sp, #120	@ 0x78
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e162      	b.n	800406e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b90      	ldr	r3, [pc, #576]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d910      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b8d      	ldr	r3, [pc, #564]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 0207 	bic.w	r2, r3, #7
 8003dbe:	498b      	ldr	r1, [pc, #556]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b89      	ldr	r3, [pc, #548]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e14a      	b.n	800406e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de4:	4b82      	ldr	r3, [pc, #520]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	497f      	ldr	r1, [pc, #508]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80dc 	beq.w	8003fbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d13c      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xf6>
 8003e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xa6>
 8003e30:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	e00f      	b.n	8003e56 <HAL_RCC_ClockConfig+0xc6>
 8003e36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e52:	4b67      	ldr	r3, [pc, #412]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e5e:	fa92 f2a2 	rbit	r2, r2
 8003e62:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003e64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e66:	fab2 f282 	clz	r2, r2
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	f042 0220 	orr.w	r2, r2, #32
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	f002 021f 	and.w	r2, r2, #31
 8003e76:	2101      	movs	r1, #1
 8003e78:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d17b      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0f3      	b.n	800406e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d13c      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x178>
 8003e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x128>
 8003eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e00f      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x148>
 8003eb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed4:	4b46      	ldr	r3, [pc, #280]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003edc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ede:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ee0:	fa92 f2a2 	rbit	r2, r2
 8003ee4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d13a      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0b2      	b.n	800406e <HAL_RCC_ClockConfig+0x2de>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d102      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x1a0>
 8003f2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	e00d      	b.n	8003f4c <HAL_RCC_ClockConfig+0x1bc>
 8003f30:	2302      	movs	r3, #2
 8003f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	4b29      	ldr	r3, [pc, #164]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	61ba      	str	r2, [r7, #24]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	fa92 f2a2 	rbit	r2, r2
 8003f56:	617a      	str	r2, [r7, #20]
  return result;
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f042 0220 	orr.w	r2, r2, #32
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f002 021f 	and.w	r2, r2, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e079      	b.n	800406e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	491a      	ldr	r1, [pc, #104]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f8c:	f7fc fefa 	bl	8000d84 <HAL_GetTick>
 8003f90:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fc fef6 	bl	8000d84 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e061      	b.n	800406e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	4b11      	ldr	r3, [pc, #68]	@ (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 020c 	and.w	r2, r3, #12
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1eb      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d214      	bcs.n	8003ff4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4906      	ldr	r1, [pc, #24]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e040      	b.n	800406e <HAL_RCC_ClockConfig+0x2de>
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004000:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <HAL_RCC_ClockConfig+0x2e8>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	491a      	ldr	r1, [pc, #104]	@ (8004078 <HAL_RCC_ClockConfig+0x2e8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401e:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <HAL_RCC_ClockConfig+0x2e8>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4912      	ldr	r1, [pc, #72]	@ (8004078 <HAL_RCC_ClockConfig+0x2e8>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004032:	f000 f829 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004036:	4601      	mov	r1, r0
 8004038:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <HAL_RCC_ClockConfig+0x2e8>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004040:	22f0      	movs	r2, #240	@ 0xf0
 8004042:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	fa92 f2a2 	rbit	r2, r2
 800404a:	60fa      	str	r2, [r7, #12]
  return result;
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	fab2 f282 	clz	r2, r2
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	40d3      	lsrs	r3, r2
 8004056:	4a09      	ldr	r2, [pc, #36]	@ (800407c <HAL_RCC_ClockConfig+0x2ec>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	fa21 f303 	lsr.w	r3, r1, r3
 800405e:	4a08      	ldr	r2, [pc, #32]	@ (8004080 <HAL_RCC_ClockConfig+0x2f0>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004062:	4b08      	ldr	r3, [pc, #32]	@ (8004084 <HAL_RCC_ClockConfig+0x2f4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fe48 	bl	8000cfc <HAL_InitTick>
  
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3778      	adds	r7, #120	@ 0x78
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	0800ad44 	.word	0x0800ad44
 8004080:	20000004 	.word	0x20000004
 8004084:	20000008 	.word	0x20000008

08004088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80040a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x98>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d002      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x30>
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d003      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x36>
 80040b6:	e029      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040ba:	613b      	str	r3, [r7, #16]
      break;
 80040bc:	e029      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0c9b      	lsrs	r3, r3, #18
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	4a15      	ldr	r2, [pc, #84]	@ (800412c <HAL_RCC_GetSysClockFreq+0xa4>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e007      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	613b      	str	r3, [r7, #16]
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x9c>)
 800410e:	613b      	str	r3, [r7, #16]
      break;
 8004110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004112:	693b      	ldr	r3, [r7, #16]
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40021000 	.word	0x40021000
 8004124:	007a1200 	.word	0x007a1200
 8004128:	0800ad54 	.word	0x0800ad54
 800412c:	0800ad64 	.word	0x0800ad64

08004130 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b092      	sub	sp, #72	@ 0x48
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80d4 	beq.w	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004154:	4b4e      	ldr	r3, [pc, #312]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10e      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b4b      	ldr	r3, [pc, #300]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	4a4a      	ldr	r2, [pc, #296]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416a:	61d3      	str	r3, [r2, #28]
 800416c:	4b48      	ldr	r3, [pc, #288]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b45      	ldr	r3, [pc, #276]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d118      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b42      	ldr	r3, [pc, #264]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a41      	ldr	r2, [pc, #260]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004194:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004196:	f7fc fdf5 	bl	8000d84 <HAL_GetTick>
 800419a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	e008      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419e:	f7fc fdf1 	bl	8000d84 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	@ 0x64
 80041aa:	d901      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e1d6      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	4b38      	ldr	r3, [pc, #224]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041bc:	4b34      	ldr	r3, [pc, #208]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8084 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d07c      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b26      	ldr	r3, [pc, #152]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	461a      	mov	r2, r3
 8004206:	2301      	movs	r3, #1
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	461a      	mov	r2, r3
 800422a:	2300      	movs	r3, #0
 800422c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800422e:	4a18      	ldr	r2, [pc, #96]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004232:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d04b      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fc fda1 	bl	8000d84 <HAL_GetTick>
 8004242:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fc fd9d 	bl	8000d84 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e180      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800425c:	2302      	movs	r3, #2
 800425e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
 8004268:	2302      	movs	r3, #2
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	61fb      	str	r3, [r7, #28]
  return result;
 8004274:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d108      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800428a:	4b01      	ldr	r3, [pc, #4]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	e00d      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004290:	40021000 	.word	0x40021000
 8004294:	40007000 	.word	0x40007000
 8004298:	10908100 	.word	0x10908100
 800429c:	2302      	movs	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	4b9a      	ldr	r3, [pc, #616]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	2202      	movs	r2, #2
 80042ae:	613a      	str	r2, [r7, #16]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	fa92 f2a2 	rbit	r2, r2
 80042b6:	60fa      	str	r2, [r7, #12]
  return result;
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	fab2 f282 	clz	r2, r2
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f002 021f 	and.w	r2, r2, #31
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0b7      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	498c      	ldr	r1, [pc, #560]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f0:	4b88      	ldr	r3, [pc, #544]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	4a87      	ldr	r2, [pc, #540]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004308:	4b82      	ldr	r3, [pc, #520]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	f023 0203 	bic.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	497f      	ldr	r1, [pc, #508]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004326:	4b7b      	ldr	r3, [pc, #492]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4978      	ldr	r1, [pc, #480]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004344:	4b73      	ldr	r3, [pc, #460]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4970      	ldr	r1, [pc, #448]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004362:	4b6c      	ldr	r3, [pc, #432]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	f023 0210 	bic.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4969      	ldr	r1, [pc, #420]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004380:	4b64      	ldr	r3, [pc, #400]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	4961      	ldr	r1, [pc, #388]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800439e:	4b5d      	ldr	r3, [pc, #372]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	f023 0220 	bic.w	r2, r3, #32
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	495a      	ldr	r1, [pc, #360]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043bc:	4b55      	ldr	r3, [pc, #340]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	4952      	ldr	r1, [pc, #328]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043da:	4b4e      	ldr	r3, [pc, #312]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	494b      	ldr	r1, [pc, #300]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043f8:	4b46      	ldr	r3, [pc, #280]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	4943      	ldr	r1, [pc, #268]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004416:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	493c      	ldr	r1, [pc, #240]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004434:	4b37      	ldr	r3, [pc, #220]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	4934      	ldr	r1, [pc, #208]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004452:	4b30      	ldr	r3, [pc, #192]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	492d      	ldr	r1, [pc, #180]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004460:	4313      	orrs	r3, r2
 8004462:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004470:	4b28      	ldr	r3, [pc, #160]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	4925      	ldr	r1, [pc, #148]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800448e:	4b21      	ldr	r3, [pc, #132]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	491e      	ldr	r1, [pc, #120]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	4916      	ldr	r1, [pc, #88]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80044ca:	4b12      	ldr	r3, [pc, #72]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d6:	490f      	ldr	r1, [pc, #60]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80044e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f4:	4907      	ldr	r1, [pc, #28]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004506:	4b03      	ldr	r3, [pc, #12]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	e002      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451a:	4913      	ldr	r1, [pc, #76]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800451c:	4313      	orrs	r3, r2
 800451e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800452c:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004538:	490b      	ldr	r1, [pc, #44]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800453a:	4313      	orrs	r3, r2
 800453c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800454a:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004556:	4904      	ldr	r1, [pc, #16]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004558:	4313      	orrs	r3, r2
 800455a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3748      	adds	r7, #72	@ 0x48
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000

0800456c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e049      	b.n	8004612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fab6 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f000 fe64 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	f241 1311 	movw	r3, #4369	@ 0x1111
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10f      	bne.n	8004652 <HAL_TIM_Base_Stop+0x38>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	f240 4344 	movw	r3, #1092	@ 0x444
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <HAL_TIM_Base_Stop+0x38>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d001      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e04f      	b.n	8004720 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a23      	ldr	r2, [pc, #140]	@ (800472c <HAL_TIM_Base_Start_IT+0xc4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <HAL_TIM_Base_Start_IT+0x76>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046aa:	d018      	beq.n	80046de <HAL_TIM_Base_Start_IT+0x76>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_TIM_Base_Start_IT+0xc8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_TIM_Base_Start_IT+0x76>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004734 <HAL_TIM_Base_Start_IT+0xcc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_TIM_Base_Start_IT+0x76>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004738 <HAL_TIM_Base_Start_IT+0xd0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_TIM_Base_Start_IT+0x76>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	@ (800473c <HAL_TIM_Base_Start_IT+0xd4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_TIM_Base_Start_IT+0x76>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a19      	ldr	r2, [pc, #100]	@ (8004740 <HAL_TIM_Base_Start_IT+0xd8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d115      	bne.n	800470a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	4b17      	ldr	r3, [pc, #92]	@ (8004744 <HAL_TIM_Base_Start_IT+0xdc>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b06      	cmp	r3, #6
 80046ee:	d015      	beq.n	800471c <HAL_TIM_Base_Start_IT+0xb4>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f6:	d011      	beq.n	800471c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	e008      	b.n	800471c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e000      	b.n	800471e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40013400 	.word	0x40013400
 800473c:	40014000 	.word	0x40014000
 8004740:	40015000 	.word	0x40015000
 8004744:	00010007 	.word	0x00010007

08004748 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	f241 1311 	movw	r3, #4369	@ 0x1111
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10f      	bne.n	8004790 <HAL_TIM_Base_Stop_IT+0x48>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	f240 4344 	movw	r3, #1092	@ 0x444
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_TIM_Base_Stop_IT+0x48>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e049      	b.n	800484c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fc f975 	bl	8000abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f000 fd47 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f001 f8b6 	bl	80059d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a40      	ldr	r2, [pc, #256]	@ (8004974 <HAL_TIM_PWM_Stop+0x120>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_TIM_PWM_Stop+0x54>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3f      	ldr	r2, [pc, #252]	@ (8004978 <HAL_TIM_PWM_Stop+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_TIM_PWM_Stop+0x54>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3d      	ldr	r2, [pc, #244]	@ (800497c <HAL_TIM_PWM_Stop+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_TIM_PWM_Stop+0x54>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a3c      	ldr	r2, [pc, #240]	@ (8004980 <HAL_TIM_PWM_Stop+0x12c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_TIM_PWM_Stop+0x54>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a3a      	ldr	r2, [pc, #232]	@ (8004984 <HAL_TIM_PWM_Stop+0x130>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIM_PWM_Stop+0x54>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a39      	ldr	r2, [pc, #228]	@ (8004988 <HAL_TIM_PWM_Stop+0x134>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <HAL_TIM_PWM_Stop+0x58>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_TIM_PWM_Stop+0x5a>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_TIM_PWM_Stop+0x8e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a1a      	ldr	r2, [r3, #32]
 80048c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <HAL_TIM_PWM_Stop+0x8e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10f      	bne.n	8004912 <HAL_TIM_PWM_Stop+0xbe>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d107      	bne.n	8004912 <HAL_TIM_PWM_Stop+0xbe>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Stop+0xce>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004920:	e023      	b.n	800496a <HAL_TIM_PWM_Stop+0x116>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Stop+0xde>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004930:	e01b      	b.n	800496a <HAL_TIM_PWM_Stop+0x116>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Stop+0xee>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004940:	e013      	b.n	800496a <HAL_TIM_PWM_Stop+0x116>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Stop+0xfe>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004950:	e00b      	b.n	800496a <HAL_TIM_PWM_Stop+0x116>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b10      	cmp	r3, #16
 8004956:	d104      	bne.n	8004962 <HAL_TIM_PWM_Stop+0x10e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004960:	e003      	b.n	800496a <HAL_TIM_PWM_Stop+0x116>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800
 8004988:	40015000 	.word	0x40015000

0800498c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_TIM_PWM_Start_IT+0x28>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e03c      	b.n	8004a2e <HAL_TIM_PWM_Start_IT+0xa2>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d109      	bne.n	80049ce <HAL_TIM_PWM_Start_IT+0x42>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e02f      	b.n	8004a2e <HAL_TIM_PWM_Start_IT+0xa2>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start_IT+0x5c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e022      	b.n	8004a2e <HAL_TIM_PWM_Start_IT+0xa2>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d109      	bne.n	8004a02 <HAL_TIM_PWM_Start_IT+0x76>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e015      	b.n	8004a2e <HAL_TIM_PWM_Start_IT+0xa2>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d109      	bne.n	8004a1c <HAL_TIM_PWM_Start_IT+0x90>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_PWM_Start_IT+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e0ec      	b.n	8004c10 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start_IT+0xba>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	e023      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x102>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start_IT+0xca>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a54:	e01b      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x102>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start_IT+0xda>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a64:	e013      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x102>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start_IT+0xea>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a74:	e00b      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x102>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_PWM_Start_IT+0xfa>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a84:	e003      	b.n	8004a8e <HAL_TIM_PWM_Start_IT+0x102>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d841      	bhi.n	8004b18 <HAL_TIM_PWM_Start_IT+0x18c>
 8004a94:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <HAL_TIM_PWM_Start_IT+0x110>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004ad1 	.word	0x08004ad1
 8004aa0:	08004b19 	.word	0x08004b19
 8004aa4:	08004b19 	.word	0x08004b19
 8004aa8:	08004b19 	.word	0x08004b19
 8004aac:	08004ae3 	.word	0x08004ae3
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004b19 	.word	0x08004b19
 8004abc:	08004af5 	.word	0x08004af5
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004b07 	.word	0x08004b07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0202 	orr.w	r2, r2, #2
 8004ade:	60da      	str	r2, [r3, #12]
      break;
 8004ae0:	e01d      	b.n	8004b1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0204 	orr.w	r2, r2, #4
 8004af0:	60da      	str	r2, [r3, #12]
      break;
 8004af2:	e014      	b.n	8004b1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	60da      	str	r2, [r3, #12]
      break;
 8004b04:	e00b      	b.n	8004b1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0210 	orr.w	r2, r2, #16
 8004b14:	60da      	str	r2, [r3, #12]
      break;
 8004b16:	e002      	b.n	8004b1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d174      	bne.n	8004c0e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	6839      	ldr	r1, [r7, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 ff53 	bl	80059d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a38      	ldr	r2, [pc, #224]	@ (8004c18 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a36      	ldr	r2, [pc, #216]	@ (8004c1c <HAL_TIM_PWM_Start_IT+0x290>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a35      	ldr	r2, [pc, #212]	@ (8004c20 <HAL_TIM_PWM_Start_IT+0x294>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a33      	ldr	r2, [pc, #204]	@ (8004c24 <HAL_TIM_PWM_Start_IT+0x298>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a32      	ldr	r2, [pc, #200]	@ (8004c28 <HAL_TIM_PWM_Start_IT+0x29c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a30      	ldr	r2, [pc, #192]	@ (8004c2c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_TIM_PWM_Start_IT+0x1e6>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_TIM_PWM_Start_IT+0x1e8>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a22      	ldr	r2, [pc, #136]	@ (8004c18 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01d      	beq.n	8004bce <HAL_TIM_PWM_Start_IT+0x242>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9a:	d018      	beq.n	8004bce <HAL_TIM_PWM_Start_IT+0x242>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	@ (8004c30 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_TIM_PWM_Start_IT+0x242>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a22      	ldr	r2, [pc, #136]	@ (8004c34 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00e      	beq.n	8004bce <HAL_TIM_PWM_Start_IT+0x242>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <HAL_TIM_PWM_Start_IT+0x290>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIM_PWM_Start_IT+0x242>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <HAL_TIM_PWM_Start_IT+0x294>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIM_PWM_Start_IT+0x242>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d115      	bne.n	8004bfa <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b06      	cmp	r3, #6
 8004bde:	d015      	beq.n	8004c0c <HAL_TIM_PWM_Start_IT+0x280>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be6:	d011      	beq.n	8004c0c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	e008      	b.n	8004c0c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e000      	b.n	8004c0e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800
 8004c2c:	40015000 	.word	0x40015000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	00010007 	.word	0x00010007

08004c3c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b0c      	cmp	r3, #12
 8004c4e:	d841      	bhi.n	8004cd4 <HAL_TIM_PWM_Stop_IT+0x98>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004cd5 	.word	0x08004cd5
 8004c60:	08004cd5 	.word	0x08004cd5
 8004c64:	08004cd5 	.word	0x08004cd5
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004cd5 	.word	0x08004cd5
 8004c70:	08004cd5 	.word	0x08004cd5
 8004c74:	08004cd5 	.word	0x08004cd5
 8004c78:	08004cb1 	.word	0x08004cb1
 8004c7c:	08004cd5 	.word	0x08004cd5
 8004c80:	08004cd5 	.word	0x08004cd5
 8004c84:	08004cd5 	.word	0x08004cd5
 8004c88:	08004cc3 	.word	0x08004cc3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0202 	bic.w	r2, r2, #2
 8004c9a:	60da      	str	r2, [r3, #12]
      break;
 8004c9c:	e01d      	b.n	8004cda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0204 	bic.w	r2, r2, #4
 8004cac:	60da      	str	r2, [r3, #12]
      break;
 8004cae:	e014      	b.n	8004cda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0208 	bic.w	r2, r2, #8
 8004cbe:	60da      	str	r2, [r3, #12]
      break;
 8004cc0:	e00b      	b.n	8004cda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0210 	bic.w	r2, r2, #16
 8004cd0:	60da      	str	r2, [r3, #12]
      break;
 8004cd2:	e002      	b.n	8004cda <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 8086 	bne.w	8004dee <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fe74 	bl	80059d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a40      	ldr	r2, [pc, #256]	@ (8004df8 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_TIM_PWM_Stop_IT+0xf0>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8004dfc <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a3d      	ldr	r2, [pc, #244]	@ (8004e00 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a3c      	ldr	r2, [pc, #240]	@ (8004e04 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e08 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a39      	ldr	r2, [pc, #228]	@ (8004e0c <HAL_TIM_PWM_Stop_IT+0x1d0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIM_PWM_Stop_IT+0xf4>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <HAL_TIM_PWM_Stop_IT+0xf6>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10f      	bne.n	8004d66 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a1a      	ldr	r2, [r3, #32]
 8004d6c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Stop_IT+0x16a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da4:	e023      	b.n	8004dee <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Stop_IT+0x17a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db4:	e01b      	b.n	8004dee <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Stop_IT+0x18a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc4:	e013      	b.n	8004dee <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_PWM_Stop_IT+0x19a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dd4:	e00b      	b.n	8004dee <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Stop_IT+0x1aa>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	e003      	b.n	8004dee <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800
 8004e0c:	40015000 	.word	0x40015000

08004e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0202 	mvn.w	r2, #2
 8004e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f9f8 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9ea 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fb fc2d 	bl	80006c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0204 	mvn.w	r2, #4
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9d2 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9c4 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fb fc07 	bl	80006c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0208 	mvn.w	r2, #8
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9ac 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f99e 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fb fbe1 	bl	80006c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d020      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01b      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f986 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f978 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fb fbbb 	bl	80006c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00c      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0201 	mvn.w	r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb fb7c 	bl	8000674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00c      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fdd8 	bl	8005b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00c      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fdd0 	bl	8005b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f93e 	bl	8005264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0220 	mvn.w	r2, #32
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd98 	bl	8005b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800502e:	2302      	movs	r3, #2
 8005030:	e0ff      	b.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b14      	cmp	r3, #20
 800503e:	f200 80f0 	bhi.w	8005222 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005042:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005223 	.word	0x08005223
 8005050:	08005223 	.word	0x08005223
 8005054:	08005223 	.word	0x08005223
 8005058:	080050dd 	.word	0x080050dd
 800505c:	08005223 	.word	0x08005223
 8005060:	08005223 	.word	0x08005223
 8005064:	08005223 	.word	0x08005223
 8005068:	0800511f 	.word	0x0800511f
 800506c:	08005223 	.word	0x08005223
 8005070:	08005223 	.word	0x08005223
 8005074:	08005223 	.word	0x08005223
 8005078:	0800515f 	.word	0x0800515f
 800507c:	08005223 	.word	0x08005223
 8005080:	08005223 	.word	0x08005223
 8005084:	08005223 	.word	0x08005223
 8005088:	080051a1 	.word	0x080051a1
 800508c:	08005223 	.word	0x08005223
 8005090:	08005223 	.word	0x08005223
 8005094:	08005223 	.word	0x08005223
 8005098:	080051e1 	.word	0x080051e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f992 	bl	80053cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	619a      	str	r2, [r3, #24]
      break;
 80050da:	e0a5      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fa0c 	bl	8005500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
      break;
 800511c:	e084      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa7f 	bl	8005628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	61da      	str	r2, [r3, #28]
      break;
 800515c:	e064      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 faf1 	bl	800574c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	61da      	str	r2, [r3, #28]
      break;
 800519e:	e043      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fb40 	bl	800582c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0204 	bic.w	r2, r2, #4
 80051ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051de:	e023      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb8a 	bl	8005900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005220:	e002      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
      break;
 8005226:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a48      	ldr	r2, [pc, #288]	@ (80053ac <TIM_Base_SetConfig+0x134>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d00f      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a45      	ldr	r2, [pc, #276]	@ (80053b0 <TIM_Base_SetConfig+0x138>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a44      	ldr	r2, [pc, #272]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a43      	ldr	r2, [pc, #268]	@ (80053b8 <TIM_Base_SetConfig+0x140>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a42      	ldr	r2, [pc, #264]	@ (80053bc <TIM_Base_SetConfig+0x144>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a37      	ldr	r2, [pc, #220]	@ (80053ac <TIM_Base_SetConfig+0x134>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d8:	d01b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a34      	ldr	r2, [pc, #208]	@ (80053b0 <TIM_Base_SetConfig+0x138>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d017      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a33      	ldr	r2, [pc, #204]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a32      	ldr	r2, [pc, #200]	@ (80053b8 <TIM_Base_SetConfig+0x140>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a32      	ldr	r2, [pc, #200]	@ (80053c0 <TIM_Base_SetConfig+0x148>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a31      	ldr	r2, [pc, #196]	@ (80053c4 <TIM_Base_SetConfig+0x14c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a30      	ldr	r2, [pc, #192]	@ (80053c8 <TIM_Base_SetConfig+0x150>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2b      	ldr	r2, [pc, #172]	@ (80053bc <TIM_Base_SetConfig+0x144>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d108      	bne.n	8005324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <TIM_Base_SetConfig+0x134>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <TIM_Base_SetConfig+0x100>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <TIM_Base_SetConfig+0x140>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_Base_SetConfig+0x100>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a19      	ldr	r2, [pc, #100]	@ (80053c0 <TIM_Base_SetConfig+0x148>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x100>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a18      	ldr	r2, [pc, #96]	@ (80053c4 <TIM_Base_SetConfig+0x14c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x100>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a17      	ldr	r2, [pc, #92]	@ (80053c8 <TIM_Base_SetConfig+0x150>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x100>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a12      	ldr	r2, [pc, #72]	@ (80053bc <TIM_Base_SetConfig+0x144>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b01      	cmp	r3, #1
 8005390:	d105      	bne.n	800539e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	611a      	str	r2, [r3, #16]
  }
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40012c00 	.word	0x40012c00
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40000800 	.word	0x40000800
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40015000 	.word	0x40015000
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0201 	bic.w	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0302 	bic.w	r3, r3, #2
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a30      	ldr	r2, [pc, #192]	@ (80054e8 <TIM_OC1_SetConfig+0x11c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2f      	ldr	r2, [pc, #188]	@ (80054ec <TIM_OC1_SetConfig+0x120>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00f      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a2e      	ldr	r2, [pc, #184]	@ (80054f0 <TIM_OC1_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a2d      	ldr	r2, [pc, #180]	@ (80054f4 <TIM_OC1_SetConfig+0x128>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <TIM_OC1_SetConfig+0x12c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2b      	ldr	r2, [pc, #172]	@ (80054fc <TIM_OC1_SetConfig+0x130>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10c      	bne.n	800546e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0308 	bic.w	r3, r3, #8
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <TIM_OC1_SetConfig+0x11c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1c      	ldr	r2, [pc, #112]	@ (80054ec <TIM_OC1_SetConfig+0x120>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1b      	ldr	r2, [pc, #108]	@ (80054f0 <TIM_OC1_SetConfig+0x124>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00b      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1a      	ldr	r2, [pc, #104]	@ (80054f4 <TIM_OC1_SetConfig+0x128>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <TIM_OC1_SetConfig+0x12c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <TIM_OC1_SetConfig+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d111      	bne.n	80054c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800
 80054fc:	40015000 	.word	0x40015000

08005500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f023 0210 	bic.w	r2, r3, #16
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800552e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800553a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0320 	bic.w	r3, r3, #32
 800554e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a2c      	ldr	r2, [pc, #176]	@ (8005610 <TIM_OC2_SetConfig+0x110>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_OC2_SetConfig+0x74>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2b      	ldr	r2, [pc, #172]	@ (8005614 <TIM_OC2_SetConfig+0x114>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC2_SetConfig+0x74>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <TIM_OC2_SetConfig+0x118>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10d      	bne.n	8005590 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800557a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1f      	ldr	r2, [pc, #124]	@ (8005610 <TIM_OC2_SetConfig+0x110>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1e      	ldr	r2, [pc, #120]	@ (8005614 <TIM_OC2_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00f      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1e      	ldr	r2, [pc, #120]	@ (800561c <TIM_OC2_SetConfig+0x11c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005620 <TIM_OC2_SetConfig+0x120>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005624 <TIM_OC2_SetConfig+0x124>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a17      	ldr	r2, [pc, #92]	@ (8005618 <TIM_OC2_SetConfig+0x118>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d113      	bne.n	80055e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40015000 	.word	0x40015000
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	@ (8005734 <TIM_OC3_SetConfig+0x10c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_OC3_SetConfig+0x72>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2a      	ldr	r2, [pc, #168]	@ (8005738 <TIM_OC3_SetConfig+0x110>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_OC3_SetConfig+0x72>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a29      	ldr	r2, [pc, #164]	@ (800573c <TIM_OC3_SetConfig+0x114>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10d      	bne.n	80056b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005734 <TIM_OC3_SetConfig+0x10c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005738 <TIM_OC3_SetConfig+0x110>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00f      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005740 <TIM_OC3_SetConfig+0x118>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00b      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005744 <TIM_OC3_SetConfig+0x11c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005748 <TIM_OC3_SetConfig+0x120>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a16      	ldr	r2, [pc, #88]	@ (800573c <TIM_OC3_SetConfig+0x114>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d113      	bne.n	800570e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40013400 	.word	0x40013400
 800573c:	40015000 	.word	0x40015000
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800579a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005814 <TIM_OC4_SetConfig+0xc8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_OC4_SetConfig+0x8c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a19      	ldr	r2, [pc, #100]	@ (8005818 <TIM_OC4_SetConfig+0xcc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_OC4_SetConfig+0x8c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a18      	ldr	r2, [pc, #96]	@ (800581c <TIM_OC4_SetConfig+0xd0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_OC4_SetConfig+0x8c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a17      	ldr	r2, [pc, #92]	@ (8005820 <TIM_OC4_SetConfig+0xd4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_OC4_SetConfig+0x8c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a16      	ldr	r2, [pc, #88]	@ (8005824 <TIM_OC4_SetConfig+0xd8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC4_SetConfig+0x8c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a15      	ldr	r2, [pc, #84]	@ (8005828 <TIM_OC4_SetConfig+0xdc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d109      	bne.n	80057ec <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800
 8005828:	40015000 	.word	0x40015000

0800582c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005870:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a19      	ldr	r2, [pc, #100]	@ (80058e8 <TIM_OC5_SetConfig+0xbc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <TIM_OC5_SetConfig+0x82>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a18      	ldr	r2, [pc, #96]	@ (80058ec <TIM_OC5_SetConfig+0xc0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00f      	beq.n	80058ae <TIM_OC5_SetConfig+0x82>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a17      	ldr	r2, [pc, #92]	@ (80058f0 <TIM_OC5_SetConfig+0xc4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00b      	beq.n	80058ae <TIM_OC5_SetConfig+0x82>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a16      	ldr	r2, [pc, #88]	@ (80058f4 <TIM_OC5_SetConfig+0xc8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_OC5_SetConfig+0x82>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a15      	ldr	r2, [pc, #84]	@ (80058f8 <TIM_OC5_SetConfig+0xcc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_OC5_SetConfig+0x82>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a14      	ldr	r2, [pc, #80]	@ (80058fc <TIM_OC5_SetConfig+0xd0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d109      	bne.n	80058c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800
 80058fc:	40015000 	.word	0x40015000

08005900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	051b      	lsls	r3, r3, #20
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a1a      	ldr	r2, [pc, #104]	@ (80059c0 <TIM_OC6_SetConfig+0xc0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <TIM_OC6_SetConfig+0x84>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a19      	ldr	r2, [pc, #100]	@ (80059c4 <TIM_OC6_SetConfig+0xc4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_OC6_SetConfig+0x84>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <TIM_OC6_SetConfig+0xc8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_OC6_SetConfig+0x84>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <TIM_OC6_SetConfig+0xcc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_OC6_SetConfig+0x84>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <TIM_OC6_SetConfig+0xd0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC6_SetConfig+0x84>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <TIM_OC6_SetConfig+0xd4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d109      	bne.n	8005998 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800598a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40013400 	.word	0x40013400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800
 80059d4:	40015000 	.word	0x40015000

080059d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2201      	movs	r2, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	401a      	ands	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e06d      	b.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a30      	ldr	r2, [pc, #192]	@ (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a2d      	ldr	r2, [pc, #180]	@ (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d108      	bne.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01d      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab8:	d018      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a15      	ldr	r2, [pc, #84]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a16      	ldr	r2, [pc, #88]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a11      	ldr	r2, [pc, #68]	@ (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10c      	bne.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40013400 	.word	0x40013400
 8005b2c:	40015000 	.word	0x40015000
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40014000 	.word	0x40014000

08005b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b88:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005b8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005bb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	1d3b      	adds	r3, r7, #4
 8005be6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b09d      	sub	sp, #116	@ 0x74
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d81f      	bhi.n	8005c8a <USB_ActivateEndpoint+0x72>
 8005c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c50 <USB_ActivateEndpoint+0x38>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c7d 	.word	0x08005c7d
 8005c58:	08005c93 	.word	0x08005c93
 8005c5c:	08005c6f 	.word	0x08005c6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c6c:	e012      	b.n	8005c94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c72:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005c76:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c7a:	e00b      	b.n	8005c94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c88:	e004      	b.n	8005c94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005c90:	e000      	b.n	8005c94 <USB_ActivateEndpoint+0x7c>
      break;
 8005c92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cce:	b21a      	sxth	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b21b      	sxth	r3, r3
 8005cda:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	7b1b      	ldrb	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 8178 	bne.w	8005ffa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8084 	beq.w	8005e1c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	4413      	add	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	00da      	lsls	r2, r3, #3
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	88db      	ldrh	r3, [r3, #6]
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	827b      	strh	r3, [r7, #18]
 8005d56:	8a7b      	ldrh	r3, [r7, #18]
 8005d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01b      	beq.n	8005d98 <USB_ActivateEndpoint+0x180>
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d76:	823b      	strh	r3, [r7, #16]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	8a3b      	ldrh	r3, [r7, #16]
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	78db      	ldrb	r3, [r3, #3]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d020      	beq.n	8005de2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db6:	81bb      	strh	r3, [r7, #12]
 8005db8:	89bb      	ldrh	r3, [r7, #12]
 8005dba:	f083 0320 	eor.w	r3, r3, #32
 8005dbe:	81bb      	strh	r3, [r7, #12]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	89bb      	ldrh	r3, [r7, #12]
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]
 8005de0:	e2d5      	b.n	800638e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df8:	81fb      	strh	r3, [r7, #14]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	441a      	add	r2, r3
 8005e04:	89fb      	ldrh	r3, [r7, #14]
 8005e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	8013      	strh	r3, [r2, #0]
 8005e1a:	e2b8      	b.n	800638e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	4413      	add	r3, r2
 8005e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	00da      	lsls	r2, r3, #3
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	88db      	ldrh	r3, [r3, #6]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	4413      	add	r3, r2
 8005e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	00da      	lsls	r2, r3, #3
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <USB_ActivateEndpoint+0x28a>
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e039      	b.n	8005f16 <USB_ActivateEndpoint+0x2fe>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ea8:	d818      	bhi.n	8005edc <USB_ActivateEndpoint+0x2c4>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <USB_ActivateEndpoint+0x2ac>
 8005ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	e01c      	b.n	8005f16 <USB_ActivateEndpoint+0x2fe>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <USB_ActivateEndpoint+0x2de>
 8005ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	029b      	lsls	r3, r3, #10
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	4313      	orrs	r3, r2
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <USB_ActivateEndpoint+0x34e>
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f44:	843b      	strh	r3, [r7, #32]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	8c3b      	ldrh	r3, [r7, #32]
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d124      	bne.n	8005fb8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f84:	83bb      	strh	r3, [r7, #28]
 8005f86:	8bbb      	ldrh	r3, [r7, #28]
 8005f88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f8c:	83bb      	strh	r3, [r7, #28]
 8005f8e:	8bbb      	ldrh	r3, [r7, #28]
 8005f90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f94:	83bb      	strh	r3, [r7, #28]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	8bbb      	ldrh	r3, [r7, #28]
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]
 8005fb6:	e1ea      	b.n	800638e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fce:	83fb      	strh	r3, [r7, #30]
 8005fd0:	8bfb      	ldrh	r3, [r7, #30]
 8005fd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005fd6:	83fb      	strh	r3, [r7, #30]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	8bfb      	ldrh	r3, [r7, #30]
 8005fe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	8013      	strh	r3, [r2, #0]
 8005ff8:	e1c9      	b.n	800638e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d11e      	bne.n	8006040 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006018:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006032:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	e01d      	b.n	800607c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006056:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800606c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006078:	b29b      	uxth	r3, r3
 800607a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800608c:	4413      	add	r3, r2
 800608e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	00da      	lsls	r2, r3, #3
 8006096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006098:	4413      	add	r3, r2
 800609a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800609e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	891b      	ldrh	r3, [r3, #8]
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c0:	4413      	add	r3, r2
 80060c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	00da      	lsls	r2, r3, #3
 80060ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	895b      	ldrh	r3, [r3, #10]
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	b29b      	uxth	r3, r3
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 8093 	bne.w	8006214 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80060fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01b      	beq.n	8006142 <USB_ActivateEndpoint+0x52a>
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006120:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006136:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800613a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006150:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01b      	beq.n	8006192 <USB_ActivateEndpoint+0x57a>
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800616c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006170:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800618a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061aa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061b0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061b8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620e:	b29b      	uxth	r3, r3
 8006210:	8013      	strh	r3, [r2, #0]
 8006212:	e0bc      	b.n	800638e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01d      	beq.n	800626c <USB_ActivateEndpoint+0x654>
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006246:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	441a      	add	r2, r3
 8006254:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800625c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006268:	b29b      	uxth	r3, r3
 800626a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800627c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01d      	beq.n	80062c4 <USB_ActivateEndpoint+0x6ac>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80062b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	78db      	ldrb	r3, [r3, #3]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d024      	beq.n	8006316 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80062ea:	f083 0320 	eor.w	r3, r3, #32
 80062ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	441a      	add	r2, r3
 80062fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800630c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006310:	b29b      	uxth	r3, r3
 8006312:	8013      	strh	r3, [r2, #0]
 8006314:	e01d      	b.n	8006352 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800632c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800633e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800634e:	b29b      	uxth	r3, r3
 8006350:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006368:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800637a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800637e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800638a:	b29b      	uxth	r3, r3
 800638c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800638e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006392:	4618      	mov	r0, r3
 8006394:	3774      	adds	r7, #116	@ 0x74
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop

080063a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b08d      	sub	sp, #52	@ 0x34
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	7b1b      	ldrb	r3, [r3, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 808e 	bne.w	80064d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d044      	beq.n	8006446 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	81bb      	strh	r3, [r7, #12]
 80063ca:	89bb      	ldrh	r3, [r7, #12]
 80063cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01b      	beq.n	800640c <USB_DeactivateEndpoint+0x6c>
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ea:	817b      	strh	r3, [r7, #10]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	441a      	add	r2, r3
 80063f6:	897b      	ldrh	r3, [r7, #10]
 80063f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006404:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006408:	b29b      	uxth	r3, r3
 800640a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800641e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006422:	813b      	strh	r3, [r7, #8]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	893b      	ldrh	r3, [r7, #8]
 8006430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006440:	b29b      	uxth	r3, r3
 8006442:	8013      	strh	r3, [r2, #0]
 8006444:	e192      	b.n	800676c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	827b      	strh	r3, [r7, #18]
 8006454:	8a7b      	ldrh	r3, [r7, #18]
 8006456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01b      	beq.n	8006496 <USB_DeactivateEndpoint+0xf6>
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006474:	823b      	strh	r3, [r7, #16]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	8a3b      	ldrh	r3, [r7, #16]
 8006482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800648a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800648e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ac:	81fb      	strh	r3, [r7, #14]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8013      	strh	r3, [r2, #0]
 80064ce:	e14d      	b.n	800676c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 80a5 	bne.w	8006624 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	843b      	strh	r3, [r7, #32]
 80064e8:	8c3b      	ldrh	r3, [r7, #32]
 80064ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01b      	beq.n	800652a <USB_DeactivateEndpoint+0x18a>
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	83fb      	strh	r3, [r7, #30]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	8bfb      	ldrh	r3, [r7, #30]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	83bb      	strh	r3, [r7, #28]
 8006538:	8bbb      	ldrh	r3, [r7, #28]
 800653a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01b      	beq.n	800657a <USB_DeactivateEndpoint+0x1da>
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006558:	837b      	strh	r3, [r7, #26]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	8b7b      	ldrh	r3, [r7, #26]
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006572:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006590:	833b      	strh	r3, [r7, #24]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	8b3b      	ldrh	r3, [r7, #24]
 800659e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c8:	82fb      	strh	r3, [r7, #22]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	8afb      	ldrh	r3, [r7, #22]
 80065d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006600:	82bb      	strh	r3, [r7, #20]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	8abb      	ldrh	r3, [r7, #20]
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]
 8006622:	e0a3      	b.n	800676c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006632:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01b      	beq.n	8006674 <USB_DeactivateEndpoint+0x2d4>
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006668:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800666c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006682:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01b      	beq.n	80066c4 <USB_DeactivateEndpoint+0x324>
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	441a      	add	r2, r3
 80066ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006712:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	441a      	add	r2, r3
 800671e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006730:	b29b      	uxth	r3, r3
 8006732:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006768:	b29b      	uxth	r3, r3
 800676a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3734      	adds	r7, #52	@ 0x34
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b0c2      	sub	sp, #264	@ 0x108
 800677e:	af00      	add	r7, sp, #0
 8006780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006788:	6018      	str	r0, [r3, #0]
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006792:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	f040 86b7 	bne.w	8007514 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d908      	bls.n	80067d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80067d2:	e007      	b.n	80067e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	7b1b      	ldrb	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d13a      	bne.n	800686a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6959      	ldr	r1, [r3, #20]
 8006800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	88da      	ldrh	r2, [r3, #6]
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	b29b      	uxth	r3, r3
 8006812:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006816:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	f001 fc8d 	bl	800813a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	00da      	lsls	r2, r3, #3
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4413      	add	r3, r2
 8006856:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	801a      	strh	r2, [r3, #0]
 8006866:	f000 be1f 	b.w	80074a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800686a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	78db      	ldrb	r3, [r3, #3]
 8006876:	2b02      	cmp	r3, #2
 8006878:	f040 8462 	bne.w	8007140 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a1a      	ldr	r2, [r3, #32]
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	429a      	cmp	r2, r3
 8006896:	f240 83df 	bls.w	8007058 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800689a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80068e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6a1a      	ldr	r2, [r3, #32]
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006906:	1ad2      	subs	r2, r2, r3
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 81c7 	beq.w	8006cca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800693c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	633b      	str	r3, [r7, #48]	@ 0x30
 8006948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d177      	bne.n	8006a48 <USB_EPStartXfer+0x2ce>
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006972:	b29b      	uxth	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	4413      	add	r3, r2
 800697a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800697c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	00da      	lsls	r2, r3, #3
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	4413      	add	r3, r2
 800698e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <USB_EPStartXfer+0x248>
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	e067      	b.n	8006a92 <USB_EPStartXfer+0x318>
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80069c8:	d81c      	bhi.n	8006a04 <USB_EPStartXfer+0x28a>
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <USB_EPStartXfer+0x270>
 80069e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069e4:	3301      	adds	r3, #1
 80069e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e046      	b.n	8006a92 <USB_EPStartXfer+0x318>
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <USB_EPStartXfer+0x2aa>
 8006a1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	029b      	lsls	r3, r3, #10
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	4313      	orrs	r3, r2
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	801a      	strh	r2, [r3, #0]
 8006a46:	e024      	b.n	8006a92 <USB_EPStartXfer+0x318>
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d11c      	bne.n	8006a92 <USB_EPStartXfer+0x318>
 8006a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	4413      	add	r3, r2
 8006a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	00da      	lsls	r2, r3, #3
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	895b      	ldrh	r3, [r3, #10]
 8006a9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6959      	ldr	r1, [r3, #20]
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ab8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006abc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ac0:	6800      	ldr	r0, [r0, #0]
 8006ac2:	f001 fb3a 	bl	800813a <USB_WritePMA>
            ep->xfer_buff += len;
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad6:	441a      	add	r2, r3
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d90f      	bls.n	8006b20 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	1ad2      	subs	r2, r2, r3
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	621a      	str	r2, [r3, #32]
 8006b1e:	e00e      	b.n	8006b3e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d177      	bne.n	8006c3e <USB_EPStartXfer+0x4c4>
 8006b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	4413      	add	r3, r2
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	00da      	lsls	r2, r3, #3
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	4413      	add	r3, r2
 8006b84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <USB_EPStartXfer+0x43e>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	801a      	strh	r2, [r3, #0]
 8006bb6:	e06d      	b.n	8006c94 <USB_EPStartXfer+0x51a>
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bbe:	d81c      	bhi.n	8006bfa <USB_EPStartXfer+0x480>
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <USB_EPStartXfer+0x466>
 8006bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	029b      	lsls	r3, r3, #10
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e04c      	b.n	8006c94 <USB_EPStartXfer+0x51a>
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <USB_EPStartXfer+0x4a0>
 8006c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c14:	3b01      	subs	r3, #1
 8006c16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	029b      	lsls	r3, r3, #10
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e02a      	b.n	8006c94 <USB_EPStartXfer+0x51a>
 8006c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d122      	bne.n	8006c94 <USB_EPStartXfer+0x51a>
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	4413      	add	r3, r2
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	00da      	lsls	r2, r3, #3
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	4413      	add	r3, r2
 8006c84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	891b      	ldrh	r3, [r3, #8]
 8006ca0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6959      	ldr	r1, [r3, #20]
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cbe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cc2:	6800      	ldr	r0, [r0, #0]
 8006cc4:	f001 fa39 	bl	800813a <USB_WritePMA>
 8006cc8:	e3ee      	b.n	80074a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d177      	bne.n	8006dca <USB_EPStartXfer+0x650>
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfa:	4413      	add	r3, r2
 8006cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	00da      	lsls	r2, r3, #3
 8006d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d0e:	4413      	add	r3, r2
 8006d10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <USB_EPStartXfer+0x5ca>
 8006d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d40:	801a      	strh	r2, [r3, #0]
 8006d42:	e06d      	b.n	8006e20 <USB_EPStartXfer+0x6a6>
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d48:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d4a:	d81c      	bhi.n	8006d86 <USB_EPStartXfer+0x60c>
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <USB_EPStartXfer+0x5f2>
 8006d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d66:	3301      	adds	r3, #1
 8006d68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e04c      	b.n	8006e20 <USB_EPStartXfer+0x6a6>
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <USB_EPStartXfer+0x62c>
 8006d9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006da0:	3b01      	subs	r3, #1
 8006da2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e02a      	b.n	8006e20 <USB_EPStartXfer+0x6a6>
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d122      	bne.n	8006e20 <USB_EPStartXfer+0x6a6>
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dfa:	4413      	add	r3, r2
 8006dfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	00da      	lsls	r2, r3, #3
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0e:	4413      	add	r3, r2
 8006e10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	891b      	ldrh	r3, [r3, #8]
 8006e2c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6959      	ldr	r1, [r3, #20]
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e46:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e4a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	f001 f973 	bl	800813a <USB_WritePMA>
            ep->xfer_buff += len;
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695a      	ldr	r2, [r3, #20]
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e64:	441a      	add	r2, r3
 8006e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a1a      	ldr	r2, [r3, #32]
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d90f      	bls.n	8006eae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6a1a      	ldr	r2, [r3, #32]
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	621a      	str	r2, [r3, #32]
 8006eac:	e00e      	b.n	8006ecc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d177      	bne.n	8006fd8 <USB_EPStartXfer+0x85e>
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f08:	4413      	add	r3, r2
 8006f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	00da      	lsls	r2, r3, #3
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <USB_EPStartXfer+0x7d8>
 8006f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4e:	801a      	strh	r2, [r3, #0]
 8006f50:	e067      	b.n	8007022 <USB_EPStartXfer+0x8a8>
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f56:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f58:	d81c      	bhi.n	8006f94 <USB_EPStartXfer+0x81a>
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5e:	085b      	lsrs	r3, r3, #1
 8006f60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <USB_EPStartXfer+0x800>
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f74:	3301      	adds	r3, #1
 8006f76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	029b      	lsls	r3, r3, #10
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e046      	b.n	8007022 <USB_EPStartXfer+0x8a8>
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <USB_EPStartXfer+0x83a>
 8006faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e024      	b.n	8007022 <USB_EPStartXfer+0x8a8>
 8006fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d11c      	bne.n	8007022 <USB_EPStartXfer+0x8a8>
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ffc:	4413      	add	r3, r2
 8006ffe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	00da      	lsls	r2, r3, #3
 800700e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007010:	4413      	add	r3, r2
 8007012:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	b29a      	uxth	r2, r3
 800701e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007020:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	895b      	ldrh	r3, [r3, #10]
 800702e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6959      	ldr	r1, [r3, #20]
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	b29b      	uxth	r3, r3
 8007044:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007048:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800704c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007050:	6800      	ldr	r0, [r0, #0]
 8007052:	f001 f872 	bl	800813a <USB_WritePMA>
 8007056:	e227      	b.n	80074a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800708a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	441a      	add	r2, r3
 80070ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80070b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070de:	b29b      	uxth	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e4:	4413      	add	r3, r2
 80070e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	00da      	lsls	r2, r3, #3
 80070f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070f8:	4413      	add	r3, r2
 80070fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007104:	b29a      	uxth	r2, r3
 8007106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007108:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	891b      	ldrh	r3, [r3, #8]
 8007116:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800711a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6959      	ldr	r1, [r3, #20]
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	b29b      	uxth	r3, r3
 800712c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007130:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007134:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007138:	6800      	ldr	r0, [r0, #0]
 800713a:	f000 fffe 	bl	800813a <USB_WritePMA>
 800713e:	e1b3      	b.n	80074a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	1ad2      	subs	r2, r2, r3
 8007152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800715e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80c6 	beq.w	8007312 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	673b      	str	r3, [r7, #112]	@ 0x70
 8007192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d177      	bne.n	8007292 <USB_EPStartXfer+0xb18>
 80071a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071c2:	4413      	add	r3, r2
 80071c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80071de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <USB_EPStartXfer+0xa92>
 80071f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29a      	uxth	r2, r3
 8007206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e067      	b.n	80072dc <USB_EPStartXfer+0xb62>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	2b3e      	cmp	r3, #62	@ 0x3e
 8007212:	d81c      	bhi.n	800724e <USB_EPStartXfer+0xad4>
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <USB_EPStartXfer+0xaba>
 800722a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800722e:	3301      	adds	r3, #1
 8007230:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800723e:	b29b      	uxth	r3, r3
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	b29b      	uxth	r3, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	b29a      	uxth	r2, r3
 8007248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	e046      	b.n	80072dc <USB_EPStartXfer+0xb62>
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <USB_EPStartXfer+0xaf4>
 8007264:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007268:	3b01      	subs	r3, #1
 800726a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800726e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007278:	b29b      	uxth	r3, r3
 800727a:	029b      	lsls	r3, r3, #10
 800727c:	b29b      	uxth	r3, r3
 800727e:	4313      	orrs	r3, r2
 8007280:	b29b      	uxth	r3, r3
 8007282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728a:	b29a      	uxth	r2, r3
 800728c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e024      	b.n	80072dc <USB_EPStartXfer+0xb62>
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d11c      	bne.n	80072dc <USB_EPStartXfer+0xb62>
 80072a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072b6:	4413      	add	r3, r2
 80072b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	00da      	lsls	r2, r3, #3
 80072c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072ca:	4413      	add	r3, r2
 80072cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	895b      	ldrh	r3, [r3, #10]
 80072e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6959      	ldr	r1, [r3, #20]
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007302:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007306:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	f000 ff15 	bl	800813a <USB_WritePMA>
 8007310:	e0ca      	b.n	80074a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d177      	bne.n	8007412 <USB_EPStartXfer+0xc98>
 8007322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800732e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733c:	b29b      	uxth	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007342:	4413      	add	r3, r2
 8007344:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	00da      	lsls	r2, r3, #3
 8007354:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007356:	4413      	add	r3, r2
 8007358:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800735c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800735e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007368:	b29a      	uxth	r2, r3
 800736a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <USB_EPStartXfer+0xc12>
 8007376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007384:	b29a      	uxth	r2, r3
 8007386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e073      	b.n	8007474 <USB_EPStartXfer+0xcfa>
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007390:	2b3e      	cmp	r3, #62	@ 0x3e
 8007392:	d81c      	bhi.n	80073ce <USB_EPStartXfer+0xc54>
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <USB_EPStartXfer+0xc3a>
 80073aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073ae:	3301      	adds	r3, #1
 80073b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073be:	b29b      	uxth	r3, r3
 80073c0:	029b      	lsls	r3, r3, #10
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	e052      	b.n	8007474 <USB_EPStartXfer+0xcfa>
 80073ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <USB_EPStartXfer+0xc74>
 80073e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073e8:	3b01      	subs	r3, #1
 80073ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	029b      	lsls	r3, r3, #10
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	4313      	orrs	r3, r2
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740a:	b29a      	uxth	r2, r3
 800740c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e030      	b.n	8007474 <USB_EPStartXfer+0xcfa>
 8007412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d128      	bne.n	8007474 <USB_EPStartXfer+0xcfa>
 8007422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800743e:	b29b      	uxth	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007446:	4413      	add	r3, r2
 8007448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	00da      	lsls	r2, r3, #3
 800745a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800745e:	4413      	add	r3, r2
 8007460:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	b29a      	uxth	r2, r3
 800746e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007472:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	891b      	ldrh	r3, [r3, #8]
 8007480:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6959      	ldr	r1, [r3, #20]
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	b29b      	uxth	r3, r3
 8007496:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800749a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800749e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074a2:	6800      	ldr	r0, [r0, #0]
 80074a4:	f000 fe49 	bl	800813a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ce:	817b      	strh	r3, [r7, #10]
 80074d0:	897b      	ldrh	r3, [r7, #10]
 80074d2:	f083 0310 	eor.w	r3, r3, #16
 80074d6:	817b      	strh	r3, [r7, #10]
 80074d8:	897b      	ldrh	r3, [r7, #10]
 80074da:	f083 0320 	eor.w	r3, r3, #32
 80074de:	817b      	strh	r3, [r7, #10]
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	441a      	add	r2, r3
 80074fa:	897b      	ldrh	r3, [r7, #10]
 80074fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800750c:	b29b      	uxth	r3, r3
 800750e:	8013      	strh	r3, [r2, #0]
 8007510:	f000 bcdf 	b.w	8007ed2 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	7b1b      	ldrb	r3, [r3, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 80bc 	bne.w	800769e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	429a      	cmp	r2, r3
 8007540:	d917      	bls.n	8007572 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007562:	1ad2      	subs	r2, r2, r3
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	619a      	str	r2, [r3, #24]
 8007570:	e00e      	b.n	8007590 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2200      	movs	r2, #0
 800758e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075b4:	4413      	add	r3, r2
 80075b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	00da      	lsls	r2, r3, #3
 80075c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075cc:	4413      	add	r3, r2
 80075ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10d      	bne.n	800760e <USB_EPStartXfer+0xe94>
 80075f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007602:	b29a      	uxth	r2, r3
 8007604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	f000 bc28 	b.w	8007e5e <USB_EPStartXfer+0x16e4>
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	2b3e      	cmp	r3, #62	@ 0x3e
 8007614:	d81f      	bhi.n	8007656 <USB_EPStartXfer+0xedc>
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <USB_EPStartXfer+0xebc>
 800762c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007630:	3301      	adds	r3, #1
 8007632:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29a      	uxth	r2, r3
 800763e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007642:	b29b      	uxth	r3, r3
 8007644:	029b      	lsls	r3, r3, #10
 8007646:	b29b      	uxth	r3, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f000 bc04 	b.w	8007e5e <USB_EPStartXfer+0x16e4>
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	095b      	lsrs	r3, r3, #5
 800765c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2b00      	cmp	r3, #0
 800766a:	d104      	bne.n	8007676 <USB_EPStartXfer+0xefc>
 800766c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007670:	3b01      	subs	r3, #1
 8007672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29a      	uxth	r2, r3
 800767e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007682:	b29b      	uxth	r3, r3
 8007684:	029b      	lsls	r3, r3, #10
 8007686:	b29b      	uxth	r3, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007694:	b29a      	uxth	r2, r3
 8007696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e3df      	b.n	8007e5e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800769e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	78db      	ldrb	r3, [r3, #3]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	f040 8218 	bne.w	8007ae0 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 809d 	bne.w	80077fc <USB_EPStartXfer+0x1082>
 80076c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076de:	b29b      	uxth	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076e6:	4413      	add	r3, r2
 80076e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	00da      	lsls	r2, r3, #3
 80076fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076fe:	4413      	add	r3, r2
 8007700:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007704:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10c      	bne.n	8007746 <USB_EPStartXfer+0xfcc>
 800772c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e08f      	b.n	8007866 <USB_EPStartXfer+0x10ec>
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b3e      	cmp	r3, #62	@ 0x3e
 8007754:	d826      	bhi.n	80077a4 <USB_EPStartXfer+0x102a>
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d004      	beq.n	8007786 <USB_EPStartXfer+0x100c>
 800777c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007780:	3301      	adds	r3, #1
 8007782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29b      	uxth	r3, r3
 8007798:	4313      	orrs	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	e060      	b.n	8007866 <USB_EPStartXfer+0x10ec>
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <USB_EPStartXfer+0x105a>
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ce:	3b01      	subs	r3, #1
 80077d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29a      	uxth	r2, r3
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	029b      	lsls	r3, r3, #10
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	4313      	orrs	r3, r2
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	e034      	b.n	8007866 <USB_EPStartXfer+0x10ec>
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d12c      	bne.n	8007866 <USB_EPStartXfer+0x10ec>
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007828:	b29b      	uxth	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007830:	4413      	add	r3, r2
 8007832:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	00da      	lsls	r2, r3, #3
 8007844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007848:	4413      	add	r3, r2
 800784a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800784e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 809d 	bne.w	80079c0 <USB_EPStartXfer+0x1246>
 8007886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078aa:	4413      	add	r3, r2
 80078ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	00da      	lsls	r2, r3, #3
 80078be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078c2:	4413      	add	r3, r2
 80078c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078d8:	b29a      	uxth	r2, r3
 80078da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <USB_EPStartXfer+0x1190>
 80078f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e088      	b.n	8007a1c <USB_EPStartXfer+0x12a2>
 800790a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b3e      	cmp	r3, #62	@ 0x3e
 8007918:	d826      	bhi.n	8007968 <USB_EPStartXfer+0x11ee>
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800792c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <USB_EPStartXfer+0x11d0>
 8007940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007944:	3301      	adds	r3, #1
 8007946:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800794a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29a      	uxth	r2, r3
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	b29b      	uxth	r3, r3
 8007958:	029b      	lsls	r3, r3, #10
 800795a:	b29b      	uxth	r3, r3
 800795c:	4313      	orrs	r3, r2
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	e059      	b.n	8007a1c <USB_EPStartXfer+0x12a2>
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800797a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2b00      	cmp	r3, #0
 800798c:	d104      	bne.n	8007998 <USB_EPStartXfer+0x121e>
 800798e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007992:	3b01      	subs	r3, #1
 8007994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29a      	uxth	r2, r3
 80079a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	029b      	lsls	r3, r3, #10
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4313      	orrs	r3, r2
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079bc:	801a      	strh	r2, [r3, #0]
 80079be:	e02d      	b.n	8007a1c <USB_EPStartXfer+0x12a2>
 80079c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d125      	bne.n	8007a1c <USB_EPStartXfer+0x12a2>
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079de:	b29b      	uxth	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079e6:	4413      	add	r3, r2
 80079e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	00da      	lsls	r2, r3, #3
 80079fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079fe:	4413      	add	r3, r2
 8007a00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a1a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8218 	beq.w	8007e5e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <USB_EPStartXfer+0x12ec>
 8007a5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10d      	bne.n	8007a82 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f040 81f5 	bne.w	8007e5e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 81ee 	bne.w	8007e5e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aa8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ad6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	8013      	strh	r3, [r2, #0]
 8007ade:	e1be      	b.n	8007e5e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	78db      	ldrb	r3, [r3, #3]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	f040 81b4 	bne.w	8007e5a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d917      	bls.n	8007b3e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	619a      	str	r2, [r3, #24]
 8007b3c:	e00e      	b.n	8007b5c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 8085 	bne.w	8007c78 <USB_EPStartXfer+0x14fe>
 8007b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b92:	4413      	add	r3, r2
 8007b94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	00da      	lsls	r2, r3, #3
 8007ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007baa:	4413      	add	r3, r2
 8007bac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bc6:	801a      	strh	r2, [r3, #0]
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10c      	bne.n	8007bea <USB_EPStartXfer+0x1470>
 8007bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007be6:	801a      	strh	r2, [r3, #0]
 8007be8:	e077      	b.n	8007cda <USB_EPStartXfer+0x1560>
 8007bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bee:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bf0:	d81e      	bhi.n	8007c30 <USB_EPStartXfer+0x14b6>
 8007bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf6:	085b      	lsrs	r3, r3, #1
 8007bf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <USB_EPStartXfer+0x1498>
 8007c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	e054      	b.n	8007cda <USB_EPStartXfer+0x1560>
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3e:	f003 031f 	and.w	r3, r3, #31
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d104      	bne.n	8007c50 <USB_EPStartXfer+0x14d6>
 8007c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	029b      	lsls	r3, r3, #10
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4313      	orrs	r3, r2
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e030      	b.n	8007cda <USB_EPStartXfer+0x1560>
 8007c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d128      	bne.n	8007cda <USB_EPStartXfer+0x1560>
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cac:	4413      	add	r3, r2
 8007cae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	00da      	lsls	r2, r3, #3
 8007cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007cd8:	801a      	strh	r2, [r3, #0]
 8007cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 8085 	bne.w	8007e04 <USB_EPStartXfer+0x168a>
 8007cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d1e:	4413      	add	r3, r2
 8007d20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	00da      	lsls	r2, r3, #3
 8007d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d36:	4413      	add	r3, r2
 8007d38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10c      	bne.n	8007d76 <USB_EPStartXfer+0x15fc>
 8007d5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	e073      	b.n	8007e5e <USB_EPStartXfer+0x16e4>
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d7c:	d81e      	bhi.n	8007dbc <USB_EPStartXfer+0x1642>
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <USB_EPStartXfer+0x1624>
 8007d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d98:	3301      	adds	r3, #1
 8007d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	029b      	lsls	r3, r3, #10
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	e050      	b.n	8007e5e <USB_EPStartXfer+0x16e4>
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dca:	f003 031f 	and.w	r3, r3, #31
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <USB_EPStartXfer+0x1662>
 8007dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	029b      	lsls	r3, r3, #10
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4313      	orrs	r3, r2
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e02c      	b.n	8007e5e <USB_EPStartXfer+0x16e4>
 8007e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d124      	bne.n	8007e5e <USB_EPStartXfer+0x16e4>
 8007e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	00da      	lsls	r2, r3, #3
 8007e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e42:	4413      	add	r3, r2
 8007e44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	e001      	b.n	8007e5e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e03a      	b.n	8007ed4 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	441a      	add	r2, r3
 8007eba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d020      	beq.n	8007f32 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f06:	81bb      	strh	r3, [r7, #12]
 8007f08:	89bb      	ldrh	r3, [r7, #12]
 8007f0a:	f083 0310 	eor.w	r3, r3, #16
 8007f0e:	81bb      	strh	r3, [r7, #12]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	441a      	add	r2, r3
 8007f1a:	89bb      	ldrh	r3, [r7, #12]
 8007f1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	8013      	strh	r3, [r2, #0]
 8007f30:	e01f      	b.n	8007f72 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f48:	81fb      	strh	r3, [r7, #14]
 8007f4a:	89fb      	ldrh	r3, [r7, #14]
 8007f4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f50:	81fb      	strh	r3, [r7, #14]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	89fb      	ldrh	r3, [r7, #14]
 8007f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	7b1b      	ldrb	r3, [r3, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 809d 	bne.w	80080ce <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	785b      	ldrb	r3, [r3, #1]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d04c      	beq.n	8008036 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	823b      	strh	r3, [r7, #16]
 8007faa:	8a3b      	ldrh	r3, [r7, #16]
 8007fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01b      	beq.n	8007fec <USB_EPClearStall+0x6c>
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fca:	81fb      	strh	r3, [r7, #14]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	89fb      	ldrh	r3, [r7, #14]
 8007fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	78db      	ldrb	r3, [r3, #3]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d06c      	beq.n	80080ce <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800800a:	81bb      	strh	r3, [r7, #12]
 800800c:	89bb      	ldrh	r3, [r7, #12]
 800800e:	f083 0320 	eor.w	r3, r3, #32
 8008012:	81bb      	strh	r3, [r7, #12]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	441a      	add	r2, r3
 800801e:	89bb      	ldrh	r3, [r7, #12]
 8008020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800802c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008030:	b29b      	uxth	r3, r3
 8008032:	8013      	strh	r3, [r2, #0]
 8008034:	e04b      	b.n	80080ce <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	82fb      	strh	r3, [r7, #22]
 8008044:	8afb      	ldrh	r3, [r7, #22]
 8008046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01b      	beq.n	8008086 <USB_EPClearStall+0x106>
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008064:	82bb      	strh	r3, [r7, #20]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	441a      	add	r2, r3
 8008070:	8abb      	ldrh	r3, [r7, #20]
 8008072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800807a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800807e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008082:	b29b      	uxth	r3, r3
 8008084:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800809c:	827b      	strh	r3, [r7, #18]
 800809e:	8a7b      	ldrh	r3, [r7, #18]
 80080a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080a4:	827b      	strh	r3, [r7, #18]
 80080a6:	8a7b      	ldrh	r3, [r7, #18]
 80080a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080ac:	827b      	strh	r3, [r7, #18]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	441a      	add	r2, r3
 80080b8:	8a7b      	ldrh	r3, [r7, #18]
 80080ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d103      	bne.n	80080f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2280      	movs	r2, #128	@ 0x80
 80080f2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008128:	b29b      	uxth	r3, r3
 800812a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800812c:	68fb      	ldr	r3, [r7, #12]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800813a:	b480      	push	{r7}
 800813c:	b08b      	sub	sp, #44	@ 0x2c
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	4611      	mov	r1, r2
 8008146:	461a      	mov	r2, r3
 8008148:	460b      	mov	r3, r1
 800814a:	80fb      	strh	r3, [r7, #6]
 800814c:	4613      	mov	r3, r2
 800814e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008150:	88bb      	ldrh	r3, [r7, #4]
 8008152:	3301      	adds	r3, #1
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008160:	88fa      	ldrh	r2, [r7, #6]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800816a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008170:	e01b      	b.n	80081aa <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	3301      	adds	r3, #1
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	b21a      	sxth	r2, r3
 8008182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008186:	4313      	orrs	r3, r2
 8008188:	b21b      	sxth	r3, r3
 800818a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	8a7a      	ldrh	r2, [r7, #18]
 8008190:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	3302      	adds	r3, #2
 8008196:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	3301      	adds	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3301      	adds	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80081a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a6:	3b01      	subs	r3, #1
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e0      	bne.n	8008172 <USB_WritePMA+0x38>
  }
}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	372c      	adds	r7, #44	@ 0x2c
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081be:	b480      	push	{r7}
 80081c0:	b08b      	sub	sp, #44	@ 0x2c
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	4611      	mov	r1, r2
 80081ca:	461a      	mov	r2, r3
 80081cc:	460b      	mov	r3, r1
 80081ce:	80fb      	strh	r3, [r7, #6]
 80081d0:	4613      	mov	r3, r2
 80081d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081d4:	88bb      	ldrh	r3, [r7, #4]
 80081d6:	085b      	lsrs	r3, r3, #1
 80081d8:	b29b      	uxth	r3, r3
 80081da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081e4:	88fa      	ldrh	r2, [r7, #6]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081ee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f4:	e018      	b.n	8008228 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	3302      	adds	r3, #2
 8008202:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	b2da      	uxtb	r2, r3
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	3301      	adds	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	0a1b      	lsrs	r3, r3, #8
 8008216:	b2da      	uxtb	r2, r3
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3301      	adds	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	3b01      	subs	r3, #1
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e3      	bne.n	80081f6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800822e:	88bb      	ldrh	r3, [r7, #4]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	b2da      	uxtb	r2, r3
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	701a      	strb	r2, [r3, #0]
  }
}
 800824a:	bf00      	nop
 800824c:	372c      	adds	r7, #44	@ 0x2c
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7c1b      	ldrb	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d115      	bne.n	800829a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800826e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008272:	2202      	movs	r2, #2
 8008274:	2181      	movs	r1, #129	@ 0x81
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fe91 	bl	8009f9e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008286:	2202      	movs	r2, #2
 8008288:	2101      	movs	r1, #1
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fe87 	bl	8009f9e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008298:	e012      	b.n	80082c0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800829a:	2340      	movs	r3, #64	@ 0x40
 800829c:	2202      	movs	r2, #2
 800829e:	2181      	movs	r1, #129	@ 0x81
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fe7c 	bl	8009f9e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082ac:	2340      	movs	r3, #64	@ 0x40
 80082ae:	2202      	movs	r2, #2
 80082b0:	2101      	movs	r1, #1
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fe73 	bl	8009f9e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082c0:	2308      	movs	r3, #8
 80082c2:	2203      	movs	r2, #3
 80082c4:	2182      	movs	r1, #130	@ 0x82
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fe69 	bl	8009f9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082d2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80082d6:	f001 ff89 	bl	800a1ec <USBD_static_malloc>
 80082da:	4602      	mov	r2, r0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
 80082f0:	e026      	b.n	8008340 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7c1b      	ldrb	r3, [r3, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d109      	bne.n	8008330 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008322:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008326:	2101      	movs	r1, #1
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 ff29 	bl	800a180 <USBD_LL_PrepareReceive>
 800832e:	e007      	b.n	8008340 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008336:	2340      	movs	r3, #64	@ 0x40
 8008338:	2101      	movs	r1, #1
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 ff20 	bl	800a180 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800835a:	2181      	movs	r1, #129	@ 0x81
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fe44 	bl	8009fea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008368:	2101      	movs	r1, #1
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 fe3d 	bl	8009fea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008378:	2182      	movs	r1, #130	@ 0x82
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fe35 	bl	8009fea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00e      	beq.n	80083ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 ff31 	bl	800a208 <USBD_static_free>
    pdev->pClassData = NULL;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d039      	beq.n	8008456 <USBD_CDC_Setup+0x9e>
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d17f      	bne.n	80084e6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	88db      	ldrh	r3, [r3, #6]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d029      	beq.n	8008442 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b25b      	sxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da11      	bge.n	800841c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008404:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	88d2      	ldrh	r2, [r2, #6]
 800840a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800840c:	6939      	ldr	r1, [r7, #16]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	88db      	ldrh	r3, [r3, #6]
 8008412:	461a      	mov	r2, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 fa0f 	bl	8009838 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800841a:	e06b      	b.n	80084f4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	785a      	ldrb	r2, [r3, #1]
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88db      	ldrh	r3, [r3, #6]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008432:	6939      	ldr	r1, [r7, #16]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	88db      	ldrh	r3, [r3, #6]
 8008438:	461a      	mov	r2, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fa2a 	bl	8009894 <USBD_CtlPrepareRx>
      break;
 8008440:	e058      	b.n	80084f4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	7850      	ldrb	r0, [r2, #1]
 800844e:	2200      	movs	r2, #0
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	4798      	blx	r3
      break;
 8008454:	e04e      	b.n	80084f4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	2b0b      	cmp	r3, #11
 800845c:	d02e      	beq.n	80084bc <USBD_CDC_Setup+0x104>
 800845e:	2b0b      	cmp	r3, #11
 8008460:	dc38      	bgt.n	80084d4 <USBD_CDC_Setup+0x11c>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <USBD_CDC_Setup+0xb4>
 8008466:	2b0a      	cmp	r3, #10
 8008468:	d014      	beq.n	8008494 <USBD_CDC_Setup+0xdc>
 800846a:	e033      	b.n	80084d4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008472:	2b03      	cmp	r3, #3
 8008474:	d107      	bne.n	8008486 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	2202      	movs	r2, #2
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 f9da 	bl	8009838 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008484:	e02e      	b.n	80084e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 f96a 	bl	8009762 <USBD_CtlError>
            ret = USBD_FAIL;
 800848e:	2302      	movs	r3, #2
 8008490:	75fb      	strb	r3, [r7, #23]
          break;
 8008492:	e027      	b.n	80084e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849a:	2b03      	cmp	r3, #3
 800849c:	d107      	bne.n	80084ae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800849e:	f107 030f 	add.w	r3, r7, #15
 80084a2:	2201      	movs	r2, #1
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 f9c6 	bl	8009838 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084ac:	e01a      	b.n	80084e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f956 	bl	8009762 <USBD_CtlError>
            ret = USBD_FAIL;
 80084b6:	2302      	movs	r3, #2
 80084b8:	75fb      	strb	r3, [r7, #23]
          break;
 80084ba:	e013      	b.n	80084e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d00d      	beq.n	80084e2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f94a 	bl	8009762 <USBD_CtlError>
            ret = USBD_FAIL;
 80084ce:	2302      	movs	r3, #2
 80084d0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084d2:	e006      	b.n	80084e2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 f943 	bl	8009762 <USBD_CtlError>
          ret = USBD_FAIL;
 80084dc:	2302      	movs	r3, #2
 80084de:	75fb      	strb	r3, [r7, #23]
          break;
 80084e0:	e000      	b.n	80084e4 <USBD_CDC_Setup+0x12c>
          break;
 80084e2:	bf00      	nop
      }
      break;
 80084e4:	e006      	b.n	80084f4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 f93a 	bl	8009762 <USBD_CtlError>
      ret = USBD_FAIL;
 80084ee:	2302      	movs	r3, #2
 80084f0:	75fb      	strb	r3, [r7, #23]
      break;
 80084f2:	bf00      	nop
  }

  return ret;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008510:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008518:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d03a      	beq.n	800859a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	331c      	adds	r3, #28
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d029      	beq.n	800858e <USBD_CDC_DataIn+0x90>
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	440b      	add	r3, r1
 8008548:	331c      	adds	r3, #28
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	78f9      	ldrb	r1, [r7, #3]
 800854e:	68b8      	ldr	r0, [r7, #8]
 8008550:	460b      	mov	r3, r1
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	4403      	add	r3, r0
 800855a:	3320      	adds	r3, #32
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008562:	fb01 f303 	mul.w	r3, r1, r3
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d110      	bne.n	800858e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800856c:	78fa      	ldrb	r2, [r7, #3]
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	331c      	adds	r3, #28
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008580:	78f9      	ldrb	r1, [r7, #3]
 8008582:	2300      	movs	r3, #0
 8008584:	2200      	movs	r2, #0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 fdd7 	bl	800a13a <USBD_LL_Transmit>
 800858c:	e003      	b.n	8008596 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	e000      	b.n	800859c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800859a:	2302      	movs	r3, #2
  }
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 fe02 	bl	800a1c6 <USBD_LL_GetRxDataSize>
 80085c2:	4602      	mov	r2, r0
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00d      	beq.n	80085f0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80085e8:	4611      	mov	r1, r2
 80085ea:	4798      	blx	r3

    return USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	e000      	b.n	80085f2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80085f0:	2302      	movs	r3, #2
  }
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008608:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008610:	2b00      	cmp	r3, #0
 8008612:	d014      	beq.n	800863e <USBD_CDC_EP0_RxReady+0x44>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800861a:	2bff      	cmp	r3, #255	@ 0xff
 800861c:	d00f      	beq.n	800863e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800862c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008634:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	22ff      	movs	r2, #255	@ 0xff
 800863a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2243      	movs	r2, #67	@ 0x43
 8008654:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008656:	4b03      	ldr	r3, [pc, #12]	@ (8008664 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	20000098 	.word	0x20000098

08008668 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2243      	movs	r2, #67	@ 0x43
 8008674:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008676:	4b03      	ldr	r3, [pc, #12]	@ (8008684 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	20000054 	.word	0x20000054

08008688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2243      	movs	r2, #67	@ 0x43
 8008694:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008696:	4b03      	ldr	r3, [pc, #12]	@ (80086a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	200000dc 	.word	0x200000dc

080086a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	220a      	movs	r2, #10
 80086b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80086b6:	4b03      	ldr	r3, [pc, #12]	@ (80086c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	20000010 	.word	0x20000010

080086c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80086d2:	2302      	movs	r3, #2
 80086d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b087      	sub	sp, #28
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	4613      	mov	r3, r2
 8008702:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800870a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008714:	88fa      	ldrh	r2, [r7, #6]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800872a:	b480      	push	{r7}
 800872c:	b085      	sub	sp, #20
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800873a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008760:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01c      	beq.n	80087a6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008772:	2b00      	cmp	r3, #0
 8008774:	d115      	bne.n	80087a2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008794:	b29b      	uxth	r3, r3
 8008796:	2181      	movs	r1, #129	@ 0x81
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 fcce 	bl	800a13a <USBD_LL_Transmit>

      return USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	e002      	b.n	80087a8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80087a6:	2302      	movs	r3, #2
  }
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087be:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d017      	beq.n	80087fa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7c1b      	ldrb	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087dc:	2101      	movs	r1, #1
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fcce 	bl	800a180 <USBD_LL_PrepareReceive>
 80087e4:	e007      	b.n	80087f6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087ec:	2340      	movs	r3, #64	@ 0x40
 80087ee:	2101      	movs	r1, #1
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 fcc5 	bl	800a180 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e000      	b.n	80087fc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80087fa:	2302      	movs	r3, #2
  }
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008818:	2302      	movs	r3, #2
 800881a:	e01a      	b.n	8008852 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	79fa      	ldrb	r2, [r7, #7]
 8008848:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f001 fb30 	bl	8009eb0 <USBD_LL_Init>

  return USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]
 800887a:	e001      	b.n	8008880 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800887c:	2302      	movs	r3, #2
 800887e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 fb66 	bl	8009f68 <USBD_LL_Start>

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088c8:	2302      	movs	r3, #2
 80088ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4611      	mov	r1, r2
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	4611      	mov	r1, r2
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3

  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 fedb 	bl	80096ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008946:	461a      	mov	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008954:	f003 031f 	and.w	r3, r3, #31
 8008958:	2b02      	cmp	r3, #2
 800895a:	d016      	beq.n	800898a <USBD_LL_SetupStage+0x6a>
 800895c:	2b02      	cmp	r3, #2
 800895e:	d81c      	bhi.n	800899a <USBD_LL_SetupStage+0x7a>
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <USBD_LL_SetupStage+0x4a>
 8008964:	2b01      	cmp	r3, #1
 8008966:	d008      	beq.n	800897a <USBD_LL_SetupStage+0x5a>
 8008968:	e017      	b.n	800899a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f9ce 	bl	8008d14 <USBD_StdDevReq>
      break;
 8008978:	e01a      	b.n	80089b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa30 	bl	8008de8 <USBD_StdItfReq>
      break;
 8008988:	e012      	b.n	80089b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa70 	bl	8008e78 <USBD_StdEPReq>
      break;
 8008998:	e00a      	b.n	80089b0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fb3d 	bl	800a028 <USBD_LL_StallEP>
      break;
 80089ae:	bf00      	nop
  }

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	460b      	mov	r3, r1
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d14b      	bne.n	8008a66 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80089d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d134      	bne.n	8008a4a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d919      	bls.n	8008a20 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	1ad2      	subs	r2, r2, r3
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d203      	bcs.n	8008a0e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	e002      	b.n	8008a14 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	461a      	mov	r2, r3
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 ff59 	bl	80098d0 <USBD_CtlContinueRx>
 8008a1e:	e038      	b.n	8008a92 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d105      	bne.n	8008a42 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 ff56 	bl	80098f4 <USBD_CtlSendStatus>
 8008a48:	e023      	b.n	8008a92 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a50:	2b05      	cmp	r3, #5
 8008a52:	d11e      	bne.n	8008a92 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f001 fae2 	bl	800a028 <USBD_LL_StallEP>
 8008a64:	e015      	b.n	8008a92 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00d      	beq.n	8008a8e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d108      	bne.n	8008a8e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	7afa      	ldrb	r2, [r7, #11]
 8008a86:	4611      	mov	r1, r2
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	4798      	blx	r3
 8008a8c:	e001      	b.n	8008a92 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e000      	b.n	8008a94 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d17f      	bne.n	8008bb0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3314      	adds	r3, #20
 8008ab4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d15c      	bne.n	8008b7a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d915      	bls.n	8008af8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	1ad2      	subs	r2, r2, r3
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fec3 	bl	8009870 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aea:	2300      	movs	r3, #0
 8008aec:	2200      	movs	r2, #0
 8008aee:	2100      	movs	r1, #0
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f001 fb45 	bl	800a180 <USBD_LL_PrepareReceive>
 8008af6:	e04e      	b.n	8008b96 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	6912      	ldr	r2, [r2, #16]
 8008b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b04:	fb01 f202 	mul.w	r2, r1, r2
 8008b08:	1a9b      	subs	r3, r3, r2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d11c      	bne.n	8008b48 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d316      	bcc.n	8008b48 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d20f      	bcs.n	8008b48 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 fe9f 	bl	8009870 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f001 fb1d 	bl	800a180 <USBD_LL_PrepareReceive>
 8008b46:	e026      	b.n	8008b96 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d105      	bne.n	8008b6a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b6a:	2180      	movs	r1, #128	@ 0x80
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f001 fa5b 	bl	800a028 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 fed1 	bl	800991a <USBD_CtlReceiveStatus>
 8008b78:	e00d      	b.n	8008b96 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d004      	beq.n	8008b8e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d103      	bne.n	8008b96 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b8e:	2180      	movs	r1, #128	@ 0x80
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f001 fa49 	bl	800a028 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d11d      	bne.n	8008bdc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7ff fe80 	bl	80088a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008bae:	e015      	b.n	8008bdc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00d      	beq.n	8008bd8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d108      	bne.n	8008bd8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	7afa      	ldrb	r2, [r7, #11]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	4798      	blx	r3
 8008bd6:	e001      	b.n	8008bdc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e000      	b.n	8008bde <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bee:	2340      	movs	r3, #64	@ 0x40
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 f9d2 	bl	8009f9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2240      	movs	r2, #64	@ 0x40
 8008c06:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c0a:	2340      	movs	r3, #64	@ 0x40
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2180      	movs	r1, #128	@ 0x80
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f9c4 	bl	8009f9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2240      	movs	r2, #64	@ 0x40
 8008c20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6852      	ldr	r2, [r2, #4]
 8008c56:	b2d2      	uxtb	r2, r2
 8008c58:	4611      	mov	r1, r2
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d105      	bne.n	8008cd0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d10b      	bne.n	8008d08 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d2a:	2b40      	cmp	r3, #64	@ 0x40
 8008d2c:	d005      	beq.n	8008d3a <USBD_StdDevReq+0x26>
 8008d2e:	2b40      	cmp	r3, #64	@ 0x40
 8008d30:	d84f      	bhi.n	8008dd2 <USBD_StdDevReq+0xbe>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d009      	beq.n	8008d4a <USBD_StdDevReq+0x36>
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d14b      	bne.n	8008dd2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	4798      	blx	r3
      break;
 8008d48:	e048      	b.n	8008ddc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	2b09      	cmp	r3, #9
 8008d50:	d839      	bhi.n	8008dc6 <USBD_StdDevReq+0xb2>
 8008d52:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <USBD_StdDevReq+0x44>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008da9 	.word	0x08008da9
 8008d5c:	08008dbd 	.word	0x08008dbd
 8008d60:	08008dc7 	.word	0x08008dc7
 8008d64:	08008db3 	.word	0x08008db3
 8008d68:	08008dc7 	.word	0x08008dc7
 8008d6c:	08008d8b 	.word	0x08008d8b
 8008d70:	08008d81 	.word	0x08008d81
 8008d74:	08008dc7 	.word	0x08008dc7
 8008d78:	08008d9f 	.word	0x08008d9f
 8008d7c:	08008d95 	.word	0x08008d95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f9dc 	bl	8009140 <USBD_GetDescriptor>
          break;
 8008d88:	e022      	b.n	8008dd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fb3f 	bl	8009410 <USBD_SetAddress>
          break;
 8008d92:	e01d      	b.n	8008dd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fb7e 	bl	8009498 <USBD_SetConfig>
          break;
 8008d9c:	e018      	b.n	8008dd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fc07 	bl	80095b4 <USBD_GetConfig>
          break;
 8008da6:	e013      	b.n	8008dd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fc37 	bl	800961e <USBD_GetStatus>
          break;
 8008db0:	e00e      	b.n	8008dd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fc65 	bl	8009684 <USBD_SetFeature>
          break;
 8008dba:	e009      	b.n	8008dd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fc74 	bl	80096ac <USBD_ClrFeature>
          break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fcca 	bl	8009762 <USBD_CtlError>
          break;
 8008dce:	bf00      	nop
      }
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fcc4 	bl	8009762 <USBD_CtlError>
      break;
 8008dda:	bf00      	nop
  }

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop

08008de8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dfe:	2b40      	cmp	r3, #64	@ 0x40
 8008e00:	d005      	beq.n	8008e0e <USBD_StdItfReq+0x26>
 8008e02:	2b40      	cmp	r3, #64	@ 0x40
 8008e04:	d82e      	bhi.n	8008e64 <USBD_StdItfReq+0x7c>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <USBD_StdItfReq+0x26>
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d12a      	bne.n	8008e64 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e14:	3b01      	subs	r3, #1
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d81d      	bhi.n	8008e56 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	889b      	ldrh	r3, [r3, #4]
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d813      	bhi.n	8008e4c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	88db      	ldrh	r3, [r3, #6]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d110      	bne.n	8008e60 <USBD_StdItfReq+0x78>
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10d      	bne.n	8008e60 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fd55 	bl	80098f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e4a:	e009      	b.n	8008e60 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fc87 	bl	8009762 <USBD_CtlError>
          break;
 8008e54:	e004      	b.n	8008e60 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fc82 	bl	8009762 <USBD_CtlError>
          break;
 8008e5e:	e000      	b.n	8008e62 <USBD_StdItfReq+0x7a>
          break;
 8008e60:	bf00      	nop
      }
      break;
 8008e62:	e004      	b.n	8008e6e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fc7b 	bl	8009762 <USBD_CtlError>
      break;
 8008e6c:	bf00      	nop
  }

  return USBD_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	889b      	ldrh	r3, [r3, #4]
 8008e8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e94:	2b40      	cmp	r3, #64	@ 0x40
 8008e96:	d007      	beq.n	8008ea8 <USBD_StdEPReq+0x30>
 8008e98:	2b40      	cmp	r3, #64	@ 0x40
 8008e9a:	f200 8146 	bhi.w	800912a <USBD_StdEPReq+0x2b2>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <USBD_StdEPReq+0x40>
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	f040 8141 	bne.w	800912a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
      break;
 8008eb6:	e13d      	b.n	8009134 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d10a      	bne.n	8008eda <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	4798      	blx	r3
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	e12d      	b.n	8009136 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d007      	beq.n	8008ef2 <USBD_StdEPReq+0x7a>
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	f300 811b 	bgt.w	800911e <USBD_StdEPReq+0x2a6>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d072      	beq.n	8008fd2 <USBD_StdEPReq+0x15a>
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d03a      	beq.n	8008f66 <USBD_StdEPReq+0xee>
 8008ef0:	e115      	b.n	800911e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d002      	beq.n	8008f02 <USBD_StdEPReq+0x8a>
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d015      	beq.n	8008f2c <USBD_StdEPReq+0xb4>
 8008f00:	e02b      	b.n	8008f5a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <USBD_StdEPReq+0xaa>
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b80      	cmp	r3, #128	@ 0x80
 8008f0c:	d009      	beq.n	8008f22 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 f888 	bl	800a028 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f18:	2180      	movs	r1, #128	@ 0x80
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 f884 	bl	800a028 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f20:	e020      	b.n	8008f64 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fc1c 	bl	8009762 <USBD_CtlError>
              break;
 8008f2a:	e01b      	b.n	8008f64 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10e      	bne.n	8008f52 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00b      	beq.n	8008f52 <USBD_StdEPReq+0xda>
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b80      	cmp	r3, #128	@ 0x80
 8008f3e:	d008      	beq.n	8008f52 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	88db      	ldrh	r3, [r3, #6]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d104      	bne.n	8008f52 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 f86b 	bl	800a028 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fcce 	bl	80098f4 <USBD_CtlSendStatus>

              break;
 8008f58:	e004      	b.n	8008f64 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fc00 	bl	8009762 <USBD_CtlError>
              break;
 8008f62:	bf00      	nop
          }
          break;
 8008f64:	e0e0      	b.n	8009128 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d002      	beq.n	8008f76 <USBD_StdEPReq+0xfe>
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d015      	beq.n	8008fa0 <USBD_StdEPReq+0x128>
 8008f74:	e026      	b.n	8008fc4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00c      	beq.n	8008f96 <USBD_StdEPReq+0x11e>
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b80      	cmp	r3, #128	@ 0x80
 8008f80:	d009      	beq.n	8008f96 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 f84e 	bl	800a028 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f8c:	2180      	movs	r1, #128	@ 0x80
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 f84a 	bl	800a028 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f94:	e01c      	b.n	8008fd0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fbe2 	bl	8009762 <USBD_CtlError>
              break;
 8008f9e:	e017      	b.n	8008fd0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	885b      	ldrh	r3, [r3, #2]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d112      	bne.n	8008fce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d004      	beq.n	8008fbc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f855 	bl	800a066 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fc99 	bl	80098f4 <USBD_CtlSendStatus>
              }
              break;
 8008fc2:	e004      	b.n	8008fce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fbcb 	bl	8009762 <USBD_CtlError>
              break;
 8008fcc:	e000      	b.n	8008fd0 <USBD_StdEPReq+0x158>
              break;
 8008fce:	bf00      	nop
          }
          break;
 8008fd0:	e0aa      	b.n	8009128 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d002      	beq.n	8008fe2 <USBD_StdEPReq+0x16a>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d032      	beq.n	8009046 <USBD_StdEPReq+0x1ce>
 8008fe0:	e097      	b.n	8009112 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <USBD_StdEPReq+0x180>
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b80      	cmp	r3, #128	@ 0x80
 8008fec:	d004      	beq.n	8008ff8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fbb6 	bl	8009762 <USBD_CtlError>
                break;
 8008ff6:	e091      	b.n	800911c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	da0b      	bge.n	8009018 <USBD_StdEPReq+0x1a0>
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	3310      	adds	r3, #16
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	3304      	adds	r3, #4
 8009016:	e00b      	b.n	8009030 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	3304      	adds	r3, #4
 8009030:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2202      	movs	r2, #2
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fbfa 	bl	8009838 <USBD_CtlSendData>
              break;
 8009044:	e06a      	b.n	800911c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800904a:	2b00      	cmp	r3, #0
 800904c:	da11      	bge.n	8009072 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	3318      	adds	r3, #24
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d117      	bne.n	8009098 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fb79 	bl	8009762 <USBD_CtlError>
                  break;
 8009070:	e054      	b.n	800911c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	f003 020f 	and.w	r2, r3, #15
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	440b      	add	r3, r1
 8009084:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fb66 	bl	8009762 <USBD_CtlError>
                  break;
 8009096:	e041      	b.n	800911c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800909c:	2b00      	cmp	r3, #0
 800909e:	da0b      	bge.n	80090b8 <USBD_StdEPReq+0x240>
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	3310      	adds	r3, #16
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4413      	add	r3, r2
 80090b4:	3304      	adds	r3, #4
 80090b6:	e00b      	b.n	80090d0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	4413      	add	r3, r2
 80090ce:	3304      	adds	r3, #4
 80090d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <USBD_StdEPReq+0x266>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b80      	cmp	r3, #128	@ 0x80
 80090dc:	d103      	bne.n	80090e6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	e00e      	b.n	8009104 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 ffda 	bl	800a0a4 <USBD_LL_IsStallEP>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2201      	movs	r2, #1
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	e002      	b.n	8009104 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2202      	movs	r2, #2
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb94 	bl	8009838 <USBD_CtlSendData>
              break;
 8009110:	e004      	b.n	800911c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fb24 	bl	8009762 <USBD_CtlError>
              break;
 800911a:	bf00      	nop
          }
          break;
 800911c:	e004      	b.n	8009128 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fb1e 	bl	8009762 <USBD_CtlError>
          break;
 8009126:	bf00      	nop
      }
      break;
 8009128:	e004      	b.n	8009134 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fb18 	bl	8009762 <USBD_CtlError>
      break;
 8009132:	bf00      	nop
  }

  return ret;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	885b      	ldrh	r3, [r3, #2]
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	b29b      	uxth	r3, r3
 800915e:	3b01      	subs	r3, #1
 8009160:	2b06      	cmp	r3, #6
 8009162:	f200 8128 	bhi.w	80093b6 <USBD_GetDescriptor+0x276>
 8009166:	a201      	add	r2, pc, #4	@ (adr r2, 800916c <USBD_GetDescriptor+0x2c>)
 8009168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916c:	08009189 	.word	0x08009189
 8009170:	080091a1 	.word	0x080091a1
 8009174:	080091e1 	.word	0x080091e1
 8009178:	080093b7 	.word	0x080093b7
 800917c:	080093b7 	.word	0x080093b7
 8009180:	08009357 	.word	0x08009357
 8009184:	08009383 	.word	0x08009383
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	7c12      	ldrb	r2, [r2, #16]
 8009194:	f107 0108 	add.w	r1, r7, #8
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	60f8      	str	r0, [r7, #12]
      break;
 800919e:	e112      	b.n	80093c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	7c1b      	ldrb	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10d      	bne.n	80091c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b0:	f107 0208 	add.w	r2, r7, #8
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
 80091b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	2202      	movs	r2, #2
 80091c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091c2:	e100      	b.n	80093c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091cc:	f107 0208 	add.w	r2, r7, #8
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
 80091d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	2202      	movs	r2, #2
 80091dc:	701a      	strb	r2, [r3, #0]
      break;
 80091de:	e0f2      	b.n	80093c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	885b      	ldrh	r3, [r3, #2]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	f200 80ac 	bhi.w	8009344 <USBD_GetDescriptor+0x204>
 80091ec:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <USBD_GetDescriptor+0xb4>)
 80091ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f2:	bf00      	nop
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	08009241 	.word	0x08009241
 80091fc:	08009275 	.word	0x08009275
 8009200:	080092a9 	.word	0x080092a9
 8009204:	080092dd 	.word	0x080092dd
 8009208:	08009311 	.word	0x08009311
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922e:	e091      	b.n	8009354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa95 	bl	8009762 <USBD_CtlError>
            err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
          break;
 800923e:	e089      	b.n	8009354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009262:	e077      	b.n	8009354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa7b 	bl	8009762 <USBD_CtlError>
            err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
          break;
 8009272:	e06f      	b.n	8009354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e05d      	b.n	8009354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa61 	bl	8009762 <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e055      	b.n	8009354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7c12      	ldrb	r2, [r2, #16]
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ca:	e043      	b.n	8009354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa47 	bl	8009762 <USBD_CtlError>
            err++;
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	3301      	adds	r3, #1
 80092d8:	72fb      	strb	r3, [r7, #11]
          break;
 80092da:	e03b      	b.n	8009354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fe:	e029      	b.n	8009354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa2d 	bl	8009762 <USBD_CtlError>
            err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
          break;
 800930e:	e021      	b.n	8009354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7c12      	ldrb	r2, [r2, #16]
 8009328:	f107 0108 	add.w	r1, r7, #8
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009332:	e00f      	b.n	8009354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa13 	bl	8009762 <USBD_CtlError>
            err++;
 800933c:	7afb      	ldrb	r3, [r7, #11]
 800933e:	3301      	adds	r3, #1
 8009340:	72fb      	strb	r3, [r7, #11]
          break;
 8009342:	e007      	b.n	8009354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa0b 	bl	8009762 <USBD_CtlError>
          err++;
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	3301      	adds	r3, #1
 8009350:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009352:	e038      	b.n	80093c6 <USBD_GetDescriptor+0x286>
 8009354:	e037      	b.n	80093c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7c1b      	ldrb	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009366:	f107 0208 	add.w	r2, r7, #8
 800936a:	4610      	mov	r0, r2
 800936c:	4798      	blx	r3
 800936e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009370:	e029      	b.n	80093c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f9f4 	bl	8009762 <USBD_CtlError>
        err++;
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	3301      	adds	r3, #1
 800937e:	72fb      	strb	r3, [r7, #11]
      break;
 8009380:	e021      	b.n	80093c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7c1b      	ldrb	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10d      	bne.n	80093a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009392:	f107 0208 	add.w	r2, r7, #8
 8009396:	4610      	mov	r0, r2
 8009398:	4798      	blx	r3
 800939a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3301      	adds	r3, #1
 80093a0:	2207      	movs	r2, #7
 80093a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093a4:	e00f      	b.n	80093c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f9da 	bl	8009762 <USBD_CtlError>
        err++;
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	3301      	adds	r3, #1
 80093b2:	72fb      	strb	r3, [r7, #11]
      break;
 80093b4:	e007      	b.n	80093c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f9d2 	bl	8009762 <USBD_CtlError>
      err++;
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	3301      	adds	r3, #1
 80093c2:	72fb      	strb	r3, [r7, #11]
      break;
 80093c4:	bf00      	nop
  }

  if (err != 0U)
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11c      	bne.n	8009406 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80093cc:	893b      	ldrh	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d011      	beq.n	80093f6 <USBD_GetDescriptor+0x2b6>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	88db      	ldrh	r3, [r3, #6]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88da      	ldrh	r2, [r3, #6]
 80093de:	893b      	ldrh	r3, [r7, #8]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bf28      	it	cs
 80093e4:	4613      	movcs	r3, r2
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093ea:	893b      	ldrh	r3, [r7, #8]
 80093ec:	461a      	mov	r2, r3
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa21 	bl	8009838 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	88db      	ldrh	r3, [r3, #6]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d104      	bne.n	8009408 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa78 	bl	80098f4 <USBD_CtlSendStatus>
 8009404:	e000      	b.n	8009408 <USBD_GetDescriptor+0x2c8>
    return;
 8009406:	bf00      	nop
    }
  }
}
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop

08009410 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	889b      	ldrh	r3, [r3, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d130      	bne.n	8009484 <USBD_SetAddress+0x74>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	88db      	ldrh	r3, [r3, #6]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d12c      	bne.n	8009484 <USBD_SetAddress+0x74>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	885b      	ldrh	r3, [r3, #2]
 800942e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009430:	d828      	bhi.n	8009484 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	885b      	ldrh	r3, [r3, #2]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800943c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009444:	2b03      	cmp	r3, #3
 8009446:	d104      	bne.n	8009452 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f989 	bl	8009762 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009450:	e01d      	b.n	800948e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	7bfa      	ldrb	r2, [r7, #15]
 8009456:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fe4c 	bl	800a0fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa45 	bl	80098f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009478:	e009      	b.n	800948e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009482:	e004      	b.n	800948e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f96b 	bl	8009762 <USBD_CtlError>
  }
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	885b      	ldrh	r3, [r3, #2]
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	4b41      	ldr	r3, [pc, #260]	@ (80095b0 <USBD_SetConfig+0x118>)
 80094aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094ac:	4b40      	ldr	r3, [pc, #256]	@ (80095b0 <USBD_SetConfig+0x118>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d904      	bls.n	80094be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f953 	bl	8009762 <USBD_CtlError>
 80094bc:	e075      	b.n	80095aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d002      	beq.n	80094ce <USBD_SetConfig+0x36>
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d023      	beq.n	8009514 <USBD_SetConfig+0x7c>
 80094cc:	e062      	b.n	8009594 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80094ce:	4b38      	ldr	r3, [pc, #224]	@ (80095b0 <USBD_SetConfig+0x118>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d01a      	beq.n	800950c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80094d6:	4b36      	ldr	r3, [pc, #216]	@ (80095b0 <USBD_SetConfig+0x118>)
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2203      	movs	r2, #3
 80094e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094e8:	4b31      	ldr	r3, [pc, #196]	@ (80095b0 <USBD_SetConfig+0x118>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff f9e4 	bl	80088bc <USBD_SetClassConfig>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d104      	bne.n	8009504 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f930 	bl	8009762 <USBD_CtlError>
            return;
 8009502:	e052      	b.n	80095aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9f5 	bl	80098f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800950a:	e04e      	b.n	80095aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f9f1 	bl	80098f4 <USBD_CtlSendStatus>
        break;
 8009512:	e04a      	b.n	80095aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009514:	4b26      	ldr	r3, [pc, #152]	@ (80095b0 <USBD_SetConfig+0x118>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d112      	bne.n	8009542 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009524:	4b22      	ldr	r3, [pc, #136]	@ (80095b0 <USBD_SetConfig+0x118>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800952e:	4b20      	ldr	r3, [pc, #128]	@ (80095b0 <USBD_SetConfig+0x118>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff f9e0 	bl	80088fa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f9da 	bl	80098f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009540:	e033      	b.n	80095aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009542:	4b1b      	ldr	r3, [pc, #108]	@ (80095b0 <USBD_SetConfig+0x118>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d01d      	beq.n	800958c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff f9ce 	bl	80088fa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800955e:	4b14      	ldr	r3, [pc, #80]	@ (80095b0 <USBD_SetConfig+0x118>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009568:	4b11      	ldr	r3, [pc, #68]	@ (80095b0 <USBD_SetConfig+0x118>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff f9a4 	bl	80088bc <USBD_SetClassConfig>
 8009574:	4603      	mov	r3, r0
 8009576:	2b02      	cmp	r3, #2
 8009578:	d104      	bne.n	8009584 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f8f0 	bl	8009762 <USBD_CtlError>
            return;
 8009582:	e012      	b.n	80095aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f9b5 	bl	80098f4 <USBD_CtlSendStatus>
        break;
 800958a:	e00e      	b.n	80095aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f9b1 	bl	80098f4 <USBD_CtlSendStatus>
        break;
 8009592:	e00a      	b.n	80095aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f8e3 	bl	8009762 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800959c:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <USBD_SetConfig+0x118>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff f9a9 	bl	80088fa <USBD_ClrClassConfig>
        break;
 80095a8:	bf00      	nop
    }
  }
}
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000c60 	.word	0x20000c60

080095b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	88db      	ldrh	r3, [r3, #6]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d004      	beq.n	80095d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f8ca 	bl	8009762 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095ce:	e022      	b.n	8009616 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	dc02      	bgt.n	80095e0 <USBD_GetConfig+0x2c>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dc03      	bgt.n	80095e6 <USBD_GetConfig+0x32>
 80095de:	e015      	b.n	800960c <USBD_GetConfig+0x58>
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d00b      	beq.n	80095fc <USBD_GetConfig+0x48>
 80095e4:	e012      	b.n	800960c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3308      	adds	r3, #8
 80095f0:	2201      	movs	r2, #1
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f91f 	bl	8009838 <USBD_CtlSendData>
        break;
 80095fa:	e00c      	b.n	8009616 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3304      	adds	r3, #4
 8009600:	2201      	movs	r2, #1
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f917 	bl	8009838 <USBD_CtlSendData>
        break;
 800960a:	e004      	b.n	8009616 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f8a7 	bl	8009762 <USBD_CtlError>
        break;
 8009614:	bf00      	nop
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800962e:	3b01      	subs	r3, #1
 8009630:	2b02      	cmp	r3, #2
 8009632:	d81e      	bhi.n	8009672 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	88db      	ldrh	r3, [r3, #6]
 8009638:	2b02      	cmp	r3, #2
 800963a:	d004      	beq.n	8009646 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f88f 	bl	8009762 <USBD_CtlError>
        break;
 8009644:	e01a      	b.n	800967c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f043 0202 	orr.w	r2, r3, #2
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	330c      	adds	r3, #12
 8009666:	2202      	movs	r2, #2
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f8e4 	bl	8009838 <USBD_CtlSendData>
      break;
 8009670:	e004      	b.n	800967c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f874 	bl	8009762 <USBD_CtlError>
      break;
 800967a:	bf00      	nop
  }
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	885b      	ldrh	r3, [r3, #2]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d106      	bne.n	80096a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f928 	bl	80098f4 <USBD_CtlSendStatus>
  }
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096bc:	3b01      	subs	r3, #1
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d80b      	bhi.n	80096da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	885b      	ldrh	r3, [r3, #2]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d10c      	bne.n	80096e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f90e 	bl	80098f4 <USBD_CtlSendStatus>
      }
      break;
 80096d8:	e004      	b.n	80096e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f840 	bl	8009762 <USBD_CtlError>
      break;
 80096e2:	e000      	b.n	80096e6 <USBD_ClrFeature+0x3a>
      break;
 80096e4:	bf00      	nop
  }
}
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	785a      	ldrb	r2, [r3, #1]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	3302      	adds	r3, #2
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	3303      	adds	r3, #3
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	021b      	lsls	r3, r3, #8
 8009718:	b29b      	uxth	r3, r3
 800971a:	4413      	add	r3, r2
 800971c:	b29a      	uxth	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	3304      	adds	r3, #4
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	3305      	adds	r3, #5
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	b29b      	uxth	r3, r3
 8009734:	4413      	add	r3, r2
 8009736:	b29a      	uxth	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	3306      	adds	r3, #6
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	3307      	adds	r3, #7
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	4413      	add	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	80da      	strh	r2, [r3, #6]

}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800976c:	2180      	movs	r1, #128	@ 0x80
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fc5a 	bl	800a028 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009774:	2100      	movs	r1, #0
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fc56 	bl	800a028 <USBD_LL_StallEP>
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d032      	beq.n	8009800 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f834 	bl	8009808 <USBD_GetLen>
 80097a0:	4603      	mov	r3, r0
 80097a2:	3301      	adds	r3, #1
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097ae:	7dfb      	ldrb	r3, [r7, #23]
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	75fa      	strb	r2, [r7, #23]
 80097b4:	461a      	mov	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4413      	add	r3, r2
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	7812      	ldrb	r2, [r2, #0]
 80097be:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	75fa      	strb	r2, [r7, #23]
 80097c6:	461a      	mov	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4413      	add	r3, r2
 80097cc:	2203      	movs	r2, #3
 80097ce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80097d0:	e012      	b.n	80097f8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	60fa      	str	r2, [r7, #12]
 80097d8:	7dfa      	ldrb	r2, [r7, #23]
 80097da:	1c51      	adds	r1, r2, #1
 80097dc:	75f9      	strb	r1, [r7, #23]
 80097de:	4611      	mov	r1, r2
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	440a      	add	r2, r1
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	75fa      	strb	r2, [r7, #23]
 80097ee:	461a      	mov	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4413      	add	r3, r2
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e8      	bne.n	80097d2 <USBD_GetString+0x4e>
    }
  }
}
 8009800:	bf00      	nop
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009814:	e005      	b.n	8009822 <USBD_GetLen+0x1a>
  {
    len++;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	3301      	adds	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3301      	adds	r3, #1
 8009820:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1f5      	bne.n	8009816 <USBD_GetLen+0xe>
  }

  return len;
 800982a:	7bfb      	ldrb	r3, [r7, #15]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2202      	movs	r2, #2
 800984a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800984e:	88fa      	ldrh	r2, [r7, #6]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009854:	88fa      	ldrh	r2, [r7, #6]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800985a:	88fb      	ldrh	r3, [r7, #6]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	2100      	movs	r1, #0
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 fc6a 	bl	800a13a <USBD_LL_Transmit>

  return USBD_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	2100      	movs	r1, #0
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fc58 	bl	800a13a <USBD_LL_Transmit>

  return USBD_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2203      	movs	r2, #3
 80098a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098aa:	88fa      	ldrh	r2, [r7, #6]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80098b2:	88fa      	ldrh	r2, [r7, #6]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	2100      	movs	r1, #0
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fc5d 	bl	800a180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	2100      	movs	r1, #0
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 fc4b 	bl	800a180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2204      	movs	r2, #4
 8009900:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009904:	2300      	movs	r3, #0
 8009906:	2200      	movs	r2, #0
 8009908:	2100      	movs	r1, #0
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fc15 	bl	800a13a <USBD_LL_Transmit>

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2205      	movs	r2, #5
 8009926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800992a:	2300      	movs	r3, #0
 800992c:	2200      	movs	r2, #0
 800992e:	2100      	movs	r1, #0
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fc25 	bl	800a180 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009944:	2200      	movs	r2, #0
 8009946:	4912      	ldr	r1, [pc, #72]	@ (8009990 <MX_USB_DEVICE_Init+0x50>)
 8009948:	4812      	ldr	r0, [pc, #72]	@ (8009994 <MX_USB_DEVICE_Init+0x54>)
 800994a:	f7fe ff5b 	bl	8008804 <USBD_Init>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009954:	f7f7 f888 	bl	8000a68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009958:	490f      	ldr	r1, [pc, #60]	@ (8009998 <MX_USB_DEVICE_Init+0x58>)
 800995a:	480e      	ldr	r0, [pc, #56]	@ (8009994 <MX_USB_DEVICE_Init+0x54>)
 800995c:	f7fe ff7d 	bl	800885a <USBD_RegisterClass>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009966:	f7f7 f87f 	bl	8000a68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800996a:	490c      	ldr	r1, [pc, #48]	@ (800999c <MX_USB_DEVICE_Init+0x5c>)
 800996c:	4809      	ldr	r0, [pc, #36]	@ (8009994 <MX_USB_DEVICE_Init+0x54>)
 800996e:	f7fe feab 	bl	80086c8 <USBD_CDC_RegisterInterface>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009978:	f7f7 f876 	bl	8000a68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800997c:	4805      	ldr	r0, [pc, #20]	@ (8009994 <MX_USB_DEVICE_Init+0x54>)
 800997e:	f7fe ff86 	bl	800888e <USBD_Start>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009988:	f7f7 f86e 	bl	8000a68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800998c:	bf00      	nop
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20000130 	.word	0x20000130
 8009994:	20000c64 	.word	0x20000c64
 8009998:	2000001c 	.word	0x2000001c
 800999c:	20000120 	.word	0x20000120

080099a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099a4:	2200      	movs	r2, #0
 80099a6:	4905      	ldr	r1, [pc, #20]	@ (80099bc <CDC_Init_FS+0x1c>)
 80099a8:	4805      	ldr	r0, [pc, #20]	@ (80099c0 <CDC_Init_FS+0x20>)
 80099aa:	f7fe fea4 	bl	80086f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099ae:	4905      	ldr	r1, [pc, #20]	@ (80099c4 <CDC_Init_FS+0x24>)
 80099b0:	4803      	ldr	r0, [pc, #12]	@ (80099c0 <CDC_Init_FS+0x20>)
 80099b2:	f7fe feba 	bl	800872a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	20001328 	.word	0x20001328
 80099c0:	20000c64 	.word	0x20000c64
 80099c4:	20000f28 	.word	0x20000f28

080099c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
 80099e4:	4613      	mov	r3, r2
 80099e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	2b23      	cmp	r3, #35	@ 0x23
 80099ec:	d84a      	bhi.n	8009a84 <CDC_Control_FS+0xac>
 80099ee:	a201      	add	r2, pc, #4	@ (adr r2, 80099f4 <CDC_Control_FS+0x1c>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a85 	.word	0x08009a85
 80099f8:	08009a85 	.word	0x08009a85
 80099fc:	08009a85 	.word	0x08009a85
 8009a00:	08009a85 	.word	0x08009a85
 8009a04:	08009a85 	.word	0x08009a85
 8009a08:	08009a85 	.word	0x08009a85
 8009a0c:	08009a85 	.word	0x08009a85
 8009a10:	08009a85 	.word	0x08009a85
 8009a14:	08009a85 	.word	0x08009a85
 8009a18:	08009a85 	.word	0x08009a85
 8009a1c:	08009a85 	.word	0x08009a85
 8009a20:	08009a85 	.word	0x08009a85
 8009a24:	08009a85 	.word	0x08009a85
 8009a28:	08009a85 	.word	0x08009a85
 8009a2c:	08009a85 	.word	0x08009a85
 8009a30:	08009a85 	.word	0x08009a85
 8009a34:	08009a85 	.word	0x08009a85
 8009a38:	08009a85 	.word	0x08009a85
 8009a3c:	08009a85 	.word	0x08009a85
 8009a40:	08009a85 	.word	0x08009a85
 8009a44:	08009a85 	.word	0x08009a85
 8009a48:	08009a85 	.word	0x08009a85
 8009a4c:	08009a85 	.word	0x08009a85
 8009a50:	08009a85 	.word	0x08009a85
 8009a54:	08009a85 	.word	0x08009a85
 8009a58:	08009a85 	.word	0x08009a85
 8009a5c:	08009a85 	.word	0x08009a85
 8009a60:	08009a85 	.word	0x08009a85
 8009a64:	08009a85 	.word	0x08009a85
 8009a68:	08009a85 	.word	0x08009a85
 8009a6c:	08009a85 	.word	0x08009a85
 8009a70:	08009a85 	.word	0x08009a85
 8009a74:	08009a85 	.word	0x08009a85
 8009a78:	08009a85 	.word	0x08009a85
 8009a7c:	08009a85 	.word	0x08009a85
 8009a80:	08009a85 	.word	0x08009a85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a84:	bf00      	nop
  }

  return (USBD_OK);
 8009a86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a9e:	6879      	ldr	r1, [r7, #4]
 8009aa0:	4806      	ldr	r0, [pc, #24]	@ (8009abc <CDC_Receive_FS+0x28>)
 8009aa2:	f7fe fe42 	bl	800872a <USBD_CDC_SetRxBuffer>
  Process_USB_Command((char*)&Buf[0]);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7f6 fe8e 	bl	80007c8 <Process_USB_Command>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009aac:	4803      	ldr	r0, [pc, #12]	@ (8009abc <CDC_Receive_FS+0x28>)
 8009aae:	f7fe fe7f 	bl	80087b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ab2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000c64 	.word	0x20000c64

08009ac0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8009b08 <CDC_Transmit_FS+0x48>)
 8009ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ad6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e00b      	b.n	8009afe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ae6:	887b      	ldrh	r3, [r7, #2]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	4806      	ldr	r0, [pc, #24]	@ (8009b08 <CDC_Transmit_FS+0x48>)
 8009aee:	f7fe fe02 	bl	80086f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009af2:	4805      	ldr	r0, [pc, #20]	@ (8009b08 <CDC_Transmit_FS+0x48>)
 8009af4:	f7fe fe2d 	bl	8008752 <USBD_CDC_TransmitPacket>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20000c64 	.word	0x20000c64

08009b0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2212      	movs	r2, #18
 8009b1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b1e:	4b03      	ldr	r3, [pc, #12]	@ (8009b2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	2000014c 	.word	0x2000014c

08009b30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	6039      	str	r1, [r7, #0]
 8009b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2204      	movs	r2, #4
 8009b40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b42:	4b03      	ldr	r3, [pc, #12]	@ (8009b50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20000160 	.word	0x20000160

08009b54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	6039      	str	r1, [r7, #0]
 8009b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4907      	ldr	r1, [pc, #28]	@ (8009b88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b6a:	4808      	ldr	r0, [pc, #32]	@ (8009b8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009b6c:	f7ff fe0a 	bl	8009784 <USBD_GetString>
 8009b70:	e004      	b.n	8009b7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4904      	ldr	r1, [pc, #16]	@ (8009b88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b76:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009b78:	f7ff fe04 	bl	8009784 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b7c:	4b02      	ldr	r3, [pc, #8]	@ (8009b88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20001728 	.word	0x20001728
 8009b8c:	0800acfc 	.word	0x0800acfc

08009b90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	4904      	ldr	r1, [pc, #16]	@ (8009bb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ba0:	4804      	ldr	r0, [pc, #16]	@ (8009bb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ba2:	f7ff fdef 	bl	8009784 <USBD_GetString>
  return USBD_StrDesc;
 8009ba6:	4b02      	ldr	r3, [pc, #8]	@ (8009bb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20001728 	.word	0x20001728
 8009bb4:	0800ad14 	.word	0x0800ad14

08009bb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6039      	str	r1, [r7, #0]
 8009bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	221a      	movs	r2, #26
 8009bc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bca:	f000 f843 	bl	8009c54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009bce:	4b02      	ldr	r3, [pc, #8]	@ (8009bd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000164 	.word	0x20000164

08009bdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d105      	bne.n	8009bfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	4907      	ldr	r1, [pc, #28]	@ (8009c10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bf2:	4808      	ldr	r0, [pc, #32]	@ (8009c14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bf4:	f7ff fdc6 	bl	8009784 <USBD_GetString>
 8009bf8:	e004      	b.n	8009c04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4904      	ldr	r1, [pc, #16]	@ (8009c10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bfe:	4805      	ldr	r0, [pc, #20]	@ (8009c14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c00:	f7ff fdc0 	bl	8009784 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c04:	4b02      	ldr	r3, [pc, #8]	@ (8009c10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20001728 	.word	0x20001728
 8009c14:	0800ad28 	.word	0x0800ad28

08009c18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	6039      	str	r1, [r7, #0]
 8009c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c24:	79fb      	ldrb	r3, [r7, #7]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d105      	bne.n	8009c36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	4907      	ldr	r1, [pc, #28]	@ (8009c4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c2e:	4808      	ldr	r0, [pc, #32]	@ (8009c50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c30:	f7ff fda8 	bl	8009784 <USBD_GetString>
 8009c34:	e004      	b.n	8009c40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	4904      	ldr	r1, [pc, #16]	@ (8009c4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c3a:	4805      	ldr	r0, [pc, #20]	@ (8009c50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c3c:	f7ff fda2 	bl	8009784 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c40:	4b02      	ldr	r3, [pc, #8]	@ (8009c4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20001728 	.word	0x20001728
 8009c50:	0800ad34 	.word	0x0800ad34

08009c54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c98 <Get_SerialNum+0x44>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c60:	4b0e      	ldr	r3, [pc, #56]	@ (8009c9c <Get_SerialNum+0x48>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c66:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca0 <Get_SerialNum+0x4c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	4909      	ldr	r1, [pc, #36]	@ (8009ca4 <Get_SerialNum+0x50>)
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f814 	bl	8009cac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c84:	2204      	movs	r2, #4
 8009c86:	4908      	ldr	r1, [pc, #32]	@ (8009ca8 <Get_SerialNum+0x54>)
 8009c88:	68b8      	ldr	r0, [r7, #8]
 8009c8a:	f000 f80f 	bl	8009cac <IntToUnicode>
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	1ffff7ac 	.word	0x1ffff7ac
 8009c9c:	1ffff7b0 	.word	0x1ffff7b0
 8009ca0:	1ffff7b4 	.word	0x1ffff7b4
 8009ca4:	20000166 	.word	0x20000166
 8009ca8:	20000176 	.word	0x20000176

08009cac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]
 8009cc2:	e027      	b.n	8009d14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	0f1b      	lsrs	r3, r3, #28
 8009cc8:	2b09      	cmp	r3, #9
 8009cca:	d80b      	bhi.n	8009ce4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	0f1b      	lsrs	r3, r3, #28
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	440b      	add	r3, r1
 8009cdc:	3230      	adds	r2, #48	@ 0x30
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	e00a      	b.n	8009cfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	0f1b      	lsrs	r3, r3, #28
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	4619      	mov	r1, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	440b      	add	r3, r1
 8009cf4:	3237      	adds	r2, #55	@ 0x37
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	3301      	adds	r3, #1
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	4413      	add	r3, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	3301      	adds	r3, #1
 8009d12:	75fb      	strb	r3, [r7, #23]
 8009d14:	7dfa      	ldrb	r2, [r7, #23]
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d3d3      	bcc.n	8009cc4 <IntToUnicode+0x18>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
	...

08009d2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a0d      	ldr	r2, [pc, #52]	@ (8009d70 <HAL_PCD_MspInit+0x44>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d113      	bne.n	8009d66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <HAL_PCD_MspInit+0x48>)
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	4a0c      	ldr	r2, [pc, #48]	@ (8009d74 <HAL_PCD_MspInit+0x48>)
 8009d44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d48:	61d3      	str	r3, [r2, #28]
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d74 <HAL_PCD_MspInit+0x48>)
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009d56:	2200      	movs	r2, #0
 8009d58:	2100      	movs	r1, #0
 8009d5a:	2014      	movs	r0, #20
 8009d5c:	f7f7 f91d 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009d60:	2014      	movs	r0, #20
 8009d62:	f7f7 f936 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d66:	bf00      	nop
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	40005c00 	.word	0x40005c00
 8009d74:	40021000 	.word	0x40021000

08009d78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7fe fdc6 	bl	8008920 <USBD_LL_SetupStage>
}
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009dae:	78fa      	ldrb	r2, [r7, #3]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	00db      	lsls	r3, r3, #3
 8009dba:	440b      	add	r3, r1
 8009dbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f7fe fdf8 	bl	80089ba <USBD_LL_DataOutStage>
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	440b      	add	r3, r1
 8009df2:	3324      	adds	r3, #36	@ 0x24
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	f7fe fe4f 	bl	8008a9c <USBD_LL_DataInStage>
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe ff62 	bl	8008cde <USBD_LL_SOF>
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	795b      	ldrb	r3, [r3, #5]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d001      	beq.n	8009e3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e36:	f7f6 fe17 	bl	8000a68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e40:	7bfa      	ldrb	r2, [r7, #15]
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe ff0f 	bl	8008c68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe fec8 	bl	8008be6 <USBD_LL_Reset>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe ff0a 	bl	8008c88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7a5b      	ldrb	r3, [r3, #9]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e7c:	4b04      	ldr	r3, [pc, #16]	@ (8009e90 <HAL_PCD_SuspendCallback+0x30>)
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	4a03      	ldr	r2, [pc, #12]	@ (8009e90 <HAL_PCD_SuspendCallback+0x30>)
 8009e82:	f043 0306 	orr.w	r3, r3, #6
 8009e86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	e000ed00 	.word	0xe000ed00

08009e94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe ff05 	bl	8008cb2 <USBD_LL_Resume>
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009eb8:	4a29      	ldr	r2, [pc, #164]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a27      	ldr	r2, [pc, #156]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009ec4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ec8:	4b25      	ldr	r3, [pc, #148]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009eca:	4a26      	ldr	r2, [pc, #152]	@ (8009f64 <USBD_LL_Init+0xb4>)
 8009ecc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ece:	4b24      	ldr	r3, [pc, #144]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009ed0:	2208      	movs	r2, #8
 8009ed2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ed4:	4b22      	ldr	r3, [pc, #136]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009eda:	4b21      	ldr	r3, [pc, #132]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009edc:	2202      	movs	r2, #2
 8009ede:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009eec:	4b1c      	ldr	r3, [pc, #112]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ef2:	481b      	ldr	r0, [pc, #108]	@ (8009f60 <USBD_LL_Init+0xb0>)
 8009ef4:	f7f7 fa44 	bl	8001380 <HAL_PCD_Init>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009efe:	f7f6 fdb3 	bl	8000a68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f08:	2318      	movs	r3, #24
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	f7f8 fea7 	bl	8002c60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f18:	2358      	movs	r3, #88	@ 0x58
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2180      	movs	r1, #128	@ 0x80
 8009f1e:	f7f8 fe9f 	bl	8002c60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f28:	23c0      	movs	r3, #192	@ 0xc0
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2181      	movs	r1, #129	@ 0x81
 8009f2e:	f7f8 fe97 	bl	8002c60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f38:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2101      	movs	r1, #1
 8009f40:	f7f8 fe8e 	bl	8002c60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2182      	movs	r1, #130	@ 0x82
 8009f52:	f7f8 fe85 	bl	8002c60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20001928 	.word	0x20001928
 8009f64:	40005c00 	.word	0x40005c00

08009f68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7f7 fac5 	bl	800150e <HAL_PCD_Start>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 f952 	bl	800a234 <USBD_Get_USB_Status>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	4608      	mov	r0, r1
 8009fa8:	4611      	mov	r1, r2
 8009faa:	461a      	mov	r2, r3
 8009fac:	4603      	mov	r3, r0
 8009fae:	70fb      	strb	r3, [r7, #3]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70bb      	strb	r3, [r7, #2]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009fc6:	78bb      	ldrb	r3, [r7, #2]
 8009fc8:	883a      	ldrh	r2, [r7, #0]
 8009fca:	78f9      	ldrb	r1, [r7, #3]
 8009fcc:	f7f7 fbbd 	bl	800174a <HAL_PCD_EP_Open>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f92c 	bl	800a234 <USBD_Get_USB_Status>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a004:	78fa      	ldrb	r2, [r7, #3]
 800a006:	4611      	mov	r1, r2
 800a008:	4618      	mov	r0, r3
 800a00a:	f7f7 fbfb 	bl	8001804 <HAL_PCD_EP_Close>
 800a00e:	4603      	mov	r3, r0
 800a010:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	4618      	mov	r0, r3
 800a016:	f000 f90d 	bl	800a234 <USBD_Get_USB_Status>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a01e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f7f7 fca4 	bl	8001994 <HAL_PCD_EP_SetStall>
 800a04c:	4603      	mov	r3, r0
 800a04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f8ee 	bl	800a234 <USBD_Get_USB_Status>
 800a058:	4603      	mov	r3, r0
 800a05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	460b      	mov	r3, r1
 800a070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a080:	78fa      	ldrb	r2, [r7, #3]
 800a082:	4611      	mov	r1, r2
 800a084:	4618      	mov	r0, r3
 800a086:	f7f7 fcd7 	bl	8001a38 <HAL_PCD_EP_ClrStall>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 f8cf 	bl	800a234 <USBD_Get_USB_Status>
 800a096:	4603      	mov	r3, r0
 800a098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	da0b      	bge.n	800a0d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	440b      	add	r3, r1
 800a0d2:	3312      	adds	r3, #18
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	e00b      	b.n	800a0f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	440b      	add	r3, r1
 800a0ea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a0ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a116:	78fa      	ldrb	r2, [r7, #3]
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7f7 faf1 	bl	8001702 <HAL_PCD_SetAddress>
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 f884 	bl	800a234 <USBD_Get_USB_Status>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a130:	7bbb      	ldrb	r3, [r7, #14]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	461a      	mov	r2, r3
 800a146:	460b      	mov	r3, r1
 800a148:	72fb      	strb	r3, [r7, #11]
 800a14a:	4613      	mov	r3, r2
 800a14c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a15c:	893b      	ldrh	r3, [r7, #8]
 800a15e:	7af9      	ldrb	r1, [r7, #11]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	f7f7 fbe0 	bl	8001926 <HAL_PCD_EP_Transmit>
 800a166:	4603      	mov	r3, r0
 800a168:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 f861 	bl	800a234 <USBD_Get_USB_Status>
 800a172:	4603      	mov	r3, r0
 800a174:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a176:	7dbb      	ldrb	r3, [r7, #22]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	607a      	str	r2, [r7, #4]
 800a18a:	461a      	mov	r2, r3
 800a18c:	460b      	mov	r3, r1
 800a18e:	72fb      	strb	r3, [r7, #11]
 800a190:	4613      	mov	r3, r2
 800a192:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1a2:	893b      	ldrh	r3, [r7, #8]
 800a1a4:	7af9      	ldrb	r1, [r7, #11]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	f7f7 fb74 	bl	8001894 <HAL_PCD_EP_Receive>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 f83e 	bl	800a234 <USBD_Get_USB_Status>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f7 fb8a 	bl	80018f6 <HAL_PCD_EP_GetRxCount>
 800a1e2:	4603      	mov	r3, r0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1f4:	4b03      	ldr	r3, [pc, #12]	@ (800a204 <USBD_static_malloc+0x18>)
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	20001bfc 	.word	0x20001bfc

0800a208 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]

}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a242:	79fb      	ldrb	r3, [r7, #7]
 800a244:	2b03      	cmp	r3, #3
 800a246:	d817      	bhi.n	800a278 <USBD_Get_USB_Status+0x44>
 800a248:	a201      	add	r2, pc, #4	@ (adr r2, 800a250 <USBD_Get_USB_Status+0x1c>)
 800a24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24e:	bf00      	nop
 800a250:	0800a261 	.word	0x0800a261
 800a254:	0800a267 	.word	0x0800a267
 800a258:	0800a26d 	.word	0x0800a26d
 800a25c:	0800a273 	.word	0x0800a273
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]
    break;
 800a264:	e00b      	b.n	800a27e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a266:	2302      	movs	r3, #2
 800a268:	73fb      	strb	r3, [r7, #15]
    break;
 800a26a:	e008      	b.n	800a27e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a26c:	2301      	movs	r3, #1
 800a26e:	73fb      	strb	r3, [r7, #15]
    break;
 800a270:	e005      	b.n	800a27e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a272:	2302      	movs	r3, #2
 800a274:	73fb      	strb	r3, [r7, #15]
    break;
 800a276:	e002      	b.n	800a27e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a278:	2302      	movs	r3, #2
 800a27a:	73fb      	strb	r3, [r7, #15]
    break;
 800a27c:	bf00      	nop
  }
  return usb_status;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <atoi>:
 800a28c:	220a      	movs	r2, #10
 800a28e:	2100      	movs	r1, #0
 800a290:	f000 b87a 	b.w	800a388 <strtol>

0800a294 <_strtol_l.constprop.0>:
 800a294:	2b24      	cmp	r3, #36	@ 0x24
 800a296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29a:	4686      	mov	lr, r0
 800a29c:	4690      	mov	r8, r2
 800a29e:	d801      	bhi.n	800a2a4 <_strtol_l.constprop.0+0x10>
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d106      	bne.n	800a2b2 <_strtol_l.constprop.0+0x1e>
 800a2a4:	f000 f8a2 	bl	800a3ec <__errno>
 800a2a8:	2316      	movs	r3, #22
 800a2aa:	6003      	str	r3, [r0, #0]
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	4834      	ldr	r0, [pc, #208]	@ (800a384 <_strtol_l.constprop.0+0xf0>)
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2bc:	5d06      	ldrb	r6, [r0, r4]
 800a2be:	f016 0608 	ands.w	r6, r6, #8
 800a2c2:	d1f8      	bne.n	800a2b6 <_strtol_l.constprop.0+0x22>
 800a2c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a2c6:	d12d      	bne.n	800a324 <_strtol_l.constprop.0+0x90>
 800a2c8:	782c      	ldrb	r4, [r5, #0]
 800a2ca:	2601      	movs	r6, #1
 800a2cc:	1c95      	adds	r5, r2, #2
 800a2ce:	f033 0210 	bics.w	r2, r3, #16
 800a2d2:	d109      	bne.n	800a2e8 <_strtol_l.constprop.0+0x54>
 800a2d4:	2c30      	cmp	r4, #48	@ 0x30
 800a2d6:	d12a      	bne.n	800a32e <_strtol_l.constprop.0+0x9a>
 800a2d8:	782a      	ldrb	r2, [r5, #0]
 800a2da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2de:	2a58      	cmp	r2, #88	@ 0x58
 800a2e0:	d125      	bne.n	800a32e <_strtol_l.constprop.0+0x9a>
 800a2e2:	786c      	ldrb	r4, [r5, #1]
 800a2e4:	2310      	movs	r3, #16
 800a2e6:	3502      	adds	r5, #2
 800a2e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a2ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	fbbc f9f3 	udiv	r9, ip, r3
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a2fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a300:	2f09      	cmp	r7, #9
 800a302:	d81b      	bhi.n	800a33c <_strtol_l.constprop.0+0xa8>
 800a304:	463c      	mov	r4, r7
 800a306:	42a3      	cmp	r3, r4
 800a308:	dd27      	ble.n	800a35a <_strtol_l.constprop.0+0xc6>
 800a30a:	1c57      	adds	r7, r2, #1
 800a30c:	d007      	beq.n	800a31e <_strtol_l.constprop.0+0x8a>
 800a30e:	4581      	cmp	r9, r0
 800a310:	d320      	bcc.n	800a354 <_strtol_l.constprop.0+0xc0>
 800a312:	d101      	bne.n	800a318 <_strtol_l.constprop.0+0x84>
 800a314:	45a2      	cmp	sl, r4
 800a316:	db1d      	blt.n	800a354 <_strtol_l.constprop.0+0xc0>
 800a318:	fb00 4003 	mla	r0, r0, r3, r4
 800a31c:	2201      	movs	r2, #1
 800a31e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a322:	e7eb      	b.n	800a2fc <_strtol_l.constprop.0+0x68>
 800a324:	2c2b      	cmp	r4, #43	@ 0x2b
 800a326:	bf04      	itt	eq
 800a328:	782c      	ldrbeq	r4, [r5, #0]
 800a32a:	1c95      	addeq	r5, r2, #2
 800a32c:	e7cf      	b.n	800a2ce <_strtol_l.constprop.0+0x3a>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1da      	bne.n	800a2e8 <_strtol_l.constprop.0+0x54>
 800a332:	2c30      	cmp	r4, #48	@ 0x30
 800a334:	bf0c      	ite	eq
 800a336:	2308      	moveq	r3, #8
 800a338:	230a      	movne	r3, #10
 800a33a:	e7d5      	b.n	800a2e8 <_strtol_l.constprop.0+0x54>
 800a33c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a340:	2f19      	cmp	r7, #25
 800a342:	d801      	bhi.n	800a348 <_strtol_l.constprop.0+0xb4>
 800a344:	3c37      	subs	r4, #55	@ 0x37
 800a346:	e7de      	b.n	800a306 <_strtol_l.constprop.0+0x72>
 800a348:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a34c:	2f19      	cmp	r7, #25
 800a34e:	d804      	bhi.n	800a35a <_strtol_l.constprop.0+0xc6>
 800a350:	3c57      	subs	r4, #87	@ 0x57
 800a352:	e7d8      	b.n	800a306 <_strtol_l.constprop.0+0x72>
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	e7e1      	b.n	800a31e <_strtol_l.constprop.0+0x8a>
 800a35a:	1c53      	adds	r3, r2, #1
 800a35c:	d108      	bne.n	800a370 <_strtol_l.constprop.0+0xdc>
 800a35e:	2322      	movs	r3, #34	@ 0x22
 800a360:	f8ce 3000 	str.w	r3, [lr]
 800a364:	4660      	mov	r0, ip
 800a366:	f1b8 0f00 	cmp.w	r8, #0
 800a36a:	d0a0      	beq.n	800a2ae <_strtol_l.constprop.0+0x1a>
 800a36c:	1e69      	subs	r1, r5, #1
 800a36e:	e006      	b.n	800a37e <_strtol_l.constprop.0+0xea>
 800a370:	b106      	cbz	r6, 800a374 <_strtol_l.constprop.0+0xe0>
 800a372:	4240      	negs	r0, r0
 800a374:	f1b8 0f00 	cmp.w	r8, #0
 800a378:	d099      	beq.n	800a2ae <_strtol_l.constprop.0+0x1a>
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d1f6      	bne.n	800a36c <_strtol_l.constprop.0+0xd8>
 800a37e:	f8c8 1000 	str.w	r1, [r8]
 800a382:	e794      	b.n	800a2ae <_strtol_l.constprop.0+0x1a>
 800a384:	0800ad75 	.word	0x0800ad75

0800a388 <strtol>:
 800a388:	4613      	mov	r3, r2
 800a38a:	460a      	mov	r2, r1
 800a38c:	4601      	mov	r1, r0
 800a38e:	4802      	ldr	r0, [pc, #8]	@ (800a398 <strtol+0x10>)
 800a390:	6800      	ldr	r0, [r0, #0]
 800a392:	f7ff bf7f 	b.w	800a294 <_strtol_l.constprop.0>
 800a396:	bf00      	nop
 800a398:	20000180 	.word	0x20000180

0800a39c <siprintf>:
 800a39c:	b40e      	push	{r1, r2, r3}
 800a39e:	b500      	push	{lr}
 800a3a0:	b09c      	sub	sp, #112	@ 0x70
 800a3a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3a4:	9002      	str	r0, [sp, #8]
 800a3a6:	9006      	str	r0, [sp, #24]
 800a3a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3ac:	4809      	ldr	r0, [pc, #36]	@ (800a3d4 <siprintf+0x38>)
 800a3ae:	9107      	str	r1, [sp, #28]
 800a3b0:	9104      	str	r1, [sp, #16]
 800a3b2:	4909      	ldr	r1, [pc, #36]	@ (800a3d8 <siprintf+0x3c>)
 800a3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b8:	9105      	str	r1, [sp, #20]
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	a902      	add	r1, sp, #8
 800a3c0:	f000 f994 	bl	800a6ec <_svfiprintf_r>
 800a3c4:	9b02      	ldr	r3, [sp, #8]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	b01c      	add	sp, #112	@ 0x70
 800a3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d0:	b003      	add	sp, #12
 800a3d2:	4770      	bx	lr
 800a3d4:	20000180 	.word	0x20000180
 800a3d8:	ffff0208 	.word	0xffff0208

0800a3dc <memset>:
 800a3dc:	4402      	add	r2, r0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d100      	bne.n	800a3e6 <memset+0xa>
 800a3e4:	4770      	bx	lr
 800a3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ea:	e7f9      	b.n	800a3e0 <memset+0x4>

0800a3ec <__errno>:
 800a3ec:	4b01      	ldr	r3, [pc, #4]	@ (800a3f4 <__errno+0x8>)
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000180 	.word	0x20000180

0800a3f8 <__libc_init_array>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a430 <__libc_init_array+0x38>)
 800a3fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a434 <__libc_init_array+0x3c>)
 800a3fe:	1b64      	subs	r4, r4, r5
 800a400:	10a4      	asrs	r4, r4, #2
 800a402:	2600      	movs	r6, #0
 800a404:	42a6      	cmp	r6, r4
 800a406:	d109      	bne.n	800a41c <__libc_init_array+0x24>
 800a408:	4d0b      	ldr	r5, [pc, #44]	@ (800a438 <__libc_init_array+0x40>)
 800a40a:	4c0c      	ldr	r4, [pc, #48]	@ (800a43c <__libc_init_array+0x44>)
 800a40c:	f000 fc66 	bl	800acdc <_init>
 800a410:	1b64      	subs	r4, r4, r5
 800a412:	10a4      	asrs	r4, r4, #2
 800a414:	2600      	movs	r6, #0
 800a416:	42a6      	cmp	r6, r4
 800a418:	d105      	bne.n	800a426 <__libc_init_array+0x2e>
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a420:	4798      	blx	r3
 800a422:	3601      	adds	r6, #1
 800a424:	e7ee      	b.n	800a404 <__libc_init_array+0xc>
 800a426:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42a:	4798      	blx	r3
 800a42c:	3601      	adds	r6, #1
 800a42e:	e7f2      	b.n	800a416 <__libc_init_array+0x1e>
 800a430:	0800aeb0 	.word	0x0800aeb0
 800a434:	0800aeb0 	.word	0x0800aeb0
 800a438:	0800aeb0 	.word	0x0800aeb0
 800a43c:	0800aeb4 	.word	0x0800aeb4

0800a440 <__retarget_lock_acquire_recursive>:
 800a440:	4770      	bx	lr

0800a442 <__retarget_lock_release_recursive>:
 800a442:	4770      	bx	lr

0800a444 <_free_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4605      	mov	r5, r0
 800a448:	2900      	cmp	r1, #0
 800a44a:	d041      	beq.n	800a4d0 <_free_r+0x8c>
 800a44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a450:	1f0c      	subs	r4, r1, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	bfb8      	it	lt
 800a456:	18e4      	addlt	r4, r4, r3
 800a458:	f000 f8e0 	bl	800a61c <__malloc_lock>
 800a45c:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d4 <_free_r+0x90>)
 800a45e:	6813      	ldr	r3, [r2, #0]
 800a460:	b933      	cbnz	r3, 800a470 <_free_r+0x2c>
 800a462:	6063      	str	r3, [r4, #4]
 800a464:	6014      	str	r4, [r2, #0]
 800a466:	4628      	mov	r0, r5
 800a468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a46c:	f000 b8dc 	b.w	800a628 <__malloc_unlock>
 800a470:	42a3      	cmp	r3, r4
 800a472:	d908      	bls.n	800a486 <_free_r+0x42>
 800a474:	6820      	ldr	r0, [r4, #0]
 800a476:	1821      	adds	r1, r4, r0
 800a478:	428b      	cmp	r3, r1
 800a47a:	bf01      	itttt	eq
 800a47c:	6819      	ldreq	r1, [r3, #0]
 800a47e:	685b      	ldreq	r3, [r3, #4]
 800a480:	1809      	addeq	r1, r1, r0
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	e7ed      	b.n	800a462 <_free_r+0x1e>
 800a486:	461a      	mov	r2, r3
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	b10b      	cbz	r3, 800a490 <_free_r+0x4c>
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d9fa      	bls.n	800a486 <_free_r+0x42>
 800a490:	6811      	ldr	r1, [r2, #0]
 800a492:	1850      	adds	r0, r2, r1
 800a494:	42a0      	cmp	r0, r4
 800a496:	d10b      	bne.n	800a4b0 <_free_r+0x6c>
 800a498:	6820      	ldr	r0, [r4, #0]
 800a49a:	4401      	add	r1, r0
 800a49c:	1850      	adds	r0, r2, r1
 800a49e:	4283      	cmp	r3, r0
 800a4a0:	6011      	str	r1, [r2, #0]
 800a4a2:	d1e0      	bne.n	800a466 <_free_r+0x22>
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	6053      	str	r3, [r2, #4]
 800a4aa:	4408      	add	r0, r1
 800a4ac:	6010      	str	r0, [r2, #0]
 800a4ae:	e7da      	b.n	800a466 <_free_r+0x22>
 800a4b0:	d902      	bls.n	800a4b8 <_free_r+0x74>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	602b      	str	r3, [r5, #0]
 800a4b6:	e7d6      	b.n	800a466 <_free_r+0x22>
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	1821      	adds	r1, r4, r0
 800a4bc:	428b      	cmp	r3, r1
 800a4be:	bf04      	itt	eq
 800a4c0:	6819      	ldreq	r1, [r3, #0]
 800a4c2:	685b      	ldreq	r3, [r3, #4]
 800a4c4:	6063      	str	r3, [r4, #4]
 800a4c6:	bf04      	itt	eq
 800a4c8:	1809      	addeq	r1, r1, r0
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	6054      	str	r4, [r2, #4]
 800a4ce:	e7ca      	b.n	800a466 <_free_r+0x22>
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20001f60 	.word	0x20001f60

0800a4d8 <sbrk_aligned>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	4e0f      	ldr	r6, [pc, #60]	@ (800a518 <sbrk_aligned+0x40>)
 800a4dc:	460c      	mov	r4, r1
 800a4de:	6831      	ldr	r1, [r6, #0]
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	b911      	cbnz	r1, 800a4ea <sbrk_aligned+0x12>
 800a4e4:	f000 fba6 	bl	800ac34 <_sbrk_r>
 800a4e8:	6030      	str	r0, [r6, #0]
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 fba1 	bl	800ac34 <_sbrk_r>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	d103      	bne.n	800a4fe <sbrk_aligned+0x26>
 800a4f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
 800a4fe:	1cc4      	adds	r4, r0, #3
 800a500:	f024 0403 	bic.w	r4, r4, #3
 800a504:	42a0      	cmp	r0, r4
 800a506:	d0f8      	beq.n	800a4fa <sbrk_aligned+0x22>
 800a508:	1a21      	subs	r1, r4, r0
 800a50a:	4628      	mov	r0, r5
 800a50c:	f000 fb92 	bl	800ac34 <_sbrk_r>
 800a510:	3001      	adds	r0, #1
 800a512:	d1f2      	bne.n	800a4fa <sbrk_aligned+0x22>
 800a514:	e7ef      	b.n	800a4f6 <sbrk_aligned+0x1e>
 800a516:	bf00      	nop
 800a518:	20001f5c 	.word	0x20001f5c

0800a51c <_malloc_r>:
 800a51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a520:	1ccd      	adds	r5, r1, #3
 800a522:	f025 0503 	bic.w	r5, r5, #3
 800a526:	3508      	adds	r5, #8
 800a528:	2d0c      	cmp	r5, #12
 800a52a:	bf38      	it	cc
 800a52c:	250c      	movcc	r5, #12
 800a52e:	2d00      	cmp	r5, #0
 800a530:	4606      	mov	r6, r0
 800a532:	db01      	blt.n	800a538 <_malloc_r+0x1c>
 800a534:	42a9      	cmp	r1, r5
 800a536:	d904      	bls.n	800a542 <_malloc_r+0x26>
 800a538:	230c      	movs	r3, #12
 800a53a:	6033      	str	r3, [r6, #0]
 800a53c:	2000      	movs	r0, #0
 800a53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a618 <_malloc_r+0xfc>
 800a546:	f000 f869 	bl	800a61c <__malloc_lock>
 800a54a:	f8d8 3000 	ldr.w	r3, [r8]
 800a54e:	461c      	mov	r4, r3
 800a550:	bb44      	cbnz	r4, 800a5a4 <_malloc_r+0x88>
 800a552:	4629      	mov	r1, r5
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff ffbf 	bl	800a4d8 <sbrk_aligned>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	4604      	mov	r4, r0
 800a55e:	d158      	bne.n	800a612 <_malloc_r+0xf6>
 800a560:	f8d8 4000 	ldr.w	r4, [r8]
 800a564:	4627      	mov	r7, r4
 800a566:	2f00      	cmp	r7, #0
 800a568:	d143      	bne.n	800a5f2 <_malloc_r+0xd6>
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	d04b      	beq.n	800a606 <_malloc_r+0xea>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	4639      	mov	r1, r7
 800a572:	4630      	mov	r0, r6
 800a574:	eb04 0903 	add.w	r9, r4, r3
 800a578:	f000 fb5c 	bl	800ac34 <_sbrk_r>
 800a57c:	4581      	cmp	r9, r0
 800a57e:	d142      	bne.n	800a606 <_malloc_r+0xea>
 800a580:	6821      	ldr	r1, [r4, #0]
 800a582:	1a6d      	subs	r5, r5, r1
 800a584:	4629      	mov	r1, r5
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff ffa6 	bl	800a4d8 <sbrk_aligned>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d03a      	beq.n	800a606 <_malloc_r+0xea>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	442b      	add	r3, r5
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	f8d8 3000 	ldr.w	r3, [r8]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	bb62      	cbnz	r2, 800a5f8 <_malloc_r+0xdc>
 800a59e:	f8c8 7000 	str.w	r7, [r8]
 800a5a2:	e00f      	b.n	800a5c4 <_malloc_r+0xa8>
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	1b52      	subs	r2, r2, r5
 800a5a8:	d420      	bmi.n	800a5ec <_malloc_r+0xd0>
 800a5aa:	2a0b      	cmp	r2, #11
 800a5ac:	d917      	bls.n	800a5de <_malloc_r+0xc2>
 800a5ae:	1961      	adds	r1, r4, r5
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	6025      	str	r5, [r4, #0]
 800a5b4:	bf18      	it	ne
 800a5b6:	6059      	strne	r1, [r3, #4]
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	bf08      	it	eq
 800a5bc:	f8c8 1000 	streq.w	r1, [r8]
 800a5c0:	5162      	str	r2, [r4, r5]
 800a5c2:	604b      	str	r3, [r1, #4]
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f000 f82f 	bl	800a628 <__malloc_unlock>
 800a5ca:	f104 000b 	add.w	r0, r4, #11
 800a5ce:	1d23      	adds	r3, r4, #4
 800a5d0:	f020 0007 	bic.w	r0, r0, #7
 800a5d4:	1ac2      	subs	r2, r0, r3
 800a5d6:	bf1c      	itt	ne
 800a5d8:	1a1b      	subne	r3, r3, r0
 800a5da:	50a3      	strne	r3, [r4, r2]
 800a5dc:	e7af      	b.n	800a53e <_malloc_r+0x22>
 800a5de:	6862      	ldr	r2, [r4, #4]
 800a5e0:	42a3      	cmp	r3, r4
 800a5e2:	bf0c      	ite	eq
 800a5e4:	f8c8 2000 	streq.w	r2, [r8]
 800a5e8:	605a      	strne	r2, [r3, #4]
 800a5ea:	e7eb      	b.n	800a5c4 <_malloc_r+0xa8>
 800a5ec:	4623      	mov	r3, r4
 800a5ee:	6864      	ldr	r4, [r4, #4]
 800a5f0:	e7ae      	b.n	800a550 <_malloc_r+0x34>
 800a5f2:	463c      	mov	r4, r7
 800a5f4:	687f      	ldr	r7, [r7, #4]
 800a5f6:	e7b6      	b.n	800a566 <_malloc_r+0x4a>
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	d1fb      	bne.n	800a5f8 <_malloc_r+0xdc>
 800a600:	2300      	movs	r3, #0
 800a602:	6053      	str	r3, [r2, #4]
 800a604:	e7de      	b.n	800a5c4 <_malloc_r+0xa8>
 800a606:	230c      	movs	r3, #12
 800a608:	6033      	str	r3, [r6, #0]
 800a60a:	4630      	mov	r0, r6
 800a60c:	f000 f80c 	bl	800a628 <__malloc_unlock>
 800a610:	e794      	b.n	800a53c <_malloc_r+0x20>
 800a612:	6005      	str	r5, [r0, #0]
 800a614:	e7d6      	b.n	800a5c4 <_malloc_r+0xa8>
 800a616:	bf00      	nop
 800a618:	20001f60 	.word	0x20001f60

0800a61c <__malloc_lock>:
 800a61c:	4801      	ldr	r0, [pc, #4]	@ (800a624 <__malloc_lock+0x8>)
 800a61e:	f7ff bf0f 	b.w	800a440 <__retarget_lock_acquire_recursive>
 800a622:	bf00      	nop
 800a624:	20001f58 	.word	0x20001f58

0800a628 <__malloc_unlock>:
 800a628:	4801      	ldr	r0, [pc, #4]	@ (800a630 <__malloc_unlock+0x8>)
 800a62a:	f7ff bf0a 	b.w	800a442 <__retarget_lock_release_recursive>
 800a62e:	bf00      	nop
 800a630:	20001f58 	.word	0x20001f58

0800a634 <__ssputs_r>:
 800a634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a638:	688e      	ldr	r6, [r1, #8]
 800a63a:	461f      	mov	r7, r3
 800a63c:	42be      	cmp	r6, r7
 800a63e:	680b      	ldr	r3, [r1, #0]
 800a640:	4682      	mov	sl, r0
 800a642:	460c      	mov	r4, r1
 800a644:	4690      	mov	r8, r2
 800a646:	d82d      	bhi.n	800a6a4 <__ssputs_r+0x70>
 800a648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a64c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a650:	d026      	beq.n	800a6a0 <__ssputs_r+0x6c>
 800a652:	6965      	ldr	r5, [r4, #20]
 800a654:	6909      	ldr	r1, [r1, #16]
 800a656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a65a:	eba3 0901 	sub.w	r9, r3, r1
 800a65e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a662:	1c7b      	adds	r3, r7, #1
 800a664:	444b      	add	r3, r9
 800a666:	106d      	asrs	r5, r5, #1
 800a668:	429d      	cmp	r5, r3
 800a66a:	bf38      	it	cc
 800a66c:	461d      	movcc	r5, r3
 800a66e:	0553      	lsls	r3, r2, #21
 800a670:	d527      	bpl.n	800a6c2 <__ssputs_r+0x8e>
 800a672:	4629      	mov	r1, r5
 800a674:	f7ff ff52 	bl	800a51c <_malloc_r>
 800a678:	4606      	mov	r6, r0
 800a67a:	b360      	cbz	r0, 800a6d6 <__ssputs_r+0xa2>
 800a67c:	6921      	ldr	r1, [r4, #16]
 800a67e:	464a      	mov	r2, r9
 800a680:	f000 fae8 	bl	800ac54 <memcpy>
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a68e:	81a3      	strh	r3, [r4, #12]
 800a690:	6126      	str	r6, [r4, #16]
 800a692:	6165      	str	r5, [r4, #20]
 800a694:	444e      	add	r6, r9
 800a696:	eba5 0509 	sub.w	r5, r5, r9
 800a69a:	6026      	str	r6, [r4, #0]
 800a69c:	60a5      	str	r5, [r4, #8]
 800a69e:	463e      	mov	r6, r7
 800a6a0:	42be      	cmp	r6, r7
 800a6a2:	d900      	bls.n	800a6a6 <__ssputs_r+0x72>
 800a6a4:	463e      	mov	r6, r7
 800a6a6:	6820      	ldr	r0, [r4, #0]
 800a6a8:	4632      	mov	r2, r6
 800a6aa:	4641      	mov	r1, r8
 800a6ac:	f000 faa8 	bl	800ac00 <memmove>
 800a6b0:	68a3      	ldr	r3, [r4, #8]
 800a6b2:	1b9b      	subs	r3, r3, r6
 800a6b4:	60a3      	str	r3, [r4, #8]
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	4433      	add	r3, r6
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	f000 fad4 	bl	800ac70 <_realloc_r>
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d1e0      	bne.n	800a690 <__ssputs_r+0x5c>
 800a6ce:	6921      	ldr	r1, [r4, #16]
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	f7ff feb7 	bl	800a444 <_free_r>
 800a6d6:	230c      	movs	r3, #12
 800a6d8:	f8ca 3000 	str.w	r3, [sl]
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e8:	e7e9      	b.n	800a6be <__ssputs_r+0x8a>
	...

0800a6ec <_svfiprintf_r>:
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	4698      	mov	r8, r3
 800a6f2:	898b      	ldrh	r3, [r1, #12]
 800a6f4:	061b      	lsls	r3, r3, #24
 800a6f6:	b09d      	sub	sp, #116	@ 0x74
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	460d      	mov	r5, r1
 800a6fc:	4614      	mov	r4, r2
 800a6fe:	d510      	bpl.n	800a722 <_svfiprintf_r+0x36>
 800a700:	690b      	ldr	r3, [r1, #16]
 800a702:	b973      	cbnz	r3, 800a722 <_svfiprintf_r+0x36>
 800a704:	2140      	movs	r1, #64	@ 0x40
 800a706:	f7ff ff09 	bl	800a51c <_malloc_r>
 800a70a:	6028      	str	r0, [r5, #0]
 800a70c:	6128      	str	r0, [r5, #16]
 800a70e:	b930      	cbnz	r0, 800a71e <_svfiprintf_r+0x32>
 800a710:	230c      	movs	r3, #12
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	b01d      	add	sp, #116	@ 0x74
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	2340      	movs	r3, #64	@ 0x40
 800a720:	616b      	str	r3, [r5, #20]
 800a722:	2300      	movs	r3, #0
 800a724:	9309      	str	r3, [sp, #36]	@ 0x24
 800a726:	2320      	movs	r3, #32
 800a728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a72c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a730:	2330      	movs	r3, #48	@ 0x30
 800a732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a8d0 <_svfiprintf_r+0x1e4>
 800a736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a73a:	f04f 0901 	mov.w	r9, #1
 800a73e:	4623      	mov	r3, r4
 800a740:	469a      	mov	sl, r3
 800a742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a746:	b10a      	cbz	r2, 800a74c <_svfiprintf_r+0x60>
 800a748:	2a25      	cmp	r2, #37	@ 0x25
 800a74a:	d1f9      	bne.n	800a740 <_svfiprintf_r+0x54>
 800a74c:	ebba 0b04 	subs.w	fp, sl, r4
 800a750:	d00b      	beq.n	800a76a <_svfiprintf_r+0x7e>
 800a752:	465b      	mov	r3, fp
 800a754:	4622      	mov	r2, r4
 800a756:	4629      	mov	r1, r5
 800a758:	4638      	mov	r0, r7
 800a75a:	f7ff ff6b 	bl	800a634 <__ssputs_r>
 800a75e:	3001      	adds	r0, #1
 800a760:	f000 80a7 	beq.w	800a8b2 <_svfiprintf_r+0x1c6>
 800a764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a766:	445a      	add	r2, fp
 800a768:	9209      	str	r2, [sp, #36]	@ 0x24
 800a76a:	f89a 3000 	ldrb.w	r3, [sl]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 809f 	beq.w	800a8b2 <_svfiprintf_r+0x1c6>
 800a774:	2300      	movs	r3, #0
 800a776:	f04f 32ff 	mov.w	r2, #4294967295
 800a77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a77e:	f10a 0a01 	add.w	sl, sl, #1
 800a782:	9304      	str	r3, [sp, #16]
 800a784:	9307      	str	r3, [sp, #28]
 800a786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a78a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a78c:	4654      	mov	r4, sl
 800a78e:	2205      	movs	r2, #5
 800a790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a794:	484e      	ldr	r0, [pc, #312]	@ (800a8d0 <_svfiprintf_r+0x1e4>)
 800a796:	f7f5 fd2b 	bl	80001f0 <memchr>
 800a79a:	9a04      	ldr	r2, [sp, #16]
 800a79c:	b9d8      	cbnz	r0, 800a7d6 <_svfiprintf_r+0xea>
 800a79e:	06d0      	lsls	r0, r2, #27
 800a7a0:	bf44      	itt	mi
 800a7a2:	2320      	movmi	r3, #32
 800a7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7a8:	0711      	lsls	r1, r2, #28
 800a7aa:	bf44      	itt	mi
 800a7ac:	232b      	movmi	r3, #43	@ 0x2b
 800a7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7b8:	d015      	beq.n	800a7e6 <_svfiprintf_r+0xfa>
 800a7ba:	9a07      	ldr	r2, [sp, #28]
 800a7bc:	4654      	mov	r4, sl
 800a7be:	2000      	movs	r0, #0
 800a7c0:	f04f 0c0a 	mov.w	ip, #10
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ca:	3b30      	subs	r3, #48	@ 0x30
 800a7cc:	2b09      	cmp	r3, #9
 800a7ce:	d94b      	bls.n	800a868 <_svfiprintf_r+0x17c>
 800a7d0:	b1b0      	cbz	r0, 800a800 <_svfiprintf_r+0x114>
 800a7d2:	9207      	str	r2, [sp, #28]
 800a7d4:	e014      	b.n	800a800 <_svfiprintf_r+0x114>
 800a7d6:	eba0 0308 	sub.w	r3, r0, r8
 800a7da:	fa09 f303 	lsl.w	r3, r9, r3
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	46a2      	mov	sl, r4
 800a7e4:	e7d2      	b.n	800a78c <_svfiprintf_r+0xa0>
 800a7e6:	9b03      	ldr	r3, [sp, #12]
 800a7e8:	1d19      	adds	r1, r3, #4
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	9103      	str	r1, [sp, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	bfbb      	ittet	lt
 800a7f2:	425b      	neglt	r3, r3
 800a7f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7f8:	9307      	strge	r3, [sp, #28]
 800a7fa:	9307      	strlt	r3, [sp, #28]
 800a7fc:	bfb8      	it	lt
 800a7fe:	9204      	strlt	r2, [sp, #16]
 800a800:	7823      	ldrb	r3, [r4, #0]
 800a802:	2b2e      	cmp	r3, #46	@ 0x2e
 800a804:	d10a      	bne.n	800a81c <_svfiprintf_r+0x130>
 800a806:	7863      	ldrb	r3, [r4, #1]
 800a808:	2b2a      	cmp	r3, #42	@ 0x2a
 800a80a:	d132      	bne.n	800a872 <_svfiprintf_r+0x186>
 800a80c:	9b03      	ldr	r3, [sp, #12]
 800a80e:	1d1a      	adds	r2, r3, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	9203      	str	r2, [sp, #12]
 800a814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a818:	3402      	adds	r4, #2
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8e0 <_svfiprintf_r+0x1f4>
 800a820:	7821      	ldrb	r1, [r4, #0]
 800a822:	2203      	movs	r2, #3
 800a824:	4650      	mov	r0, sl
 800a826:	f7f5 fce3 	bl	80001f0 <memchr>
 800a82a:	b138      	cbz	r0, 800a83c <_svfiprintf_r+0x150>
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	eba0 000a 	sub.w	r0, r0, sl
 800a832:	2240      	movs	r2, #64	@ 0x40
 800a834:	4082      	lsls	r2, r0
 800a836:	4313      	orrs	r3, r2
 800a838:	3401      	adds	r4, #1
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a840:	4824      	ldr	r0, [pc, #144]	@ (800a8d4 <_svfiprintf_r+0x1e8>)
 800a842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a846:	2206      	movs	r2, #6
 800a848:	f7f5 fcd2 	bl	80001f0 <memchr>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d036      	beq.n	800a8be <_svfiprintf_r+0x1d2>
 800a850:	4b21      	ldr	r3, [pc, #132]	@ (800a8d8 <_svfiprintf_r+0x1ec>)
 800a852:	bb1b      	cbnz	r3, 800a89c <_svfiprintf_r+0x1b0>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	3307      	adds	r3, #7
 800a858:	f023 0307 	bic.w	r3, r3, #7
 800a85c:	3308      	adds	r3, #8
 800a85e:	9303      	str	r3, [sp, #12]
 800a860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a862:	4433      	add	r3, r6
 800a864:	9309      	str	r3, [sp, #36]	@ 0x24
 800a866:	e76a      	b.n	800a73e <_svfiprintf_r+0x52>
 800a868:	fb0c 3202 	mla	r2, ip, r2, r3
 800a86c:	460c      	mov	r4, r1
 800a86e:	2001      	movs	r0, #1
 800a870:	e7a8      	b.n	800a7c4 <_svfiprintf_r+0xd8>
 800a872:	2300      	movs	r3, #0
 800a874:	3401      	adds	r4, #1
 800a876:	9305      	str	r3, [sp, #20]
 800a878:	4619      	mov	r1, r3
 800a87a:	f04f 0c0a 	mov.w	ip, #10
 800a87e:	4620      	mov	r0, r4
 800a880:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a884:	3a30      	subs	r2, #48	@ 0x30
 800a886:	2a09      	cmp	r2, #9
 800a888:	d903      	bls.n	800a892 <_svfiprintf_r+0x1a6>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0c6      	beq.n	800a81c <_svfiprintf_r+0x130>
 800a88e:	9105      	str	r1, [sp, #20]
 800a890:	e7c4      	b.n	800a81c <_svfiprintf_r+0x130>
 800a892:	fb0c 2101 	mla	r1, ip, r1, r2
 800a896:	4604      	mov	r4, r0
 800a898:	2301      	movs	r3, #1
 800a89a:	e7f0      	b.n	800a87e <_svfiprintf_r+0x192>
 800a89c:	ab03      	add	r3, sp, #12
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a8dc <_svfiprintf_r+0x1f0>)
 800a8a4:	a904      	add	r1, sp, #16
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f3af 8000 	nop.w
 800a8ac:	1c42      	adds	r2, r0, #1
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	d1d6      	bne.n	800a860 <_svfiprintf_r+0x174>
 800a8b2:	89ab      	ldrh	r3, [r5, #12]
 800a8b4:	065b      	lsls	r3, r3, #25
 800a8b6:	f53f af2d 	bmi.w	800a714 <_svfiprintf_r+0x28>
 800a8ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8bc:	e72c      	b.n	800a718 <_svfiprintf_r+0x2c>
 800a8be:	ab03      	add	r3, sp, #12
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	4b05      	ldr	r3, [pc, #20]	@ (800a8dc <_svfiprintf_r+0x1f0>)
 800a8c6:	a904      	add	r1, sp, #16
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f000 f879 	bl	800a9c0 <_printf_i>
 800a8ce:	e7ed      	b.n	800a8ac <_svfiprintf_r+0x1c0>
 800a8d0:	0800ae75 	.word	0x0800ae75
 800a8d4:	0800ae7f 	.word	0x0800ae7f
 800a8d8:	00000000 	.word	0x00000000
 800a8dc:	0800a635 	.word	0x0800a635
 800a8e0:	0800ae7b 	.word	0x0800ae7b

0800a8e4 <_printf_common>:
 800a8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	4698      	mov	r8, r3
 800a8ec:	688a      	ldr	r2, [r1, #8]
 800a8ee:	690b      	ldr	r3, [r1, #16]
 800a8f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	bfb8      	it	lt
 800a8f8:	4613      	movlt	r3, r2
 800a8fa:	6033      	str	r3, [r6, #0]
 800a8fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a900:	4607      	mov	r7, r0
 800a902:	460c      	mov	r4, r1
 800a904:	b10a      	cbz	r2, 800a90a <_printf_common+0x26>
 800a906:	3301      	adds	r3, #1
 800a908:	6033      	str	r3, [r6, #0]
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	0699      	lsls	r1, r3, #26
 800a90e:	bf42      	ittt	mi
 800a910:	6833      	ldrmi	r3, [r6, #0]
 800a912:	3302      	addmi	r3, #2
 800a914:	6033      	strmi	r3, [r6, #0]
 800a916:	6825      	ldr	r5, [r4, #0]
 800a918:	f015 0506 	ands.w	r5, r5, #6
 800a91c:	d106      	bne.n	800a92c <_printf_common+0x48>
 800a91e:	f104 0a19 	add.w	sl, r4, #25
 800a922:	68e3      	ldr	r3, [r4, #12]
 800a924:	6832      	ldr	r2, [r6, #0]
 800a926:	1a9b      	subs	r3, r3, r2
 800a928:	42ab      	cmp	r3, r5
 800a92a:	dc26      	bgt.n	800a97a <_printf_common+0x96>
 800a92c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a930:	6822      	ldr	r2, [r4, #0]
 800a932:	3b00      	subs	r3, #0
 800a934:	bf18      	it	ne
 800a936:	2301      	movne	r3, #1
 800a938:	0692      	lsls	r2, r2, #26
 800a93a:	d42b      	bmi.n	800a994 <_printf_common+0xb0>
 800a93c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a940:	4641      	mov	r1, r8
 800a942:	4638      	mov	r0, r7
 800a944:	47c8      	blx	r9
 800a946:	3001      	adds	r0, #1
 800a948:	d01e      	beq.n	800a988 <_printf_common+0xa4>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	6922      	ldr	r2, [r4, #16]
 800a94e:	f003 0306 	and.w	r3, r3, #6
 800a952:	2b04      	cmp	r3, #4
 800a954:	bf02      	ittt	eq
 800a956:	68e5      	ldreq	r5, [r4, #12]
 800a958:	6833      	ldreq	r3, [r6, #0]
 800a95a:	1aed      	subeq	r5, r5, r3
 800a95c:	68a3      	ldr	r3, [r4, #8]
 800a95e:	bf0c      	ite	eq
 800a960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a964:	2500      	movne	r5, #0
 800a966:	4293      	cmp	r3, r2
 800a968:	bfc4      	itt	gt
 800a96a:	1a9b      	subgt	r3, r3, r2
 800a96c:	18ed      	addgt	r5, r5, r3
 800a96e:	2600      	movs	r6, #0
 800a970:	341a      	adds	r4, #26
 800a972:	42b5      	cmp	r5, r6
 800a974:	d11a      	bne.n	800a9ac <_printf_common+0xc8>
 800a976:	2000      	movs	r0, #0
 800a978:	e008      	b.n	800a98c <_printf_common+0xa8>
 800a97a:	2301      	movs	r3, #1
 800a97c:	4652      	mov	r2, sl
 800a97e:	4641      	mov	r1, r8
 800a980:	4638      	mov	r0, r7
 800a982:	47c8      	blx	r9
 800a984:	3001      	adds	r0, #1
 800a986:	d103      	bne.n	800a990 <_printf_common+0xac>
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a990:	3501      	adds	r5, #1
 800a992:	e7c6      	b.n	800a922 <_printf_common+0x3e>
 800a994:	18e1      	adds	r1, r4, r3
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	2030      	movs	r0, #48	@ 0x30
 800a99a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a99e:	4422      	add	r2, r4
 800a9a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9a8:	3302      	adds	r3, #2
 800a9aa:	e7c7      	b.n	800a93c <_printf_common+0x58>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	4622      	mov	r2, r4
 800a9b0:	4641      	mov	r1, r8
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	47c8      	blx	r9
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d0e6      	beq.n	800a988 <_printf_common+0xa4>
 800a9ba:	3601      	adds	r6, #1
 800a9bc:	e7d9      	b.n	800a972 <_printf_common+0x8e>
	...

0800a9c0 <_printf_i>:
 800a9c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c4:	7e0f      	ldrb	r7, [r1, #24]
 800a9c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9c8:	2f78      	cmp	r7, #120	@ 0x78
 800a9ca:	4691      	mov	r9, r2
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	469a      	mov	sl, r3
 800a9d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9d6:	d807      	bhi.n	800a9e8 <_printf_i+0x28>
 800a9d8:	2f62      	cmp	r7, #98	@ 0x62
 800a9da:	d80a      	bhi.n	800a9f2 <_printf_i+0x32>
 800a9dc:	2f00      	cmp	r7, #0
 800a9de:	f000 80d2 	beq.w	800ab86 <_printf_i+0x1c6>
 800a9e2:	2f58      	cmp	r7, #88	@ 0x58
 800a9e4:	f000 80b9 	beq.w	800ab5a <_printf_i+0x19a>
 800a9e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9f0:	e03a      	b.n	800aa68 <_printf_i+0xa8>
 800a9f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a9f6:	2b15      	cmp	r3, #21
 800a9f8:	d8f6      	bhi.n	800a9e8 <_printf_i+0x28>
 800a9fa:	a101      	add	r1, pc, #4	@ (adr r1, 800aa00 <_printf_i+0x40>)
 800a9fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa00:	0800aa59 	.word	0x0800aa59
 800aa04:	0800aa6d 	.word	0x0800aa6d
 800aa08:	0800a9e9 	.word	0x0800a9e9
 800aa0c:	0800a9e9 	.word	0x0800a9e9
 800aa10:	0800a9e9 	.word	0x0800a9e9
 800aa14:	0800a9e9 	.word	0x0800a9e9
 800aa18:	0800aa6d 	.word	0x0800aa6d
 800aa1c:	0800a9e9 	.word	0x0800a9e9
 800aa20:	0800a9e9 	.word	0x0800a9e9
 800aa24:	0800a9e9 	.word	0x0800a9e9
 800aa28:	0800a9e9 	.word	0x0800a9e9
 800aa2c:	0800ab6d 	.word	0x0800ab6d
 800aa30:	0800aa97 	.word	0x0800aa97
 800aa34:	0800ab27 	.word	0x0800ab27
 800aa38:	0800a9e9 	.word	0x0800a9e9
 800aa3c:	0800a9e9 	.word	0x0800a9e9
 800aa40:	0800ab8f 	.word	0x0800ab8f
 800aa44:	0800a9e9 	.word	0x0800a9e9
 800aa48:	0800aa97 	.word	0x0800aa97
 800aa4c:	0800a9e9 	.word	0x0800a9e9
 800aa50:	0800a9e9 	.word	0x0800a9e9
 800aa54:	0800ab2f 	.word	0x0800ab2f
 800aa58:	6833      	ldr	r3, [r6, #0]
 800aa5a:	1d1a      	adds	r2, r3, #4
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6032      	str	r2, [r6, #0]
 800aa60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e09d      	b.n	800aba8 <_printf_i+0x1e8>
 800aa6c:	6833      	ldr	r3, [r6, #0]
 800aa6e:	6820      	ldr	r0, [r4, #0]
 800aa70:	1d19      	adds	r1, r3, #4
 800aa72:	6031      	str	r1, [r6, #0]
 800aa74:	0606      	lsls	r6, r0, #24
 800aa76:	d501      	bpl.n	800aa7c <_printf_i+0xbc>
 800aa78:	681d      	ldr	r5, [r3, #0]
 800aa7a:	e003      	b.n	800aa84 <_printf_i+0xc4>
 800aa7c:	0645      	lsls	r5, r0, #25
 800aa7e:	d5fb      	bpl.n	800aa78 <_printf_i+0xb8>
 800aa80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa84:	2d00      	cmp	r5, #0
 800aa86:	da03      	bge.n	800aa90 <_printf_i+0xd0>
 800aa88:	232d      	movs	r3, #45	@ 0x2d
 800aa8a:	426d      	negs	r5, r5
 800aa8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa90:	4859      	ldr	r0, [pc, #356]	@ (800abf8 <_printf_i+0x238>)
 800aa92:	230a      	movs	r3, #10
 800aa94:	e011      	b.n	800aaba <_printf_i+0xfa>
 800aa96:	6821      	ldr	r1, [r4, #0]
 800aa98:	6833      	ldr	r3, [r6, #0]
 800aa9a:	0608      	lsls	r0, r1, #24
 800aa9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aaa0:	d402      	bmi.n	800aaa8 <_printf_i+0xe8>
 800aaa2:	0649      	lsls	r1, r1, #25
 800aaa4:	bf48      	it	mi
 800aaa6:	b2ad      	uxthmi	r5, r5
 800aaa8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaaa:	4853      	ldr	r0, [pc, #332]	@ (800abf8 <_printf_i+0x238>)
 800aaac:	6033      	str	r3, [r6, #0]
 800aaae:	bf14      	ite	ne
 800aab0:	230a      	movne	r3, #10
 800aab2:	2308      	moveq	r3, #8
 800aab4:	2100      	movs	r1, #0
 800aab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aaba:	6866      	ldr	r6, [r4, #4]
 800aabc:	60a6      	str	r6, [r4, #8]
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	bfa2      	ittt	ge
 800aac2:	6821      	ldrge	r1, [r4, #0]
 800aac4:	f021 0104 	bicge.w	r1, r1, #4
 800aac8:	6021      	strge	r1, [r4, #0]
 800aaca:	b90d      	cbnz	r5, 800aad0 <_printf_i+0x110>
 800aacc:	2e00      	cmp	r6, #0
 800aace:	d04b      	beq.n	800ab68 <_printf_i+0x1a8>
 800aad0:	4616      	mov	r6, r2
 800aad2:	fbb5 f1f3 	udiv	r1, r5, r3
 800aad6:	fb03 5711 	mls	r7, r3, r1, r5
 800aada:	5dc7      	ldrb	r7, [r0, r7]
 800aadc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aae0:	462f      	mov	r7, r5
 800aae2:	42bb      	cmp	r3, r7
 800aae4:	460d      	mov	r5, r1
 800aae6:	d9f4      	bls.n	800aad2 <_printf_i+0x112>
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d10b      	bne.n	800ab04 <_printf_i+0x144>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	07df      	lsls	r7, r3, #31
 800aaf0:	d508      	bpl.n	800ab04 <_printf_i+0x144>
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	6861      	ldr	r1, [r4, #4]
 800aaf6:	4299      	cmp	r1, r3
 800aaf8:	bfde      	ittt	le
 800aafa:	2330      	movle	r3, #48	@ 0x30
 800aafc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab04:	1b92      	subs	r2, r2, r6
 800ab06:	6122      	str	r2, [r4, #16]
 800ab08:	f8cd a000 	str.w	sl, [sp]
 800ab0c:	464b      	mov	r3, r9
 800ab0e:	aa03      	add	r2, sp, #12
 800ab10:	4621      	mov	r1, r4
 800ab12:	4640      	mov	r0, r8
 800ab14:	f7ff fee6 	bl	800a8e4 <_printf_common>
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d14a      	bne.n	800abb2 <_printf_i+0x1f2>
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	b004      	add	sp, #16
 800ab22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	f043 0320 	orr.w	r3, r3, #32
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	4833      	ldr	r0, [pc, #204]	@ (800abfc <_printf_i+0x23c>)
 800ab30:	2778      	movs	r7, #120	@ 0x78
 800ab32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	6831      	ldr	r1, [r6, #0]
 800ab3a:	061f      	lsls	r7, r3, #24
 800ab3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab40:	d402      	bmi.n	800ab48 <_printf_i+0x188>
 800ab42:	065f      	lsls	r7, r3, #25
 800ab44:	bf48      	it	mi
 800ab46:	b2ad      	uxthmi	r5, r5
 800ab48:	6031      	str	r1, [r6, #0]
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	bf44      	itt	mi
 800ab4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab52:	6023      	strmi	r3, [r4, #0]
 800ab54:	b11d      	cbz	r5, 800ab5e <_printf_i+0x19e>
 800ab56:	2310      	movs	r3, #16
 800ab58:	e7ac      	b.n	800aab4 <_printf_i+0xf4>
 800ab5a:	4827      	ldr	r0, [pc, #156]	@ (800abf8 <_printf_i+0x238>)
 800ab5c:	e7e9      	b.n	800ab32 <_printf_i+0x172>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	f023 0320 	bic.w	r3, r3, #32
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	e7f6      	b.n	800ab56 <_printf_i+0x196>
 800ab68:	4616      	mov	r6, r2
 800ab6a:	e7bd      	b.n	800aae8 <_printf_i+0x128>
 800ab6c:	6833      	ldr	r3, [r6, #0]
 800ab6e:	6825      	ldr	r5, [r4, #0]
 800ab70:	6961      	ldr	r1, [r4, #20]
 800ab72:	1d18      	adds	r0, r3, #4
 800ab74:	6030      	str	r0, [r6, #0]
 800ab76:	062e      	lsls	r6, r5, #24
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	d501      	bpl.n	800ab80 <_printf_i+0x1c0>
 800ab7c:	6019      	str	r1, [r3, #0]
 800ab7e:	e002      	b.n	800ab86 <_printf_i+0x1c6>
 800ab80:	0668      	lsls	r0, r5, #25
 800ab82:	d5fb      	bpl.n	800ab7c <_printf_i+0x1bc>
 800ab84:	8019      	strh	r1, [r3, #0]
 800ab86:	2300      	movs	r3, #0
 800ab88:	6123      	str	r3, [r4, #16]
 800ab8a:	4616      	mov	r6, r2
 800ab8c:	e7bc      	b.n	800ab08 <_printf_i+0x148>
 800ab8e:	6833      	ldr	r3, [r6, #0]
 800ab90:	1d1a      	adds	r2, r3, #4
 800ab92:	6032      	str	r2, [r6, #0]
 800ab94:	681e      	ldr	r6, [r3, #0]
 800ab96:	6862      	ldr	r2, [r4, #4]
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f7f5 fb28 	bl	80001f0 <memchr>
 800aba0:	b108      	cbz	r0, 800aba6 <_printf_i+0x1e6>
 800aba2:	1b80      	subs	r0, r0, r6
 800aba4:	6060      	str	r0, [r4, #4]
 800aba6:	6863      	ldr	r3, [r4, #4]
 800aba8:	6123      	str	r3, [r4, #16]
 800abaa:	2300      	movs	r3, #0
 800abac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb0:	e7aa      	b.n	800ab08 <_printf_i+0x148>
 800abb2:	6923      	ldr	r3, [r4, #16]
 800abb4:	4632      	mov	r2, r6
 800abb6:	4649      	mov	r1, r9
 800abb8:	4640      	mov	r0, r8
 800abba:	47d0      	blx	sl
 800abbc:	3001      	adds	r0, #1
 800abbe:	d0ad      	beq.n	800ab1c <_printf_i+0x15c>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	079b      	lsls	r3, r3, #30
 800abc4:	d413      	bmi.n	800abee <_printf_i+0x22e>
 800abc6:	68e0      	ldr	r0, [r4, #12]
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	4298      	cmp	r0, r3
 800abcc:	bfb8      	it	lt
 800abce:	4618      	movlt	r0, r3
 800abd0:	e7a6      	b.n	800ab20 <_printf_i+0x160>
 800abd2:	2301      	movs	r3, #1
 800abd4:	4632      	mov	r2, r6
 800abd6:	4649      	mov	r1, r9
 800abd8:	4640      	mov	r0, r8
 800abda:	47d0      	blx	sl
 800abdc:	3001      	adds	r0, #1
 800abde:	d09d      	beq.n	800ab1c <_printf_i+0x15c>
 800abe0:	3501      	adds	r5, #1
 800abe2:	68e3      	ldr	r3, [r4, #12]
 800abe4:	9903      	ldr	r1, [sp, #12]
 800abe6:	1a5b      	subs	r3, r3, r1
 800abe8:	42ab      	cmp	r3, r5
 800abea:	dcf2      	bgt.n	800abd2 <_printf_i+0x212>
 800abec:	e7eb      	b.n	800abc6 <_printf_i+0x206>
 800abee:	2500      	movs	r5, #0
 800abf0:	f104 0619 	add.w	r6, r4, #25
 800abf4:	e7f5      	b.n	800abe2 <_printf_i+0x222>
 800abf6:	bf00      	nop
 800abf8:	0800ae86 	.word	0x0800ae86
 800abfc:	0800ae97 	.word	0x0800ae97

0800ac00 <memmove>:
 800ac00:	4288      	cmp	r0, r1
 800ac02:	b510      	push	{r4, lr}
 800ac04:	eb01 0402 	add.w	r4, r1, r2
 800ac08:	d902      	bls.n	800ac10 <memmove+0x10>
 800ac0a:	4284      	cmp	r4, r0
 800ac0c:	4623      	mov	r3, r4
 800ac0e:	d807      	bhi.n	800ac20 <memmove+0x20>
 800ac10:	1e43      	subs	r3, r0, #1
 800ac12:	42a1      	cmp	r1, r4
 800ac14:	d008      	beq.n	800ac28 <memmove+0x28>
 800ac16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac1e:	e7f8      	b.n	800ac12 <memmove+0x12>
 800ac20:	4402      	add	r2, r0
 800ac22:	4601      	mov	r1, r0
 800ac24:	428a      	cmp	r2, r1
 800ac26:	d100      	bne.n	800ac2a <memmove+0x2a>
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac32:	e7f7      	b.n	800ac24 <memmove+0x24>

0800ac34 <_sbrk_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d06      	ldr	r5, [pc, #24]	@ (800ac50 <_sbrk_r+0x1c>)
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7f5 ffd4 	bl	8000bec <_sbrk>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_sbrk_r+0x1a>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_sbrk_r+0x1a>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	20001f54 	.word	0x20001f54

0800ac54 <memcpy>:
 800ac54:	440a      	add	r2, r1
 800ac56:	4291      	cmp	r1, r2
 800ac58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac5c:	d100      	bne.n	800ac60 <memcpy+0xc>
 800ac5e:	4770      	bx	lr
 800ac60:	b510      	push	{r4, lr}
 800ac62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	d1f9      	bne.n	800ac62 <memcpy+0xe>
 800ac6e:	bd10      	pop	{r4, pc}

0800ac70 <_realloc_r>:
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	4680      	mov	r8, r0
 800ac76:	4615      	mov	r5, r2
 800ac78:	460c      	mov	r4, r1
 800ac7a:	b921      	cbnz	r1, 800ac86 <_realloc_r+0x16>
 800ac7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac80:	4611      	mov	r1, r2
 800ac82:	f7ff bc4b 	b.w	800a51c <_malloc_r>
 800ac86:	b92a      	cbnz	r2, 800ac94 <_realloc_r+0x24>
 800ac88:	f7ff fbdc 	bl	800a444 <_free_r>
 800ac8c:	2400      	movs	r4, #0
 800ac8e:	4620      	mov	r0, r4
 800ac90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac94:	f000 f81a 	bl	800accc <_malloc_usable_size_r>
 800ac98:	4285      	cmp	r5, r0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	d802      	bhi.n	800aca4 <_realloc_r+0x34>
 800ac9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aca2:	d8f4      	bhi.n	800ac8e <_realloc_r+0x1e>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4640      	mov	r0, r8
 800aca8:	f7ff fc38 	bl	800a51c <_malloc_r>
 800acac:	4607      	mov	r7, r0
 800acae:	2800      	cmp	r0, #0
 800acb0:	d0ec      	beq.n	800ac8c <_realloc_r+0x1c>
 800acb2:	42b5      	cmp	r5, r6
 800acb4:	462a      	mov	r2, r5
 800acb6:	4621      	mov	r1, r4
 800acb8:	bf28      	it	cs
 800acba:	4632      	movcs	r2, r6
 800acbc:	f7ff ffca 	bl	800ac54 <memcpy>
 800acc0:	4621      	mov	r1, r4
 800acc2:	4640      	mov	r0, r8
 800acc4:	f7ff fbbe 	bl	800a444 <_free_r>
 800acc8:	463c      	mov	r4, r7
 800acca:	e7e0      	b.n	800ac8e <_realloc_r+0x1e>

0800accc <_malloc_usable_size_r>:
 800accc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd0:	1f18      	subs	r0, r3, #4
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	bfbc      	itt	lt
 800acd6:	580b      	ldrlt	r3, [r1, r0]
 800acd8:	18c0      	addlt	r0, r0, r3
 800acda:	4770      	bx	lr

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
