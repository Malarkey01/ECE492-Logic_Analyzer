
Logic Analyzer V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800ad44  0800ad44  0001ad44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef8  0800aef8  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800aef8  0800aef8  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aef8  0800aef8  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800af00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00001d9c  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f6c  20001f6c  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012fb6  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032a7  00000000  00000000  000331f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001050  00000000  00000000  000364a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c5a  00000000  00000000  000374f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022fde  00000000  00000000  0003814a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015daf  00000000  00000000  0005b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca31b  00000000  00000000  00070ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004854  00000000  00000000  0013b1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0013fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad2c 	.word	0x0800ad2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	0800ad2c 	.word	0x0800ad2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000294:	f000 fd32 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f86e 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f96c 	bl	8000578 <MX_GPIO_Init>
  MX_TIM2_Init(0x00008CA0);
 80002a0:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80002a4:	f000 f8cc 	bl	8000440 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80002a8:	f009 fb66 	bl	8009978 <MX_USB_DEVICE_Init>
  MX_TIM16_Init(0xFFFF, 1);
 80002ac:	2101      	movs	r1, #1
 80002ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002b2:	f000 f92b 	bl	800050c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  state = preTrigger;
 80002b6:	4b28      	ldr	r3, [pc, #160]	; (8000358 <main+0xc8>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	701a      	strb	r2, [r3, #0]

 // HAL_TIM_Base_Start_IT(&htim16);//test remove later.
  while (1)
    {
      /* USER CODE END WHILE */
  	  switch(state){
 80002bc:	4b26      	ldr	r3, [pc, #152]	; (8000358 <main+0xc8>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d043      	beq.n	800034c <main+0xbc>
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	dcf9      	bgt.n	80002bc <main+0x2c>
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d041      	beq.n	8000350 <main+0xc0>
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d1f5      	bne.n	80002bc <main+0x2c>
  	  	  	  case triggerState:

  	  	  		  break;
  	  	  	  case postTrigger:

  	  	  		 trigger = 0;
 80002d0:	4b22      	ldr	r3, [pc, #136]	; (800035c <main+0xcc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
  	  	  		 //Send_Large_USB_Data((void*)buffer, 150 * sizeof(uint16_t));

  	  	  		 sprintf(msg, "%hu\r\n", buffer[val]);
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <main+0xd0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a22      	ldr	r2, [pc, #136]	; (8000364 <main+0xd4>)
 80002dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002e0:	461a      	mov	r2, r3
 80002e2:	4921      	ldr	r1, [pc, #132]	; (8000368 <main+0xd8>)
 80002e4:	4821      	ldr	r0, [pc, #132]	; (800036c <main+0xdc>)
 80002e6:	f00a f87d 	bl	800a3e4 <siprintf>
  	  	  		 CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 80002ea:	4820      	ldr	r0, [pc, #128]	; (800036c <main+0xdc>)
 80002ec:	f7ff ff78 	bl	80001e0 <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	4619      	mov	r1, r3
 80002f6:	481d      	ldr	r0, [pc, #116]	; (800036c <main+0xdc>)
 80002f8:	f009 fbfe 	bl	8009af8 <CDC_Transmit_FS>
  	  	  		 HAL_Delay(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 fd63 	bl	8000dc8 <HAL_Delay>
  	  	  		 val++;
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <main+0xd0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	4a15      	ldr	r2, [pc, #84]	; (8000360 <main+0xd0>)
 800030a:	6013      	str	r3, [r2, #0]

  	  	  		 if(val == 1024){
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <main+0xd0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000314:	d11e      	bne.n	8000354 <main+0xc4>
  	  	  			 val = 0;
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <main+0xd0>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
  	  	  			sprintf(msg, "%hu\r\n", trigPointer);
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <main+0xe0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	4911      	ldr	r1, [pc, #68]	; (8000368 <main+0xd8>)
 8000324:	4811      	ldr	r0, [pc, #68]	; (800036c <main+0xdc>)
 8000326:	f00a f85d 	bl	800a3e4 <siprintf>
  	  	  		  	CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
 800032a:	4810      	ldr	r0, [pc, #64]	; (800036c <main+0xdc>)
 800032c:	f7ff ff58 	bl	80001e0 <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	b29b      	uxth	r3, r3
 8000334:	4619      	mov	r1, r3
 8000336:	480d      	ldr	r0, [pc, #52]	; (800036c <main+0xdc>)
 8000338:	f009 fbde 	bl	8009af8 <CDC_Transmit_FS>
  	  	  			HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800033c:	2100      	movs	r1, #0
 800033e:	480d      	ldr	r0, [pc, #52]	; (8000374 <main+0xe4>)
 8000340:	f004 fb3a 	bl	80049b8 <HAL_TIM_PWM_Start_IT>
  	  	  			state = preTrigger;
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <main+0xc8>)
 8000346:	2202      	movs	r2, #2
 8000348:	701a      	strb	r2, [r3, #0]
  	  	  		 }
  	  	  			break;
 800034a:	e003      	b.n	8000354 <main+0xc4>
  	  	  		  break;
 800034c:	bf00      	nop
 800034e:	e7b5      	b.n	80002bc <main+0x2c>
  	  	  		  break;
 8000350:	bf00      	nop
 8000352:	e7b3      	b.n	80002bc <main+0x2c>
  	  	  			break;
 8000354:	bf00      	nop
  	  switch(state){
 8000356:	e7b1      	b.n	80002bc <main+0x2c>
 8000358:	20000a06 	.word	0x20000a06
 800035c:	200009f0 	.word	0x200009f0
 8000360:	20000a00 	.word	0x20000a00
 8000364:	200001ec 	.word	0x200001ec
 8000368:	0800ad44 	.word	0x0800ad44
 800036c:	200009f4 	.word	0x200009f4
 8000370:	20000a0c 	.word	0x20000a0c
 8000374:	20000a10 	.word	0x20000a10

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b0a6      	sub	sp, #152	; 0x98
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f00a f84c 	bl	800a424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2258      	movs	r2, #88	; 0x58
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f00a f83e 	bl	800a424 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a8:	2301      	movs	r3, #1
 80003aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b6:	2302      	movs	r3, #2
 80003b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fc9c 	bl	8002d14 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003e2:	f000 fb5d 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2302      	movs	r3, #2
 80003ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fcda 	bl	8003dbc <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800040e:	f000 fb47 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_TIM16
 8000412:	f44f 0312 	mov.w	r3, #9568256	; 0x920000
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000418:	2300      	movs	r3, #0
 800041a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800041c:	2300      	movs	r3, #0
 800041e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000420:	2300      	movs	r3, #0
 8000422:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fe98 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000432:	f000 fb35 	bl	8000aa0 <Error_Handler>
  }
}
 8000436:	bf00      	nop
 8000438:	3798      	adds	r7, #152	; 0x98
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(uint32_t period)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08c      	sub	sp, #48	; 0x30
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]
 8000466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000468:	4b27      	ldr	r3, [pc, #156]	; (8000508 <MX_TIM2_Init+0xc8>)
 800046a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000470:	4b25      	ldr	r3, [pc, #148]	; (8000508 <MX_TIM2_Init+0xc8>)
 8000472:	2201      	movs	r2, #1
 8000474:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000476:	4b24      	ldr	r3, [pc, #144]	; (8000508 <MX_TIM2_Init+0xc8>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = period-1;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a21      	ldr	r2, [pc, #132]	; (8000508 <MX_TIM2_Init+0xc8>)
 8000482:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_TIM2_Init+0xc8>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_TIM2_Init+0xc8>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000490:	481d      	ldr	r0, [pc, #116]	; (8000508 <MX_TIM2_Init+0xc8>)
 8000492:	f004 f99e 	bl	80047d2 <HAL_TIM_PWM_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 800049c:	f000 fb00 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a0:	2300      	movs	r3, #0
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ac:	4619      	mov	r1, r3
 80004ae:	4816      	ldr	r0, [pc, #88]	; (8000508 <MX_TIM2_Init+0xc8>)
 80004b0:	f005 face 	bl	8005a50 <HAL_TIMEx_MasterConfigSynchronization>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004ba:	f000 faf1 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004be:	2360      	movs	r3, #96	; 0x60
 80004c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	480c      	ldr	r0, [pc, #48]	; (8000508 <MX_TIM2_Init+0xc8>)
 80004d8:	f004 fdb2 	bl	8005040 <HAL_TIM_PWM_ConfigChannel>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 80004e2:	f000 fadd 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2204      	movs	r2, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_TIM2_Init+0xc8>)
 80004f0:	f004 fda6 	bl	8005040 <HAL_TIM_PWM_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80004fa:	f000 fad1 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3730      	adds	r7, #48	; 0x30
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000a10 	.word	0x20000a10

0800050c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(uint16_t period, uint16_t prescalar)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	80fb      	strh	r3, [r7, #6]
 8000518:	4613      	mov	r3, r2
 800051a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_TIM16_Init+0x64>)
 800051e:	4a15      	ldr	r2, [pc, #84]	; (8000574 <MX_TIM16_Init+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler =prescalar ;
 8000522:	88bb      	ldrh	r3, [r7, #4]
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <MX_TIM16_Init+0x64>)
 8000526:	6053      	str	r3, [r2, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_TIM16_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = period;
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <MX_TIM16_Init+0x64>)
 8000532:	60d3      	str	r3, [r2, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_TIM16_Init+0x64>)
 8000536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_TIM16_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_TIM16_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000548:	4809      	ldr	r0, [pc, #36]	; (8000570 <MX_TIM16_Init+0x64>)
 800054a:	f004 f825 	bl	8004598 <HAL_TIM_Base_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM16_Init+0x4c>
  {
    Error_Handler();
 8000554:	f000 faa4 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <MX_TIM16_Init+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	68da      	ldr	r2, [r3, #12]
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <MX_TIM16_Init+0x64>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM16_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000a5c 	.word	0x20000a5c
 8000574:	40014400 	.word	0x40014400

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	4b32      	ldr	r3, [pc, #200]	; (8000658 <MX_GPIO_Init+0xe0>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a31      	ldr	r2, [pc, #196]	; (8000658 <MX_GPIO_Init+0xe0>)
 8000594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_GPIO_Init+0xe0>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a2b      	ldr	r2, [pc, #172]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f000 fea7 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000600:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <MX_GPIO_Init+0xe4>)
 8000612:	f000 fd0f 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fd00 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000638:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_GPIO_Init+0xe8>)
 800064a:	f000 fcf3 	bl	8001034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000800 	.word	0x48000800
 8000660:	48000400 	.word	0x48000400

08000664 <HAL_TIM_PeriodElapsedCallback>:

uint8_t trigPin = 0x00;
uint8_t trigEdge = 0x00; //Falling Edge
int triggerCount = 300;
int Cutter=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	if(htim == &htim16){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a0b      	ldr	r2, [pc, #44]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d10e      	bne.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000674:	2120      	movs	r1, #32
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fe7d 	bl	8001378 <HAL_GPIO_TogglePin>
		state = postTrigger;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000688:	f004 faee 	bl	8004c68 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim16);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800068e:	f004 f871 	bl	8004774 <HAL_TIM_Base_Stop_IT>
	}

	}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000a5c 	.word	0x20000a5c
 80006a0:	20000a06 	.word	0x20000a06
 80006a4:	20000a10 	.word	0x20000a10

080006a8 <HAL_TIM_PWM_PulseFinishedCallback>:
uint16_t lastValue = 0;  // Store the last read value
int stableCount = 0; // Count of consecutive identical readings
int check = 0;


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7f1b      	ldrb	r3, [r3, #28]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	f040 8087 	bne.w	80007c8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>
        if (!trigger) {
 80006ba:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d13e      	bne.n	8000740 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
            xorResult = GPIOB->IDR ^ buffer[bufferPointer];
 80006c2:	4b44      	ldr	r3, [pc, #272]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x12c>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4943      	ldr	r1, [pc, #268]	; (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 80006ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006d2:	4053      	eors	r3, r2
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80006d8:	801a      	strh	r2, [r3, #0]
            uint16_t trigPinCheck = xorResult & trigPin;
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x13c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	4013      	ands	r3, r2
 80006e6:	81fb      	strh	r3, [r7, #14]
            uint16_t trigEdgeCheck = ~(buffer[bufferPointer] ^ trigEdge);
 80006e8:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3b      	ldr	r2, [pc, #236]	; (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 80006ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4053      	eors	r3, r2
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	81bb      	strh	r3, [r7, #12]
            trigger = (trigPinCheck & trigEdgeCheck) > 0;
 8000700:	89fa      	ldrh	r2, [r7, #14]
 8000702:	89bb      	ldrh	r3, [r7, #12]
 8000704:	4013      	ands	r3, r2
 8000706:	b29b      	uxth	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 8000716:	601a      	str	r2, [r3, #0]
            if (trigger) {
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00f      	beq.n	8000740 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
                counter = 0;
 8000720:	4b32      	ldr	r3, [pc, #200]	; (80007ec <HAL_TIM_PWM_PulseFinishedCallback+0x144>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
                state = triggerState;
 8000726:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
                trigPointer = bufferPointer;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a30      	ldr	r2, [pc, #192]	; (80007f4 <HAL_TIM_PWM_PulseFinishedCallback+0x14c>)
 8000732:	6013      	str	r3, [r2, #0]
                // Start timer 16
                check = 0;
 8000734:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
                HAL_TIM_Base_Start_IT(&htim16);
 800073a:	4830      	ldr	r0, [pc, #192]	; (80007fc <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 800073c:	f003 ffaa 	bl	8004694 <HAL_TIM_Base_Start_IT>
            }
        }
        if(trigger){
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
        	check++;
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8000750:	6013      	str	r3, [r2, #0]
        }
        // Read the current value from the input pin
        uint16_t currentValue = GPIOB->IDR & 0xFFFF;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <HAL_TIM_PWM_PulseFinishedCallback+0x12c>)
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	817b      	strh	r3, [r7, #10]

        // Check for a stable signal (potential disconnection)
        if (currentValue == lastValue) {
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <HAL_TIM_PWM_PulseFinishedCallback+0x158>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	897a      	ldrh	r2, [r7, #10]
 800075e:	429a      	cmp	r2, r3
 8000760:	d11b      	bne.n	800079a <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
            stableCount++;
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>)
 800076a:	6013      	str	r3, [r2, #0]
            if (stableCount > DISCONNECT_THRESHOLD) {
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2bfa      	cmp	r3, #250	; 0xfa
 8000772:	dd15      	ble.n	80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>
                // Clear the buffer if the pin is considered disconnected
                memset(buffer, 0, sizeof(buffer));  // Clear the entire buffer
 8000774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000778:	2100      	movs	r1, #0
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 800077c:	f009 fe52 	bl	800a424 <memset>
                bufferPointer = 0;  // Reset the buffer pointer
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
                state = preTrigger;  // Reset the state to preTrigger
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8000788:	2202      	movs	r2, #2
 800078a:	701a      	strb	r2, [r3, #0]
                trigger = 0;  // Clear the trigger
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
                stableCount = 0;  // Reset the stability counter
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	e002      	b.n	80007a0 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>
            }
        } else {
            // Reset the stability counter if the value changes
            stableCount = 0;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>)
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
        }

        // Update the last value
        lastValue = currentValue;
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_TIM_PWM_PulseFinishedCallback+0x158>)
 80007a2:	897b      	ldrh	r3, [r7, #10]
 80007a4:	8013      	strh	r3, [r2, #0]

        // Add 8-bit logic input to the buffer if not disconnected
        buffer[bufferPointer] = currentValue;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	490c      	ldr	r1, [pc, #48]	; (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x134>)
 80007ac:	897a      	ldrh	r2, [r7, #10]
 80007ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        // Increment pointer with circular logic
        bufferPointer++;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80007ba:	6013      	str	r3, [r2, #0]
        bufferPointer &= 0x03FF;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x130>)
 80007c6:	6013      	str	r3, [r2, #0]
    }
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200009f0 	.word	0x200009f0
 80007d4:	48000400 	.word	0x48000400
 80007d8:	200009ec 	.word	0x200009ec
 80007dc:	200001ec 	.word	0x200001ec
 80007e0:	20000a04 	.word	0x20000a04
 80007e4:	20000aa8 	.word	0x20000aa8
 80007e8:	20000aa9 	.word	0x20000aa9
 80007ec:	20000a08 	.word	0x20000a08
 80007f0:	20000a06 	.word	0x20000a06
 80007f4:	20000a0c 	.word	0x20000a0c
 80007f8:	20000ab0 	.word	0x20000ab0
 80007fc:	20000a5c 	.word	0x20000a5c
 8000800:	20000aaa 	.word	0x20000aaa
 8000804:	20000aac 	.word	0x20000aac

08000808 <Process_USB_Command>:
uint16_t period2LowerHalf = 0x0000;
uint32_t period2UpperHalf = 0x00000000;
uint16_t prescalar16 = 0x0000;
int puff[100];
int i = 0;
void Process_USB_Command(char *cmd) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]




	commandValueFlag += 1;
 8000810:	4b70      	ldr	r3, [pc, #448]	; (80009d4 <Process_USB_Command+0x1cc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	4a6f      	ldr	r2, [pc, #444]	; (80009d4 <Process_USB_Command+0x1cc>)
 8000818:	6013      	str	r3, [r2, #0]
	if (commandValueFlag == 3)
 800081a:	4b6e      	ldr	r3, [pc, #440]	; (80009d4 <Process_USB_Command+0x1cc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d102      	bne.n	8000828 <Process_USB_Command+0x20>
			commandValueFlag = 0;
 8000822:	4b6c      	ldr	r3, [pc, #432]	; (80009d4 <Process_USB_Command+0x1cc>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
	if (commandValueFlag == 0){
 8000828:	4b6a      	ldr	r3, [pc, #424]	; (80009d4 <Process_USB_Command+0x1cc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d110      	bne.n	8000852 <Process_USB_Command+0x4a>
		command = atoi(cmd);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f009 fd47 	bl	800a2c4 <atoi>
 8000836:	4603      	mov	r3, r0
 8000838:	4a67      	ldr	r2, [pc, #412]	; (80009d8 <Process_USB_Command+0x1d0>)
 800083a:	6013      	str	r3, [r2, #0]
		puff[i++] = command;
 800083c:	4b67      	ldr	r3, [pc, #412]	; (80009dc <Process_USB_Command+0x1d4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	4966      	ldr	r1, [pc, #408]	; (80009dc <Process_USB_Command+0x1d4>)
 8000844:	600a      	str	r2, [r1, #0]
 8000846:	4a64      	ldr	r2, [pc, #400]	; (80009d8 <Process_USB_Command+0x1d0>)
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	4965      	ldr	r1, [pc, #404]	; (80009e0 <Process_USB_Command+0x1d8>)
 800084c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000850:	e0b3      	b.n	80009ba <Process_USB_Command+0x1b2>
	}
	else{
			switch(command){
 8000852:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <Process_USB_Command+0x1d0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b07      	cmp	r3, #7
 8000858:	f200 80af 	bhi.w	80009ba <Process_USB_Command+0x1b2>
 800085c:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <Process_USB_Command+0x5c>)
 800085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000862:	bf00      	nop
 8000864:	08000885 	.word	0x08000885
 8000868:	08000895 	.word	0x08000895
 800086c:	080008a5 	.word	0x080008a5
 8000870:	080008b5 	.word	0x080008b5
 8000874:	080008c5 	.word	0x080008c5
 8000878:	080008f7 	.word	0x080008f7
 800087c:	0800093b 	.word	0x0800093b
 8000880:	08000989 	.word	0x08000989
			case 0://start
				HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000884:	2100      	movs	r1, #0
 8000886:	4857      	ldr	r0, [pc, #348]	; (80009e4 <Process_USB_Command+0x1dc>)
 8000888:	f004 f896 	bl	80049b8 <HAL_TIM_PWM_Start_IT>
				state = preTrigger;
 800088c:	4b56      	ldr	r3, [pc, #344]	; (80009e8 <Process_USB_Command+0x1e0>)
 800088e:	2202      	movs	r2, #2
 8000890:	701a      	strb	r2, [r3, #0]
				break;
 8000892:	e092      	b.n	80009ba <Process_USB_Command+0x1b2>
			case 1: //stop
				trigger = 0;
 8000894:	4b55      	ldr	r3, [pc, #340]	; (80009ec <Process_USB_Command+0x1e4>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800089a:	2100      	movs	r1, #0
 800089c:	4851      	ldr	r0, [pc, #324]	; (80009e4 <Process_USB_Command+0x1dc>)
 800089e:	f003 ffef 	bl	8004880 <HAL_TIM_PWM_Stop>
				break;
 80008a2:	e08a      	b.n	80009ba <Process_USB_Command+0x1b2>
			case 2: // set trig edge
				trigEdge = atoi(cmd);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f009 fd0d 	bl	800a2c4 <atoi>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <Process_USB_Command+0x1e8>)
 80008b0:	701a      	strb	r2, [r3, #0]
				break;
 80008b2:	e082      	b.n	80009ba <Process_USB_Command+0x1b2>
			case 3: // set trig pin
				trigPin = atoi(cmd);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f009 fd05 	bl	800a2c4 <atoi>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <Process_USB_Command+0x1ec>)
 80008c0:	701a      	strb	r2, [r3, #0]
				break;
 80008c2:	e07a      	b.n	80009ba <Process_USB_Command+0x1b2>
			case 4: //trigger PIN from 0 to 7
				period16 = period16 << 8;
 80008c4:	4b4c      	ldr	r3, [pc, #304]	; (80009f8 <Process_USB_Command+0x1f0>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <Process_USB_Command+0x1f0>)
 80008ce:	801a      	strh	r2, [r3, #0]
				period16 |= atoi(cmd);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f009 fcf7 	bl	800a2c4 <atoi>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b21a      	sxth	r2, r3
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <Process_USB_Command+0x1f0>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	b21b      	sxth	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <Process_USB_Command+0x1f0>)
 80008e8:	801a      	strh	r2, [r3, #0]
				change_period16(period16);
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <Process_USB_Command+0x1f0>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f8a6 	bl	8000a40 <change_period16>
				break;
 80008f4:	e061      	b.n	80009ba <Process_USB_Command+0x1b2>

			case 5:
				period2UpperHalf = period2UpperHalf << 8;
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <Process_USB_Command+0x1f4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	4a3f      	ldr	r2, [pc, #252]	; (80009fc <Process_USB_Command+0x1f4>)
 80008fe:	6013      	str	r3, [r2, #0]
				period2UpperHalf |= atoi(cmd);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f009 fcdf 	bl	800a2c4 <atoi>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <Process_USB_Command+0x1f4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4313      	orrs	r3, r2
 8000910:	4a3a      	ldr	r2, [pc, #232]	; (80009fc <Process_USB_Command+0x1f4>)
 8000912:	6013      	str	r3, [r2, #0]
				period2 &= 0x0000FFFF;
 8000914:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <Process_USB_Command+0x1f8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4a39      	ldr	r2, [pc, #228]	; (8000a00 <Process_USB_Command+0x1f8>)
 800091c:	6013      	str	r3, [r2, #0]
				period2 |= period2UpperHalf << 16;
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <Process_USB_Command+0x1f4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	041a      	lsls	r2, r3, #16
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <Process_USB_Command+0x1f8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4313      	orrs	r3, r2
 800092a:	4a35      	ldr	r2, [pc, #212]	; (8000a00 <Process_USB_Command+0x1f8>)
 800092c:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <Process_USB_Command+0x1f8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f86a 	bl	8000a0c <change_period2>
				break;
 8000938:	e03f      	b.n	80009ba <Process_USB_Command+0x1b2>
			case 6:
				period2LowerHalf = period2LowerHalf << 8;
 800093a:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <Process_USB_Command+0x1fc>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <Process_USB_Command+0x1fc>)
 8000944:	801a      	strh	r2, [r3, #0]
				period2LowerHalf |= atoi(cmd);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f009 fcbc 	bl	800a2c4 <atoi>
 800094c:	4603      	mov	r3, r0
 800094e:	b21a      	sxth	r2, r3
 8000950:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <Process_USB_Command+0x1fc>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b21b      	sxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b21b      	sxth	r3, r3
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <Process_USB_Command+0x1fc>)
 800095e:	801a      	strh	r2, [r3, #0]
				period2 &= 0xFFFF0000;
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <Process_USB_Command+0x1f8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	0c1b      	lsrs	r3, r3, #16
 8000966:	041b      	lsls	r3, r3, #16
 8000968:	4a25      	ldr	r2, [pc, #148]	; (8000a00 <Process_USB_Command+0x1f8>)
 800096a:	6013      	str	r3, [r2, #0]
				period2 |= period2LowerHalf;
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <Process_USB_Command+0x1fc>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <Process_USB_Command+0x1f8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4313      	orrs	r3, r2
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <Process_USB_Command+0x1f8>)
 800097a:	6013      	str	r3, [r2, #0]
				change_period2(period2);
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <Process_USB_Command+0x1f8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f843 	bl	8000a0c <change_period2>
				break;
 8000986:	e018      	b.n	80009ba <Process_USB_Command+0x1b2>
			case 7:
				prescalar16 = prescalar16 << 8;
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <Process_USB_Command+0x200>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <Process_USB_Command+0x200>)
 8000992:	801a      	strh	r2, [r3, #0]
				prescalar16 |= atoi(cmd);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f009 fc95 	bl	800a2c4 <atoi>
 800099a:	4603      	mov	r3, r0
 800099c:	b21a      	sxth	r2, r3
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <Process_USB_Command+0x200>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <Process_USB_Command+0x200>)
 80009ac:	801a      	strh	r2, [r3, #0]
				change_prescalar16(prescalar16);
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <Process_USB_Command+0x200>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f85c 	bl	8000a70 <change_prescalar16>
				break;
 80009b8:	bf00      	nop
			}
	}
	 memset(cmd, 0, strlen(cmd));  // Clear the command string//clear command
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fc10 	bl	80001e0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f009 fd2c 	bl	800a424 <memset>

}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000ab4 	.word	0x20000ab4
 80009dc:	20000c5c 	.word	0x20000c5c
 80009e0:	20000acc 	.word	0x20000acc
 80009e4:	20000a10 	.word	0x20000a10
 80009e8:	20000a06 	.word	0x20000a06
 80009ec:	200009f0 	.word	0x200009f0
 80009f0:	20000aa9 	.word	0x20000aa9
 80009f4:	20000aa8 	.word	0x20000aa8
 80009f8:	20000ab8 	.word	0x20000ab8
 80009fc:	20000ac4 	.word	0x20000ac4
 8000a00:	20000abc 	.word	0x20000abc
 8000a04:	20000ac0 	.word	0x20000ac0
 8000a08:	20000ac8 	.word	0x20000ac8

08000a0c <change_period2>:
void change_period2(uint32_t period){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000a14:	2100      	movs	r1, #0
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <change_period2+0x2c>)
 8000a18:	f003 ff32 	bl	8004880 <HAL_TIM_PWM_Stop>

	memset(buffer, 0, sizeof(buffer));
 8000a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a20:	2100      	movs	r1, #0
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <change_period2+0x30>)
 8000a24:	f009 fcfe 	bl	800a424 <memset>

	MX_TIM2_Init(period);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fd09 	bl	8000440 <MX_TIM2_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000a10 	.word	0x20000a10
 8000a3c:	200001ec 	.word	0x200001ec

08000a40 <change_period16>:
void change_period16(uint16_t period){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop(&htim16);
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <change_period16+0x28>)
 8000a4c:	f003 fdfb 	bl	8004646 <HAL_TIM_Base_Stop>

	MX_TIM16_Init(period, prescalar16);
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <change_period16+0x2c>)
 8000a52:	881a      	ldrh	r2, [r3, #0]
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fd57 	bl	800050c <MX_TIM16_Init>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000a5c 	.word	0x20000a5c
 8000a6c:	20000ac8 	.word	0x20000ac8

08000a70 <change_prescalar16>:
void change_prescalar16(uint16_t prescalar){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Stop(&htim16);
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <change_prescalar16+0x28>)
 8000a7c:	f003 fde3 	bl	8004646 <HAL_TIM_Base_Stop>

	MX_TIM16_Init(period16, prescalar);
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <change_prescalar16+0x2c>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	88fa      	ldrh	r2, [r7, #6]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fd3f 	bl	800050c <MX_TIM16_Init>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000a5c 	.word	0x20000a5c
 8000a9c:	20000ab8 	.word	0x20000ab8

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x44>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x44>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x44>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fa64 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b04:	d113      	bne.n	8000b2e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_TIM_PWM_MspInit+0x44>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <HAL_TIM_PWM_MspInit+0x44>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_TIM_PWM_MspInit+0x44>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	201c      	movs	r0, #28
 8000b24:	f000 fa4f 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f000 fa68 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_TIM_Base_MspInit+0x44>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d113      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_TIM_Base_MspInit+0x48>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <HAL_TIM_Base_MspInit+0x48>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_TIM_Base_MspInit+0x48>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2019      	movs	r0, #25
 8000b6c:	f000 fa2b 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b70:	2019      	movs	r0, #25
 8000b72:	f000 fa44 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40014400 	.word	0x40014400
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f8d8 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000be2:	f000 fcd0 	bl	8001586 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20001930 	.word	0x20001930

08000bf0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bf6:	f004 f921 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000a5c 	.word	0x20000a5c

08000c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <TIM2_IRQHandler+0x10>)
 8000c0a:	f004 f917 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000a10 	.word	0x20000a10

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f009 fbf4 	bl	800a434 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20010000 	.word	0x20010000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000c60 	.word	0x20000c60
 8000c80:	20001f70 	.word	0x20001f70

08000c84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <LoopForever+0xe>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	; (8000cf4 <LoopForever+0x16>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f009 fbb3 	bl	800a440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cda:	f7ff fad9 	bl	8000290 <main>

08000cde <LoopForever>:

LoopForever:
    b LoopForever
 8000cde:	e7fe      	b.n	8000cde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000cec:	0800af00 	.word	0x0800af00
  ldr r2, =_sbss
 8000cf0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000cf4:	20001f6c 	.word	0x20001f6c

08000cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC1_2_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x28>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x28>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f94f 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fec8 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f967 	bl	800101a <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f92f 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000c64 	.word	0x20000c64

08000db0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000c64 	.word	0x20000c64

08000dc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000000c 	.word	0x2000000c

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff29 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff3e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff31 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa2 	bl	8000f6c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e160      	b.n	8001306 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8152 	beq.w	8001300 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x40>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 0201 	and.w	r2, r3, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d017      	beq.n	8001112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d123      	bne.n	8001166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	6939      	ldr	r1, [r7, #16]
 8001162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0203 	and.w	r2, r3, #3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80ac 	beq.w	8001300 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a5d      	ldr	r2, [pc, #372]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c0:	4a59      	ldr	r2, [pc, #356]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ea:	d025      	beq.n	8001238 <HAL_GPIO_Init+0x204>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x2f8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d01f      	beq.n	8001234 <HAL_GPIO_Init+0x200>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x2fc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d019      	beq.n	8001230 <HAL_GPIO_Init+0x1fc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x300>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <HAL_GPIO_Init+0x1f8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00d      	beq.n	8001228 <HAL_GPIO_Init+0x1f4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x308>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x1f0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x30c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_GPIO_Init+0x1ec>
 800121c:	2306      	movs	r3, #6
 800121e:	e00c      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001220:	2307      	movs	r3, #7
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001224:	2305      	movs	r3, #5
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x206>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x206>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_GPIO_Init+0x310>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800127c:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_GPIO_Init+0x310>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_GPIO_Init+0x310>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_GPIO_Init+0x310>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae97 	bne.w	8001044 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	48001800 	.word	0x48001800
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001364:	e002      	b.n	800136c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4013      	ands	r3, r2
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43d9      	mvns	r1, r3
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	400b      	ands	r3, r1
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0b9      	b.n	8001532 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f008 fcc6 	bl	8009d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fbf4 	bl	8005bd2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e03e      	b.n	800146e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	3311      	adds	r3, #17
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3310      	adds	r3, #16
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	3313      	adds	r3, #19
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3320      	adds	r3, #32
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3324      	adds	r3, #36	; 0x24
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	3301      	adds	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3bb      	bcc.n	80013f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e044      	b.n	8001508 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	3301      	adds	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3b5      	bcc.n	800147e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800151e:	f004 fb73 	bl	8005c08 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <HAL_PCD_Start+0x16>
 800154c:	2302      	movs	r3, #2
 800154e:	e016      	b.n	800157e <HAL_PCD_Start+0x44>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fb21 	bl	8005ba4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001562:	2101      	movs	r1, #1
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f008 fe75 	bl	800a254 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f006 fdde 	bl	8008130 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f006 fdd7 	bl	8008146 <USB_ReadInterrupts>
 8001598:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fab1 	bl	8001b0c <PCD_EP_ISR_Handler>

    return;
 80015aa:	e0bd      	b.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015be:	b29a      	uxth	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c8:	b292      	uxth	r2, r2
 80015ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f008 fc43 	bl	8009e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8a9 	bl	800172e <HAL_PCD_SetAddress>

    return;
 80015dc:	e0a4      	b.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001600:	e092      	b.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00c      	beq.n	8001626 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800161e:	b292      	uxth	r2, r2
 8001620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001624:	e080      	b.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d027      	beq.n	8001680 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0204 	bic.w	r2, r2, #4
 8001642:	b292      	uxth	r2, r2
 8001644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001650:	b29a      	uxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0208 	bic.w	r2, r2, #8
 800165a:	b292      	uxth	r2, r2
 800165c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f008 fc33 	bl	8009ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001678:	b292      	uxth	r2, r2
 800167a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800167e:	e053      	b.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001686:	2b00      	cmp	r3, #0
 8001688:	d027      	beq.n	80016da <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0208 	orr.w	r2, r2, #8
 800169c:	b292      	uxth	r2, r2
 800169e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b4:	b292      	uxth	r2, r2
 80016b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0204 	orr.w	r2, r2, #4
 80016cc:	b292      	uxth	r2, r2
 80016ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f008 fbe0 	bl	8009e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80016d8:	e026      	b.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00f      	beq.n	8001704 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016f6:	b292      	uxth	r2, r2
 80016f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f008 fb9e 	bl	8009e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001702:	e011      	b.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001720:	b292      	uxth	r2, r2
 8001722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001726:	bf00      	nop
  }
}
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_PCD_SetAddress+0x1a>
 8001744:	2302      	movs	r3, #2
 8001746:	e012      	b.n	800176e <HAL_PCD_SetAddress+0x40>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fcd2 	bl	8008108 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	4608      	mov	r0, r1
 8001780:	4611      	mov	r1, r2
 8001782:	461a      	mov	r2, r3
 8001784:	4603      	mov	r3, r0
 8001786:	70fb      	strb	r3, [r7, #3]
 8001788:	460b      	mov	r3, r1
 800178a:	803b      	strh	r3, [r7, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001798:	2b00      	cmp	r3, #0
 800179a:	da0e      	bge.n	80017ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	f003 0207 	and.w	r2, r3, #7
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	3310      	adds	r3, #16
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	705a      	strb	r2, [r3, #1]
 80017b8:	e00e      	b.n	80017d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0207 	and.w	r2, r3, #7
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017e4:	883a      	ldrh	r2, [r7, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	78ba      	ldrb	r2, [r7, #2]
 80017ee:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017f0:	78bb      	ldrb	r3, [r7, #2]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d102      	bne.n	80017fc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_PCD_EP_Open+0x94>
 8001806:	2302      	movs	r3, #2
 8001808:	e00e      	b.n	8001828 <HAL_PCD_EP_Open+0xb2>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fa13 	bl	8005c44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8001826:	7afb      	ldrb	r3, [r7, #11]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800183c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001840:	2b00      	cmp	r3, #0
 8001842:	da0e      	bge.n	8001862 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	f003 0207 	and.w	r2, r3, #7
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	3310      	adds	r3, #16
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	705a      	strb	r2, [r3, #1]
 8001860:	e00e      	b.n	8001880 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	f003 0207 	and.w	r2, r3, #7
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	b2da      	uxtb	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_PCD_EP_Close+0x6a>
 8001896:	2302      	movs	r3, #2
 8001898:	e00e      	b.n	80018b8 <HAL_PCD_EP_Close+0x88>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68f9      	ldr	r1, [r7, #12]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fd8f 	bl	80063cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	460b      	mov	r3, r1
 80018ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	f003 0207 	and.w	r2, r3, #7
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2200      	movs	r2, #0
 80018fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	b2da      	uxtb	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6979      	ldr	r1, [r7, #20]
 8001912:	4618      	mov	r0, r3
 8001914:	f004 ff47 	bl	80067a6 <USB_EPStartXfer>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	f003 0207 	and.w	r2, r3, #7
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001944:	681b      	ldr	r3, [r3, #0]
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	460b      	mov	r3, r1
 8001960:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	f003 0207 	and.w	r2, r3, #7
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	3310      	adds	r3, #16
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2201      	movs	r2, #1
 800199c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6979      	ldr	r1, [r7, #20]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 fef8 	bl	80067a6 <USB_EPStartXfer>

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	7912      	ldrb	r2, [r2, #4]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e03e      	b.n	8001a5c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da0e      	bge.n	8001a04 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 0207 	and.w	r2, r3, #7
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	3310      	adds	r3, #16
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	705a      	strb	r2, [r3, #1]
 8001a02:	e00c      	b.n	8001a1e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_PCD_EP_SetStall+0x7e>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e00e      	b.n	8001a5c <HAL_PCD_EP_SetStall+0x9c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f006 fa5c 	bl	8007f0a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	7912      	ldrb	r2, [r2, #4]
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e040      	b.n	8001b04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da0e      	bge.n	8001aa8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 0207 	and.w	r2, r3, #7
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	3310      	adds	r3, #16
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	705a      	strb	r2, [r3, #1]
 8001aa6:	e00e      	b.n	8001ac6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 0207 	and.w	r2, r3, #7
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_EP_ClrStall+0x82>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e00e      	b.n	8001b04 <HAL_PCD_EP_ClrStall+0xa0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 fa59 	bl	8007fac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b096      	sub	sp, #88	; 0x58
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b14:	e3ae      	b.n	8002274 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8001b30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 8170 	bne.w	8001e1a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d14d      	bne.n	8001be2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b56:	81fb      	strh	r3, [r7, #14]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3310      	adds	r3, #16
 8001b6e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	441a      	add	r2, r3
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f008 f92e 	bl	8009e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7b1b      	ldrb	r3, [r3, #12]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 835d 	beq.w	8002274 <PCD_EP_ISR_Handler+0x768>
 8001bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8358 	bne.w	8002274 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7b1b      	ldrb	r3, [r3, #12]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	731a      	strb	r2, [r3, #12]
 8001be0:	e348      	b.n	8002274 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001be8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bf4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d032      	beq.n	8001c66 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c38:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f006 fad5 	bl	80081ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	823b      	strh	r3, [r7, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	8a3a      	ldrh	r2, [r7, #16]
 8001c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f008 f8a6 	bl	8009db0 <HAL_PCD_SetupStageCallback>
 8001c64:	e306      	b.n	8002274 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c66:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f280 8302 	bge.w	8002274 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	83fb      	strh	r3, [r7, #30]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	8bfa      	ldrh	r2, [r7, #30]
 8001c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d019      	beq.n	8001cf2 <PCD_EP_ISR_Handler+0x1e6>
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ccc:	6959      	ldr	r1, [r3, #20]
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	f006 fa87 	bl	80081ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	441a      	add	r2, r3
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cea:	2100      	movs	r1, #0
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f008 f871 	bl	8009dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001cfc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 82b5 	bne.w	8002274 <PCD_EP_ISR_Handler+0x768>
 8001d0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001d0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d16:	f000 82ad 	beq.w	8002274 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	4413      	add	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <PCD_EP_ISR_Handler+0x25c>
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	e039      	b.n	8001ddc <PCD_EP_ISR_Handler+0x2d0>
 8001d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d6e:	d818      	bhi.n	8001da2 <PCD_EP_ISR_Handler+0x296>
 8001d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <PCD_EP_ISR_Handler+0x27e>
 8001d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d86:	3301      	adds	r3, #1
 8001d88:	647b      	str	r3, [r7, #68]	; 0x44
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	e01c      	b.n	8001ddc <PCD_EP_ISR_Handler+0x2d0>
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
 8001daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <PCD_EP_ISR_Handler+0x2b0>
 8001db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db8:	3b01      	subs	r3, #1
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dec:	827b      	strh	r3, [r7, #18]
 8001dee:	8a7b      	ldrh	r3, [r7, #18]
 8001df0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001df4:	827b      	strh	r3, [r7, #18]
 8001df6:	8a7b      	ldrh	r3, [r7, #18]
 8001df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dfc:	827b      	strh	r3, [r7, #18]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	8a7b      	ldrh	r3, [r7, #18]
 8001e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	8013      	strh	r3, [r2, #0]
 8001e18:	e22c      	b.n	8002274 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e2e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f280 80f6 	bge.w	8002024 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e4e:	4013      	ands	r3, r2
 8001e50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001e66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e6e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d123      	bne.n	8001ed4 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001eb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 808e 	beq.w	8001fda <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	6959      	ldr	r1, [r3, #20]
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec8:	88da      	ldrh	r2, [r3, #6]
 8001eca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ece:	f006 f98c 	bl	80081ea <USB_ReadPMA>
 8001ed2:	e082      	b.n	8001fda <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed6:	78db      	ldrb	r3, [r3, #3]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d10a      	bne.n	8001ef2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001edc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f9d3 	bl	8002290 <HAL_PCD_EP_DB_Receive>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001ef0:	e073      	b.n	8001fda <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	441a      	add	r2, r3
 8001f1e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001f78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d02c      	beq.n	8001fda <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	6959      	ldr	r1, [r3, #20]
 8001f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8a:	891a      	ldrh	r2, [r3, #8]
 8001f8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f90:	f006 f92b 	bl	80081ea <USB_ReadPMA>
 8001f94:	e021      	b.n	8001fda <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001fbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fcc:	6959      	ldr	r1, [r3, #20]
 8001fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd0:	895a      	ldrh	r2, [r3, #10]
 8001fd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fd6:	f006 f908 	bl	80081ea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001fe2:	441a      	add	r2, r3
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ff0:	441a      	add	r2, r3
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <PCD_EP_ISR_Handler+0x4fe>
 8001ffe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	429a      	cmp	r2, r3
 8002008:	d206      	bcs.n	8002018 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800200a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f007 fedf 	bl	8009dd4 <HAL_PCD_DataOutStageCallback>
 8002016:	e005      	b.n	8002024 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800201e:	4618      	mov	r0, r3
 8002020:	f004 fbc1 	bl	80067a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002024:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8121 	beq.w	8002274 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002032:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	3310      	adds	r3, #16
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800205c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002060:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207e:	b29b      	uxth	r3, r3
 8002080:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	78db      	ldrb	r3, [r3, #3]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 80a2 	bne.w	80021d0 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800208c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	7b1b      	ldrb	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8093 	beq.w	80021c2 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800209c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d046      	beq.n	8002136 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d126      	bne.n	80020fe <PCD_EP_ISR_Handler+0x5f2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	4413      	add	r3, r2
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	00da      	lsls	r2, r3, #3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	4413      	add	r3, r2
 80020d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	e061      	b.n	80021c2 <PCD_EP_ISR_Handler+0x6b6>
 80020fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d15d      	bne.n	80021c2 <PCD_EP_ISR_Handler+0x6b6>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	4413      	add	r3, r2
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	00da      	lsls	r2, r3, #3
 8002124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002126:	4413      	add	r3, r2
 8002128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	e045      	b.n	80021c2 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d126      	bne.n	8002192 <PCD_EP_ISR_Handler+0x686>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	4413      	add	r3, r2
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
 800215c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	00da      	lsls	r2, r3, #3
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002164:	4413      	add	r3, r2
 8002166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	b29a      	uxth	r2, r3
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218a:	b29a      	uxth	r2, r3
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e017      	b.n	80021c2 <PCD_EP_ISR_Handler+0x6b6>
 8002192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d113      	bne.n	80021c2 <PCD_EP_ISR_Handler+0x6b6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a8:	4413      	add	r3, r2
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	00da      	lsls	r2, r3, #3
 80021b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b4:	4413      	add	r3, r2
 80021b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f007 fe1e 	bl	8009e0a <HAL_PCD_DataInStageCallback>
 80021ce:	e051      	b.n	8002274 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80021d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d144      	bne.n	8002266 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002200:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800220c:	429a      	cmp	r2, r3
 800220e:	d907      	bls.n	8002220 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002218:	1ad2      	subs	r2, r2, r3
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	e002      	b.n	8002226 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800222e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	4619      	mov	r1, r3
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f007 fde8 	bl	8009e0a <HAL_PCD_DataInStageCallback>
 800223a:	e01b      	b.n	8002274 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002244:	441a      	add	r2, r3
 8002246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002248:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800224a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002252:	441a      	add	r2, r3
 8002254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002256:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800225e:	4618      	mov	r0, r3
 8002260:	f004 faa1 	bl	80067a6 <USB_EPStartXfer>
 8002264:	e006      	b.n	8002274 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002266:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800226a:	461a      	mov	r2, r3
 800226c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f917 	bl	80024a2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800227c:	b29b      	uxth	r3, r3
 800227e:	b21b      	sxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	f6ff ac48 	blt.w	8001b16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3758      	adds	r7, #88	; 0x58
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d07c      	beq.n	80023a2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	8b7b      	ldrh	r3, [r7, #26]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d306      	bcc.n	80022e6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	8b7b      	ldrh	r3, [r7, #26]
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	e002      	b.n	80022ec <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d123      	bne.n	800233c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230e:	833b      	strh	r3, [r7, #24]
 8002310:	8b3b      	ldrh	r3, [r7, #24]
 8002312:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002316:	833b      	strh	r3, [r7, #24]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	8b3b      	ldrh	r3, [r7, #24]
 8002328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800232c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002338:	b29b      	uxth	r3, r3
 800233a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01f      	beq.n	8002386 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800235c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002360:	82fb      	strh	r3, [r7, #22]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	441a      	add	r2, r3
 8002370:	8afb      	ldrh	r3, [r7, #22]
 8002372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002382:	b29b      	uxth	r3, r3
 8002384:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8085 	beq.w	8002498 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6959      	ldr	r1, [r3, #20]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	891a      	ldrh	r2, [r3, #8]
 800239a:	8b7b      	ldrh	r3, [r7, #26]
 800239c:	f005 ff25 	bl	80081ea <USB_ReadPMA>
 80023a0:	e07a      	b.n	8002498 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	8b7b      	ldrh	r3, [r7, #26]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d306      	bcc.n	80023e0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	8b7b      	ldrh	r3, [r7, #26]
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	619a      	str	r2, [r3, #24]
 80023de:	e002      	b.n	80023e6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d123      	bne.n	8002436 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002408:	83fb      	strh	r3, [r7, #30]
 800240a:	8bfb      	ldrh	r3, [r7, #30]
 800240c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002410:	83fb      	strh	r3, [r7, #30]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	441a      	add	r2, r3
 8002420:	8bfb      	ldrh	r3, [r7, #30]
 8002422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002432:	b29b      	uxth	r3, r3
 8002434:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11f      	bne.n	8002480 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245a:	83bb      	strh	r3, [r7, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	8bbb      	ldrh	r3, [r7, #28]
 800246c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800247c:	b29b      	uxth	r3, r3
 800247e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002480:	8b7b      	ldrh	r3, [r7, #26]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6959      	ldr	r1, [r3, #20]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	895a      	ldrh	r2, [r3, #10]
 8002492:	8b7b      	ldrh	r3, [r7, #26]
 8002494:	f005 fea9 	bl	80081ea <USB_ReadPMA>
    }
  }

  return count;
 8002498:	8b7b      	ldrh	r3, [r7, #26]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b0a4      	sub	sp, #144	; 0x90
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 81db 	beq.w	8002872 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	699a      	ldr	r2, [r3, #24]
 80024e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d907      	bls.n	8002500 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	619a      	str	r2, [r3, #24]
 80024fe:	e002      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 80b9 	bne.w	8002682 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	785b      	ldrb	r3, [r3, #1]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d126      	bne.n	8002566 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	4413      	add	r3, r2
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	00da      	lsls	r2, r3, #3
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	4413      	add	r3, r2
 800253a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254a:	b29a      	uxth	r2, r3
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	801a      	strh	r2, [r3, #0]
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255e:	b29a      	uxth	r2, r3
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	e01a      	b.n	800259c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d116      	bne.n	800259c <HAL_PCD_EP_DB_Transmit+0xfa>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	4413      	add	r3, r2
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	00da      	lsls	r2, r3, #3
 800258c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258e:	4413      	add	r3, r2
 8002590:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	2200      	movs	r2, #0
 800259a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d126      	bne.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x156>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00da      	lsls	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4413      	add	r3, r2
 80025cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025dc:	b29a      	uxth	r2, r3
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	e017      	b.n	8002628 <HAL_PCD_EP_DB_Transmit+0x186>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d113      	bne.n	8002628 <HAL_PCD_EP_DB_Transmit+0x186>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	4413      	add	r3, r2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	00da      	lsls	r2, r3, #3
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	4413      	add	r3, r2
 800261c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	2200      	movs	r2, #0
 8002626:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f007 fbeb 	bl	8009e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 82fa 	beq.w	8002c34 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	82fb      	strh	r3, [r7, #22]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	8afb      	ldrh	r3, [r7, #22]
 800266c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267c:	b29b      	uxth	r3, r3
 800267e:	8013      	strh	r3, [r2, #0]
 8002680:	e2d8      	b.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d021      	beq.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	441a      	add	r2, r3
 80026b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80026bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 82ac 	bne.w	8002c34 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80026e4:	441a      	add	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80026f2:	441a      	add	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	429a      	cmp	r2, r3
 8002702:	d30b      	bcc.n	800271c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	621a      	str	r2, [r3, #32]
 800271a:	e017      	b.n	800274c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d108      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002724:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002734:	e00a      	b.n	800274c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d165      	bne.n	8002820 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002768:	4413      	add	r3, r2
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	00da      	lsls	r2, r3, #3
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	4413      	add	r3, r2
 8002776:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800277a:	63bb      	str	r3, [r7, #56]	; 0x38
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002786:	b29a      	uxth	r2, r3
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x308>
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e057      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ae:	2b3e      	cmp	r3, #62	; 0x3e
 80027b0:	d818      	bhi.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x342>
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_PCD_EP_DB_Transmit+0x32a>
 80027c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c8:	3301      	adds	r3, #1
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	e03a      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80027e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x35c>
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fa:	3b01      	subs	r3, #1
 80027fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29a      	uxth	r2, r3
 8002804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002806:	b29b      	uxth	r3, r3
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	b29b      	uxth	r3, r3
 800280c:	4313      	orrs	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002818:	b29a      	uxth	r2, r3
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	e01c      	b.n	800285a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d118      	bne.n	800285a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	647b      	str	r3, [r7, #68]	; 0x44
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800283c:	4413      	add	r3, r2
 800283e:	647b      	str	r3, [r7, #68]	; 0x44
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00da      	lsls	r2, r3, #3
 8002846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002848:	4413      	add	r3, r2
 800284a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800284e:	643b      	str	r3, [r7, #64]	; 0x40
 8002850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002854:	b29a      	uxth	r2, r3
 8002856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002858:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	6959      	ldr	r1, [r3, #20]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	891a      	ldrh	r2, [r3, #8]
 8002866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800286a:	b29b      	uxth	r3, r3
 800286c:	f005 fc7b 	bl	8008166 <USB_WritePMA>
 8002870:	e1e0      	b.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4413      	add	r3, r2
 800288c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002896:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d307      	bcc.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	619a      	str	r2, [r3, #24]
 80028b4:	e002      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 80c0 	bne.w	8002a46 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d126      	bne.n	800291c <HAL_PCD_EP_DB_Transmit+0x47a>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e2:	4413      	add	r3, r2
 80028e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00da      	lsls	r2, r3, #3
 80028ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ee:	4413      	add	r3, r2
 80028f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002900:	b29a      	uxth	r2, r3
 8002902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002914:	b29a      	uxth	r2, r3
 8002916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	e01a      	b.n	8002952 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d116      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	667b      	str	r3, [r7, #100]	; 0x64
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002938:	4413      	add	r3, r2
 800293a:	667b      	str	r3, [r7, #100]	; 0x64
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	00da      	lsls	r2, r3, #3
 8002942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002944:	4413      	add	r3, r2
 8002946:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800294a:	663b      	str	r3, [r7, #96]	; 0x60
 800294c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	677b      	str	r3, [r7, #116]	; 0x74
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d12b      	bne.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x516>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002974:	4413      	add	r3, r2
 8002976:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00da      	lsls	r2, r3, #3
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002980:	4413      	add	r3, r2
 8002982:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002996:	b29a      	uxth	r2, r3
 8002998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029b4:	801a      	strh	r2, [r3, #0]
 80029b6:	e017      	b.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x546>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d113      	bne.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x546>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ce:	4413      	add	r3, r2
 80029d0:	677b      	str	r3, [r7, #116]	; 0x74
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	00da      	lsls	r2, r3, #3
 80029d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029da:	4413      	add	r3, r2
 80029dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
 80029e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e4:	2200      	movs	r2, #0
 80029e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f007 fa0b 	bl	8009e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 811a 	bne.w	8002c34 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	441a      	add	r2, r3
 8002a2c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8013      	strh	r3, [r2, #0]
 8002a44:	e0f6      	b.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d121      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	441a      	add	r2, r3
 8002a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f040 80ca 	bne.w	8002c34 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002aa8:	441a      	add	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ab6:	441a      	add	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d30b      	bcc.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	6a1a      	ldr	r2, [r3, #32]
 8002ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	621a      	str	r2, [r3, #32]
 8002ade:	e017      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002ae8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002af8:	e00a      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	657b      	str	r3, [r7, #84]	; 0x54
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d165      	bne.n	8002bea <HAL_PCD_EP_DB_Transmit+0x748>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b32:	4413      	add	r3, r2
 8002b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	00da      	lsls	r2, r3, #3
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3e:	4413      	add	r3, r2
 8002b40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e054      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b78:	2b3e      	cmp	r3, #62	; 0x3e
 8002b7a:	d818      	bhi.n	8002bae <HAL_PCD_EP_DB_Transmit+0x70c>
 8002b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b92:	3301      	adds	r3, #1
 8002b94:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	029b      	lsls	r3, r3, #10
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e037      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x726>
 8002bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	029b      	lsls	r3, r3, #10
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	e019      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d115      	bne.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x77c>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	4413      	add	r3, r2
 8002c02:	657b      	str	r3, [r7, #84]	; 0x54
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	00da      	lsls	r2, r3, #3
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c12:	653b      	str	r3, [r7, #80]	; 0x50
 8002c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6959      	ldr	r1, [r3, #20]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	895a      	ldrh	r2, [r3, #10]
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f005 fa99 	bl	8008166 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c4e:	82bb      	strh	r3, [r7, #20]
 8002c50:	8abb      	ldrh	r3, [r7, #20]
 8002c52:	f083 0310 	eor.w	r3, r3, #16
 8002c56:	82bb      	strh	r3, [r7, #20]
 8002c58:	8abb      	ldrh	r3, [r7, #20]
 8002c5a:	f083 0320 	eor.w	r3, r3, #32
 8002c5e:	82bb      	strh	r3, [r7, #20]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	441a      	add	r2, r3
 8002c6e:	8abb      	ldrh	r3, [r7, #20]
 8002c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3790      	adds	r7, #144	; 0x90
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b087      	sub	sp, #28
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	f003 0207 	and.w	r2, r3, #7
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	3310      	adds	r3, #16
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e009      	b.n	8002cd8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cc4:	897a      	ldrh	r2, [r7, #10]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	80da      	strh	r2, [r3, #6]
 8002cec:	e00b      	b.n	8002d06 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0c1b      	lsrs	r3, r3, #16
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f001 b83a 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 816f 	beq.w	800302e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d50:	4bb5      	ldr	r3, [pc, #724]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d00c      	beq.n	8002d76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d5c:	4bb2      	ldr	r3, [pc, #712]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d15c      	bne.n	8002e22 <HAL_RCC_OscConfig+0x10e>
 8002d68:	4baf      	ldr	r3, [pc, #700]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d155      	bne.n	8002e22 <HAL_RCC_OscConfig+0x10e>
 8002d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_RCC_OscConfig+0x94>
 8002da2:	4ba1      	ldr	r3, [pc, #644]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	e015      	b.n	8002dd4 <HAL_RCC_OscConfig+0xc0>
 8002da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002dc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002dd0:	4b95      	ldr	r3, [pc, #596]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002ddc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002de0:	fa92 f2a2 	rbit	r2, r2
 8002de4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002de8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dec:	fab2 f282 	clz	r2, r2
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	f042 0220 	orr.w	r2, r2, #32
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f002 021f 	and.w	r2, r2, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8111 	beq.w	800302c <HAL_RCC_OscConfig+0x318>
 8002e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 8108 	bne.w	800302c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f000 bfc6 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x12e>
 8002e34:	4b7c      	ldr	r3, [pc, #496]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a7b      	ldr	r2, [pc, #492]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	e036      	b.n	8002eb0 <HAL_RCC_OscConfig+0x19c>
 8002e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x158>
 8002e52:	4b75      	ldr	r3, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a74      	ldr	r2, [pc, #464]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b72      	ldr	r3, [pc, #456]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a71      	ldr	r2, [pc, #452]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e021      	b.n	8002eb0 <HAL_RCC_OscConfig+0x19c>
 8002e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x184>
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a66      	ldr	r2, [pc, #408]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x19c>
 8002e98:	4b63      	ldr	r3, [pc, #396]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a62      	ldr	r2, [pc, #392]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b60      	ldr	r3, [pc, #384]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5f      	ldr	r2, [pc, #380]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d059      	beq.n	8002f74 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd ff76 	bl	8000db0 <HAL_GetTick>
 8002ec4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eca:	f7fd ff71 	bl	8000db0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d902      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	f000 bf67 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
 8002ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002ef4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d102      	bne.n	8002f12 <HAL_RCC_OscConfig+0x1fe>
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x22a>
 8002f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f42:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002f4a:	fa92 f2a2 	rbit	r2, r2
 8002f4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002f52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f56:	fab2 f282 	clz	r2, r2
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f042 0220 	orr.w	r2, r2, #32
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f002 021f 	and.w	r2, r2, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ab      	beq.n	8002eca <HAL_RCC_OscConfig+0x1b6>
 8002f72:	e05c      	b.n	800302e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fd ff1c 	bl	8000db0 <HAL_GetTick>
 8002f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7e:	f7fd ff17 	bl	8000db0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d902      	bls.n	8002f94 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f000 bf0d 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
 8002f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f98:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002fa8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2b2>
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2de>
 8002fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fde:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fe2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_RCC_OscConfig+0x314>)
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ff6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002ffa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ffe:	fa92 f2a2 	rbit	r2, r2
 8003002:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003006:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800300a:	fab2 f282 	clz	r2, r2
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	f042 0220 	orr.w	r2, r2, #32
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f002 021f 	and.w	r2, r2, #31
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ab      	bne.n	8002f7e <HAL_RCC_OscConfig+0x26a>
 8003026:	e002      	b.n	800302e <HAL_RCC_OscConfig+0x31a>
 8003028:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003032:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 817f 	beq.w	8003342 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003044:	4ba7      	ldr	r3, [pc, #668]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003050:	4ba4      	ldr	r3, [pc, #656]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d173      	bne.n	8003144 <HAL_RCC_OscConfig+0x430>
 800305c:	4ba1      	ldr	r3, [pc, #644]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d16c      	bne.n	8003144 <HAL_RCC_OscConfig+0x430>
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800307c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d102      	bne.n	800309a <HAL_RCC_OscConfig+0x386>
 8003094:	4b93      	ldr	r3, [pc, #588]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	e013      	b.n	80030c2 <HAL_RCC_OscConfig+0x3ae>
 800309a:	2302      	movs	r3, #2
 800309c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80030ac:	2302      	movs	r3, #2
 80030ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80030b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80030be:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	2202      	movs	r2, #2
 80030c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80030c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80030cc:	fa92 f2a2 	rbit	r2, r2
 80030d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80030d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f002 021f 	and.w	r2, r2, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCC_OscConfig+0x3f6>
 80030f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d002      	beq.n	800310a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f000 be52 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003116:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	21f8      	movs	r1, #248	; 0xf8
 8003120:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003128:	fa91 f1a1 	rbit	r1, r1
 800312c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003130:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003134:	fab1 f181 	clz	r1, r1
 8003138:	b2c9      	uxtb	r1, r1
 800313a:	408b      	lsls	r3, r1
 800313c:	4969      	ldr	r1, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e0fe      	b.n	8003342 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003148:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8088 	beq.w	8003266 <HAL_RCC_OscConfig+0x552>
 8003156:	2301      	movs	r3, #1
 8003158:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003168:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003176:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	461a      	mov	r2, r3
 800317e:	2301      	movs	r3, #1
 8003180:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fd fe15 	bl	8000db0 <HAL_GetTick>
 8003186:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318c:	f7fd fe10 	bl	8000db0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d902      	bls.n	80031a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	f000 be06 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80031b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d102      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4be>
 80031cc:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	e013      	b.n	80031fa <HAL_RCC_OscConfig+0x4e6>
 80031d2:	2302      	movs	r3, #2
 80031d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80031e4:	2302      	movs	r3, #2
 80031e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2202      	movs	r2, #2
 80031fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003200:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800320c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f042 0220 	orr.w	r2, r2, #32
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f002 021f 	and.w	r2, r2, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f202 	lsl.w	r2, r1, r2
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0af      	beq.n	800318c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003238:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	21f8      	movs	r1, #248	; 0xf8
 8003242:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800324a:	fa91 f1a1 	rbit	r1, r1
 800324e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003252:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003256:	fab1 f181 	clz	r1, r1
 800325a:	b2c9      	uxtb	r1, r1
 800325c:	408b      	lsls	r3, r1
 800325e:	4921      	ldr	r1, [pc, #132]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e06d      	b.n	8003342 <HAL_RCC_OscConfig+0x62e>
 8003266:	2301      	movs	r3, #1
 8003268:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003278:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003286:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	461a      	mov	r2, r3
 800328e:	2300      	movs	r3, #0
 8003290:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fd fd8d 	bl	8000db0 <HAL_GetTick>
 8003296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329c:	f7fd fd88 	bl	8000db0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	f000 bd7e 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80032c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5d4>
 80032dc:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <HAL_RCC_OscConfig+0x5d0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e016      	b.n	8003310 <HAL_RCC_OscConfig+0x5fc>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	2302      	movs	r3, #2
 80032ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032fa:	2302      	movs	r3, #2
 80032fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003300:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800330c:	4bbf      	ldr	r3, [pc, #764]	; (800360c <HAL_RCC_OscConfig+0x8f8>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2202      	movs	r2, #2
 8003312:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003316:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003322:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f002 021f 	and.w	r2, r2, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ac      	bne.n	800329c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003346:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8113 	beq.w	800357e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800335c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d07c      	beq.n	8003462 <HAL_RCC_OscConfig+0x74e>
 8003368:	2301      	movs	r3, #1
 800336a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800337a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4ba2      	ldr	r3, [pc, #648]	; (8003610 <HAL_RCC_OscConfig+0x8fc>)
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	461a      	mov	r2, r3
 800338e:	2301      	movs	r3, #1
 8003390:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003392:	f7fd fd0d 	bl	8000db0 <HAL_GetTick>
 8003396:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339c:	f7fd fd08 	bl	8000db0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d902      	bls.n	80033b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	f000 bcfe 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
 80033b2:	2302      	movs	r3, #2
 80033b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033d2:	2202      	movs	r2, #2
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	fa93 f2a3 	rbit	r2, r3
 80033e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033f6:	2202      	movs	r2, #2
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003410:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x8f8>)
 8003414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800341e:	2102      	movs	r1, #2
 8003420:	6019      	str	r1, [r3, #0]
 8003422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003426:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	fa93 f1a3 	rbit	r1, r3
 8003430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003434:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003438:	6019      	str	r1, [r3, #0]
  return result;
 800343a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d09d      	beq.n	800339c <HAL_RCC_OscConfig+0x688>
 8003460:	e08d      	b.n	800357e <HAL_RCC_OscConfig+0x86a>
 8003462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003466:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003472:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	fa93 f2a3 	rbit	r2, r3
 800347c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003480:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003484:	601a      	str	r2, [r3, #0]
  return result;
 8003486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800348e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <HAL_RCC_OscConfig+0x8fc>)
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	461a      	mov	r2, r3
 80034a0:	2300      	movs	r3, #0
 80034a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a4:	f7fd fc84 	bl	8000db0 <HAL_GetTick>
 80034a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	e00a      	b.n	80034c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ae:	f7fd fc7f 	bl	8000db0 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d902      	bls.n	80034c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	f000 bc75 	b.w	8003dae <HAL_RCC_OscConfig+0x109a>
 80034c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034cc:	2202      	movs	r2, #2
 80034ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034f0:	2202      	movs	r2, #2
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003510:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003514:	2202      	movs	r2, #2
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800352a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800352e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_RCC_OscConfig+0x8f8>)
 8003532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003538:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800353c:	2102      	movs	r1, #2
 800353e:	6019      	str	r1, [r3, #0]
 8003540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003544:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f1a3 	rbit	r1, r3
 800354e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003552:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003556:	6019      	str	r1, [r3, #0]
  return result;
 8003558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d197      	bne.n	80034ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003582:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 81a5 	beq.w	80038de <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_RCC_OscConfig+0x8f8>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_OscConfig+0x8f8>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_RCC_OscConfig+0x8f8>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b0:	61d3      	str	r3, [r2, #28]
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_RCC_OscConfig+0x8f8>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_RCC_OscConfig+0x900>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d121      	bne.n	8003624 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <HAL_RCC_OscConfig+0x900>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0b      	ldr	r2, [pc, #44]	; (8003614 <HAL_RCC_OscConfig+0x900>)
 80035e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ec:	f7fd fbe0 	bl	8000db0 <HAL_GetTick>
 80035f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e010      	b.n	8003618 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fd fbdb 	bl	8000db0 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d908      	bls.n	8003618 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e3d1      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	10908120 	.word	0x10908120
 8003614:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b8d      	ldr	r3, [pc, #564]	; (8003850 <HAL_RCC_OscConfig+0xb3c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0e8      	beq.n	80035f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x92e>
 8003634:	4b87      	ldr	r3, [pc, #540]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a86      	ldr	r2, [pc, #536]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6213      	str	r3, [r2, #32]
 8003640:	e035      	b.n	80036ae <HAL_RCC_OscConfig+0x99a>
 8003642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x958>
 8003652:	4b80      	ldr	r3, [pc, #512]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a7f      	ldr	r2, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a7c      	ldr	r2, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	e020      	b.n	80036ae <HAL_RCC_OscConfig+0x99a>
 800366c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003670:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x982>
 800367c:	4b75      	ldr	r3, [pc, #468]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a74      	ldr	r2, [pc, #464]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	4b72      	ldr	r3, [pc, #456]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a71      	ldr	r2, [pc, #452]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	e00b      	b.n	80036ae <HAL_RCC_OscConfig+0x99a>
 8003696:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a6e      	ldr	r2, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a6b      	ldr	r2, [pc, #428]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8081 	beq.w	80037c2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7fd fb76 	bl	8000db0 <HAL_GetTick>
 80036c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00b      	b.n	80036e2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fd fb71 	bl	8000db0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e365      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
 80036e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80036ea:	2202      	movs	r2, #2
 80036ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	fa93 f2a3 	rbit	r2, r3
 80036fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003700:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800370e:	2202      	movs	r2, #2
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003716:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fa93 f2a3 	rbit	r2, r3
 8003720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003724:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003728:	601a      	str	r2, [r3, #0]
  return result;
 800372a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003732:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d102      	bne.n	800374e <HAL_RCC_OscConfig+0xa3a>
 8003748:	4b42      	ldr	r3, [pc, #264]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	e013      	b.n	8003776 <HAL_RCC_OscConfig+0xa62>
 800374e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003752:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003756:	2202      	movs	r2, #2
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800377a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800377e:	2102      	movs	r1, #2
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003786:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	fa92 f1a2 	rbit	r1, r2
 8003790:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003794:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003798:	6011      	str	r1, [r2, #0]
  return result;
 800379a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800379e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f002 021f 	and.w	r2, r2, #31
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d084      	beq.n	80036ca <HAL_RCC_OscConfig+0x9b6>
 80037c0:	e083      	b.n	80038ca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c2:	f7fd faf5 	bl	8000db0 <HAL_GetTick>
 80037c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fd faf0 	bl	8000db0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e2e4      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037ec:	2202      	movs	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003802:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003810:	2202      	movs	r2, #2
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003818:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fa93 f2a3 	rbit	r2, r3
 8003822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003826:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800382a:	601a      	str	r2, [r3, #0]
  return result;
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003834:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0xb44>
 800384a:	4b02      	ldr	r3, [pc, #8]	; (8003854 <HAL_RCC_OscConfig+0xb40>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	e017      	b.n	8003880 <HAL_RCC_OscConfig+0xb6c>
 8003850:	40007000 	.word	0x40007000
 8003854:	40021000 	.word	0x40021000
 8003858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003860:	2202      	movs	r2, #2
 8003862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003868:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	fa93 f2a3 	rbit	r2, r3
 8003872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003876:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	4bb3      	ldr	r3, [pc, #716]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003884:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003888:	2102      	movs	r1, #2
 800388a:	6011      	str	r1, [r2, #0]
 800388c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003890:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	fa92 f1a2 	rbit	r1, r2
 800389a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800389e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80038a2:	6011      	str	r1, [r2, #0]
  return result;
 80038a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038a8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f002 021f 	and.w	r2, r2, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d180      	bne.n	80037cc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d2:	4b9e      	ldr	r3, [pc, #632]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4a9d      	ldr	r2, [pc, #628]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 80038d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 825e 	beq.w	8003dac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f0:	4b96      	ldr	r3, [pc, #600]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	f000 821f 	beq.w	8003d3c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003902:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	f040 8170 	bne.w	8003bf0 <HAL_RCC_OscConfig+0xedc>
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800391c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003922:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003930:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003934:	601a      	str	r2, [r3, #0]
  return result;
 8003936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800393e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800394a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	461a      	mov	r2, r3
 8003952:	2300      	movs	r3, #0
 8003954:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fd fa2b 	bl	8000db0 <HAL_GetTick>
 800395a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395e:	e009      	b.n	8003974 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fa26 	bl	8000db0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e21c      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
 8003974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003978:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800397c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003986:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	fa93 f2a3 	rbit	r2, r3
 8003990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003994:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003998:	601a      	str	r2, [r3, #0]
  return result;
 800399a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <HAL_RCC_OscConfig+0xcaa>
 80039b8:	4b64      	ldr	r3, [pc, #400]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	e027      	b.n	8003a0e <HAL_RCC_OscConfig+0xcfa>
 80039be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a04:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a1a:	6011      	str	r1, [r2, #0]
 8003a1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a20:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	fa92 f1a2 	rbit	r1, r2
 8003a2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a2e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003a32:	6011      	str	r1, [r2, #0]
  return result;
 8003a34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a38:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	fab2 f282 	clz	r2, r2
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f042 0220 	orr.w	r2, r2, #32
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	f002 021f 	and.w	r2, r2, #31
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d182      	bne.n	8003960 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f023 020f 	bic.w	r2, r3, #15
 8003a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	4937      	ldr	r1, [pc, #220]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003a74:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a19      	ldr	r1, [r3, #32]
 8003a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	492d      	ldr	r1, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
 8003a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	fa93 f2a3 	rbit	r2, r3
 8003ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ac0:	601a      	str	r2, [r3, #0]
  return result;
 8003ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003aca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	461a      	mov	r2, r3
 8003ade:	2301      	movs	r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fd f965 	bl	8000db0 <HAL_GetTick>
 8003ae6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aea:	e009      	b.n	8003b00 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd f960 	bl	8000db0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e156      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
 8003b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b04:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	fa93 f2a3 	rbit	r2, r3
 8003b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b24:	601a      	str	r2, [r3, #0]
  return result;
 8003b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCC_OscConfig+0xe3c>
 8003b44:	4b01      	ldr	r3, [pc, #4]	; (8003b4c <HAL_RCC_OscConfig+0xe38>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	e02a      	b.n	8003ba0 <HAL_RCC_OscConfig+0xe8c>
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	fa93 f2a3 	rbit	r2, r3
 8003b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b88:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	fa93 f2a3 	rbit	r2, r3
 8003b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	4b86      	ldr	r3, [pc, #536]	; (8003db8 <HAL_RCC_OscConfig+0x10a4>)
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ba4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ba8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bac:	6011      	str	r1, [r2, #0]
 8003bae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	fa92 f1a2 	rbit	r1, r2
 8003bbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bc0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003bc4:	6011      	str	r1, [r2, #0]
  return result;
 8003bc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	fab2 f282 	clz	r2, r2
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	f042 0220 	orr.w	r2, r2, #32
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f002 021f 	and.w	r2, r2, #31
 8003be0:	2101      	movs	r1, #1
 8003be2:	fa01 f202 	lsl.w	r2, r1, r2
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f43f af7f 	beq.w	8003aec <HAL_RCC_OscConfig+0xdd8>
 8003bee:	e0dd      	b.n	8003dac <HAL_RCC_OscConfig+0x1098>
 8003bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c14:	601a      	str	r2, [r3, #0]
  return result;
 8003c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	461a      	mov	r2, r3
 8003c32:	2300      	movs	r3, #0
 8003c34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fd f8bb 	bl	8000db0 <HAL_GetTick>
 8003c3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3e:	e009      	b.n	8003c54 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd f8b6 	bl	8000db0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0ac      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
 8003c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	fa93 f2a3 	rbit	r2, r3
 8003c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c78:	601a      	str	r2, [r3, #0]
  return result;
 8003c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d102      	bne.n	8003c9e <HAL_RCC_OscConfig+0xf8a>
 8003c98:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x10a4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	e027      	b.n	8003cee <HAL_RCC_OscConfig+0xfda>
 8003c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	fa93 f2a3 	rbit	r2, r3
 8003cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	fa93 f2a3 	rbit	r2, r3
 8003ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <HAL_RCC_OscConfig+0x10a4>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003cf2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cf6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cfa:	6011      	str	r1, [r2, #0]
 8003cfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d00:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	fa92 f1a2 	rbit	r1, r2
 8003d0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d0e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003d12:	6011      	str	r1, [r2, #0]
  return result;
 8003d14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d18:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	fab2 f282 	clz	r2, r2
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	f042 0220 	orr.w	r2, r2, #32
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f002 021f 	and.w	r2, r2, #31
 8003d2e:	2101      	movs	r1, #1
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d182      	bne.n	8003c40 <HAL_RCC_OscConfig+0xf2c>
 8003d3a:	e037      	b.n	8003dac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e02e      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_OscConfig+0x10a4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003d58:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_RCC_OscConfig+0x10a4>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d64:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d117      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003d78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003d7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000

08003dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b09e      	sub	sp, #120	; 0x78
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e162      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b90      	ldr	r3, [pc, #576]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d910      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	498b      	ldr	r1, [pc, #556]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e14a      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b82      	ldr	r3, [pc, #520]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	497f      	ldr	r1, [pc, #508]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80dc 	beq.w	8003fe8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d13c      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xf6>
 8003e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xa6>
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e00f      	b.n	8003e82 <HAL_RCC_ClockConfig+0xc6>
 8003e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e74:	663b      	str	r3, [r7, #96]	; 0x60
 8003e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7e:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e86:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e8a:	fa92 f2a2 	rbit	r2, r2
 8003e8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e92:	fab2 f282 	clz	r2, r2
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	f042 0220 	orr.w	r2, r2, #32
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	f002 021f 	and.w	r2, r2, #31
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d17b      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0f3      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d13c      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x178>
 8003eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d102      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x128>
 8003ede:	4b4f      	ldr	r3, [pc, #316]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCC_ClockConfig+0x148>
 8003ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f00:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f08:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0c:	fa92 f2a2 	rbit	r2, r2
 8003f10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f14:	fab2 f282 	clz	r2, r2
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f042 0220 	orr.w	r2, r2, #32
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f002 021f 	and.w	r2, r2, #31
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13a      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b2      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
 8003f34:	2302      	movs	r3, #2
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x1a0>
 8003f56:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e00d      	b.n	8003f78 <HAL_RCC_ClockConfig+0x1bc>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	2302      	movs	r3, #2
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2202      	movs	r2, #2
 8003f7a:	61ba      	str	r2, [r7, #24]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	fa92 f2a2 	rbit	r2, r2
 8003f82:	617a      	str	r2, [r7, #20]
  return result;
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	fab2 f282 	clz	r2, r2
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	f042 0220 	orr.w	r2, r2, #32
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f002 021f 	and.w	r2, r2, #31
 8003f96:	2101      	movs	r1, #1
 8003f98:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e079      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	491a      	ldr	r1, [pc, #104]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb8:	f7fc fefa 	bl	8000db0 <HAL_GetTick>
 8003fbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fc fef6 	bl	8000db0 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e061      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d214      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	4906      	ldr	r1, [pc, #24]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e040      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
 8004018:	40022000 	.word	0x40022000
 800401c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	491a      	ldr	r1, [pc, #104]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4912      	ldr	r1, [pc, #72]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800405e:	f000 f829 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8004062:	4601      	mov	r1, r0
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406c:	22f0      	movs	r2, #240	; 0xf0
 800406e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	fa92 f2a2 	rbit	r2, r2
 8004076:	60fa      	str	r2, [r7, #12]
  return result;
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	fab2 f282 	clz	r2, r2
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	40d3      	lsrs	r3, r2
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_RCC_ClockConfig+0x2ec>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	fa21 f303 	lsr.w	r3, r1, r3
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_RCC_ClockConfig+0x2f0>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_RCC_ClockConfig+0x2f4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fe48 	bl	8000d28 <HAL_InitTick>
  
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3778      	adds	r7, #120	; 0x78
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	0800ad94 	.word	0x0800ad94
 80040ac:	20000004 	.word	0x20000004
 80040b0:	20000008 	.word	0x20000008

080040b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <HAL_RCC_GetSysClockFreq+0x98>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d002      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x30>
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x36>
 80040e2:	e029      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040e6:	613b      	str	r3, [r7, #16]
      break;
 80040e8:	e029      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	0c9b      	lsrs	r3, r3, #18
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040f4:	5cd3      	ldrb	r3, [r2, r3]
 80040f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80040f8:	4b14      	ldr	r3, [pc, #80]	; (800414c <HAL_RCC_GetSysClockFreq+0x98>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004110:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	fbb2 f2f3 	udiv	r2, r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e007      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004122:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	fbb2 f2f3 	udiv	r2, r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	fb02 f303 	mul.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	613b      	str	r3, [r7, #16]
      break;
 8004136:	e002      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetSysClockFreq+0x9c>)
 800413a:	613b      	str	r3, [r7, #16]
      break;
 800413c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413e:	693b      	ldr	r3, [r7, #16]
}
 8004140:	4618      	mov	r0, r3
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40021000 	.word	0x40021000
 8004150:	007a1200 	.word	0x007a1200
 8004154:	0800ada4 	.word	0x0800ada4
 8004158:	0800adb4 	.word	0x0800adb4

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b092      	sub	sp, #72	; 0x48
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80d4 	beq.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004180:	4b4e      	ldr	r3, [pc, #312]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10e      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004196:	61d3      	str	r3, [r2, #28]
 8004198:	4b48      	ldr	r3, [pc, #288]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d118      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b6:	4b42      	ldr	r3, [pc, #264]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a41      	ldr	r2, [pc, #260]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c2:	f7fc fdf5 	bl	8000db0 <HAL_GetTick>
 80041c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	e008      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ca:	f7fc fdf1 	bl	8000db0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b64      	cmp	r3, #100	; 0x64
 80041d6:	d901      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1d6      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	4b38      	ldr	r3, [pc, #224]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041e8:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8084 	beq.w	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004204:	429a      	cmp	r2, r3
 8004206:	d07c      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004216:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	461a      	mov	r2, r3
 8004232:	2301      	movs	r3, #1
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	461a      	mov	r2, r3
 8004256:	2300      	movs	r3, #0
 8004258:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800425a:	4a18      	ldr	r2, [pc, #96]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d04b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426a:	f7fc fda1 	bl	8000db0 <HAL_GetTick>
 800426e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fc fd9d 	bl	8000db0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e180      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004288:	2302      	movs	r3, #2
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	2302      	movs	r3, #2
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	61fb      	str	r3, [r7, #28]
  return result;
 80042a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d108      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042b6:	4b01      	ldr	r3, [pc, #4]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	e00d      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40007000 	.word	0x40007000
 80042c4:	10908100 	.word	0x10908100
 80042c8:	2302      	movs	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	4b9a      	ldr	r3, [pc, #616]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2202      	movs	r2, #2
 80042da:	613a      	str	r2, [r7, #16]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	fa92 f2a2 	rbit	r2, r2
 80042e2:	60fa      	str	r2, [r7, #12]
  return result;
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	fab2 f282 	clz	r2, r2
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f002 021f 	and.w	r2, r2, #31
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f202 	lsl.w	r2, r1, r2
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0b7      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004302:	4b8f      	ldr	r3, [pc, #572]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	498c      	ldr	r1, [pc, #560]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004314:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431c:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	4a87      	ldr	r2, [pc, #540]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004326:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004334:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f023 0203 	bic.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	497f      	ldr	r1, [pc, #508]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004352:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4978      	ldr	r1, [pc, #480]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004370:	4b73      	ldr	r3, [pc, #460]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	4970      	ldr	r1, [pc, #448]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800438e:	4b6c      	ldr	r3, [pc, #432]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	f023 0210 	bic.w	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4969      	ldr	r1, [pc, #420]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043ac:	4b64      	ldr	r3, [pc, #400]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	4961      	ldr	r1, [pc, #388]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ca:	4b5d      	ldr	r3, [pc, #372]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f023 0220 	bic.w	r2, r3, #32
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	495a      	ldr	r1, [pc, #360]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043e8:	4b55      	ldr	r3, [pc, #340]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	4952      	ldr	r1, [pc, #328]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004406:	4b4e      	ldr	r3, [pc, #312]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	494b      	ldr	r1, [pc, #300]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	4943      	ldr	r1, [pc, #268]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004442:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	493c      	ldr	r1, [pc, #240]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	4934      	ldr	r1, [pc, #208]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800447e:	4b30      	ldr	r3, [pc, #192]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	492d      	ldr	r1, [pc, #180]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800448c:	4313      	orrs	r3, r2
 800448e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a8:	4925      	ldr	r1, [pc, #148]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044ba:	4b21      	ldr	r3, [pc, #132]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	491e      	ldr	r1, [pc, #120]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80044d8:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	4916      	ldr	r1, [pc, #88]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	490f      	ldr	r1, [pc, #60]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	4907      	ldr	r1, [pc, #28]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004532:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004546:	4913      	ldr	r1, [pc, #76]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004548:	4313      	orrs	r3, r2
 800454a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	490b      	ldr	r1, [pc, #44]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004566:	4313      	orrs	r3, r2
 8004568:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004582:	4904      	ldr	r1, [pc, #16]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004584:	4313      	orrs	r3, r2
 8004586:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3748      	adds	r7, #72	; 0x48
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e049      	b.n	800463e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fabc 	bl	8000b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f000 fe64 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1a      	ldr	r2, [r3, #32]
 8004654:	f241 1311 	movw	r3, #4369	; 0x1111
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_TIM_Base_Stop+0x38>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	f240 4344 	movw	r3, #1092	; 0x444
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_TIM_Base_Stop+0x38>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e04f      	b.n	800474c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a23      	ldr	r2, [pc, #140]	; (8004758 <HAL_TIM_Base_Start_IT+0xc4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01d      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x76>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d6:	d018      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x76>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1f      	ldr	r2, [pc, #124]	; (800475c <HAL_TIM_Base_Start_IT+0xc8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x76>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_TIM_Base_Start_IT+0xcc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00e      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x76>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_TIM_Base_Start_IT+0xd0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x76>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_TIM_Base_Start_IT+0xd4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_TIM_Base_Start_IT+0x76>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_TIM_Base_Start_IT+0xd8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d115      	bne.n	8004736 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <HAL_TIM_Base_Start_IT+0xdc>)
 8004712:	4013      	ands	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d015      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0xb4>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d011      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	e008      	b.n	8004748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e000      	b.n	800474a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	40013400 	.word	0x40013400
 8004768:	40014000 	.word	0x40014000
 800476c:	40015000 	.word	0x40015000
 8004770:	00010007 	.word	0x00010007

08004774 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	f241 1311 	movw	r3, #4369	; 0x1111
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <HAL_TIM_Base_Stop_IT+0x48>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a1a      	ldr	r2, [r3, #32]
 80047a2:	f240 4344 	movw	r3, #1092	; 0x444
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d107      	bne.n	80047bc <HAL_TIM_Base_Stop_IT+0x48>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e049      	b.n	8004878 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fc f97b 	bl	8000af4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f000 fd47 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f001 f8b6 	bl	8005a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a40      	ldr	r2, [pc, #256]	; (80049a0 <HAL_TIM_PWM_Stop+0x120>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <HAL_TIM_PWM_Stop+0x54>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <HAL_TIM_PWM_Stop+0x124>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_TIM_PWM_Stop+0x54>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a3d      	ldr	r2, [pc, #244]	; (80049a8 <HAL_TIM_PWM_Stop+0x128>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_TIM_PWM_Stop+0x54>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <HAL_TIM_PWM_Stop+0x12c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_TIM_PWM_Stop+0x54>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <HAL_TIM_PWM_Stop+0x130>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIM_PWM_Stop+0x54>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a39      	ldr	r2, [pc, #228]	; (80049b4 <HAL_TIM_PWM_Stop+0x134>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_TIM_PWM_Stop+0x58>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_TIM_PWM_Stop+0x5a>
 80048d8:	2300      	movs	r3, #0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d017      	beq.n	800490e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <HAL_TIM_PWM_Stop+0x8e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	f240 4344 	movw	r3, #1092	; 0x444
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d107      	bne.n	800490e <HAL_TIM_PWM_Stop+0x8e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6a1a      	ldr	r2, [r3, #32]
 8004914:	f241 1311 	movw	r3, #4369	; 0x1111
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10f      	bne.n	800493e <HAL_TIM_PWM_Stop+0xbe>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	f240 4344 	movw	r3, #1092	; 0x444
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <HAL_TIM_PWM_Stop+0xbe>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Stop+0xce>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	e023      	b.n	8004996 <HAL_TIM_PWM_Stop+0x116>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Stop+0xde>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	e01b      	b.n	8004996 <HAL_TIM_PWM_Stop+0x116>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Stop+0xee>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	e013      	b.n	8004996 <HAL_TIM_PWM_Stop+0x116>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Stop+0xfe>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800497c:	e00b      	b.n	8004996 <HAL_TIM_PWM_Stop+0x116>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b10      	cmp	r3, #16
 8004982:	d104      	bne.n	800498e <HAL_TIM_PWM_Stop+0x10e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	e003      	b.n	8004996 <HAL_TIM_PWM_Stop+0x116>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	40013400 	.word	0x40013400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800
 80049b4:	40015000 	.word	0x40015000

080049b8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_TIM_PWM_Start_IT+0x28>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e03c      	b.n	8004a5a <HAL_TIM_PWM_Start_IT+0xa2>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d109      	bne.n	80049fa <HAL_TIM_PWM_Start_IT+0x42>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e02f      	b.n	8004a5a <HAL_TIM_PWM_Start_IT+0xa2>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d109      	bne.n	8004a14 <HAL_TIM_PWM_Start_IT+0x5c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e022      	b.n	8004a5a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d109      	bne.n	8004a2e <HAL_TIM_PWM_Start_IT+0x76>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	bf14      	ite	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	2300      	moveq	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	e015      	b.n	8004a5a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d109      	bne.n	8004a48 <HAL_TIM_PWM_Start_IT+0x90>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e008      	b.n	8004a5a <HAL_TIM_PWM_Start_IT+0xa2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e0ec      	b.n	8004c3c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start_IT+0xba>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a70:	e023      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x102>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start_IT+0xca>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a80:	e01b      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x102>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start_IT+0xda>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a90:	e013      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x102>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start_IT+0xea>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa0:	e00b      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x102>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start_IT+0xfa>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab0:	e003      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x102>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d841      	bhi.n	8004b44 <HAL_TIM_PWM_Start_IT+0x18c>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <HAL_TIM_PWM_Start_IT+0x110>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004afd 	.word	0x08004afd
 8004acc:	08004b45 	.word	0x08004b45
 8004ad0:	08004b45 	.word	0x08004b45
 8004ad4:	08004b45 	.word	0x08004b45
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004b45 	.word	0x08004b45
 8004ae0:	08004b45 	.word	0x08004b45
 8004ae4:	08004b45 	.word	0x08004b45
 8004ae8:	08004b21 	.word	0x08004b21
 8004aec:	08004b45 	.word	0x08004b45
 8004af0:	08004b45 	.word	0x08004b45
 8004af4:	08004b45 	.word	0x08004b45
 8004af8:	08004b33 	.word	0x08004b33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0202 	orr.w	r2, r2, #2
 8004b0a:	60da      	str	r2, [r3, #12]
      break;
 8004b0c:	e01d      	b.n	8004b4a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0204 	orr.w	r2, r2, #4
 8004b1c:	60da      	str	r2, [r3, #12]
      break;
 8004b1e:	e014      	b.n	8004b4a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0208 	orr.w	r2, r2, #8
 8004b2e:	60da      	str	r2, [r3, #12]
      break;
 8004b30:	e00b      	b.n	8004b4a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0210 	orr.w	r2, r2, #16
 8004b40:	60da      	str	r2, [r3, #12]
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      break;
 8004b48:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d174      	bne.n	8004c3a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2201      	movs	r2, #1
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 ff53 	bl	8005a04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a38      	ldr	r2, [pc, #224]	; (8004c44 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a36      	ldr	r2, [pc, #216]	; (8004c48 <HAL_TIM_PWM_Start_IT+0x290>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a35      	ldr	r2, [pc, #212]	; (8004c4c <HAL_TIM_PWM_Start_IT+0x294>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a33      	ldr	r2, [pc, #204]	; (8004c50 <HAL_TIM_PWM_Start_IT+0x298>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a32      	ldr	r2, [pc, #200]	; (8004c54 <HAL_TIM_PWM_Start_IT+0x29c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIM_PWM_Start_IT+0x1e2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a30      	ldr	r2, [pc, #192]	; (8004c58 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_PWM_Start_IT+0x1e6>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_TIM_PWM_Start_IT+0x1e8>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <HAL_TIM_PWM_Start_IT+0x28c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_TIM_PWM_Start_IT+0x242>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d018      	beq.n	8004bfa <HAL_TIM_PWM_Start_IT+0x242>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_TIM_PWM_Start_IT+0x242>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_TIM_PWM_Start_IT+0x242>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <HAL_TIM_PWM_Start_IT+0x290>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_TIM_PWM_Start_IT+0x242>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <HAL_TIM_PWM_Start_IT+0x294>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIM_PWM_Start_IT+0x242>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d115      	bne.n	8004c26 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b06      	cmp	r3, #6
 8004c0a:	d015      	beq.n	8004c38 <HAL_TIM_PWM_Start_IT+0x280>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c12:	d011      	beq.n	8004c38 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	e008      	b.n	8004c38 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e000      	b.n	8004c3a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40012c00 	.word	0x40012c00
 8004c48:	40013400 	.word	0x40013400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40014400 	.word	0x40014400
 8004c54:	40014800 	.word	0x40014800
 8004c58:	40015000 	.word	0x40015000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	00010007 	.word	0x00010007

08004c68 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b0c      	cmp	r3, #12
 8004c7a:	d841      	bhi.n	8004d00 <HAL_TIM_PWM_Stop_IT+0x98>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08004d01 	.word	0x08004d01
 8004c8c:	08004d01 	.word	0x08004d01
 8004c90:	08004d01 	.word	0x08004d01
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004d01 	.word	0x08004d01
 8004ca0:	08004d01 	.word	0x08004d01
 8004ca4:	08004cdd 	.word	0x08004cdd
 8004ca8:	08004d01 	.word	0x08004d01
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004d01 	.word	0x08004d01
 8004cb4:	08004cef 	.word	0x08004cef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0202 	bic.w	r2, r2, #2
 8004cc6:	60da      	str	r2, [r3, #12]
      break;
 8004cc8:	e01d      	b.n	8004d06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0204 	bic.w	r2, r2, #4
 8004cd8:	60da      	str	r2, [r3, #12]
      break;
 8004cda:	e014      	b.n	8004d06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0208 	bic.w	r2, r2, #8
 8004cea:	60da      	str	r2, [r3, #12]
      break;
 8004cec:	e00b      	b.n	8004d06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0210 	bic.w	r2, r2, #16
 8004cfc:	60da      	str	r2, [r3, #12]
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 8086 	bne.w	8004e1a <HAL_TIM_PWM_Stop_IT+0x1b2>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fe74 	bl	8005a04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3f      	ldr	r2, [pc, #252]	; (8004e28 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a3d      	ldr	r2, [pc, #244]	; (8004e2c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a3c      	ldr	r2, [pc, #240]	; (8004e30 <HAL_TIM_PWM_Stop_IT+0x1c8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <HAL_TIM_PWM_Stop_IT+0x1cc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_TIM_PWM_Stop_IT+0xf0>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a39      	ldr	r2, [pc, #228]	; (8004e38 <HAL_TIM_PWM_Stop_IT+0x1d0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_PWM_Stop_IT+0xf4>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_TIM_PWM_Stop_IT+0xf6>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d017      	beq.n	8004d92 <HAL_TIM_PWM_Stop_IT+0x12a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	f240 4344 	movw	r3, #1092	; 0x444
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_PWM_Stop_IT+0x12a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10f      	bne.n	8004dc2 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	f240 4344 	movw	r3, #1092	; 0x444
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <HAL_TIM_PWM_Stop_IT+0x15a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_PWM_Stop_IT+0x16a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd0:	e023      	b.n	8004e1a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d104      	bne.n	8004de2 <HAL_TIM_PWM_Stop_IT+0x17a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	e01b      	b.n	8004e1a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Stop_IT+0x18a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df0:	e013      	b.n	8004e1a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Stop_IT+0x19a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e00:	e00b      	b.n	8004e1a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Stop_IT+0x1aa>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e10:	e003      	b.n	8004e1a <HAL_TIM_PWM_Stop_IT+0x1b2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40013400 	.word	0x40013400
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40015000 	.word	0x40015000

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0202 	mvn.w	r2, #2
 8004e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f9f8 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f9ea 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fb fc07 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f9d2 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f9c4 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fb fbe1 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0208 	mvn.w	r2, #8
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9ac 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f99e 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fb fbbb 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f986 	bl	800527c <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f978 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fb fb95 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0201 	mvn.w	r2, #1
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb fb5e 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00c      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fdd8 	bl	8005b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fdd0 	bl	8005b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00c      	beq.n	8005014 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f93e 	bl	8005290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00c      	beq.n	8005038 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0220 	mvn.w	r2, #32
 8005030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fd98 	bl	8005b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800505a:	2302      	movs	r3, #2
 800505c:	e0ff      	b.n	800525e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b14      	cmp	r3, #20
 800506a:	f200 80f0 	bhi.w	800524e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	080050c9 	.word	0x080050c9
 8005078:	0800524f 	.word	0x0800524f
 800507c:	0800524f 	.word	0x0800524f
 8005080:	0800524f 	.word	0x0800524f
 8005084:	08005109 	.word	0x08005109
 8005088:	0800524f 	.word	0x0800524f
 800508c:	0800524f 	.word	0x0800524f
 8005090:	0800524f 	.word	0x0800524f
 8005094:	0800514b 	.word	0x0800514b
 8005098:	0800524f 	.word	0x0800524f
 800509c:	0800524f 	.word	0x0800524f
 80050a0:	0800524f 	.word	0x0800524f
 80050a4:	0800518b 	.word	0x0800518b
 80050a8:	0800524f 	.word	0x0800524f
 80050ac:	0800524f 	.word	0x0800524f
 80050b0:	0800524f 	.word	0x0800524f
 80050b4:	080051cd 	.word	0x080051cd
 80050b8:	0800524f 	.word	0x0800524f
 80050bc:	0800524f 	.word	0x0800524f
 80050c0:	0800524f 	.word	0x0800524f
 80050c4:	0800520d 	.word	0x0800520d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f992 	bl	80053f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6999      	ldr	r1, [r3, #24]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	619a      	str	r2, [r3, #24]
      break;
 8005106:	e0a5      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fa0c 	bl	800552c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6999      	ldr	r1, [r3, #24]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	619a      	str	r2, [r3, #24]
      break;
 8005148:	e084      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fa7f 	bl	8005654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0208 	orr.w	r2, r2, #8
 8005164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0204 	bic.w	r2, r2, #4
 8005174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69d9      	ldr	r1, [r3, #28]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	61da      	str	r2, [r3, #28]
      break;
 8005188:	e064      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 faf1 	bl	8005778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	61da      	str	r2, [r3, #28]
      break;
 80051ca:	e043      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb40 	bl	8005858 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0204 	bic.w	r2, r2, #4
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800520a:	e023      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fb8a 	bl	800592c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	021a      	lsls	r2, r3, #8
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800524c:	e002      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	75fb      	strb	r3, [r7, #23]
      break;
 8005252:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop

08005268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a48      	ldr	r2, [pc, #288]	; (80053d8 <TIM_Base_SetConfig+0x134>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d00f      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a45      	ldr	r2, [pc, #276]	; (80053dc <TIM_Base_SetConfig+0x138>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a44      	ldr	r2, [pc, #272]	; (80053e0 <TIM_Base_SetConfig+0x13c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a43      	ldr	r2, [pc, #268]	; (80053e4 <TIM_Base_SetConfig+0x140>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <TIM_Base_SetConfig+0x144>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d108      	bne.n	80052f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a37      	ldr	r2, [pc, #220]	; (80053d8 <TIM_Base_SetConfig+0x134>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01f      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005304:	d01b      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a34      	ldr	r2, [pc, #208]	; (80053dc <TIM_Base_SetConfig+0x138>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d017      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a33      	ldr	r2, [pc, #204]	; (80053e0 <TIM_Base_SetConfig+0x13c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a32      	ldr	r2, [pc, #200]	; (80053e4 <TIM_Base_SetConfig+0x140>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a32      	ldr	r2, [pc, #200]	; (80053ec <TIM_Base_SetConfig+0x148>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a31      	ldr	r2, [pc, #196]	; (80053f0 <TIM_Base_SetConfig+0x14c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a30      	ldr	r2, [pc, #192]	; (80053f4 <TIM_Base_SetConfig+0x150>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2b      	ldr	r2, [pc, #172]	; (80053e8 <TIM_Base_SetConfig+0x144>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <TIM_Base_SetConfig+0x134>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <TIM_Base_SetConfig+0x100>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <TIM_Base_SetConfig+0x140>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <TIM_Base_SetConfig+0x100>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <TIM_Base_SetConfig+0x148>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_Base_SetConfig+0x100>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <TIM_Base_SetConfig+0x14c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_Base_SetConfig+0x100>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <TIM_Base_SetConfig+0x150>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_Base_SetConfig+0x100>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <TIM_Base_SetConfig+0x144>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d103      	bne.n	80053ac <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]
  }
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40012c00 	.word	0x40012c00
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40015000 	.word	0x40015000
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f023 0201 	bic.w	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 0302 	bic.w	r3, r3, #2
 8005444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a30      	ldr	r2, [pc, #192]	; (8005514 <TIM_OC1_SetConfig+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <TIM_OC1_SetConfig+0x88>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <TIM_OC1_SetConfig+0x120>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00f      	beq.n	8005480 <TIM_OC1_SetConfig+0x88>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a2e      	ldr	r2, [pc, #184]	; (800551c <TIM_OC1_SetConfig+0x124>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00b      	beq.n	8005480 <TIM_OC1_SetConfig+0x88>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <TIM_OC1_SetConfig+0x128>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_OC1_SetConfig+0x88>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <TIM_OC1_SetConfig+0x12c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC1_SetConfig+0x88>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a2b      	ldr	r2, [pc, #172]	; (8005528 <TIM_OC1_SetConfig+0x130>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10c      	bne.n	800549a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0308 	bic.w	r3, r3, #8
 8005486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f023 0304 	bic.w	r3, r3, #4
 8005498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <TIM_OC1_SetConfig+0x11c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <TIM_OC1_SetConfig+0xd2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <TIM_OC1_SetConfig+0x120>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00f      	beq.n	80054ca <TIM_OC1_SetConfig+0xd2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	; (800551c <TIM_OC1_SetConfig+0x124>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00b      	beq.n	80054ca <TIM_OC1_SetConfig+0xd2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <TIM_OC1_SetConfig+0x128>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d007      	beq.n	80054ca <TIM_OC1_SetConfig+0xd2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a19      	ldr	r2, [pc, #100]	; (8005524 <TIM_OC1_SetConfig+0x12c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_OC1_SetConfig+0xd2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a18      	ldr	r2, [pc, #96]	; (8005528 <TIM_OC1_SetConfig+0x130>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d111      	bne.n	80054ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800
 8005528:	40015000 	.word	0x40015000

0800552c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f023 0210 	bic.w	r2, r3, #16
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0320 	bic.w	r3, r3, #32
 800557a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a2c      	ldr	r2, [pc, #176]	; (800563c <TIM_OC2_SetConfig+0x110>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_OC2_SetConfig+0x74>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a2b      	ldr	r2, [pc, #172]	; (8005640 <TIM_OC2_SetConfig+0x114>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_OC2_SetConfig+0x74>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a2a      	ldr	r2, [pc, #168]	; (8005644 <TIM_OC2_SetConfig+0x118>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d10d      	bne.n	80055bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a1f      	ldr	r2, [pc, #124]	; (800563c <TIM_OC2_SetConfig+0x110>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <TIM_OC2_SetConfig+0xc0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <TIM_OC2_SetConfig+0x114>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00f      	beq.n	80055ec <TIM_OC2_SetConfig+0xc0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <TIM_OC2_SetConfig+0x11c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_OC2_SetConfig+0xc0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1d      	ldr	r2, [pc, #116]	; (800564c <TIM_OC2_SetConfig+0x120>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_OC2_SetConfig+0xc0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <TIM_OC2_SetConfig+0x124>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_OC2_SetConfig+0xc0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a17      	ldr	r2, [pc, #92]	; (8005644 <TIM_OC2_SetConfig+0x118>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d113      	bne.n	8005614 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40015000 	.word	0x40015000
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800

08005654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <TIM_OC3_SetConfig+0x10c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_OC3_SetConfig+0x72>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <TIM_OC3_SetConfig+0x110>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_OC3_SetConfig+0x72>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a29      	ldr	r2, [pc, #164]	; (8005768 <TIM_OC3_SetConfig+0x114>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d10d      	bne.n	80056e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <TIM_OC3_SetConfig+0x10c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_OC3_SetConfig+0xbe>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <TIM_OC3_SetConfig+0x110>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_OC3_SetConfig+0xbe>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1d      	ldr	r2, [pc, #116]	; (800576c <TIM_OC3_SetConfig+0x118>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_OC3_SetConfig+0xbe>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <TIM_OC3_SetConfig+0x11c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_OC3_SetConfig+0xbe>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <TIM_OC3_SetConfig+0x120>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC3_SetConfig+0xbe>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a16      	ldr	r2, [pc, #88]	; (8005768 <TIM_OC3_SetConfig+0x114>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d113      	bne.n	800573a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40015000 	.word	0x40015000
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	031b      	lsls	r3, r3, #12
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <TIM_OC4_SetConfig+0xc8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <TIM_OC4_SetConfig+0x8c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <TIM_OC4_SetConfig+0xcc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_OC4_SetConfig+0x8c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a18      	ldr	r2, [pc, #96]	; (8005848 <TIM_OC4_SetConfig+0xd0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_OC4_SetConfig+0x8c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a17      	ldr	r2, [pc, #92]	; (800584c <TIM_OC4_SetConfig+0xd4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC4_SetConfig+0x8c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a16      	ldr	r2, [pc, #88]	; (8005850 <TIM_OC4_SetConfig+0xd8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC4_SetConfig+0x8c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a15      	ldr	r2, [pc, #84]	; (8005854 <TIM_OC4_SetConfig+0xdc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40013400 	.word	0x40013400
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800
 8005854:	40015000 	.word	0x40015000

08005858 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800589c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a19      	ldr	r2, [pc, #100]	; (8005914 <TIM_OC5_SetConfig+0xbc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_OC5_SetConfig+0x82>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a18      	ldr	r2, [pc, #96]	; (8005918 <TIM_OC5_SetConfig+0xc0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_OC5_SetConfig+0x82>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a17      	ldr	r2, [pc, #92]	; (800591c <TIM_OC5_SetConfig+0xc4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_OC5_SetConfig+0x82>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a16      	ldr	r2, [pc, #88]	; (8005920 <TIM_OC5_SetConfig+0xc8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_OC5_SetConfig+0x82>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <TIM_OC5_SetConfig+0xcc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_OC5_SetConfig+0x82>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <TIM_OC5_SetConfig+0xd0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d109      	bne.n	80058ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40013400 	.word	0x40013400
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800
 8005928:	40015000 	.word	0x40015000

0800592c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	051b      	lsls	r3, r3, #20
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1a      	ldr	r2, [pc, #104]	; (80059ec <TIM_OC6_SetConfig+0xc0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <TIM_OC6_SetConfig+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a19      	ldr	r2, [pc, #100]	; (80059f0 <TIM_OC6_SetConfig+0xc4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00f      	beq.n	80059b0 <TIM_OC6_SetConfig+0x84>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <TIM_OC6_SetConfig+0xc8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_OC6_SetConfig+0x84>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <TIM_OC6_SetConfig+0xcc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d007      	beq.n	80059b0 <TIM_OC6_SetConfig+0x84>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a16      	ldr	r2, [pc, #88]	; (80059fc <TIM_OC6_SetConfig+0xd0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_OC6_SetConfig+0x84>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <TIM_OC6_SetConfig+0xd4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d109      	bne.n	80059c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800
 8005a00:	40015000 	.word	0x40015000

08005a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	2201      	movs	r2, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1a      	ldr	r2, [r3, #32]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	401a      	ands	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e06d      	b.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a30      	ldr	r2, [pc, #192]	; (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2f      	ldr	r2, [pc, #188]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d01d      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d018      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10c      	bne.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40015000 	.word	0x40015000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40014000 	.word	0x40014000

08005b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bb4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005bb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bda:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005bde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b09d      	sub	sp, #116	; 0x74
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	78db      	ldrb	r3, [r3, #3]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d81f      	bhi.n	8005cb6 <USB_ActivateEndpoint+0x72>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <USB_ActivateEndpoint+0x38>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cbf 	.word	0x08005cbf
 8005c88:	08005c9b 	.word	0x08005c9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005c98:	e012      	b.n	8005cc0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005ca2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ca6:	e00b      	b.n	8005cc0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ca8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cb4:	e004      	b.n	8005cc0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005cbc:	e000      	b.n	8005cc0 <USB_ActivateEndpoint+0x7c>
      break;
 8005cbe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	441a      	add	r2, r3
 8005cca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	b21b      	sxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	b21a      	sxth	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b21b      	sxth	r3, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b21b      	sxth	r3, r3
 8005d06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	7b1b      	ldrb	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 8178 	bne.w	8006026 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8084 	beq.w	8005e48 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	4413      	add	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	00da      	lsls	r2, r3, #3
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	88db      	ldrh	r3, [r3, #6]
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	827b      	strh	r3, [r7, #18]
 8005d82:	8a7b      	ldrh	r3, [r7, #18]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <USB_ActivateEndpoint+0x180>
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	823b      	strh	r3, [r7, #16]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	8a3b      	ldrh	r3, [r7, #16]
 8005db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	78db      	ldrb	r3, [r3, #3]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d020      	beq.n	8005e0e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de2:	81bb      	strh	r3, [r7, #12]
 8005de4:	89bb      	ldrh	r3, [r7, #12]
 8005de6:	f083 0320 	eor.w	r3, r3, #32
 8005dea:	81bb      	strh	r3, [r7, #12]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	89bb      	ldrh	r3, [r7, #12]
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]
 8005e0c:	e2d5      	b.n	80063ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e24:	81fb      	strh	r3, [r7, #14]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	441a      	add	r2, r3
 8005e30:	89fb      	ldrh	r3, [r7, #14]
 8005e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]
 8005e46:	e2b8      	b.n	80063ba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	4413      	add	r3, r2
 8005e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	00da      	lsls	r2, r3, #3
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	4413      	add	r3, r2
 8005e66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	88db      	ldrh	r3, [r3, #6]
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	4413      	add	r3, r2
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	00da      	lsls	r2, r3, #3
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	4413      	add	r3, r2
 8005e9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <USB_ActivateEndpoint+0x28a>
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e039      	b.n	8005f42 <USB_ActivateEndpoint+0x2fe>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed4:	d818      	bhi.n	8005f08 <USB_ActivateEndpoint+0x2c4>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <USB_ActivateEndpoint+0x2ac>
 8005eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eec:	3301      	adds	r3, #1
 8005eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e01c      	b.n	8005f42 <USB_ActivateEndpoint+0x2fe>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <USB_ActivateEndpoint+0x2de>
 8005f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	029b      	lsls	r3, r3, #10
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01b      	beq.n	8005f92 <USB_ActivateEndpoint+0x34e>
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f70:	843b      	strh	r3, [r7, #32]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	8c3b      	ldrh	r3, [r7, #32]
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d124      	bne.n	8005fe4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	83bb      	strh	r3, [r7, #28]
 8005fb2:	8bbb      	ldrh	r3, [r7, #28]
 8005fb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fb8:	83bb      	strh	r3, [r7, #28]
 8005fba:	8bbb      	ldrh	r3, [r7, #28]
 8005fbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fc0:	83bb      	strh	r3, [r7, #28]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	8bbb      	ldrh	r3, [r7, #28]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]
 8005fe2:	e1ea      	b.n	80063ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	83fb      	strh	r3, [r7, #30]
 8005ffc:	8bfb      	ldrh	r3, [r7, #30]
 8005ffe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006002:	83fb      	strh	r3, [r7, #30]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	8bfb      	ldrh	r3, [r7, #30]
 8006010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]
 8006024:	e1c9      	b.n	80063ba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	78db      	ldrb	r3, [r3, #3]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d11e      	bne.n	800606c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006044:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
 800606a:	e01d      	b.n	80060a8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b8:	4413      	add	r3, r2
 80060ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	00da      	lsls	r2, r3, #3
 80060c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	891b      	ldrh	r3, [r3, #8]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	657b      	str	r3, [r7, #84]	; 0x54
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ec:	4413      	add	r3, r2
 80060ee:	657b      	str	r3, [r7, #84]	; 0x54
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	00da      	lsls	r2, r3, #3
 80060f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	895b      	ldrh	r3, [r3, #10]
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800610e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f040 8093 	bne.w	8006240 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800612a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800612e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01b      	beq.n	800616e <USB_ActivateEndpoint+0x52a>
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800617c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01b      	beq.n	80061be <USB_ActivateEndpoint+0x57a>
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80061d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80061de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800622a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]
 800623e:	e0bc      	b.n	80063ba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006250:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01d      	beq.n	8006298 <USB_ActivateEndpoint+0x654>
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	441a      	add	r2, r3
 8006280:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006294:	b29b      	uxth	r3, r3
 8006296:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80062a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01d      	beq.n	80062f0 <USB_ActivateEndpoint+0x6ac>
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	78db      	ldrb	r3, [r3, #3]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d024      	beq.n	8006342 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006312:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006316:	f083 0320 	eor.w	r3, r3, #32
 800631a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
 8006340:	e01d      	b.n	800637e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006358:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	441a      	add	r2, r3
 8006366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800636a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800637a:	b29b      	uxth	r3, r3
 800637c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006394:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	441a      	add	r2, r3
 80063a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80063ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3774      	adds	r7, #116	; 0x74
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop

080063cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b08d      	sub	sp, #52	; 0x34
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	7b1b      	ldrb	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 808e 	bne.w	80064fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d044      	beq.n	8006472 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	81bb      	strh	r3, [r7, #12]
 80063f6:	89bb      	ldrh	r3, [r7, #12]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01b      	beq.n	8006438 <USB_DeactivateEndpoint+0x6c>
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	817b      	strh	r3, [r7, #10]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	441a      	add	r2, r3
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006434:	b29b      	uxth	r3, r3
 8006436:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644e:	813b      	strh	r3, [r7, #8]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	893b      	ldrh	r3, [r7, #8]
 800645c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646c:	b29b      	uxth	r3, r3
 800646e:	8013      	strh	r3, [r2, #0]
 8006470:	e192      	b.n	8006798 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	827b      	strh	r3, [r7, #18]
 8006480:	8a7b      	ldrh	r3, [r7, #18]
 8006482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01b      	beq.n	80064c2 <USB_DeactivateEndpoint+0xf6>
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	823b      	strh	r3, [r7, #16]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	8a3b      	ldrh	r3, [r7, #16]
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d8:	81fb      	strh	r3, [r7, #14]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	89fb      	ldrh	r3, [r7, #14]
 80064e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]
 80064fa:	e14d      	b.n	8006798 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 80a5 	bne.w	8006650 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	843b      	strh	r3, [r7, #32]
 8006514:	8c3b      	ldrh	r3, [r7, #32]
 8006516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01b      	beq.n	8006556 <USB_DeactivateEndpoint+0x18a>
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	83fb      	strh	r3, [r7, #30]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	441a      	add	r2, r3
 8006540:	8bfb      	ldrh	r3, [r7, #30]
 8006542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800654e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006552:	b29b      	uxth	r3, r3
 8006554:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	83bb      	strh	r3, [r7, #28]
 8006564:	8bbb      	ldrh	r3, [r7, #28]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01b      	beq.n	80065a6 <USB_DeactivateEndpoint+0x1da>
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006584:	837b      	strh	r3, [r7, #26]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	8b7b      	ldrh	r3, [r7, #26]
 8006592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065bc:	833b      	strh	r3, [r7, #24]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	441a      	add	r2, r3
 80065c8:	8b3b      	ldrh	r3, [r7, #24]
 80065ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065da:	b29b      	uxth	r3, r3
 80065dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f4:	82fb      	strh	r3, [r7, #22]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	8afb      	ldrh	r3, [r7, #22]
 8006602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006612:	b29b      	uxth	r3, r3
 8006614:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662c:	82bb      	strh	r3, [r7, #20]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	8abb      	ldrh	r3, [r7, #20]
 800663a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664a:	b29b      	uxth	r3, r3
 800664c:	8013      	strh	r3, [r2, #0]
 800664e:	e0a3      	b.n	8006798 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800665e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01b      	beq.n	80066a0 <USB_DeactivateEndpoint+0x2d4>
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800668c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669c:	b29b      	uxth	r3, r3
 800669e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80066ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01b      	beq.n	80066f0 <USB_DeactivateEndpoint+0x324>
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006706:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	441a      	add	r2, r3
 8006712:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006724:	b29b      	uxth	r3, r3
 8006726:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	847b      	strh	r3, [r7, #34]	; 0x22
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	441a      	add	r2, r3
 8006782:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006794:	b29b      	uxth	r3, r3
 8006796:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3734      	adds	r7, #52	; 0x34
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b0c2      	sub	sp, #264	; 0x108
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b4:	6018      	str	r0, [r3, #0]
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	f040 86b7 	bne.w	8007540 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d908      	bls.n	8006800 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067fe:	e007      	b.n	8006810 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	7b1b      	ldrb	r3, [r3, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d13a      	bne.n	8006896 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6959      	ldr	r1, [r3, #20]
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	88da      	ldrh	r2, [r3, #6]
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683c:	b29b      	uxth	r3, r3
 800683e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006842:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006846:	6800      	ldr	r0, [r0, #0]
 8006848:	f001 fc8d 	bl	8008166 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	4413      	add	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	00da      	lsls	r2, r3, #3
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	4413      	add	r3, r2
 8006882:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	f000 be1f 	b.w	80074d4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	f040 8462 	bne.w	800716c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6a1a      	ldr	r2, [r3, #32]
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	f240 83df 	bls.w	8007084 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800690e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006916:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800691a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 81c7 	beq.w	8006cf6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d177      	bne.n	8006a74 <USB_EPStartXfer+0x2ce>
 8006984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	4413      	add	r3, r2
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	00da      	lsls	r2, r3, #3
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <USB_EPStartXfer+0x248>
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e067      	b.n	8006abe <USB_EPStartXfer+0x318>
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f2:	2b3e      	cmp	r3, #62	; 0x3e
 80069f4:	d81c      	bhi.n	8006a30 <USB_EPStartXfer+0x28a>
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <USB_EPStartXfer+0x270>
 8006a0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a10:	3301      	adds	r3, #1
 8006a12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	029b      	lsls	r3, r3, #10
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	e046      	b.n	8006abe <USB_EPStartXfer+0x318>
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <USB_EPStartXfer+0x2aa>
 8006a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	029b      	lsls	r3, r3, #10
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	4313      	orrs	r3, r2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	e024      	b.n	8006abe <USB_EPStartXfer+0x318>
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d11c      	bne.n	8006abe <USB_EPStartXfer+0x318>
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	4413      	add	r3, r2
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	00da      	lsls	r2, r3, #3
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	4413      	add	r3, r2
 8006aae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	895b      	ldrh	r3, [r3, #10]
 8006aca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6959      	ldr	r1, [r3, #20]
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ae4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ae8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006aec:	6800      	ldr	r0, [r0, #0]
 8006aee:	f001 fb3a 	bl	8008166 <USB_WritePMA>
            ep->xfer_buff += len;
 8006af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b02:	441a      	add	r2, r3
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d90f      	bls.n	8006b4c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3c:	1ad2      	subs	r2, r2, r3
 8006b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	621a      	str	r2, [r3, #32]
 8006b4a:	e00e      	b.n	8006b6a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d177      	bne.n	8006c6a <USB_EPStartXfer+0x4c4>
 8006b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	00da      	lsls	r2, r3, #3
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <USB_EPStartXfer+0x43e>
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e06d      	b.n	8006cc0 <USB_EPStartXfer+0x51a>
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bea:	d81c      	bhi.n	8006c26 <USB_EPStartXfer+0x480>
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <USB_EPStartXfer+0x466>
 8006c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c06:	3301      	adds	r3, #1
 8006c08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e04c      	b.n	8006cc0 <USB_EPStartXfer+0x51a>
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <USB_EPStartXfer+0x4a0>
 8006c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	029b      	lsls	r3, r3, #10
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e02a      	b.n	8006cc0 <USB_EPStartXfer+0x51a>
 8006c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d122      	bne.n	8006cc0 <USB_EPStartXfer+0x51a>
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	623b      	str	r3, [r7, #32]
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	00da      	lsls	r2, r3, #3
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	891b      	ldrh	r3, [r3, #8]
 8006ccc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6959      	ldr	r1, [r3, #20]
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ce6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cee:	6800      	ldr	r0, [r0, #0]
 8006cf0:	f001 fa39 	bl	8008166 <USB_WritePMA>
 8006cf4:	e3ee      	b.n	80074d4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d177      	bne.n	8006df6 <USB_EPStartXfer+0x650>
 8006d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d26:	4413      	add	r3, r2
 8006d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	00da      	lsls	r2, r3, #3
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d40:	647b      	str	r3, [r7, #68]	; 0x44
 8006d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <USB_EPStartXfer+0x5ca>
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	e06d      	b.n	8006e4c <USB_EPStartXfer+0x6a6>
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d74:	2b3e      	cmp	r3, #62	; 0x3e
 8006d76:	d81c      	bhi.n	8006db2 <USB_EPStartXfer+0x60c>
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <USB_EPStartXfer+0x5f2>
 8006d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d92:	3301      	adds	r3, #1
 8006d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	029b      	lsls	r3, r3, #10
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	4313      	orrs	r3, r2
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e04c      	b.n	8006e4c <USB_EPStartXfer+0x6a6>
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <USB_EPStartXfer+0x62c>
 8006dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4313      	orrs	r3, r2
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df2:	801a      	strh	r2, [r3, #0]
 8006df4:	e02a      	b.n	8006e4c <USB_EPStartXfer+0x6a6>
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d122      	bne.n	8006e4c <USB_EPStartXfer+0x6a6>
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	653b      	str	r3, [r7, #80]	; 0x50
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e26:	4413      	add	r3, r2
 8006e28:	653b      	str	r3, [r7, #80]	; 0x50
 8006e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	00da      	lsls	r2, r3, #3
 8006e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	891b      	ldrh	r3, [r3, #8]
 8006e58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6959      	ldr	r1, [r3, #20]
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	f001 f973 	bl	8008166 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	441a      	add	r2, r3
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d90f      	bls.n	8006eda <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a1a      	ldr	r2, [r3, #32]
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eca:	1ad2      	subs	r2, r2, r3
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e00e      	b.n	8006ef8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	643b      	str	r3, [r7, #64]	; 0x40
 8006f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d177      	bne.n	8007004 <USB_EPStartXfer+0x85e>
 8006f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	4413      	add	r3, r2
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	00da      	lsls	r2, r3, #3
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <USB_EPStartXfer+0x7d8>
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	e067      	b.n	800704e <USB_EPStartXfer+0x8a8>
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f82:	2b3e      	cmp	r3, #62	; 0x3e
 8006f84:	d81c      	bhi.n	8006fc0 <USB_EPStartXfer+0x81a>
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <USB_EPStartXfer+0x800>
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e046      	b.n	800704e <USB_EPStartXfer+0x8a8>
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <USB_EPStartXfer+0x83a>
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	e024      	b.n	800704e <USB_EPStartXfer+0x8a8>
 8007004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d11c      	bne.n	800704e <USB_EPStartXfer+0x8a8>
 8007014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007022:	b29b      	uxth	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007028:	4413      	add	r3, r2
 800702a:	643b      	str	r3, [r7, #64]	; 0x40
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	00da      	lsls	r2, r3, #3
 800703a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800703c:	4413      	add	r3, r2
 800703e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	b29a      	uxth	r2, r3
 800704a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	895b      	ldrh	r3, [r3, #10]
 800705a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6959      	ldr	r1, [r3, #20]
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706e:	b29b      	uxth	r3, r3
 8007070:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007074:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007078:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	f001 f872 	bl	8008166 <USB_WritePMA>
 8007082:	e227      	b.n	80074d4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710a:	b29b      	uxth	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007110:	4413      	add	r3, r2
 8007112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	00da      	lsls	r2, r3, #3
 8007122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007124:	4413      	add	r3, r2
 8007126:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800712a:	65bb      	str	r3, [r7, #88]	; 0x58
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007130:	b29a      	uxth	r2, r3
 8007132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007134:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	891b      	ldrh	r3, [r3, #8]
 8007142:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6959      	ldr	r1, [r3, #20]
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	b29b      	uxth	r3, r3
 8007158:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800715c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007160:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007164:	6800      	ldr	r0, [r0, #0]
 8007166:	f000 fffe 	bl	8008166 <USB_WritePMA>
 800716a:	e1b3      	b.n	80074d4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800718a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 80c6 	beq.w	800733e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	673b      	str	r3, [r7, #112]	; 0x70
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d177      	bne.n	80072be <USB_EPStartXfer+0xb18>
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071ee:	4413      	add	r3, r2
 80071f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	00da      	lsls	r2, r3, #3
 8007200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007202:	4413      	add	r3, r2
 8007204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007208:	667b      	str	r3, [r7, #100]	; 0x64
 800720a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007214:	b29a      	uxth	r2, r3
 8007216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <USB_EPStartXfer+0xa92>
 8007222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800722c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007230:	b29a      	uxth	r2, r3
 8007232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007234:	801a      	strh	r2, [r3, #0]
 8007236:	e067      	b.n	8007308 <USB_EPStartXfer+0xb62>
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	2b3e      	cmp	r3, #62	; 0x3e
 800723e:	d81c      	bhi.n	800727a <USB_EPStartXfer+0xad4>
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <USB_EPStartXfer+0xaba>
 8007256:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800725a:	3301      	adds	r3, #1
 800725c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29a      	uxth	r2, r3
 8007266:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800726a:	b29b      	uxth	r3, r3
 800726c:	029b      	lsls	r3, r3, #10
 800726e:	b29b      	uxth	r3, r3
 8007270:	4313      	orrs	r3, r2
 8007272:	b29a      	uxth	r2, r3
 8007274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	e046      	b.n	8007308 <USB_EPStartXfer+0xb62>
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007288:	f003 031f 	and.w	r3, r3, #31
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <USB_EPStartXfer+0xaf4>
 8007290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007294:	3b01      	subs	r3, #1
 8007296:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800729a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	029b      	lsls	r3, r3, #10
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	4313      	orrs	r3, r2
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	e024      	b.n	8007308 <USB_EPStartXfer+0xb62>
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d11c      	bne.n	8007308 <USB_EPStartXfer+0xb62>
 80072ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072dc:	b29b      	uxth	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072e2:	4413      	add	r3, r2
 80072e4:	673b      	str	r3, [r7, #112]	; 0x70
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	00da      	lsls	r2, r3, #3
 80072f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f6:	4413      	add	r3, r2
 80072f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	b29a      	uxth	r2, r3
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	895b      	ldrh	r3, [r3, #10]
 8007314:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6959      	ldr	r1, [r3, #20]
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	b29b      	uxth	r3, r3
 800732a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800732e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007332:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007336:	6800      	ldr	r0, [r0, #0]
 8007338:	f000 ff15 	bl	8008166 <USB_WritePMA>
 800733c:	e0ca      	b.n	80074d4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d177      	bne.n	800743e <USB_EPStartXfer+0xc98>
 800734e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	67fb      	str	r3, [r7, #124]	; 0x7c
 800735a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007368:	b29b      	uxth	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800736e:	4413      	add	r3, r2
 8007370:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	00da      	lsls	r2, r3, #3
 8007380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007382:	4413      	add	r3, r2
 8007384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007388:	67bb      	str	r3, [r7, #120]	; 0x78
 800738a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007394:	b29a      	uxth	r2, r3
 8007396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <USB_EPStartXfer+0xc12>
 80073a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e073      	b.n	80074a0 <USB_EPStartXfer+0xcfa>
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073bc:	2b3e      	cmp	r3, #62	; 0x3e
 80073be:	d81c      	bhi.n	80073fa <USB_EPStartXfer+0xc54>
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <USB_EPStartXfer+0xc3a>
 80073d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80073da:	3301      	adds	r3, #1
 80073dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	4313      	orrs	r3, r2
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e052      	b.n	80074a0 <USB_EPStartXfer+0xcfa>
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2b00      	cmp	r3, #0
 800740e:	d104      	bne.n	800741a <USB_EPStartXfer+0xc74>
 8007410:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007414:	3b01      	subs	r3, #1
 8007416:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800741a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29b      	uxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	e030      	b.n	80074a0 <USB_EPStartXfer+0xcfa>
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d128      	bne.n	80074a0 <USB_EPStartXfer+0xcfa>
 800744e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800745c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007472:	4413      	add	r3, r2
 8007474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	00da      	lsls	r2, r3, #3
 8007486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800748a:	4413      	add	r3, r2
 800748c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007498:	b29a      	uxth	r2, r3
 800749a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800749e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	891b      	ldrh	r3, [r3, #8]
 80074ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6959      	ldr	r1, [r3, #20]
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074ce:	6800      	ldr	r0, [r0, #0]
 80074d0:	f000 fe49 	bl	8008166 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fa:	817b      	strh	r3, [r7, #10]
 80074fc:	897b      	ldrh	r3, [r7, #10]
 80074fe:	f083 0310 	eor.w	r3, r3, #16
 8007502:	817b      	strh	r3, [r7, #10]
 8007504:	897b      	ldrh	r3, [r7, #10]
 8007506:	f083 0320 	eor.w	r3, r3, #32
 800750a:	817b      	strh	r3, [r7, #10]
 800750c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	897b      	ldrh	r3, [r7, #10]
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]
 800753c:	f000 bcdf 	b.w	8007efe <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	7b1b      	ldrb	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 80bc 	bne.w	80076ca <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	429a      	cmp	r2, r3
 800756c:	d917      	bls.n	800759e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	619a      	str	r2, [r3, #24]
 800759c:	e00e      	b.n	80075bc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800759e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2200      	movs	r2, #0
 80075ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d8:	b29b      	uxth	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075e0:	4413      	add	r3, r2
 80075e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	00da      	lsls	r2, r3, #3
 80075f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075f8:	4413      	add	r3, r2
 80075fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800760e:	b29a      	uxth	r2, r3
 8007610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <USB_EPStartXfer+0xe94>
 800761e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762e:	b29a      	uxth	r2, r3
 8007630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	f000 bc28 	b.w	8007e8a <USB_EPStartXfer+0x16e4>
 800763a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763e:	2b3e      	cmp	r3, #62	; 0x3e
 8007640:	d81f      	bhi.n	8007682 <USB_EPStartXfer+0xedc>
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <USB_EPStartXfer+0xebc>
 8007658:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800765c:	3301      	adds	r3, #1
 800765e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29a      	uxth	r2, r3
 800766a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800766e:	b29b      	uxth	r3, r3
 8007670:	029b      	lsls	r3, r3, #10
 8007672:	b29b      	uxth	r3, r3
 8007674:	4313      	orrs	r3, r2
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	f000 bc04 	b.w	8007e8a <USB_EPStartXfer+0x16e4>
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <USB_EPStartXfer+0xefc>
 8007698:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800769c:	3b01      	subs	r3, #1
 800769e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	029b      	lsls	r3, r3, #10
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e3df      	b.n	8007e8a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	78db      	ldrb	r3, [r3, #3]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	f040 8218 	bne.w	8007b0c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 809d 	bne.w	8007828 <USB_EPStartXfer+0x1082>
 80076ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770a:	b29b      	uxth	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007712:	4413      	add	r3, r2
 8007714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00da      	lsls	r2, r3, #3
 8007726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800772a:	4413      	add	r3, r2
 800772c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007740:	b29a      	uxth	r2, r3
 8007742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10c      	bne.n	8007772 <USB_EPStartXfer+0xfcc>
 8007758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e08f      	b.n	8007892 <USB_EPStartXfer+0x10ec>
 8007772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b3e      	cmp	r3, #62	; 0x3e
 8007780:	d826      	bhi.n	80077d0 <USB_EPStartXfer+0x102a>
 8007782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <USB_EPStartXfer+0x100c>
 80077a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ac:	3301      	adds	r3, #1
 80077ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077be:	b29b      	uxth	r3, r3
 80077c0:	029b      	lsls	r3, r3, #10
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e060      	b.n	8007892 <USB_EPStartXfer+0x10ec>
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <USB_EPStartXfer+0x105a>
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	3b01      	subs	r3, #1
 80077fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29a      	uxth	r2, r3
 8007808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780c:	b29b      	uxth	r3, r3
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	b29b      	uxth	r3, r3
 8007812:	4313      	orrs	r3, r2
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	e034      	b.n	8007892 <USB_EPStartXfer+0x10ec>
 8007828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d12c      	bne.n	8007892 <USB_EPStartXfer+0x10ec>
 8007838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007854:	b29b      	uxth	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800785c:	4413      	add	r3, r2
 800785e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	00da      	lsls	r2, r3, #3
 8007870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007874:	4413      	add	r3, r2
 8007876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800787a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800787e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	b29a      	uxth	r2, r3
 800788c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007890:	801a      	strh	r2, [r3, #0]
 8007892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 809d 	bne.w	80079ec <USB_EPStartXfer+0x1246>
 80078b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	461a      	mov	r2, r3
 80078d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078d6:	4413      	add	r3, r2
 80078d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	00da      	lsls	r2, r3, #3
 80078ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078ee:	4413      	add	r3, r2
 80078f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10c      	bne.n	8007936 <USB_EPStartXfer+0x1190>
 800791c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792c:	b29a      	uxth	r2, r3
 800792e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007932:	801a      	strh	r2, [r3, #0]
 8007934:	e088      	b.n	8007a48 <USB_EPStartXfer+0x12a2>
 8007936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b3e      	cmp	r3, #62	; 0x3e
 8007944:	d826      	bhi.n	8007994 <USB_EPStartXfer+0x11ee>
 8007946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <USB_EPStartXfer+0x11d0>
 800796c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007970:	3301      	adds	r3, #1
 8007972:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29a      	uxth	r2, r3
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007982:	b29b      	uxth	r3, r3
 8007984:	029b      	lsls	r3, r3, #10
 8007986:	b29b      	uxth	r3, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	b29a      	uxth	r2, r3
 800798c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	e059      	b.n	8007a48 <USB_EPStartXfer+0x12a2>
 8007994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <USB_EPStartXfer+0x121e>
 80079ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079be:	3b01      	subs	r3, #1
 80079c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	029b      	lsls	r3, r3, #10
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	4313      	orrs	r3, r2
 80079d8:	b29b      	uxth	r3, r3
 80079da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e8:	801a      	strh	r2, [r3, #0]
 80079ea:	e02d      	b.n	8007a48 <USB_EPStartXfer+0x12a2>
 80079ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d125      	bne.n	8007a48 <USB_EPStartXfer+0x12a2>
 80079fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a12:	4413      	add	r3, r2
 8007a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	00da      	lsls	r2, r3, #3
 8007a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8218 	beq.w	8007e8a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <USB_EPStartXfer+0x12ec>
 8007a86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10d      	bne.n	8007aae <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 81f5 	bne.w	8007e8a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007aa0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f040 81ee 	bne.w	8007e8a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
 8007b0a:	e1be      	b.n	8007e8a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	78db      	ldrb	r3, [r3, #3]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	f040 81b4 	bne.w	8007e86 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d917      	bls.n	8007b6a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	619a      	str	r2, [r3, #24]
 8007b68:	e00e      	b.n	8007b88 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2200      	movs	r2, #0
 8007b86:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 8085 	bne.w	8007ca4 <USB_EPStartXfer+0x14fe>
 8007b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	00da      	lsls	r2, r3, #3
 8007bd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10c      	bne.n	8007c16 <USB_EPStartXfer+0x1470>
 8007bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e077      	b.n	8007d06 <USB_EPStartXfer+0x1560>
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c1c:	d81e      	bhi.n	8007c5c <USB_EPStartXfer+0x14b6>
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <USB_EPStartXfer+0x1498>
 8007c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c38:	3301      	adds	r3, #1
 8007c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	029b      	lsls	r3, r3, #10
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	e054      	b.n	8007d06 <USB_EPStartXfer+0x1560>
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <USB_EPStartXfer+0x14d6>
 8007c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c76:	3b01      	subs	r3, #1
 8007c78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	029b      	lsls	r3, r3, #10
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	e030      	b.n	8007d06 <USB_EPStartXfer+0x1560>
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d128      	bne.n	8007d06 <USB_EPStartXfer+0x1560>
 8007cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd8:	4413      	add	r3, r2
 8007cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	00da      	lsls	r2, r3, #3
 8007cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 8085 	bne.w	8007e30 <USB_EPStartXfer+0x168a>
 8007d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	00da      	lsls	r2, r3, #3
 8007d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d62:	4413      	add	r3, r2
 8007d64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d7e:	801a      	strh	r2, [r3, #0]
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10c      	bne.n	8007da2 <USB_EPStartXfer+0x15fc>
 8007d88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e073      	b.n	8007e8a <USB_EPStartXfer+0x16e4>
 8007da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da6:	2b3e      	cmp	r3, #62	; 0x3e
 8007da8:	d81e      	bhi.n	8007de8 <USB_EPStartXfer+0x1642>
 8007daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <USB_EPStartXfer+0x1624>
 8007dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	e050      	b.n	8007e8a <USB_EPStartXfer+0x16e4>
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df6:	f003 031f 	and.w	r3, r3, #31
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d104      	bne.n	8007e08 <USB_EPStartXfer+0x1662>
 8007dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e02:	3b01      	subs	r3, #1
 8007e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	029b      	lsls	r3, r3, #10
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	e02c      	b.n	8007e8a <USB_EPStartXfer+0x16e4>
 8007e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d124      	bne.n	8007e8a <USB_EPStartXfer+0x16e4>
 8007e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e56:	4413      	add	r3, r2
 8007e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	00da      	lsls	r2, r3, #3
 8007e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e6e:	4413      	add	r3, r2
 8007e70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e001      	b.n	8007e8a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e03a      	b.n	8007f00 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007eb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007eb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ebc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ec0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ec8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b085      	sub	sp, #20
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d020      	beq.n	8007f5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f32:	81bb      	strh	r3, [r7, #12]
 8007f34:	89bb      	ldrh	r3, [r7, #12]
 8007f36:	f083 0310 	eor.w	r3, r3, #16
 8007f3a:	81bb      	strh	r3, [r7, #12]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	441a      	add	r2, r3
 8007f46:	89bb      	ldrh	r3, [r7, #12]
 8007f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	8013      	strh	r3, [r2, #0]
 8007f5c:	e01f      	b.n	8007f9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f74:	81fb      	strh	r3, [r7, #14]
 8007f76:	89fb      	ldrh	r3, [r7, #14]
 8007f78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f7c:	81fb      	strh	r3, [r7, #14]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	441a      	add	r2, r3
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	7b1b      	ldrb	r3, [r3, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f040 809d 	bne.w	80080fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d04c      	beq.n	8008062 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	823b      	strh	r3, [r7, #16]
 8007fd6:	8a3b      	ldrh	r3, [r7, #16]
 8007fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01b      	beq.n	8008018 <USB_EPClearStall+0x6c>
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff6:	81fb      	strh	r3, [r7, #14]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	441a      	add	r2, r3
 8008002:	89fb      	ldrh	r3, [r7, #14]
 8008004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008014:	b29b      	uxth	r3, r3
 8008016:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	78db      	ldrb	r3, [r3, #3]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d06c      	beq.n	80080fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008036:	81bb      	strh	r3, [r7, #12]
 8008038:	89bb      	ldrh	r3, [r7, #12]
 800803a:	f083 0320 	eor.w	r3, r3, #32
 800803e:	81bb      	strh	r3, [r7, #12]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	441a      	add	r2, r3
 800804a:	89bb      	ldrh	r3, [r7, #12]
 800804c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805c:	b29b      	uxth	r3, r3
 800805e:	8013      	strh	r3, [r2, #0]
 8008060:	e04b      	b.n	80080fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	82fb      	strh	r3, [r7, #22]
 8008070:	8afb      	ldrh	r3, [r7, #22]
 8008072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d01b      	beq.n	80080b2 <USB_EPClearStall+0x106>
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008090:	82bb      	strh	r3, [r7, #20]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	441a      	add	r2, r3
 800809c:	8abb      	ldrh	r3, [r7, #20]
 800809e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c8:	827b      	strh	r3, [r7, #18]
 80080ca:	8a7b      	ldrh	r3, [r7, #18]
 80080cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080d0:	827b      	strh	r3, [r7, #18]
 80080d2:	8a7b      	ldrh	r3, [r7, #18]
 80080d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080d8:	827b      	strh	r3, [r7, #18]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	441a      	add	r2, r3
 80080e4:	8a7b      	ldrh	r3, [r7, #18]
 80080e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	371c      	adds	r7, #28
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2280      	movs	r2, #128	; 0x80
 800811e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008154:	b29b      	uxth	r3, r3
 8008156:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008158:	68fb      	ldr	r3, [r7, #12]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008166:	b480      	push	{r7}
 8008168:	b08b      	sub	sp, #44	; 0x2c
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	4611      	mov	r1, r2
 8008172:	461a      	mov	r2, r3
 8008174:	460b      	mov	r3, r1
 8008176:	80fb      	strh	r3, [r7, #6]
 8008178:	4613      	mov	r3, r2
 800817a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800817c:	88bb      	ldrh	r3, [r7, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	085b      	lsrs	r3, r3, #1
 8008182:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008196:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
 800819c:	e01b      	b.n	80081d6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	3301      	adds	r3, #1
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	021b      	lsls	r3, r3, #8
 80081ac:	b21a      	sxth	r2, r3
 80081ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b21b      	sxth	r3, r3
 80081b6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	8a7a      	ldrh	r2, [r7, #18]
 80081bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	3302      	adds	r3, #2
 80081c2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	3b01      	subs	r3, #1
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e0      	bne.n	800819e <USB_WritePMA+0x38>
  }
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	372c      	adds	r7, #44	; 0x2c
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b08b      	sub	sp, #44	; 0x2c
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	4611      	mov	r1, r2
 80081f6:	461a      	mov	r2, r3
 80081f8:	460b      	mov	r3, r1
 80081fa:	80fb      	strh	r3, [r7, #6]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008200:	88bb      	ldrh	r3, [r7, #4]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	b29b      	uxth	r3, r3
 8008206:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008210:	88fa      	ldrh	r2, [r7, #6]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800821a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
 8008220:	e018      	b.n	8008254 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	3302      	adds	r3, #2
 800822e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	3301      	adds	r3, #1
 800823c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	0a1b      	lsrs	r3, r3, #8
 8008242:	b2da      	uxtb	r2, r3
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	3301      	adds	r3, #1
 800824c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	3b01      	subs	r3, #1
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e3      	bne.n	8008222 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800825a:	88bb      	ldrh	r3, [r7, #4]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	b2da      	uxtb	r2, r3
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	701a      	strb	r2, [r3, #0]
  }
}
 8008276:	bf00      	nop
 8008278:	372c      	adds	r7, #44	; 0x2c
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	460b      	mov	r3, r1
 800828c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7c1b      	ldrb	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d115      	bne.n	80082c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800829a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800829e:	2202      	movs	r2, #2
 80082a0:	2181      	movs	r1, #129	; 0x81
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fe97 	bl	8009fd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b2:	2202      	movs	r2, #2
 80082b4:	2101      	movs	r1, #1
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 fe8d 	bl	8009fd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80082c4:	e012      	b.n	80082ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	2202      	movs	r2, #2
 80082ca:	2181      	movs	r1, #129	; 0x81
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fe82 	bl	8009fd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082d8:	2340      	movs	r3, #64	; 0x40
 80082da:	2202      	movs	r2, #2
 80082dc:	2101      	movs	r1, #1
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fe79 	bl	8009fd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082ec:	2308      	movs	r3, #8
 80082ee:	2203      	movs	r2, #3
 80082f0:	2182      	movs	r1, #130	; 0x82
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fe6f 	bl	8009fd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008302:	f001 ff8f 	bl	800a224 <USBD_static_malloc>
 8008306:	4602      	mov	r2, r0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
 800831c:	e026      	b.n	800836c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008324:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2200      	movs	r2, #0
 800833c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7c1b      	ldrb	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800834e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008352:	2101      	movs	r1, #1
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 ff2f 	bl	800a1b8 <USBD_LL_PrepareReceive>
 800835a:	e007      	b.n	800836c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	2101      	movs	r1, #1
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 ff26 	bl	800a1b8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	460b      	mov	r3, r1
 8008380:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008386:	2181      	movs	r1, #129	; 0x81
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 fe4a 	bl	800a022 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008394:	2101      	movs	r1, #1
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fe43 	bl	800a022 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083a4:	2182      	movs	r1, #130	; 0x82
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fe3b 	bl	800a022 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00e      	beq.n	80083da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 ff37 	bl	800a240 <USBD_static_free>
    pdev->pClassData = NULL;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800840a:	2b00      	cmp	r3, #0
 800840c:	d039      	beq.n	8008482 <USBD_CDC_Setup+0x9e>
 800840e:	2b20      	cmp	r3, #32
 8008410:	d17f      	bne.n	8008512 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	88db      	ldrh	r3, [r3, #6]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d029      	beq.n	800846e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b25b      	sxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	da11      	bge.n	8008448 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008430:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	88d2      	ldrh	r2, [r2, #6]
 8008436:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008438:	6939      	ldr	r1, [r7, #16]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	88db      	ldrh	r3, [r3, #6]
 800843e:	461a      	mov	r2, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 fa14 	bl	800986e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008446:	e06b      	b.n	8008520 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	785a      	ldrb	r2, [r3, #1]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	88db      	ldrh	r3, [r3, #6]
 8008456:	b2da      	uxtb	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800845e:	6939      	ldr	r1, [r7, #16]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	88db      	ldrh	r3, [r3, #6]
 8008464:	461a      	mov	r2, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fa2f 	bl	80098ca <USBD_CtlPrepareRx>
      break;
 800846c:	e058      	b.n	8008520 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	7850      	ldrb	r0, [r2, #1]
 800847a:	2200      	movs	r2, #0
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	4798      	blx	r3
      break;
 8008480:	e04e      	b.n	8008520 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	2b0b      	cmp	r3, #11
 8008488:	d02e      	beq.n	80084e8 <USBD_CDC_Setup+0x104>
 800848a:	2b0b      	cmp	r3, #11
 800848c:	dc38      	bgt.n	8008500 <USBD_CDC_Setup+0x11c>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <USBD_CDC_Setup+0xb4>
 8008492:	2b0a      	cmp	r3, #10
 8008494:	d014      	beq.n	80084c0 <USBD_CDC_Setup+0xdc>
 8008496:	e033      	b.n	8008500 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d107      	bne.n	80084b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084a2:	f107 030c 	add.w	r3, r7, #12
 80084a6:	2202      	movs	r2, #2
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 f9df 	bl	800986e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084b0:	e02e      	b.n	8008510 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 f96f 	bl	8009798 <USBD_CtlError>
            ret = USBD_FAIL;
 80084ba:	2302      	movs	r3, #2
 80084bc:	75fb      	strb	r3, [r7, #23]
          break;
 80084be:	e027      	b.n	8008510 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d107      	bne.n	80084da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ca:	f107 030f 	add.w	r3, r7, #15
 80084ce:	2201      	movs	r2, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 f9cb 	bl	800986e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084d8:	e01a      	b.n	8008510 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 f95b 	bl	8009798 <USBD_CtlError>
            ret = USBD_FAIL;
 80084e2:	2302      	movs	r3, #2
 80084e4:	75fb      	strb	r3, [r7, #23]
          break;
 80084e6:	e013      	b.n	8008510 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d00d      	beq.n	800850e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 f94f 	bl	8009798 <USBD_CtlError>
            ret = USBD_FAIL;
 80084fa:	2302      	movs	r3, #2
 80084fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084fe:	e006      	b.n	800850e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 f948 	bl	8009798 <USBD_CtlError>
          ret = USBD_FAIL;
 8008508:	2302      	movs	r3, #2
 800850a:	75fb      	strb	r3, [r7, #23]
          break;
 800850c:	e000      	b.n	8008510 <USBD_CDC_Setup+0x12c>
          break;
 800850e:	bf00      	nop
      }
      break;
 8008510:	e006      	b.n	8008520 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 f93f 	bl	8009798 <USBD_CtlError>
      ret = USBD_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	75fb      	strb	r3, [r7, #23]
      break;
 800851e:	bf00      	nop
  }

  return ret;
 8008520:	7dfb      	ldrb	r3, [r7, #23]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008544:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d03a      	beq.n	80085c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	331c      	adds	r3, #28
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d029      	beq.n	80085ba <USBD_CDC_DataIn+0x90>
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	331c      	adds	r3, #28
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	78f9      	ldrb	r1, [r7, #3]
 800857a:	68b8      	ldr	r0, [r7, #8]
 800857c:	460b      	mov	r3, r1
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	4403      	add	r3, r0
 8008586:	3320      	adds	r3, #32
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	fbb2 f1f3 	udiv	r1, r2, r3
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d110      	bne.n	80085ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008598:	78fa      	ldrb	r2, [r7, #3]
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	331c      	adds	r3, #28
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085ac:	78f9      	ldrb	r1, [r7, #3]
 80085ae:	2300      	movs	r3, #0
 80085b0:	2200      	movs	r2, #0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fddd 	bl	800a172 <USBD_LL_Transmit>
 80085b8:	e003      	b.n	80085c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e000      	b.n	80085c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80085c6:	2302      	movs	r3, #2
  }
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 fe08 	bl	800a1fe <USBD_LL_GetRxDataSize>
 80085ee:	4602      	mov	r2, r0
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00d      	beq.n	800861c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008614:	4611      	mov	r1, r2
 8008616:	4798      	blx	r3

    return USBD_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	e000      	b.n	800861e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800861c:	2302      	movs	r3, #2
  }
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008634:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800863c:	2b00      	cmp	r3, #0
 800863e:	d015      	beq.n	800866c <USBD_CDC_EP0_RxReady+0x46>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008646:	2bff      	cmp	r3, #255	; 0xff
 8008648:	d010      	beq.n	800866c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008658:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008660:	b292      	uxth	r2, r2
 8008662:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	22ff      	movs	r2, #255	; 0xff
 8008668:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2243      	movs	r2, #67	; 0x43
 8008684:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008686:	4b03      	ldr	r3, [pc, #12]	; (8008694 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	20000098 	.word	0x20000098

08008698 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2243      	movs	r2, #67	; 0x43
 80086a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80086a6:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	20000054 	.word	0x20000054

080086b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2243      	movs	r2, #67	; 0x43
 80086c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086c6:	4b03      	ldr	r3, [pc, #12]	; (80086d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	200000dc 	.word	0x200000dc

080086d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	220a      	movs	r2, #10
 80086e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80086e6:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20000010 	.word	0x20000010

080086f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008702:	2302      	movs	r3, #2
 8008704:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008726:	b480      	push	{r7}
 8008728:	b087      	sub	sp, #28
 800872a:	af00      	add	r7, sp, #0
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	4613      	mov	r3, r2
 8008732:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008790:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01c      	beq.n	80087d6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d115      	bne.n	80087d2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2181      	movs	r1, #129	; 0x81
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fcd2 	bl	800a172 <USBD_LL_Transmit>

      return USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e002      	b.n	80087d8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80087d6:	2302      	movs	r3, #2
  }
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d017      	beq.n	800882a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7c1b      	ldrb	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800880c:	2101      	movs	r1, #1
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fcd2 	bl	800a1b8 <USBD_LL_PrepareReceive>
 8008814:	e007      	b.n	8008826 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	2101      	movs	r1, #1
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fcc9 	bl	800a1b8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	e000      	b.n	800882c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800882a:	2302      	movs	r3, #2
  }
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008848:	2302      	movs	r3, #2
 800884a:	e01a      	b.n	8008882 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	79fa      	ldrb	r2, [r7, #7]
 8008878:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 fb34 	bl	8009ee8 <USBD_LL_Init>

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d006      	beq.n	80088ac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]
 80088aa:	e001      	b.n	80088b0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088ac:	2302      	movs	r3, #2
 80088ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fb6a 	bl	8009fa0 <USBD_LL_Start>

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088f8:	2302      	movs	r3, #2
 80088fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00c      	beq.n	8008920 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	4611      	mov	r1, r2
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3

  return USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fedb 	bl	800971e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008984:	f003 031f 	and.w	r3, r3, #31
 8008988:	2b02      	cmp	r3, #2
 800898a:	d016      	beq.n	80089ba <USBD_LL_SetupStage+0x6a>
 800898c:	2b02      	cmp	r3, #2
 800898e:	d81c      	bhi.n	80089ca <USBD_LL_SetupStage+0x7a>
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <USBD_LL_SetupStage+0x4a>
 8008994:	2b01      	cmp	r3, #1
 8008996:	d008      	beq.n	80089aa <USBD_LL_SetupStage+0x5a>
 8008998:	e017      	b.n	80089ca <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f9ce 	bl	8008d44 <USBD_StdDevReq>
      break;
 80089a8:	e01a      	b.n	80089e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa30 	bl	8008e18 <USBD_StdItfReq>
      break;
 80089b8:	e012      	b.n	80089e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa70 	bl	8008ea8 <USBD_StdEPReq>
      break;
 80089c8:	e00a      	b.n	80089e0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80089d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fb41 	bl	800a060 <USBD_LL_StallEP>
      break;
 80089de:	bf00      	nop
  }

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	460b      	mov	r3, r1
 80089f4:	607a      	str	r2, [r7, #4]
 80089f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d14b      	bne.n	8008a96 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a04:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d134      	bne.n	8008a7a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d919      	bls.n	8008a50 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	1ad2      	subs	r2, r2, r3
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d203      	bcs.n	8008a3e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	e002      	b.n	8008a44 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 ff5c 	bl	8009906 <USBD_CtlContinueRx>
 8008a4e:	e038      	b.n	8008ac2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d105      	bne.n	8008a72 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 ff59 	bl	800992a <USBD_CtlSendStatus>
 8008a78:	e023      	b.n	8008ac2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a80:	2b05      	cmp	r3, #5
 8008a82:	d11e      	bne.n	8008ac2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f001 fae6 	bl	800a060 <USBD_LL_StallEP>
 8008a94:	e015      	b.n	8008ac2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00d      	beq.n	8008abe <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d108      	bne.n	8008abe <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	7afa      	ldrb	r2, [r7, #11]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	4798      	blx	r3
 8008abc:	e001      	b.n	8008ac2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e000      	b.n	8008ac4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d17f      	bne.n	8008be0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3314      	adds	r3, #20
 8008ae4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d15c      	bne.n	8008baa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d915      	bls.n	8008b28 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	461a      	mov	r2, r3
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 fec6 	bl	80098a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fb49 	bl	800a1b8 <USBD_LL_PrepareReceive>
 8008b26:	e04e      	b.n	8008bc6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	6912      	ldr	r2, [r2, #16]
 8008b30:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b34:	fb01 f202 	mul.w	r2, r1, r2
 8008b38:	1a9b      	subs	r3, r3, r2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d11c      	bne.n	8008b78 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d316      	bcc.n	8008b78 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	689a      	ldr	r2, [r3, #8]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d20f      	bcs.n	8008b78 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fea2 	bl	80098a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2100      	movs	r1, #0
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f001 fb21 	bl	800a1b8 <USBD_LL_PrepareReceive>
 8008b76:	e026      	b.n	8008bc6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d105      	bne.n	8008b9a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b9a:	2180      	movs	r1, #128	; 0x80
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f001 fa5f 	bl	800a060 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fed4 	bl	8009950 <USBD_CtlReceiveStatus>
 8008ba8:	e00d      	b.n	8008bc6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	d004      	beq.n	8008bbe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d103      	bne.n	8008bc6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bbe:	2180      	movs	r1, #128	; 0x80
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f001 fa4d 	bl	800a060 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d11d      	bne.n	8008c0c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fe80 	bl	80088d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008bde:	e015      	b.n	8008c0c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00d      	beq.n	8008c08 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d108      	bne.n	8008c08 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	7afa      	ldrb	r2, [r7, #11]
 8008c00:	4611      	mov	r1, r2
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	4798      	blx	r3
 8008c06:	e001      	b.n	8008c0c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e000      	b.n	8008c0e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c1e:	2340      	movs	r3, #64	; 0x40
 8008c20:	2200      	movs	r2, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 f9d6 	bl	8009fd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2240      	movs	r2, #64	; 0x40
 8008c36:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c3a:	2340      	movs	r3, #64	; 0x40
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2180      	movs	r1, #128	; 0x80
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 f9c8 	bl	8009fd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2240      	movs	r2, #64	; 0x40
 8008c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d009      	beq.n	8008c8e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6852      	ldr	r2, [r2, #4]
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	4611      	mov	r1, r2
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	78fa      	ldrb	r2, [r7, #3]
 8008ca8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2204      	movs	r2, #4
 8008cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d105      	bne.n	8008d00 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d10b      	bne.n	8008d38 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d5a:	2b40      	cmp	r3, #64	; 0x40
 8008d5c:	d005      	beq.n	8008d6a <USBD_StdDevReq+0x26>
 8008d5e:	2b40      	cmp	r3, #64	; 0x40
 8008d60:	d84f      	bhi.n	8008e02 <USBD_StdDevReq+0xbe>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <USBD_StdDevReq+0x36>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d14b      	bne.n	8008e02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
      break;
 8008d78:	e048      	b.n	8008e0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b09      	cmp	r3, #9
 8008d80:	d839      	bhi.n	8008df6 <USBD_StdDevReq+0xb2>
 8008d82:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <USBD_StdDevReq+0x44>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008ded 	.word	0x08008ded
 8008d90:	08008df7 	.word	0x08008df7
 8008d94:	08008de3 	.word	0x08008de3
 8008d98:	08008df7 	.word	0x08008df7
 8008d9c:	08008dbb 	.word	0x08008dbb
 8008da0:	08008db1 	.word	0x08008db1
 8008da4:	08008df7 	.word	0x08008df7
 8008da8:	08008dcf 	.word	0x08008dcf
 8008dac:	08008dc5 	.word	0x08008dc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f9dc 	bl	8009170 <USBD_GetDescriptor>
          break;
 8008db8:	e022      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb3f 	bl	8009440 <USBD_SetAddress>
          break;
 8008dc2:	e01d      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fb7e 	bl	80094c8 <USBD_SetConfig>
          break;
 8008dcc:	e018      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fc07 	bl	80095e4 <USBD_GetConfig>
          break;
 8008dd6:	e013      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fc37 	bl	800964e <USBD_GetStatus>
          break;
 8008de0:	e00e      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fc65 	bl	80096b4 <USBD_SetFeature>
          break;
 8008dea:	e009      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fc74 	bl	80096dc <USBD_ClrFeature>
          break;
 8008df4:	e004      	b.n	8008e00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fccd 	bl	8009798 <USBD_CtlError>
          break;
 8008dfe:	bf00      	nop
      }
      break;
 8008e00:	e004      	b.n	8008e0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fcc7 	bl	8009798 <USBD_CtlError>
      break;
 8008e0a:	bf00      	nop
  }

  return ret;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop

08008e18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e2e:	2b40      	cmp	r3, #64	; 0x40
 8008e30:	d005      	beq.n	8008e3e <USBD_StdItfReq+0x26>
 8008e32:	2b40      	cmp	r3, #64	; 0x40
 8008e34:	d82e      	bhi.n	8008e94 <USBD_StdItfReq+0x7c>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <USBD_StdItfReq+0x26>
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	d12a      	bne.n	8008e94 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e44:	3b01      	subs	r3, #1
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d81d      	bhi.n	8008e86 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	889b      	ldrh	r3, [r3, #4]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d813      	bhi.n	8008e7c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	88db      	ldrh	r3, [r3, #6]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d110      	bne.n	8008e90 <USBD_StdItfReq+0x78>
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10d      	bne.n	8008e90 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fd58 	bl	800992a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e7a:	e009      	b.n	8008e90 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fc8a 	bl	8009798 <USBD_CtlError>
          break;
 8008e84:	e004      	b.n	8008e90 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fc85 	bl	8009798 <USBD_CtlError>
          break;
 8008e8e:	e000      	b.n	8008e92 <USBD_StdItfReq+0x7a>
          break;
 8008e90:	bf00      	nop
      }
      break;
 8008e92:	e004      	b.n	8008e9e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fc7e 	bl	8009798 <USBD_CtlError>
      break;
 8008e9c:	bf00      	nop
  }

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	889b      	ldrh	r3, [r3, #4]
 8008eba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d007      	beq.n	8008ed8 <USBD_StdEPReq+0x30>
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	f200 8146 	bhi.w	800915a <USBD_StdEPReq+0x2b2>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <USBD_StdEPReq+0x40>
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	f040 8141 	bne.w	800915a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
      break;
 8008ee6:	e13d      	b.n	8009164 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d10a      	bne.n	8008f0a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	e12d      	b.n	8009166 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d007      	beq.n	8008f22 <USBD_StdEPReq+0x7a>
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	f300 811b 	bgt.w	800914e <USBD_StdEPReq+0x2a6>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d072      	beq.n	8009002 <USBD_StdEPReq+0x15a>
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d03a      	beq.n	8008f96 <USBD_StdEPReq+0xee>
 8008f20:	e115      	b.n	800914e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d002      	beq.n	8008f32 <USBD_StdEPReq+0x8a>
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d015      	beq.n	8008f5c <USBD_StdEPReq+0xb4>
 8008f30:	e02b      	b.n	8008f8a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00c      	beq.n	8008f52 <USBD_StdEPReq+0xaa>
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b80      	cmp	r3, #128	; 0x80
 8008f3c:	d009      	beq.n	8008f52 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f88c 	bl	800a060 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f48:	2180      	movs	r1, #128	; 0x80
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 f888 	bl	800a060 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f50:	e020      	b.n	8008f94 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc1f 	bl	8009798 <USBD_CtlError>
              break;
 8008f5a:	e01b      	b.n	8008f94 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10e      	bne.n	8008f82 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00b      	beq.n	8008f82 <USBD_StdEPReq+0xda>
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d008      	beq.n	8008f82 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	88db      	ldrh	r3, [r3, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d104      	bne.n	8008f82 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f86f 	bl	800a060 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fcd1 	bl	800992a <USBD_CtlSendStatus>

              break;
 8008f88:	e004      	b.n	8008f94 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc03 	bl	8009798 <USBD_CtlError>
              break;
 8008f92:	bf00      	nop
          }
          break;
 8008f94:	e0e0      	b.n	8009158 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d002      	beq.n	8008fa6 <USBD_StdEPReq+0xfe>
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d015      	beq.n	8008fd0 <USBD_StdEPReq+0x128>
 8008fa4:	e026      	b.n	8008ff4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00c      	beq.n	8008fc6 <USBD_StdEPReq+0x11e>
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b80      	cmp	r3, #128	; 0x80
 8008fb0:	d009      	beq.n	8008fc6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f852 	bl	800a060 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008fbc:	2180      	movs	r1, #128	; 0x80
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f84e 	bl	800a060 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fc4:	e01c      	b.n	8009000 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fbe5 	bl	8009798 <USBD_CtlError>
              break;
 8008fce:	e017      	b.n	8009000 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	885b      	ldrh	r3, [r3, #2]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d112      	bne.n	8008ffe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f001 f859 	bl	800a09e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fc9c 	bl	800992a <USBD_CtlSendStatus>
              }
              break;
 8008ff2:	e004      	b.n	8008ffe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fbce 	bl	8009798 <USBD_CtlError>
              break;
 8008ffc:	e000      	b.n	8009000 <USBD_StdEPReq+0x158>
              break;
 8008ffe:	bf00      	nop
          }
          break;
 8009000:	e0aa      	b.n	8009158 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009008:	2b02      	cmp	r3, #2
 800900a:	d002      	beq.n	8009012 <USBD_StdEPReq+0x16a>
 800900c:	2b03      	cmp	r3, #3
 800900e:	d032      	beq.n	8009076 <USBD_StdEPReq+0x1ce>
 8009010:	e097      	b.n	8009142 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d007      	beq.n	8009028 <USBD_StdEPReq+0x180>
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b80      	cmp	r3, #128	; 0x80
 800901c:	d004      	beq.n	8009028 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fbb9 	bl	8009798 <USBD_CtlError>
                break;
 8009026:	e091      	b.n	800914c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800902c:	2b00      	cmp	r3, #0
 800902e:	da0b      	bge.n	8009048 <USBD_StdEPReq+0x1a0>
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	3310      	adds	r3, #16
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	3304      	adds	r3, #4
 8009046:	e00b      	b.n	8009060 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800904e:	4613      	mov	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	3304      	adds	r3, #4
 8009060:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2202      	movs	r2, #2
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fbfd 	bl	800986e <USBD_CtlSendData>
              break;
 8009074:	e06a      	b.n	800914c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	da11      	bge.n	80090a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	f003 020f 	and.w	r2, r3, #15
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	3318      	adds	r3, #24
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d117      	bne.n	80090c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fb7c 	bl	8009798 <USBD_CtlError>
                  break;
 80090a0:	e054      	b.n	800914c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	f003 020f 	and.w	r2, r3, #15
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fb69 	bl	8009798 <USBD_CtlError>
                  break;
 80090c6:	e041      	b.n	800914c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da0b      	bge.n	80090e8 <USBD_StdEPReq+0x240>
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	3310      	adds	r3, #16
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	4413      	add	r3, r2
 80090e4:	3304      	adds	r3, #4
 80090e6:	e00b      	b.n	8009100 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	3304      	adds	r3, #4
 8009100:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <USBD_StdEPReq+0x266>
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b80      	cmp	r3, #128	; 0x80
 800910c:	d103      	bne.n	8009116 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e00e      	b.n	8009134 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 ffde 	bl	800a0dc <USBD_LL_IsStallEP>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2201      	movs	r2, #1
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	e002      	b.n	8009134 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2202      	movs	r2, #2
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fb97 	bl	800986e <USBD_CtlSendData>
              break;
 8009140:	e004      	b.n	800914c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fb27 	bl	8009798 <USBD_CtlError>
              break;
 800914a:	bf00      	nop
          }
          break;
 800914c:	e004      	b.n	8009158 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fb21 	bl	8009798 <USBD_CtlError>
          break;
 8009156:	bf00      	nop
      }
      break;
 8009158:	e004      	b.n	8009164 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fb1b 	bl	8009798 <USBD_CtlError>
      break;
 8009162:	bf00      	nop
  }

  return ret;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	885b      	ldrh	r3, [r3, #2]
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	b29b      	uxth	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	2b06      	cmp	r3, #6
 8009192:	f200 8128 	bhi.w	80093e6 <USBD_GetDescriptor+0x276>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <USBD_GetDescriptor+0x2c>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	08009211 	.word	0x08009211
 80091a8:	080093e7 	.word	0x080093e7
 80091ac:	080093e7 	.word	0x080093e7
 80091b0:	08009387 	.word	0x08009387
 80091b4:	080093b3 	.word	0x080093b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7c12      	ldrb	r2, [r2, #16]
 80091c4:	f107 0108 	add.w	r1, r7, #8
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	60f8      	str	r0, [r7, #12]
      break;
 80091ce:	e112      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7c1b      	ldrb	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	f107 0208 	add.w	r2, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	2202      	movs	r2, #2
 80091f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091f2:	e100      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	f107 0208 	add.w	r2, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	2202      	movs	r2, #2
 800920c:	701a      	strb	r2, [r3, #0]
      break;
 800920e:	e0f2      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	885b      	ldrh	r3, [r3, #2]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b05      	cmp	r3, #5
 8009218:	f200 80ac 	bhi.w	8009374 <USBD_GetDescriptor+0x204>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <USBD_GetDescriptor+0xb4>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	0800923d 	.word	0x0800923d
 8009228:	08009271 	.word	0x08009271
 800922c:	080092a5 	.word	0x080092a5
 8009230:	080092d9 	.word	0x080092d9
 8009234:	0800930d 	.word	0x0800930d
 8009238:	08009341 	.word	0x08009341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	7c12      	ldrb	r2, [r2, #16]
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800925e:	e091      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fa98 	bl	8009798 <USBD_CtlError>
            err++;
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	3301      	adds	r3, #1
 800926c:	72fb      	strb	r3, [r7, #11]
          break;
 800926e:	e089      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	7c12      	ldrb	r2, [r2, #16]
 8009288:	f107 0108 	add.w	r1, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009292:	e077      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa7e 	bl	8009798 <USBD_CtlError>
            err++;
 800929c:	7afb      	ldrb	r3, [r7, #11]
 800929e:	3301      	adds	r3, #1
 80092a0:	72fb      	strb	r3, [r7, #11]
          break;
 80092a2:	e06f      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7c12      	ldrb	r2, [r2, #16]
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c6:	e05d      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa64 	bl	8009798 <USBD_CtlError>
            err++;
 80092d0:	7afb      	ldrb	r3, [r7, #11]
 80092d2:	3301      	adds	r3, #1
 80092d4:	72fb      	strb	r3, [r7, #11]
          break;
 80092d6:	e055      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	7c12      	ldrb	r2, [r2, #16]
 80092f0:	f107 0108 	add.w	r1, r7, #8
 80092f4:	4610      	mov	r0, r2
 80092f6:	4798      	blx	r3
 80092f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fa:	e043      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa4a 	bl	8009798 <USBD_CtlError>
            err++;
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	3301      	adds	r3, #1
 8009308:	72fb      	strb	r3, [r7, #11]
          break;
 800930a:	e03b      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	7c12      	ldrb	r2, [r2, #16]
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
 800932c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932e:	e029      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa30 	bl	8009798 <USBD_CtlError>
            err++;
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	3301      	adds	r3, #1
 800933c:	72fb      	strb	r3, [r7, #11]
          break;
 800933e:	e021      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7c12      	ldrb	r2, [r2, #16]
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009362:	e00f      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa16 	bl	8009798 <USBD_CtlError>
            err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
          break;
 8009372:	e007      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa0e 	bl	8009798 <USBD_CtlError>
          err++;
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	3301      	adds	r3, #1
 8009380:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009382:	e038      	b.n	80093f6 <USBD_GetDescriptor+0x286>
 8009384:	e037      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7c1b      	ldrb	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009396:	f107 0208 	add.w	r2, r7, #8
 800939a:	4610      	mov	r0, r2
 800939c:	4798      	blx	r3
 800939e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093a0:	e029      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f9f7 	bl	8009798 <USBD_CtlError>
        err++;
 80093aa:	7afb      	ldrb	r3, [r7, #11]
 80093ac:	3301      	adds	r3, #1
 80093ae:	72fb      	strb	r3, [r7, #11]
      break;
 80093b0:	e021      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10d      	bne.n	80093d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	f107 0208 	add.w	r2, r7, #8
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	2207      	movs	r2, #7
 80093d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093d4:	e00f      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f9dd 	bl	8009798 <USBD_CtlError>
        err++;
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	3301      	adds	r3, #1
 80093e2:	72fb      	strb	r3, [r7, #11]
      break;
 80093e4:	e007      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f9d5 	bl	8009798 <USBD_CtlError>
      err++;
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	3301      	adds	r3, #1
 80093f2:	72fb      	strb	r3, [r7, #11]
      break;
 80093f4:	bf00      	nop
  }

  if (err != 0U)
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d11c      	bne.n	8009436 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80093fc:	893b      	ldrh	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d011      	beq.n	8009426 <USBD_GetDescriptor+0x2b6>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00d      	beq.n	8009426 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88da      	ldrh	r2, [r3, #6]
 800940e:	893b      	ldrh	r3, [r7, #8]
 8009410:	4293      	cmp	r3, r2
 8009412:	bf28      	it	cs
 8009414:	4613      	movcs	r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800941a:	893b      	ldrh	r3, [r7, #8]
 800941c:	461a      	mov	r2, r3
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa24 	bl	800986e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	88db      	ldrh	r3, [r3, #6]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa7b 	bl	800992a <USBD_CtlSendStatus>
 8009434:	e000      	b.n	8009438 <USBD_GetDescriptor+0x2c8>
    return;
 8009436:	bf00      	nop
    }
  }
}
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop

08009440 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	889b      	ldrh	r3, [r3, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d130      	bne.n	80094b4 <USBD_SetAddress+0x74>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	88db      	ldrh	r3, [r3, #6]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d12c      	bne.n	80094b4 <USBD_SetAddress+0x74>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	885b      	ldrh	r3, [r3, #2]
 800945e:	2b7f      	cmp	r3, #127	; 0x7f
 8009460:	d828      	bhi.n	80094b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	885b      	ldrh	r3, [r3, #2]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009474:	2b03      	cmp	r3, #3
 8009476:	d104      	bne.n	8009482 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f98c 	bl	8009798 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009480:	e01d      	b.n	80094be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7bfa      	ldrb	r2, [r7, #15]
 8009486:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fe50 	bl	800a134 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fa48 	bl	800992a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2202      	movs	r2, #2
 80094a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a8:	e009      	b.n	80094be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	e004      	b.n	80094be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f96e 	bl	8009798 <USBD_CtlError>
  }
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	885b      	ldrh	r3, [r3, #2]
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	4b41      	ldr	r3, [pc, #260]	; (80095e0 <USBD_SetConfig+0x118>)
 80094da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094dc:	4b40      	ldr	r3, [pc, #256]	; (80095e0 <USBD_SetConfig+0x118>)
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d904      	bls.n	80094ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f956 	bl	8009798 <USBD_CtlError>
 80094ec:	e075      	b.n	80095da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d002      	beq.n	80094fe <USBD_SetConfig+0x36>
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d023      	beq.n	8009544 <USBD_SetConfig+0x7c>
 80094fc:	e062      	b.n	80095c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80094fe:	4b38      	ldr	r3, [pc, #224]	; (80095e0 <USBD_SetConfig+0x118>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d01a      	beq.n	800953c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009506:	4b36      	ldr	r3, [pc, #216]	; (80095e0 <USBD_SetConfig+0x118>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2203      	movs	r2, #3
 8009514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009518:	4b31      	ldr	r3, [pc, #196]	; (80095e0 <USBD_SetConfig+0x118>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff f9e4 	bl	80088ec <USBD_SetClassConfig>
 8009524:	4603      	mov	r3, r0
 8009526:	2b02      	cmp	r3, #2
 8009528:	d104      	bne.n	8009534 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f933 	bl	8009798 <USBD_CtlError>
            return;
 8009532:	e052      	b.n	80095da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f9f8 	bl	800992a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800953a:	e04e      	b.n	80095da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f9f4 	bl	800992a <USBD_CtlSendStatus>
        break;
 8009542:	e04a      	b.n	80095da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009544:	4b26      	ldr	r3, [pc, #152]	; (80095e0 <USBD_SetConfig+0x118>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d112      	bne.n	8009572 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009554:	4b22      	ldr	r3, [pc, #136]	; (80095e0 <USBD_SetConfig+0x118>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800955e:	4b20      	ldr	r3, [pc, #128]	; (80095e0 <USBD_SetConfig+0x118>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff f9e0 	bl	800892a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f9dd 	bl	800992a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009570:	e033      	b.n	80095da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009572:	4b1b      	ldr	r3, [pc, #108]	; (80095e0 <USBD_SetConfig+0x118>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	429a      	cmp	r2, r3
 800957e:	d01d      	beq.n	80095bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff f9ce 	bl	800892a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800958e:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <USBD_SetConfig+0x118>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009598:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <USBD_SetConfig+0x118>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7ff f9a4 	bl	80088ec <USBD_SetClassConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d104      	bne.n	80095b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f8f3 	bl	8009798 <USBD_CtlError>
            return;
 80095b2:	e012      	b.n	80095da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f9b8 	bl	800992a <USBD_CtlSendStatus>
        break;
 80095ba:	e00e      	b.n	80095da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f9b4 	bl	800992a <USBD_CtlSendStatus>
        break;
 80095c2:	e00a      	b.n	80095da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f8e6 	bl	8009798 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095cc:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <USBD_SetConfig+0x118>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff f9a9 	bl	800892a <USBD_ClrClassConfig>
        break;
 80095d8:	bf00      	nop
    }
  }
}
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20000c68 	.word	0x20000c68

080095e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	88db      	ldrh	r3, [r3, #6]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d004      	beq.n	8009600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f8cd 	bl	8009798 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095fe:	e022      	b.n	8009646 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009606:	2b02      	cmp	r3, #2
 8009608:	dc02      	bgt.n	8009610 <USBD_GetConfig+0x2c>
 800960a:	2b00      	cmp	r3, #0
 800960c:	dc03      	bgt.n	8009616 <USBD_GetConfig+0x32>
 800960e:	e015      	b.n	800963c <USBD_GetConfig+0x58>
 8009610:	2b03      	cmp	r3, #3
 8009612:	d00b      	beq.n	800962c <USBD_GetConfig+0x48>
 8009614:	e012      	b.n	800963c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3308      	adds	r3, #8
 8009620:	2201      	movs	r2, #1
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f922 	bl	800986e <USBD_CtlSendData>
        break;
 800962a:	e00c      	b.n	8009646 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	2201      	movs	r2, #1
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f91a 	bl	800986e <USBD_CtlSendData>
        break;
 800963a:	e004      	b.n	8009646 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f8aa 	bl	8009798 <USBD_CtlError>
        break;
 8009644:	bf00      	nop
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800965e:	3b01      	subs	r3, #1
 8009660:	2b02      	cmp	r3, #2
 8009662:	d81e      	bhi.n	80096a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	88db      	ldrh	r3, [r3, #6]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d004      	beq.n	8009676 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f892 	bl	8009798 <USBD_CtlError>
        break;
 8009674:	e01a      	b.n	80096ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f043 0202 	orr.w	r2, r3, #2
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	330c      	adds	r3, #12
 8009696:	2202      	movs	r2, #2
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f8e7 	bl	800986e <USBD_CtlSendData>
      break;
 80096a0:	e004      	b.n	80096ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f877 	bl	8009798 <USBD_CtlError>
      break;
 80096aa:	bf00      	nop
  }
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	885b      	ldrh	r3, [r3, #2]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d106      	bne.n	80096d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f92b 	bl	800992a <USBD_CtlSendStatus>
  }
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ec:	3b01      	subs	r3, #1
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d80b      	bhi.n	800970a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	885b      	ldrh	r3, [r3, #2]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10c      	bne.n	8009714 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f911 	bl	800992a <USBD_CtlSendStatus>
      }
      break;
 8009708:	e004      	b.n	8009714 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f843 	bl	8009798 <USBD_CtlError>
      break;
 8009712:	e000      	b.n	8009716 <USBD_ClrFeature+0x3a>
      break;
 8009714:	bf00      	nop
  }
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	785a      	ldrb	r2, [r3, #1]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	3302      	adds	r3, #2
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	b29a      	uxth	r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3303      	adds	r3, #3
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b29b      	uxth	r3, r3
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	b29b      	uxth	r3, r3
 800974c:	4413      	add	r3, r2
 800974e:	b29a      	uxth	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	3304      	adds	r3, #4
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	b29a      	uxth	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3305      	adds	r3, #5
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b29b      	uxth	r3, r3
 8009764:	021b      	lsls	r3, r3, #8
 8009766:	b29b      	uxth	r3, r3
 8009768:	4413      	add	r3, r2
 800976a:	b29a      	uxth	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	3306      	adds	r3, #6
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	b29a      	uxth	r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	3307      	adds	r3, #7
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	b29b      	uxth	r3, r3
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	b29b      	uxth	r3, r3
 8009784:	4413      	add	r3, r2
 8009786:	b29a      	uxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	80da      	strh	r2, [r3, #6]

}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80097a2:	2180      	movs	r1, #128	; 0x80
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc5b 	bl	800a060 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097aa:	2100      	movs	r1, #0
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fc57 	bl	800a060 <USBD_LL_StallEP>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b086      	sub	sp, #24
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d032      	beq.n	8009836 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f834 	bl	800983e <USBD_GetLen>
 80097d6:	4603      	mov	r3, r0
 80097d8:	3301      	adds	r3, #1
 80097da:	b29b      	uxth	r3, r3
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	75fa      	strb	r2, [r7, #23]
 80097ea:	461a      	mov	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4413      	add	r3, r2
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	75fa      	strb	r2, [r7, #23]
 80097fc:	461a      	mov	r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	4413      	add	r3, r2
 8009802:	2203      	movs	r2, #3
 8009804:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009806:	e012      	b.n	800982e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	60fa      	str	r2, [r7, #12]
 800980e:	7dfa      	ldrb	r2, [r7, #23]
 8009810:	1c51      	adds	r1, r2, #1
 8009812:	75f9      	strb	r1, [r7, #23]
 8009814:	4611      	mov	r1, r2
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	440a      	add	r2, r1
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	75fa      	strb	r2, [r7, #23]
 8009824:	461a      	mov	r2, r3
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	4413      	add	r3, r2
 800982a:	2200      	movs	r2, #0
 800982c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e8      	bne.n	8009808 <USBD_GetString+0x4e>
    }
  }
}
 8009836:	bf00      	nop
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800984a:	e005      	b.n	8009858 <USBD_GetLen+0x1a>
  {
    len++;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	3301      	adds	r3, #1
 8009850:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3301      	adds	r3, #1
 8009856:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1f5      	bne.n	800984c <USBD_GetLen+0xe>
  }

  return len;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	4613      	mov	r3, r2
 800987a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2202      	movs	r2, #2
 8009880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009884:	88fa      	ldrh	r2, [r7, #6]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800988a:	88fa      	ldrh	r2, [r7, #6]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	2100      	movs	r1, #0
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 fc6b 	bl	800a172 <USBD_LL_Transmit>

  return USBD_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098b4:	88fb      	ldrh	r3, [r7, #6]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	2100      	movs	r1, #0
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fc59 	bl	800a172 <USBD_LL_Transmit>

  return USBD_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	4613      	mov	r3, r2
 80098d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2203      	movs	r2, #3
 80098dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098e0:	88fa      	ldrh	r2, [r7, #6]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80098e8:	88fa      	ldrh	r2, [r7, #6]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098f0:	88fb      	ldrh	r3, [r7, #6]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	2100      	movs	r1, #0
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 fc5e 	bl	800a1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	4613      	mov	r3, r2
 8009912:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009914:	88fb      	ldrh	r3, [r7, #6]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	2100      	movs	r1, #0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fc4c 	bl	800a1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2204      	movs	r2, #4
 8009936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800993a:	2300      	movs	r3, #0
 800993c:	2200      	movs	r2, #0
 800993e:	2100      	movs	r1, #0
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fc16 	bl	800a172 <USBD_LL_Transmit>

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2205      	movs	r2, #5
 800995c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009960:	2300      	movs	r3, #0
 8009962:	2200      	movs	r2, #0
 8009964:	2100      	movs	r1, #0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fc26 	bl	800a1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800997c:	2200      	movs	r2, #0
 800997e:	4912      	ldr	r1, [pc, #72]	; (80099c8 <MX_USB_DEVICE_Init+0x50>)
 8009980:	4812      	ldr	r0, [pc, #72]	; (80099cc <MX_USB_DEVICE_Init+0x54>)
 8009982:	f7fe ff57 	bl	8008834 <USBD_Init>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800998c:	f7f7 f888 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009990:	490f      	ldr	r1, [pc, #60]	; (80099d0 <MX_USB_DEVICE_Init+0x58>)
 8009992:	480e      	ldr	r0, [pc, #56]	; (80099cc <MX_USB_DEVICE_Init+0x54>)
 8009994:	f7fe ff79 	bl	800888a <USBD_RegisterClass>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800999e:	f7f7 f87f 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099a2:	490c      	ldr	r1, [pc, #48]	; (80099d4 <MX_USB_DEVICE_Init+0x5c>)
 80099a4:	4809      	ldr	r0, [pc, #36]	; (80099cc <MX_USB_DEVICE_Init+0x54>)
 80099a6:	f7fe fea7 	bl	80086f8 <USBD_CDC_RegisterInterface>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099b0:	f7f7 f876 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099b4:	4805      	ldr	r0, [pc, #20]	; (80099cc <MX_USB_DEVICE_Init+0x54>)
 80099b6:	f7fe ff82 	bl	80088be <USBD_Start>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099c0:	f7f7 f86e 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099c4:	bf00      	nop
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20000130 	.word	0x20000130
 80099cc:	20000c6c 	.word	0x20000c6c
 80099d0:	2000001c 	.word	0x2000001c
 80099d4:	20000120 	.word	0x20000120

080099d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099dc:	2200      	movs	r2, #0
 80099de:	4905      	ldr	r1, [pc, #20]	; (80099f4 <CDC_Init_FS+0x1c>)
 80099e0:	4805      	ldr	r0, [pc, #20]	; (80099f8 <CDC_Init_FS+0x20>)
 80099e2:	f7fe fea0 	bl	8008726 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099e6:	4905      	ldr	r1, [pc, #20]	; (80099fc <CDC_Init_FS+0x24>)
 80099e8:	4803      	ldr	r0, [pc, #12]	; (80099f8 <CDC_Init_FS+0x20>)
 80099ea:	f7fe feb6 	bl	800875a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20001330 	.word	0x20001330
 80099f8:	20000c6c 	.word	0x20000c6c
 80099fc:	20000f30 	.word	0x20000f30

08009a00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a00:	b480      	push	{r7}
 8009a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	6039      	str	r1, [r7, #0]
 8009a1a:	71fb      	strb	r3, [r7, #7]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	2b23      	cmp	r3, #35	; 0x23
 8009a24:	d84a      	bhi.n	8009abc <CDC_Control_FS+0xac>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <CDC_Control_FS+0x1c>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009abd 	.word	0x08009abd
 8009a30:	08009abd 	.word	0x08009abd
 8009a34:	08009abd 	.word	0x08009abd
 8009a38:	08009abd 	.word	0x08009abd
 8009a3c:	08009abd 	.word	0x08009abd
 8009a40:	08009abd 	.word	0x08009abd
 8009a44:	08009abd 	.word	0x08009abd
 8009a48:	08009abd 	.word	0x08009abd
 8009a4c:	08009abd 	.word	0x08009abd
 8009a50:	08009abd 	.word	0x08009abd
 8009a54:	08009abd 	.word	0x08009abd
 8009a58:	08009abd 	.word	0x08009abd
 8009a5c:	08009abd 	.word	0x08009abd
 8009a60:	08009abd 	.word	0x08009abd
 8009a64:	08009abd 	.word	0x08009abd
 8009a68:	08009abd 	.word	0x08009abd
 8009a6c:	08009abd 	.word	0x08009abd
 8009a70:	08009abd 	.word	0x08009abd
 8009a74:	08009abd 	.word	0x08009abd
 8009a78:	08009abd 	.word	0x08009abd
 8009a7c:	08009abd 	.word	0x08009abd
 8009a80:	08009abd 	.word	0x08009abd
 8009a84:	08009abd 	.word	0x08009abd
 8009a88:	08009abd 	.word	0x08009abd
 8009a8c:	08009abd 	.word	0x08009abd
 8009a90:	08009abd 	.word	0x08009abd
 8009a94:	08009abd 	.word	0x08009abd
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009abd 	.word	0x08009abd
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	08009abd 	.word	0x08009abd
 8009aa8:	08009abd 	.word	0x08009abd
 8009aac:	08009abd 	.word	0x08009abd
 8009ab0:	08009abd 	.word	0x08009abd
 8009ab4:	08009abd 	.word	0x08009abd
 8009ab8:	08009abd 	.word	0x08009abd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009abc:	bf00      	nop
  }

  return (USBD_OK);
 8009abe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4806      	ldr	r0, [pc, #24]	; (8009af4 <CDC_Receive_FS+0x28>)
 8009ada:	f7fe fe3e 	bl	800875a <USBD_CDC_SetRxBuffer>
  Process_USB_Command((char*)&Buf[0]);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7f6 fe92 	bl	8000808 <Process_USB_Command>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ae4:	4803      	ldr	r0, [pc, #12]	; (8009af4 <CDC_Receive_FS+0x28>)
 8009ae6:	f7fe fe7b 	bl	80087e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009aea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20000c6c 	.word	0x20000c6c

08009af8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b08:	4b0d      	ldr	r3, [pc, #52]	; (8009b40 <CDC_Transmit_FS+0x48>)
 8009b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e00b      	b.n	8009b36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b1e:	887b      	ldrh	r3, [r7, #2]
 8009b20:	461a      	mov	r2, r3
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	4806      	ldr	r0, [pc, #24]	; (8009b40 <CDC_Transmit_FS+0x48>)
 8009b26:	f7fe fdfe 	bl	8008726 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b2a:	4805      	ldr	r0, [pc, #20]	; (8009b40 <CDC_Transmit_FS+0x48>)
 8009b2c:	f7fe fe29 	bl	8008782 <USBD_CDC_TransmitPacket>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000c6c 	.word	0x20000c6c

08009b44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2212      	movs	r2, #18
 8009b54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b56:	4b03      	ldr	r3, [pc, #12]	; (8009b64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	2000014c 	.word	0x2000014c

08009b68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2204      	movs	r2, #4
 8009b78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b7a:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	20000160 	.word	0x20000160

08009b8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	6039      	str	r1, [r7, #0]
 8009b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d105      	bne.n	8009baa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	4907      	ldr	r1, [pc, #28]	; (8009bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ba2:	4808      	ldr	r0, [pc, #32]	; (8009bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ba4:	f7ff fe09 	bl	80097ba <USBD_GetString>
 8009ba8:	e004      	b.n	8009bb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	4904      	ldr	r1, [pc, #16]	; (8009bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bae:	4805      	ldr	r0, [pc, #20]	; (8009bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bb0:	f7ff fe03 	bl	80097ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bb4:	4b02      	ldr	r3, [pc, #8]	; (8009bc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20001730 	.word	0x20001730
 8009bc4:	0800ad4c 	.word	0x0800ad4c

08009bc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	6039      	str	r1, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	4904      	ldr	r1, [pc, #16]	; (8009be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bd8:	4804      	ldr	r0, [pc, #16]	; (8009bec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bda:	f7ff fdee 	bl	80097ba <USBD_GetString>
  return USBD_StrDesc;
 8009bde:	4b02      	ldr	r3, [pc, #8]	; (8009be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20001730 	.word	0x20001730
 8009bec:	0800ad64 	.word	0x0800ad64

08009bf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	221a      	movs	r2, #26
 8009c00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c02:	f000 f843 	bl	8009c8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c06:	4b02      	ldr	r3, [pc, #8]	; (8009c10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20000164 	.word	0x20000164

08009c14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	6039      	str	r1, [r7, #0]
 8009c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d105      	bne.n	8009c32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	4907      	ldr	r1, [pc, #28]	; (8009c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c2a:	4808      	ldr	r0, [pc, #32]	; (8009c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c2c:	f7ff fdc5 	bl	80097ba <USBD_GetString>
 8009c30:	e004      	b.n	8009c3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	4904      	ldr	r1, [pc, #16]	; (8009c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c36:	4805      	ldr	r0, [pc, #20]	; (8009c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c38:	f7ff fdbf 	bl	80097ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c3c:	4b02      	ldr	r3, [pc, #8]	; (8009c48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20001730 	.word	0x20001730
 8009c4c:	0800ad78 	.word	0x0800ad78

08009c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	6039      	str	r1, [r7, #0]
 8009c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d105      	bne.n	8009c6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	4907      	ldr	r1, [pc, #28]	; (8009c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c66:	4808      	ldr	r0, [pc, #32]	; (8009c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c68:	f7ff fda7 	bl	80097ba <USBD_GetString>
 8009c6c:	e004      	b.n	8009c78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	4904      	ldr	r1, [pc, #16]	; (8009c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c72:	4805      	ldr	r0, [pc, #20]	; (8009c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c74:	f7ff fda1 	bl	80097ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c78:	4b02      	ldr	r3, [pc, #8]	; (8009c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20001730 	.word	0x20001730
 8009c88:	0800ad84 	.word	0x0800ad84

08009c8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c92:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <Get_SerialNum+0x44>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c98:	4b0e      	ldr	r3, [pc, #56]	; (8009cd4 <Get_SerialNum+0x48>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <Get_SerialNum+0x4c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cb2:	2208      	movs	r2, #8
 8009cb4:	4909      	ldr	r1, [pc, #36]	; (8009cdc <Get_SerialNum+0x50>)
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 f814 	bl	8009ce4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cbc:	2204      	movs	r2, #4
 8009cbe:	4908      	ldr	r1, [pc, #32]	; (8009ce0 <Get_SerialNum+0x54>)
 8009cc0:	68b8      	ldr	r0, [r7, #8]
 8009cc2:	f000 f80f 	bl	8009ce4 <IntToUnicode>
  }
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	1ffff7ac 	.word	0x1ffff7ac
 8009cd4:	1ffff7b0 	.word	0x1ffff7b0
 8009cd8:	1ffff7b4 	.word	0x1ffff7b4
 8009cdc:	20000166 	.word	0x20000166
 8009ce0:	20000176 	.word	0x20000176

08009ce4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75fb      	strb	r3, [r7, #23]
 8009cfa:	e027      	b.n	8009d4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	0f1b      	lsrs	r3, r3, #28
 8009d00:	2b09      	cmp	r3, #9
 8009d02:	d80b      	bhi.n	8009d1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0f1b      	lsrs	r3, r3, #28
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	440b      	add	r3, r1
 8009d14:	3230      	adds	r2, #48	; 0x30
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	e00a      	b.n	8009d32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0f1b      	lsrs	r3, r3, #28
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	4619      	mov	r1, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3237      	adds	r2, #55	; 0x37
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	4413      	add	r3, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]
 8009d4c:	7dfa      	ldrb	r2, [r7, #23]
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d3d3      	bcc.n	8009cfc <IntToUnicode+0x18>
  }
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
	...

08009d64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0d      	ldr	r2, [pc, #52]	; (8009da8 <HAL_PCD_MspInit+0x44>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d113      	bne.n	8009d9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d76:	4b0d      	ldr	r3, [pc, #52]	; (8009dac <HAL_PCD_MspInit+0x48>)
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <HAL_PCD_MspInit+0x48>)
 8009d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d80:	61d3      	str	r3, [r2, #28]
 8009d82:	4b0a      	ldr	r3, [pc, #40]	; (8009dac <HAL_PCD_MspInit+0x48>)
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2100      	movs	r1, #0
 8009d92:	2014      	movs	r0, #20
 8009d94:	f7f7 f917 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009d98:	2014      	movs	r0, #20
 8009d9a:	f7f7 f930 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40005c00 	.word	0x40005c00
 8009dac:	40021000 	.word	0x40021000

08009db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	f7fe fdc2 	bl	8008950 <USBD_LL_SetupStage>
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 8009de6:	78fa      	ldrb	r2, [r7, #3]
 8009de8:	6879      	ldr	r1, [r7, #4]
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	440b      	add	r3, r1
 8009df4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	78fb      	ldrb	r3, [r7, #3]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	f7fe fdf4 	bl	80089ea <USBD_LL_DataOutStage>
}
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	460b      	mov	r3, r1
 8009e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 8009e1c:	78fa      	ldrb	r2, [r7, #3]
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	440b      	add	r3, r1
 8009e2a:	3324      	adds	r3, #36	; 0x24
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	4619      	mov	r1, r3
 8009e32:	f7fe fe4b 	bl	8008acc <USBD_LL_DataInStage>
}
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe ff5e 	bl	8008d0e <USBD_LL_SOF>
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e62:	2301      	movs	r3, #1
 8009e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	795b      	ldrb	r3, [r3, #5]
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d001      	beq.n	8009e72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e6e:	f7f6 fe17 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009e78:	7bfa      	ldrb	r2, [r7, #15]
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe ff0b 	bl	8008c98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe fec4 	bl	8008c16 <USBD_LL_Reset>
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe ff06 	bl	8008cb8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	7a5b      	ldrb	r3, [r3, #9]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d005      	beq.n	8009ec0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009eb4:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <HAL_PCD_SuspendCallback+0x30>)
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	4a03      	ldr	r2, [pc, #12]	; (8009ec8 <HAL_PCD_SuspendCallback+0x30>)
 8009eba:	f043 0306 	orr.w	r3, r3, #6
 8009ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	e000ed00 	.word	0xe000ed00

08009ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe ff01 	bl	8008ce2 <USBD_LL_Resume>
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009ef0:	4a29      	ldr	r2, [pc, #164]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a27      	ldr	r2, [pc, #156]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009efc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f00:	4b25      	ldr	r3, [pc, #148]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f02:	4a26      	ldr	r2, [pc, #152]	; (8009f9c <USBD_LL_Init+0xb4>)
 8009f04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f06:	4b24      	ldr	r3, [pc, #144]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f08:	2208      	movs	r2, #8
 8009f0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f0c:	4b22      	ldr	r3, [pc, #136]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f0e:	2202      	movs	r2, #2
 8009f10:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f12:	4b21      	ldr	r3, [pc, #132]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f14:	2202      	movs	r2, #2
 8009f16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f18:	4b1f      	ldr	r3, [pc, #124]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f1e:	4b1e      	ldr	r3, [pc, #120]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f24:	4b1c      	ldr	r3, [pc, #112]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f2a:	481b      	ldr	r0, [pc, #108]	; (8009f98 <USBD_LL_Init+0xb0>)
 8009f2c:	f7f7 fa3e 	bl	80013ac <HAL_PCD_Init>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009f36:	f7f6 fdb3 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f40:	2318      	movs	r3, #24
 8009f42:	2200      	movs	r2, #0
 8009f44:	2100      	movs	r1, #0
 8009f46:	f7f8 fea2 	bl	8002c8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f50:	2358      	movs	r3, #88	; 0x58
 8009f52:	2200      	movs	r2, #0
 8009f54:	2180      	movs	r1, #128	; 0x80
 8009f56:	f7f8 fe9a 	bl	8002c8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f60:	23c0      	movs	r3, #192	; 0xc0
 8009f62:	2200      	movs	r2, #0
 8009f64:	2181      	movs	r1, #129	; 0x81
 8009f66:	f7f8 fe92 	bl	8002c8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f70:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009f74:	2200      	movs	r2, #0
 8009f76:	2101      	movs	r1, #1
 8009f78:	f7f8 fe89 	bl	8002c8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f86:	2200      	movs	r2, #0
 8009f88:	2182      	movs	r1, #130	; 0x82
 8009f8a:	f7f8 fe80 	bl	8002c8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20001930 	.word	0x20001930
 8009f9c:	40005c00 	.word	0x40005c00

08009fa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f7 fabf 	bl	800153a <HAL_PCD_Start>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f952 	bl	800a26c <USBD_Get_USB_Status>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	4608      	mov	r0, r1
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	70fb      	strb	r3, [r7, #3]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70bb      	strb	r3, [r7, #2]
 8009fec:	4613      	mov	r3, r2
 8009fee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ffe:	78bb      	ldrb	r3, [r7, #2]
 800a000:	883a      	ldrh	r2, [r7, #0]
 800a002:	78f9      	ldrb	r1, [r7, #3]
 800a004:	f7f7 fbb7 	bl	8001776 <HAL_PCD_EP_Open>
 800a008:	4603      	mov	r3, r0
 800a00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f92c 	bl	800a26c <USBD_Get_USB_Status>
 800a014:	4603      	mov	r3, r0
 800a016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a018:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	460b      	mov	r3, r1
 800a02c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a03c:	78fa      	ldrb	r2, [r7, #3]
 800a03e:	4611      	mov	r1, r2
 800a040:	4618      	mov	r0, r3
 800a042:	f7f7 fbf5 	bl	8001830 <HAL_PCD_EP_Close>
 800a046:	4603      	mov	r3, r0
 800a048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 f90d 	bl	800a26c <USBD_Get_USB_Status>
 800a052:	4603      	mov	r3, r0
 800a054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a056:	7bbb      	ldrb	r3, [r7, #14]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a07a:	78fa      	ldrb	r2, [r7, #3]
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f7 fc9e 	bl	80019c0 <HAL_PCD_EP_SetStall>
 800a084:	4603      	mov	r3, r0
 800a086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 f8ee 	bl	800a26c <USBD_Get_USB_Status>
 800a090:	4603      	mov	r3, r0
 800a092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a094:	7bbb      	ldrb	r3, [r7, #14]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0b8:	78fa      	ldrb	r2, [r7, #3]
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7f7 fcd1 	bl	8001a64 <HAL_PCD_EP_ClrStall>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 f8cf 	bl	800a26c <USBD_Get_USB_Status>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	da0b      	bge.n	800a110 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fe:	68f9      	ldr	r1, [r7, #12]
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	440b      	add	r3, r1
 800a10a:	3312      	adds	r3, #18
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	e00b      	b.n	800a128 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a116:	68f9      	ldr	r1, [r7, #12]
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	440b      	add	r3, r1
 800a122:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800a126:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a14e:	78fa      	ldrb	r2, [r7, #3]
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7f7 faeb 	bl	800172e <HAL_PCD_SetAddress>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f884 	bl	800a26c <USBD_Get_USB_Status>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a168:	7bbb      	ldrb	r3, [r7, #14]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	461a      	mov	r2, r3
 800a17e:	460b      	mov	r3, r1
 800a180:	72fb      	strb	r3, [r7, #11]
 800a182:	4613      	mov	r3, r2
 800a184:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a194:	893b      	ldrh	r3, [r7, #8]
 800a196:	7af9      	ldrb	r1, [r7, #11]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	f7f7 fbda 	bl	8001952 <HAL_PCD_EP_Transmit>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 f861 	bl	800a26c <USBD_Get_USB_Status>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	607a      	str	r2, [r7, #4]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	72fb      	strb	r3, [r7, #11]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1da:	893b      	ldrh	r3, [r7, #8]
 800a1dc:	7af9      	ldrb	r1, [r7, #11]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	f7f7 fb6e 	bl	80018c0 <HAL_PCD_EP_Receive>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f83e 	bl	800a26c <USBD_Get_USB_Status>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b082      	sub	sp, #8
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	460b      	mov	r3, r1
 800a208:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a210:	78fa      	ldrb	r2, [r7, #3]
 800a212:	4611      	mov	r1, r2
 800a214:	4618      	mov	r0, r3
 800a216:	f7f7 fb84 	bl	8001922 <HAL_PCD_EP_GetRxCount>
 800a21a:	4603      	mov	r3, r0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a22c:	4b03      	ldr	r3, [pc, #12]	; (800a23c <USBD_static_malloc+0x18>)
}
 800a22e:	4618      	mov	r0, r3
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	20001c04 	.word	0x20001c04

0800a240 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]

}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d817      	bhi.n	800a2b0 <USBD_Get_USB_Status+0x44>
 800a280:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <USBD_Get_USB_Status+0x1c>)
 800a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a286:	bf00      	nop
 800a288:	0800a299 	.word	0x0800a299
 800a28c:	0800a29f 	.word	0x0800a29f
 800a290:	0800a2a5 	.word	0x0800a2a5
 800a294:	0800a2ab 	.word	0x0800a2ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
    break;
 800a29c:	e00b      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a2:	e008      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a8:	e005      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ae:	e002      	b.n	800a2b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b4:	bf00      	nop
  }
  return usb_status;
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <atoi>:
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	f000 b882 	b.w	800a3d0 <strtol>

0800a2cc <_strtol_l.constprop.0>:
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d2:	d001      	beq.n	800a2d8 <_strtol_l.constprop.0+0xc>
 800a2d4:	2b24      	cmp	r3, #36	; 0x24
 800a2d6:	d906      	bls.n	800a2e6 <_strtol_l.constprop.0+0x1a>
 800a2d8:	f000 f8ac 	bl	800a434 <__errno>
 800a2dc:	2316      	movs	r3, #22
 800a2de:	6003      	str	r3, [r0, #0]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a3cc <_strtol_l.constprop.0+0x100>
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	462e      	mov	r6, r5
 800a2ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a2f6:	f017 0708 	ands.w	r7, r7, #8
 800a2fa:	d1f7      	bne.n	800a2ec <_strtol_l.constprop.0+0x20>
 800a2fc:	2c2d      	cmp	r4, #45	; 0x2d
 800a2fe:	d132      	bne.n	800a366 <_strtol_l.constprop.0+0x9a>
 800a300:	782c      	ldrb	r4, [r5, #0]
 800a302:	2701      	movs	r7, #1
 800a304:	1cb5      	adds	r5, r6, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d05b      	beq.n	800a3c2 <_strtol_l.constprop.0+0xf6>
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	d109      	bne.n	800a322 <_strtol_l.constprop.0+0x56>
 800a30e:	2c30      	cmp	r4, #48	; 0x30
 800a310:	d107      	bne.n	800a322 <_strtol_l.constprop.0+0x56>
 800a312:	782c      	ldrb	r4, [r5, #0]
 800a314:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a318:	2c58      	cmp	r4, #88	; 0x58
 800a31a:	d14d      	bne.n	800a3b8 <_strtol_l.constprop.0+0xec>
 800a31c:	786c      	ldrb	r4, [r5, #1]
 800a31e:	2310      	movs	r3, #16
 800a320:	3502      	adds	r5, #2
 800a322:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a326:	f108 38ff 	add.w	r8, r8, #4294967295
 800a32a:	f04f 0e00 	mov.w	lr, #0
 800a32e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a332:	4676      	mov	r6, lr
 800a334:	fb03 8a19 	mls	sl, r3, r9, r8
 800a338:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a33c:	f1bc 0f09 	cmp.w	ip, #9
 800a340:	d816      	bhi.n	800a370 <_strtol_l.constprop.0+0xa4>
 800a342:	4664      	mov	r4, ip
 800a344:	42a3      	cmp	r3, r4
 800a346:	dd24      	ble.n	800a392 <_strtol_l.constprop.0+0xc6>
 800a348:	f1be 3fff 	cmp.w	lr, #4294967295
 800a34c:	d008      	beq.n	800a360 <_strtol_l.constprop.0+0x94>
 800a34e:	45b1      	cmp	r9, r6
 800a350:	d31c      	bcc.n	800a38c <_strtol_l.constprop.0+0xc0>
 800a352:	d101      	bne.n	800a358 <_strtol_l.constprop.0+0x8c>
 800a354:	45a2      	cmp	sl, r4
 800a356:	db19      	blt.n	800a38c <_strtol_l.constprop.0+0xc0>
 800a358:	fb06 4603 	mla	r6, r6, r3, r4
 800a35c:	f04f 0e01 	mov.w	lr, #1
 800a360:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a364:	e7e8      	b.n	800a338 <_strtol_l.constprop.0+0x6c>
 800a366:	2c2b      	cmp	r4, #43	; 0x2b
 800a368:	bf04      	itt	eq
 800a36a:	782c      	ldrbeq	r4, [r5, #0]
 800a36c:	1cb5      	addeq	r5, r6, #2
 800a36e:	e7ca      	b.n	800a306 <_strtol_l.constprop.0+0x3a>
 800a370:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a374:	f1bc 0f19 	cmp.w	ip, #25
 800a378:	d801      	bhi.n	800a37e <_strtol_l.constprop.0+0xb2>
 800a37a:	3c37      	subs	r4, #55	; 0x37
 800a37c:	e7e2      	b.n	800a344 <_strtol_l.constprop.0+0x78>
 800a37e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a382:	f1bc 0f19 	cmp.w	ip, #25
 800a386:	d804      	bhi.n	800a392 <_strtol_l.constprop.0+0xc6>
 800a388:	3c57      	subs	r4, #87	; 0x57
 800a38a:	e7db      	b.n	800a344 <_strtol_l.constprop.0+0x78>
 800a38c:	f04f 3eff 	mov.w	lr, #4294967295
 800a390:	e7e6      	b.n	800a360 <_strtol_l.constprop.0+0x94>
 800a392:	f1be 3fff 	cmp.w	lr, #4294967295
 800a396:	d105      	bne.n	800a3a4 <_strtol_l.constprop.0+0xd8>
 800a398:	2322      	movs	r3, #34	; 0x22
 800a39a:	6003      	str	r3, [r0, #0]
 800a39c:	4646      	mov	r6, r8
 800a39e:	b942      	cbnz	r2, 800a3b2 <_strtol_l.constprop.0+0xe6>
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	e79e      	b.n	800a2e2 <_strtol_l.constprop.0+0x16>
 800a3a4:	b107      	cbz	r7, 800a3a8 <_strtol_l.constprop.0+0xdc>
 800a3a6:	4276      	negs	r6, r6
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	d0f9      	beq.n	800a3a0 <_strtol_l.constprop.0+0xd4>
 800a3ac:	f1be 0f00 	cmp.w	lr, #0
 800a3b0:	d000      	beq.n	800a3b4 <_strtol_l.constprop.0+0xe8>
 800a3b2:	1e69      	subs	r1, r5, #1
 800a3b4:	6011      	str	r1, [r2, #0]
 800a3b6:	e7f3      	b.n	800a3a0 <_strtol_l.constprop.0+0xd4>
 800a3b8:	2430      	movs	r4, #48	; 0x30
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1b1      	bne.n	800a322 <_strtol_l.constprop.0+0x56>
 800a3be:	2308      	movs	r3, #8
 800a3c0:	e7af      	b.n	800a322 <_strtol_l.constprop.0+0x56>
 800a3c2:	2c30      	cmp	r4, #48	; 0x30
 800a3c4:	d0a5      	beq.n	800a312 <_strtol_l.constprop.0+0x46>
 800a3c6:	230a      	movs	r3, #10
 800a3c8:	e7ab      	b.n	800a322 <_strtol_l.constprop.0+0x56>
 800a3ca:	bf00      	nop
 800a3cc:	0800adc5 	.word	0x0800adc5

0800a3d0 <strtol>:
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	460a      	mov	r2, r1
 800a3d4:	4601      	mov	r1, r0
 800a3d6:	4802      	ldr	r0, [pc, #8]	; (800a3e0 <strtol+0x10>)
 800a3d8:	6800      	ldr	r0, [r0, #0]
 800a3da:	f7ff bf77 	b.w	800a2cc <_strtol_l.constprop.0>
 800a3de:	bf00      	nop
 800a3e0:	200001cc 	.word	0x200001cc

0800a3e4 <siprintf>:
 800a3e4:	b40e      	push	{r1, r2, r3}
 800a3e6:	b500      	push	{lr}
 800a3e8:	b09c      	sub	sp, #112	; 0x70
 800a3ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a3ec:	9002      	str	r0, [sp, #8]
 800a3ee:	9006      	str	r0, [sp, #24]
 800a3f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3f4:	4809      	ldr	r0, [pc, #36]	; (800a41c <siprintf+0x38>)
 800a3f6:	9107      	str	r1, [sp, #28]
 800a3f8:	9104      	str	r1, [sp, #16]
 800a3fa:	4909      	ldr	r1, [pc, #36]	; (800a420 <siprintf+0x3c>)
 800a3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a400:	9105      	str	r1, [sp, #20]
 800a402:	6800      	ldr	r0, [r0, #0]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	a902      	add	r1, sp, #8
 800a408:	f000 f992 	bl	800a730 <_svfiprintf_r>
 800a40c:	9b02      	ldr	r3, [sp, #8]
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	b01c      	add	sp, #112	; 0x70
 800a414:	f85d eb04 	ldr.w	lr, [sp], #4
 800a418:	b003      	add	sp, #12
 800a41a:	4770      	bx	lr
 800a41c:	200001cc 	.word	0x200001cc
 800a420:	ffff0208 	.word	0xffff0208

0800a424 <memset>:
 800a424:	4402      	add	r2, r0
 800a426:	4603      	mov	r3, r0
 800a428:	4293      	cmp	r3, r2
 800a42a:	d100      	bne.n	800a42e <memset+0xa>
 800a42c:	4770      	bx	lr
 800a42e:	f803 1b01 	strb.w	r1, [r3], #1
 800a432:	e7f9      	b.n	800a428 <memset+0x4>

0800a434 <__errno>:
 800a434:	4b01      	ldr	r3, [pc, #4]	; (800a43c <__errno+0x8>)
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	200001cc 	.word	0x200001cc

0800a440 <__libc_init_array>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	4d0d      	ldr	r5, [pc, #52]	; (800a478 <__libc_init_array+0x38>)
 800a444:	4c0d      	ldr	r4, [pc, #52]	; (800a47c <__libc_init_array+0x3c>)
 800a446:	1b64      	subs	r4, r4, r5
 800a448:	10a4      	asrs	r4, r4, #2
 800a44a:	2600      	movs	r6, #0
 800a44c:	42a6      	cmp	r6, r4
 800a44e:	d109      	bne.n	800a464 <__libc_init_array+0x24>
 800a450:	4d0b      	ldr	r5, [pc, #44]	; (800a480 <__libc_init_array+0x40>)
 800a452:	4c0c      	ldr	r4, [pc, #48]	; (800a484 <__libc_init_array+0x44>)
 800a454:	f000 fc6a 	bl	800ad2c <_init>
 800a458:	1b64      	subs	r4, r4, r5
 800a45a:	10a4      	asrs	r4, r4, #2
 800a45c:	2600      	movs	r6, #0
 800a45e:	42a6      	cmp	r6, r4
 800a460:	d105      	bne.n	800a46e <__libc_init_array+0x2e>
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	f855 3b04 	ldr.w	r3, [r5], #4
 800a468:	4798      	blx	r3
 800a46a:	3601      	adds	r6, #1
 800a46c:	e7ee      	b.n	800a44c <__libc_init_array+0xc>
 800a46e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a472:	4798      	blx	r3
 800a474:	3601      	adds	r6, #1
 800a476:	e7f2      	b.n	800a45e <__libc_init_array+0x1e>
 800a478:	0800aef8 	.word	0x0800aef8
 800a47c:	0800aef8 	.word	0x0800aef8
 800a480:	0800aef8 	.word	0x0800aef8
 800a484:	0800aefc 	.word	0x0800aefc

0800a488 <__retarget_lock_acquire_recursive>:
 800a488:	4770      	bx	lr

0800a48a <__retarget_lock_release_recursive>:
 800a48a:	4770      	bx	lr

0800a48c <_free_r>:
 800a48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a48e:	2900      	cmp	r1, #0
 800a490:	d044      	beq.n	800a51c <_free_r+0x90>
 800a492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a496:	9001      	str	r0, [sp, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f1a1 0404 	sub.w	r4, r1, #4
 800a49e:	bfb8      	it	lt
 800a4a0:	18e4      	addlt	r4, r4, r3
 800a4a2:	f000 f8df 	bl	800a664 <__malloc_lock>
 800a4a6:	4a1e      	ldr	r2, [pc, #120]	; (800a520 <_free_r+0x94>)
 800a4a8:	9801      	ldr	r0, [sp, #4]
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	b933      	cbnz	r3, 800a4bc <_free_r+0x30>
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	6014      	str	r4, [r2, #0]
 800a4b2:	b003      	add	sp, #12
 800a4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4b8:	f000 b8da 	b.w	800a670 <__malloc_unlock>
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d908      	bls.n	800a4d2 <_free_r+0x46>
 800a4c0:	6825      	ldr	r5, [r4, #0]
 800a4c2:	1961      	adds	r1, r4, r5
 800a4c4:	428b      	cmp	r3, r1
 800a4c6:	bf01      	itttt	eq
 800a4c8:	6819      	ldreq	r1, [r3, #0]
 800a4ca:	685b      	ldreq	r3, [r3, #4]
 800a4cc:	1949      	addeq	r1, r1, r5
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	e7ed      	b.n	800a4ae <_free_r+0x22>
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	b10b      	cbz	r3, 800a4dc <_free_r+0x50>
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	d9fa      	bls.n	800a4d2 <_free_r+0x46>
 800a4dc:	6811      	ldr	r1, [r2, #0]
 800a4de:	1855      	adds	r5, r2, r1
 800a4e0:	42a5      	cmp	r5, r4
 800a4e2:	d10b      	bne.n	800a4fc <_free_r+0x70>
 800a4e4:	6824      	ldr	r4, [r4, #0]
 800a4e6:	4421      	add	r1, r4
 800a4e8:	1854      	adds	r4, r2, r1
 800a4ea:	42a3      	cmp	r3, r4
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	d1e0      	bne.n	800a4b2 <_free_r+0x26>
 800a4f0:	681c      	ldr	r4, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	6053      	str	r3, [r2, #4]
 800a4f6:	440c      	add	r4, r1
 800a4f8:	6014      	str	r4, [r2, #0]
 800a4fa:	e7da      	b.n	800a4b2 <_free_r+0x26>
 800a4fc:	d902      	bls.n	800a504 <_free_r+0x78>
 800a4fe:	230c      	movs	r3, #12
 800a500:	6003      	str	r3, [r0, #0]
 800a502:	e7d6      	b.n	800a4b2 <_free_r+0x26>
 800a504:	6825      	ldr	r5, [r4, #0]
 800a506:	1961      	adds	r1, r4, r5
 800a508:	428b      	cmp	r3, r1
 800a50a:	bf04      	itt	eq
 800a50c:	6819      	ldreq	r1, [r3, #0]
 800a50e:	685b      	ldreq	r3, [r3, #4]
 800a510:	6063      	str	r3, [r4, #4]
 800a512:	bf04      	itt	eq
 800a514:	1949      	addeq	r1, r1, r5
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	6054      	str	r4, [r2, #4]
 800a51a:	e7ca      	b.n	800a4b2 <_free_r+0x26>
 800a51c:	b003      	add	sp, #12
 800a51e:	bd30      	pop	{r4, r5, pc}
 800a520:	20001f64 	.word	0x20001f64

0800a524 <sbrk_aligned>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4e0e      	ldr	r6, [pc, #56]	; (800a560 <sbrk_aligned+0x3c>)
 800a528:	460c      	mov	r4, r1
 800a52a:	6831      	ldr	r1, [r6, #0]
 800a52c:	4605      	mov	r5, r0
 800a52e:	b911      	cbnz	r1, 800a536 <sbrk_aligned+0x12>
 800a530:	f000 fba6 	bl	800ac80 <_sbrk_r>
 800a534:	6030      	str	r0, [r6, #0]
 800a536:	4621      	mov	r1, r4
 800a538:	4628      	mov	r0, r5
 800a53a:	f000 fba1 	bl	800ac80 <_sbrk_r>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	d00a      	beq.n	800a558 <sbrk_aligned+0x34>
 800a542:	1cc4      	adds	r4, r0, #3
 800a544:	f024 0403 	bic.w	r4, r4, #3
 800a548:	42a0      	cmp	r0, r4
 800a54a:	d007      	beq.n	800a55c <sbrk_aligned+0x38>
 800a54c:	1a21      	subs	r1, r4, r0
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 fb96 	bl	800ac80 <_sbrk_r>
 800a554:	3001      	adds	r0, #1
 800a556:	d101      	bne.n	800a55c <sbrk_aligned+0x38>
 800a558:	f04f 34ff 	mov.w	r4, #4294967295
 800a55c:	4620      	mov	r0, r4
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	20001f68 	.word	0x20001f68

0800a564 <_malloc_r>:
 800a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a568:	1ccd      	adds	r5, r1, #3
 800a56a:	f025 0503 	bic.w	r5, r5, #3
 800a56e:	3508      	adds	r5, #8
 800a570:	2d0c      	cmp	r5, #12
 800a572:	bf38      	it	cc
 800a574:	250c      	movcc	r5, #12
 800a576:	2d00      	cmp	r5, #0
 800a578:	4607      	mov	r7, r0
 800a57a:	db01      	blt.n	800a580 <_malloc_r+0x1c>
 800a57c:	42a9      	cmp	r1, r5
 800a57e:	d905      	bls.n	800a58c <_malloc_r+0x28>
 800a580:	230c      	movs	r3, #12
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	2600      	movs	r6, #0
 800a586:	4630      	mov	r0, r6
 800a588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a660 <_malloc_r+0xfc>
 800a590:	f000 f868 	bl	800a664 <__malloc_lock>
 800a594:	f8d8 3000 	ldr.w	r3, [r8]
 800a598:	461c      	mov	r4, r3
 800a59a:	bb5c      	cbnz	r4, 800a5f4 <_malloc_r+0x90>
 800a59c:	4629      	mov	r1, r5
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f7ff ffc0 	bl	800a524 <sbrk_aligned>
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	d155      	bne.n	800a656 <_malloc_r+0xf2>
 800a5aa:	f8d8 4000 	ldr.w	r4, [r8]
 800a5ae:	4626      	mov	r6, r4
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	d145      	bne.n	800a640 <_malloc_r+0xdc>
 800a5b4:	2c00      	cmp	r4, #0
 800a5b6:	d048      	beq.n	800a64a <_malloc_r+0xe6>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	4638      	mov	r0, r7
 800a5be:	eb04 0903 	add.w	r9, r4, r3
 800a5c2:	f000 fb5d 	bl	800ac80 <_sbrk_r>
 800a5c6:	4581      	cmp	r9, r0
 800a5c8:	d13f      	bne.n	800a64a <_malloc_r+0xe6>
 800a5ca:	6821      	ldr	r1, [r4, #0]
 800a5cc:	1a6d      	subs	r5, r5, r1
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f7ff ffa7 	bl	800a524 <sbrk_aligned>
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d037      	beq.n	800a64a <_malloc_r+0xe6>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	442b      	add	r3, r5
 800a5de:	6023      	str	r3, [r4, #0]
 800a5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d038      	beq.n	800a65a <_malloc_r+0xf6>
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	42a2      	cmp	r2, r4
 800a5ec:	d12b      	bne.n	800a646 <_malloc_r+0xe2>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	e00f      	b.n	800a614 <_malloc_r+0xb0>
 800a5f4:	6822      	ldr	r2, [r4, #0]
 800a5f6:	1b52      	subs	r2, r2, r5
 800a5f8:	d41f      	bmi.n	800a63a <_malloc_r+0xd6>
 800a5fa:	2a0b      	cmp	r2, #11
 800a5fc:	d917      	bls.n	800a62e <_malloc_r+0xca>
 800a5fe:	1961      	adds	r1, r4, r5
 800a600:	42a3      	cmp	r3, r4
 800a602:	6025      	str	r5, [r4, #0]
 800a604:	bf18      	it	ne
 800a606:	6059      	strne	r1, [r3, #4]
 800a608:	6863      	ldr	r3, [r4, #4]
 800a60a:	bf08      	it	eq
 800a60c:	f8c8 1000 	streq.w	r1, [r8]
 800a610:	5162      	str	r2, [r4, r5]
 800a612:	604b      	str	r3, [r1, #4]
 800a614:	4638      	mov	r0, r7
 800a616:	f104 060b 	add.w	r6, r4, #11
 800a61a:	f000 f829 	bl	800a670 <__malloc_unlock>
 800a61e:	f026 0607 	bic.w	r6, r6, #7
 800a622:	1d23      	adds	r3, r4, #4
 800a624:	1af2      	subs	r2, r6, r3
 800a626:	d0ae      	beq.n	800a586 <_malloc_r+0x22>
 800a628:	1b9b      	subs	r3, r3, r6
 800a62a:	50a3      	str	r3, [r4, r2]
 800a62c:	e7ab      	b.n	800a586 <_malloc_r+0x22>
 800a62e:	42a3      	cmp	r3, r4
 800a630:	6862      	ldr	r2, [r4, #4]
 800a632:	d1dd      	bne.n	800a5f0 <_malloc_r+0x8c>
 800a634:	f8c8 2000 	str.w	r2, [r8]
 800a638:	e7ec      	b.n	800a614 <_malloc_r+0xb0>
 800a63a:	4623      	mov	r3, r4
 800a63c:	6864      	ldr	r4, [r4, #4]
 800a63e:	e7ac      	b.n	800a59a <_malloc_r+0x36>
 800a640:	4634      	mov	r4, r6
 800a642:	6876      	ldr	r6, [r6, #4]
 800a644:	e7b4      	b.n	800a5b0 <_malloc_r+0x4c>
 800a646:	4613      	mov	r3, r2
 800a648:	e7cc      	b.n	800a5e4 <_malloc_r+0x80>
 800a64a:	230c      	movs	r3, #12
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	4638      	mov	r0, r7
 800a650:	f000 f80e 	bl	800a670 <__malloc_unlock>
 800a654:	e797      	b.n	800a586 <_malloc_r+0x22>
 800a656:	6025      	str	r5, [r4, #0]
 800a658:	e7dc      	b.n	800a614 <_malloc_r+0xb0>
 800a65a:	605b      	str	r3, [r3, #4]
 800a65c:	deff      	udf	#255	; 0xff
 800a65e:	bf00      	nop
 800a660:	20001f64 	.word	0x20001f64

0800a664 <__malloc_lock>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__malloc_lock+0x8>)
 800a666:	f7ff bf0f 	b.w	800a488 <__retarget_lock_acquire_recursive>
 800a66a:	bf00      	nop
 800a66c:	20001f60 	.word	0x20001f60

0800a670 <__malloc_unlock>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__malloc_unlock+0x8>)
 800a672:	f7ff bf0a 	b.w	800a48a <__retarget_lock_release_recursive>
 800a676:	bf00      	nop
 800a678:	20001f60 	.word	0x20001f60

0800a67c <__ssputs_r>:
 800a67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a680:	688e      	ldr	r6, [r1, #8]
 800a682:	461f      	mov	r7, r3
 800a684:	42be      	cmp	r6, r7
 800a686:	680b      	ldr	r3, [r1, #0]
 800a688:	4682      	mov	sl, r0
 800a68a:	460c      	mov	r4, r1
 800a68c:	4690      	mov	r8, r2
 800a68e:	d82c      	bhi.n	800a6ea <__ssputs_r+0x6e>
 800a690:	898a      	ldrh	r2, [r1, #12]
 800a692:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a696:	d026      	beq.n	800a6e6 <__ssputs_r+0x6a>
 800a698:	6965      	ldr	r5, [r4, #20]
 800a69a:	6909      	ldr	r1, [r1, #16]
 800a69c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6a0:	eba3 0901 	sub.w	r9, r3, r1
 800a6a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6a8:	1c7b      	adds	r3, r7, #1
 800a6aa:	444b      	add	r3, r9
 800a6ac:	106d      	asrs	r5, r5, #1
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	bf38      	it	cc
 800a6b2:	461d      	movcc	r5, r3
 800a6b4:	0553      	lsls	r3, r2, #21
 800a6b6:	d527      	bpl.n	800a708 <__ssputs_r+0x8c>
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7ff ff53 	bl	800a564 <_malloc_r>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	b360      	cbz	r0, 800a71c <__ssputs_r+0xa0>
 800a6c2:	6921      	ldr	r1, [r4, #16]
 800a6c4:	464a      	mov	r2, r9
 800a6c6:	f000 faeb 	bl	800aca0 <memcpy>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	6126      	str	r6, [r4, #16]
 800a6d8:	6165      	str	r5, [r4, #20]
 800a6da:	444e      	add	r6, r9
 800a6dc:	eba5 0509 	sub.w	r5, r5, r9
 800a6e0:	6026      	str	r6, [r4, #0]
 800a6e2:	60a5      	str	r5, [r4, #8]
 800a6e4:	463e      	mov	r6, r7
 800a6e6:	42be      	cmp	r6, r7
 800a6e8:	d900      	bls.n	800a6ec <__ssputs_r+0x70>
 800a6ea:	463e      	mov	r6, r7
 800a6ec:	6820      	ldr	r0, [r4, #0]
 800a6ee:	4632      	mov	r2, r6
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	f000 faab 	bl	800ac4c <memmove>
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	1b9b      	subs	r3, r3, r6
 800a6fa:	60a3      	str	r3, [r4, #8]
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	4433      	add	r3, r6
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	2000      	movs	r0, #0
 800a704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a708:	462a      	mov	r2, r5
 800a70a:	f000 fad7 	bl	800acbc <_realloc_r>
 800a70e:	4606      	mov	r6, r0
 800a710:	2800      	cmp	r0, #0
 800a712:	d1e0      	bne.n	800a6d6 <__ssputs_r+0x5a>
 800a714:	6921      	ldr	r1, [r4, #16]
 800a716:	4650      	mov	r0, sl
 800a718:	f7ff feb8 	bl	800a48c <_free_r>
 800a71c:	230c      	movs	r3, #12
 800a71e:	f8ca 3000 	str.w	r3, [sl]
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	e7e9      	b.n	800a704 <__ssputs_r+0x88>

0800a730 <_svfiprintf_r>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	4698      	mov	r8, r3
 800a736:	898b      	ldrh	r3, [r1, #12]
 800a738:	061b      	lsls	r3, r3, #24
 800a73a:	b09d      	sub	sp, #116	; 0x74
 800a73c:	4607      	mov	r7, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	4614      	mov	r4, r2
 800a742:	d50e      	bpl.n	800a762 <_svfiprintf_r+0x32>
 800a744:	690b      	ldr	r3, [r1, #16]
 800a746:	b963      	cbnz	r3, 800a762 <_svfiprintf_r+0x32>
 800a748:	2140      	movs	r1, #64	; 0x40
 800a74a:	f7ff ff0b 	bl	800a564 <_malloc_r>
 800a74e:	6028      	str	r0, [r5, #0]
 800a750:	6128      	str	r0, [r5, #16]
 800a752:	b920      	cbnz	r0, 800a75e <_svfiprintf_r+0x2e>
 800a754:	230c      	movs	r3, #12
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	e0d0      	b.n	800a900 <_svfiprintf_r+0x1d0>
 800a75e:	2340      	movs	r3, #64	; 0x40
 800a760:	616b      	str	r3, [r5, #20]
 800a762:	2300      	movs	r3, #0
 800a764:	9309      	str	r3, [sp, #36]	; 0x24
 800a766:	2320      	movs	r3, #32
 800a768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a76c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a770:	2330      	movs	r3, #48	; 0x30
 800a772:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a918 <_svfiprintf_r+0x1e8>
 800a776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a77a:	f04f 0901 	mov.w	r9, #1
 800a77e:	4623      	mov	r3, r4
 800a780:	469a      	mov	sl, r3
 800a782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a786:	b10a      	cbz	r2, 800a78c <_svfiprintf_r+0x5c>
 800a788:	2a25      	cmp	r2, #37	; 0x25
 800a78a:	d1f9      	bne.n	800a780 <_svfiprintf_r+0x50>
 800a78c:	ebba 0b04 	subs.w	fp, sl, r4
 800a790:	d00b      	beq.n	800a7aa <_svfiprintf_r+0x7a>
 800a792:	465b      	mov	r3, fp
 800a794:	4622      	mov	r2, r4
 800a796:	4629      	mov	r1, r5
 800a798:	4638      	mov	r0, r7
 800a79a:	f7ff ff6f 	bl	800a67c <__ssputs_r>
 800a79e:	3001      	adds	r0, #1
 800a7a0:	f000 80a9 	beq.w	800a8f6 <_svfiprintf_r+0x1c6>
 800a7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a6:	445a      	add	r2, fp
 800a7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 80a1 	beq.w	800a8f6 <_svfiprintf_r+0x1c6>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7be:	f10a 0a01 	add.w	sl, sl, #1
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	9307      	str	r3, [sp, #28]
 800a7c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a7cc:	4654      	mov	r4, sl
 800a7ce:	2205      	movs	r2, #5
 800a7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d4:	4850      	ldr	r0, [pc, #320]	; (800a918 <_svfiprintf_r+0x1e8>)
 800a7d6:	f7f5 fd0b 	bl	80001f0 <memchr>
 800a7da:	9a04      	ldr	r2, [sp, #16]
 800a7dc:	b9d8      	cbnz	r0, 800a816 <_svfiprintf_r+0xe6>
 800a7de:	06d0      	lsls	r0, r2, #27
 800a7e0:	bf44      	itt	mi
 800a7e2:	2320      	movmi	r3, #32
 800a7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e8:	0711      	lsls	r1, r2, #28
 800a7ea:	bf44      	itt	mi
 800a7ec:	232b      	movmi	r3, #43	; 0x2b
 800a7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f8:	d015      	beq.n	800a826 <_svfiprintf_r+0xf6>
 800a7fa:	9a07      	ldr	r2, [sp, #28]
 800a7fc:	4654      	mov	r4, sl
 800a7fe:	2000      	movs	r0, #0
 800a800:	f04f 0c0a 	mov.w	ip, #10
 800a804:	4621      	mov	r1, r4
 800a806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a80a:	3b30      	subs	r3, #48	; 0x30
 800a80c:	2b09      	cmp	r3, #9
 800a80e:	d94d      	bls.n	800a8ac <_svfiprintf_r+0x17c>
 800a810:	b1b0      	cbz	r0, 800a840 <_svfiprintf_r+0x110>
 800a812:	9207      	str	r2, [sp, #28]
 800a814:	e014      	b.n	800a840 <_svfiprintf_r+0x110>
 800a816:	eba0 0308 	sub.w	r3, r0, r8
 800a81a:	fa09 f303 	lsl.w	r3, r9, r3
 800a81e:	4313      	orrs	r3, r2
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	46a2      	mov	sl, r4
 800a824:	e7d2      	b.n	800a7cc <_svfiprintf_r+0x9c>
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	1d19      	adds	r1, r3, #4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	9103      	str	r1, [sp, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bfbb      	ittet	lt
 800a832:	425b      	neglt	r3, r3
 800a834:	f042 0202 	orrlt.w	r2, r2, #2
 800a838:	9307      	strge	r3, [sp, #28]
 800a83a:	9307      	strlt	r3, [sp, #28]
 800a83c:	bfb8      	it	lt
 800a83e:	9204      	strlt	r2, [sp, #16]
 800a840:	7823      	ldrb	r3, [r4, #0]
 800a842:	2b2e      	cmp	r3, #46	; 0x2e
 800a844:	d10c      	bne.n	800a860 <_svfiprintf_r+0x130>
 800a846:	7863      	ldrb	r3, [r4, #1]
 800a848:	2b2a      	cmp	r3, #42	; 0x2a
 800a84a:	d134      	bne.n	800a8b6 <_svfiprintf_r+0x186>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	1d1a      	adds	r2, r3, #4
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	9203      	str	r2, [sp, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfb8      	it	lt
 800a858:	f04f 33ff 	movlt.w	r3, #4294967295
 800a85c:	3402      	adds	r4, #2
 800a85e:	9305      	str	r3, [sp, #20]
 800a860:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a928 <_svfiprintf_r+0x1f8>
 800a864:	7821      	ldrb	r1, [r4, #0]
 800a866:	2203      	movs	r2, #3
 800a868:	4650      	mov	r0, sl
 800a86a:	f7f5 fcc1 	bl	80001f0 <memchr>
 800a86e:	b138      	cbz	r0, 800a880 <_svfiprintf_r+0x150>
 800a870:	9b04      	ldr	r3, [sp, #16]
 800a872:	eba0 000a 	sub.w	r0, r0, sl
 800a876:	2240      	movs	r2, #64	; 0x40
 800a878:	4082      	lsls	r2, r0
 800a87a:	4313      	orrs	r3, r2
 800a87c:	3401      	adds	r4, #1
 800a87e:	9304      	str	r3, [sp, #16]
 800a880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a884:	4825      	ldr	r0, [pc, #148]	; (800a91c <_svfiprintf_r+0x1ec>)
 800a886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a88a:	2206      	movs	r2, #6
 800a88c:	f7f5 fcb0 	bl	80001f0 <memchr>
 800a890:	2800      	cmp	r0, #0
 800a892:	d038      	beq.n	800a906 <_svfiprintf_r+0x1d6>
 800a894:	4b22      	ldr	r3, [pc, #136]	; (800a920 <_svfiprintf_r+0x1f0>)
 800a896:	bb1b      	cbnz	r3, 800a8e0 <_svfiprintf_r+0x1b0>
 800a898:	9b03      	ldr	r3, [sp, #12]
 800a89a:	3307      	adds	r3, #7
 800a89c:	f023 0307 	bic.w	r3, r3, #7
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	9303      	str	r3, [sp, #12]
 800a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a6:	4433      	add	r3, r6
 800a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8aa:	e768      	b.n	800a77e <_svfiprintf_r+0x4e>
 800a8ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	e7a6      	b.n	800a804 <_svfiprintf_r+0xd4>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	3401      	adds	r4, #1
 800a8ba:	9305      	str	r3, [sp, #20]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	f04f 0c0a 	mov.w	ip, #10
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8c8:	3a30      	subs	r2, #48	; 0x30
 800a8ca:	2a09      	cmp	r2, #9
 800a8cc:	d903      	bls.n	800a8d6 <_svfiprintf_r+0x1a6>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d0c6      	beq.n	800a860 <_svfiprintf_r+0x130>
 800a8d2:	9105      	str	r1, [sp, #20]
 800a8d4:	e7c4      	b.n	800a860 <_svfiprintf_r+0x130>
 800a8d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8da:	4604      	mov	r4, r0
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e7f0      	b.n	800a8c2 <_svfiprintf_r+0x192>
 800a8e0:	ab03      	add	r3, sp, #12
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	4b0f      	ldr	r3, [pc, #60]	; (800a924 <_svfiprintf_r+0x1f4>)
 800a8e8:	a904      	add	r1, sp, #16
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	f3af 8000 	nop.w
 800a8f0:	1c42      	adds	r2, r0, #1
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	d1d6      	bne.n	800a8a4 <_svfiprintf_r+0x174>
 800a8f6:	89ab      	ldrh	r3, [r5, #12]
 800a8f8:	065b      	lsls	r3, r3, #25
 800a8fa:	f53f af2d 	bmi.w	800a758 <_svfiprintf_r+0x28>
 800a8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a900:	b01d      	add	sp, #116	; 0x74
 800a902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a906:	ab03      	add	r3, sp, #12
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	462a      	mov	r2, r5
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <_svfiprintf_r+0x1f4>)
 800a90e:	a904      	add	r1, sp, #16
 800a910:	4638      	mov	r0, r7
 800a912:	f000 f879 	bl	800aa08 <_printf_i>
 800a916:	e7eb      	b.n	800a8f0 <_svfiprintf_r+0x1c0>
 800a918:	0800aec5 	.word	0x0800aec5
 800a91c:	0800aecf 	.word	0x0800aecf
 800a920:	00000000 	.word	0x00000000
 800a924:	0800a67d 	.word	0x0800a67d
 800a928:	0800aecb 	.word	0x0800aecb

0800a92c <_printf_common>:
 800a92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a930:	4616      	mov	r6, r2
 800a932:	4699      	mov	r9, r3
 800a934:	688a      	ldr	r2, [r1, #8]
 800a936:	690b      	ldr	r3, [r1, #16]
 800a938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a93c:	4293      	cmp	r3, r2
 800a93e:	bfb8      	it	lt
 800a940:	4613      	movlt	r3, r2
 800a942:	6033      	str	r3, [r6, #0]
 800a944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a948:	4607      	mov	r7, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	b10a      	cbz	r2, 800a952 <_printf_common+0x26>
 800a94e:	3301      	adds	r3, #1
 800a950:	6033      	str	r3, [r6, #0]
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	0699      	lsls	r1, r3, #26
 800a956:	bf42      	ittt	mi
 800a958:	6833      	ldrmi	r3, [r6, #0]
 800a95a:	3302      	addmi	r3, #2
 800a95c:	6033      	strmi	r3, [r6, #0]
 800a95e:	6825      	ldr	r5, [r4, #0]
 800a960:	f015 0506 	ands.w	r5, r5, #6
 800a964:	d106      	bne.n	800a974 <_printf_common+0x48>
 800a966:	f104 0a19 	add.w	sl, r4, #25
 800a96a:	68e3      	ldr	r3, [r4, #12]
 800a96c:	6832      	ldr	r2, [r6, #0]
 800a96e:	1a9b      	subs	r3, r3, r2
 800a970:	42ab      	cmp	r3, r5
 800a972:	dc26      	bgt.n	800a9c2 <_printf_common+0x96>
 800a974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a978:	1e13      	subs	r3, r2, #0
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	bf18      	it	ne
 800a97e:	2301      	movne	r3, #1
 800a980:	0692      	lsls	r2, r2, #26
 800a982:	d42b      	bmi.n	800a9dc <_printf_common+0xb0>
 800a984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a988:	4649      	mov	r1, r9
 800a98a:	4638      	mov	r0, r7
 800a98c:	47c0      	blx	r8
 800a98e:	3001      	adds	r0, #1
 800a990:	d01e      	beq.n	800a9d0 <_printf_common+0xa4>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	6922      	ldr	r2, [r4, #16]
 800a996:	f003 0306 	and.w	r3, r3, #6
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	bf02      	ittt	eq
 800a99e:	68e5      	ldreq	r5, [r4, #12]
 800a9a0:	6833      	ldreq	r3, [r6, #0]
 800a9a2:	1aed      	subeq	r5, r5, r3
 800a9a4:	68a3      	ldr	r3, [r4, #8]
 800a9a6:	bf0c      	ite	eq
 800a9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9ac:	2500      	movne	r5, #0
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	bfc4      	itt	gt
 800a9b2:	1a9b      	subgt	r3, r3, r2
 800a9b4:	18ed      	addgt	r5, r5, r3
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	341a      	adds	r4, #26
 800a9ba:	42b5      	cmp	r5, r6
 800a9bc:	d11a      	bne.n	800a9f4 <_printf_common+0xc8>
 800a9be:	2000      	movs	r0, #0
 800a9c0:	e008      	b.n	800a9d4 <_printf_common+0xa8>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	47c0      	blx	r8
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d103      	bne.n	800a9d8 <_printf_common+0xac>
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d8:	3501      	adds	r5, #1
 800a9da:	e7c6      	b.n	800a96a <_printf_common+0x3e>
 800a9dc:	18e1      	adds	r1, r4, r3
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	2030      	movs	r0, #48	; 0x30
 800a9e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9e6:	4422      	add	r2, r4
 800a9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	e7c7      	b.n	800a984 <_printf_common+0x58>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	47c0      	blx	r8
 800a9fe:	3001      	adds	r0, #1
 800aa00:	d0e6      	beq.n	800a9d0 <_printf_common+0xa4>
 800aa02:	3601      	adds	r6, #1
 800aa04:	e7d9      	b.n	800a9ba <_printf_common+0x8e>
	...

0800aa08 <_printf_i>:
 800aa08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	7e0f      	ldrb	r7, [r1, #24]
 800aa0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa10:	2f78      	cmp	r7, #120	; 0x78
 800aa12:	4691      	mov	r9, r2
 800aa14:	4680      	mov	r8, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	469a      	mov	sl, r3
 800aa1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa1e:	d807      	bhi.n	800aa30 <_printf_i+0x28>
 800aa20:	2f62      	cmp	r7, #98	; 0x62
 800aa22:	d80a      	bhi.n	800aa3a <_printf_i+0x32>
 800aa24:	2f00      	cmp	r7, #0
 800aa26:	f000 80d4 	beq.w	800abd2 <_printf_i+0x1ca>
 800aa2a:	2f58      	cmp	r7, #88	; 0x58
 800aa2c:	f000 80c0 	beq.w	800abb0 <_printf_i+0x1a8>
 800aa30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa38:	e03a      	b.n	800aab0 <_printf_i+0xa8>
 800aa3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa3e:	2b15      	cmp	r3, #21
 800aa40:	d8f6      	bhi.n	800aa30 <_printf_i+0x28>
 800aa42:	a101      	add	r1, pc, #4	; (adr r1, 800aa48 <_printf_i+0x40>)
 800aa44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa48:	0800aaa1 	.word	0x0800aaa1
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aa31 	.word	0x0800aa31
 800aa54:	0800aa31 	.word	0x0800aa31
 800aa58:	0800aa31 	.word	0x0800aa31
 800aa5c:	0800aa31 	.word	0x0800aa31
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aa31 	.word	0x0800aa31
 800aa68:	0800aa31 	.word	0x0800aa31
 800aa6c:	0800aa31 	.word	0x0800aa31
 800aa70:	0800aa31 	.word	0x0800aa31
 800aa74:	0800abb9 	.word	0x0800abb9
 800aa78:	0800aae1 	.word	0x0800aae1
 800aa7c:	0800ab73 	.word	0x0800ab73
 800aa80:	0800aa31 	.word	0x0800aa31
 800aa84:	0800aa31 	.word	0x0800aa31
 800aa88:	0800abdb 	.word	0x0800abdb
 800aa8c:	0800aa31 	.word	0x0800aa31
 800aa90:	0800aae1 	.word	0x0800aae1
 800aa94:	0800aa31 	.word	0x0800aa31
 800aa98:	0800aa31 	.word	0x0800aa31
 800aa9c:	0800ab7b 	.word	0x0800ab7b
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	1d1a      	adds	r2, r3, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab0:	2301      	movs	r3, #1
 800aab2:	e09f      	b.n	800abf4 <_printf_i+0x1ec>
 800aab4:	6820      	ldr	r0, [r4, #0]
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	0607      	lsls	r7, r0, #24
 800aaba:	f103 0104 	add.w	r1, r3, #4
 800aabe:	6029      	str	r1, [r5, #0]
 800aac0:	d501      	bpl.n	800aac6 <_printf_i+0xbe>
 800aac2:	681e      	ldr	r6, [r3, #0]
 800aac4:	e003      	b.n	800aace <_printf_i+0xc6>
 800aac6:	0646      	lsls	r6, r0, #25
 800aac8:	d5fb      	bpl.n	800aac2 <_printf_i+0xba>
 800aaca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aace:	2e00      	cmp	r6, #0
 800aad0:	da03      	bge.n	800aada <_printf_i+0xd2>
 800aad2:	232d      	movs	r3, #45	; 0x2d
 800aad4:	4276      	negs	r6, r6
 800aad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aada:	485a      	ldr	r0, [pc, #360]	; (800ac44 <_printf_i+0x23c>)
 800aadc:	230a      	movs	r3, #10
 800aade:	e012      	b.n	800ab06 <_printf_i+0xfe>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	1d19      	adds	r1, r3, #4
 800aae6:	6029      	str	r1, [r5, #0]
 800aae8:	0605      	lsls	r5, r0, #24
 800aaea:	d501      	bpl.n	800aaf0 <_printf_i+0xe8>
 800aaec:	681e      	ldr	r6, [r3, #0]
 800aaee:	e002      	b.n	800aaf6 <_printf_i+0xee>
 800aaf0:	0641      	lsls	r1, r0, #25
 800aaf2:	d5fb      	bpl.n	800aaec <_printf_i+0xe4>
 800aaf4:	881e      	ldrh	r6, [r3, #0]
 800aaf6:	4853      	ldr	r0, [pc, #332]	; (800ac44 <_printf_i+0x23c>)
 800aaf8:	2f6f      	cmp	r7, #111	; 0x6f
 800aafa:	bf0c      	ite	eq
 800aafc:	2308      	moveq	r3, #8
 800aafe:	230a      	movne	r3, #10
 800ab00:	2100      	movs	r1, #0
 800ab02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab06:	6865      	ldr	r5, [r4, #4]
 800ab08:	60a5      	str	r5, [r4, #8]
 800ab0a:	2d00      	cmp	r5, #0
 800ab0c:	bfa2      	ittt	ge
 800ab0e:	6821      	ldrge	r1, [r4, #0]
 800ab10:	f021 0104 	bicge.w	r1, r1, #4
 800ab14:	6021      	strge	r1, [r4, #0]
 800ab16:	b90e      	cbnz	r6, 800ab1c <_printf_i+0x114>
 800ab18:	2d00      	cmp	r5, #0
 800ab1a:	d04b      	beq.n	800abb4 <_printf_i+0x1ac>
 800ab1c:	4615      	mov	r5, r2
 800ab1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab22:	fb03 6711 	mls	r7, r3, r1, r6
 800ab26:	5dc7      	ldrb	r7, [r0, r7]
 800ab28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab2c:	4637      	mov	r7, r6
 800ab2e:	42bb      	cmp	r3, r7
 800ab30:	460e      	mov	r6, r1
 800ab32:	d9f4      	bls.n	800ab1e <_printf_i+0x116>
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d10b      	bne.n	800ab50 <_printf_i+0x148>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	07de      	lsls	r6, r3, #31
 800ab3c:	d508      	bpl.n	800ab50 <_printf_i+0x148>
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	6861      	ldr	r1, [r4, #4]
 800ab42:	4299      	cmp	r1, r3
 800ab44:	bfde      	ittt	le
 800ab46:	2330      	movle	r3, #48	; 0x30
 800ab48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab50:	1b52      	subs	r2, r2, r5
 800ab52:	6122      	str	r2, [r4, #16]
 800ab54:	f8cd a000 	str.w	sl, [sp]
 800ab58:	464b      	mov	r3, r9
 800ab5a:	aa03      	add	r2, sp, #12
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4640      	mov	r0, r8
 800ab60:	f7ff fee4 	bl	800a92c <_printf_common>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d14a      	bne.n	800abfe <_printf_i+0x1f6>
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	b004      	add	sp, #16
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	f043 0320 	orr.w	r3, r3, #32
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	4833      	ldr	r0, [pc, #204]	; (800ac48 <_printf_i+0x240>)
 800ab7c:	2778      	movs	r7, #120	; 0x78
 800ab7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	6829      	ldr	r1, [r5, #0]
 800ab86:	061f      	lsls	r7, r3, #24
 800ab88:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab8c:	d402      	bmi.n	800ab94 <_printf_i+0x18c>
 800ab8e:	065f      	lsls	r7, r3, #25
 800ab90:	bf48      	it	mi
 800ab92:	b2b6      	uxthmi	r6, r6
 800ab94:	07df      	lsls	r7, r3, #31
 800ab96:	bf48      	it	mi
 800ab98:	f043 0320 	orrmi.w	r3, r3, #32
 800ab9c:	6029      	str	r1, [r5, #0]
 800ab9e:	bf48      	it	mi
 800aba0:	6023      	strmi	r3, [r4, #0]
 800aba2:	b91e      	cbnz	r6, 800abac <_printf_i+0x1a4>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	f023 0320 	bic.w	r3, r3, #32
 800abaa:	6023      	str	r3, [r4, #0]
 800abac:	2310      	movs	r3, #16
 800abae:	e7a7      	b.n	800ab00 <_printf_i+0xf8>
 800abb0:	4824      	ldr	r0, [pc, #144]	; (800ac44 <_printf_i+0x23c>)
 800abb2:	e7e4      	b.n	800ab7e <_printf_i+0x176>
 800abb4:	4615      	mov	r5, r2
 800abb6:	e7bd      	b.n	800ab34 <_printf_i+0x12c>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	6826      	ldr	r6, [r4, #0]
 800abbc:	6961      	ldr	r1, [r4, #20]
 800abbe:	1d18      	adds	r0, r3, #4
 800abc0:	6028      	str	r0, [r5, #0]
 800abc2:	0635      	lsls	r5, r6, #24
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	d501      	bpl.n	800abcc <_printf_i+0x1c4>
 800abc8:	6019      	str	r1, [r3, #0]
 800abca:	e002      	b.n	800abd2 <_printf_i+0x1ca>
 800abcc:	0670      	lsls	r0, r6, #25
 800abce:	d5fb      	bpl.n	800abc8 <_printf_i+0x1c0>
 800abd0:	8019      	strh	r1, [r3, #0]
 800abd2:	2300      	movs	r3, #0
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	4615      	mov	r5, r2
 800abd8:	e7bc      	b.n	800ab54 <_printf_i+0x14c>
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	1d1a      	adds	r2, r3, #4
 800abde:	602a      	str	r2, [r5, #0]
 800abe0:	681d      	ldr	r5, [r3, #0]
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	2100      	movs	r1, #0
 800abe6:	4628      	mov	r0, r5
 800abe8:	f7f5 fb02 	bl	80001f0 <memchr>
 800abec:	b108      	cbz	r0, 800abf2 <_printf_i+0x1ea>
 800abee:	1b40      	subs	r0, r0, r5
 800abf0:	6060      	str	r0, [r4, #4]
 800abf2:	6863      	ldr	r3, [r4, #4]
 800abf4:	6123      	str	r3, [r4, #16]
 800abf6:	2300      	movs	r3, #0
 800abf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abfc:	e7aa      	b.n	800ab54 <_printf_i+0x14c>
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	462a      	mov	r2, r5
 800ac02:	4649      	mov	r1, r9
 800ac04:	4640      	mov	r0, r8
 800ac06:	47d0      	blx	sl
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d0ad      	beq.n	800ab68 <_printf_i+0x160>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	079b      	lsls	r3, r3, #30
 800ac10:	d413      	bmi.n	800ac3a <_printf_i+0x232>
 800ac12:	68e0      	ldr	r0, [r4, #12]
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	4298      	cmp	r0, r3
 800ac18:	bfb8      	it	lt
 800ac1a:	4618      	movlt	r0, r3
 800ac1c:	e7a6      	b.n	800ab6c <_printf_i+0x164>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4632      	mov	r2, r6
 800ac22:	4649      	mov	r1, r9
 800ac24:	4640      	mov	r0, r8
 800ac26:	47d0      	blx	sl
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d09d      	beq.n	800ab68 <_printf_i+0x160>
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	68e3      	ldr	r3, [r4, #12]
 800ac30:	9903      	ldr	r1, [sp, #12]
 800ac32:	1a5b      	subs	r3, r3, r1
 800ac34:	42ab      	cmp	r3, r5
 800ac36:	dcf2      	bgt.n	800ac1e <_printf_i+0x216>
 800ac38:	e7eb      	b.n	800ac12 <_printf_i+0x20a>
 800ac3a:	2500      	movs	r5, #0
 800ac3c:	f104 0619 	add.w	r6, r4, #25
 800ac40:	e7f5      	b.n	800ac2e <_printf_i+0x226>
 800ac42:	bf00      	nop
 800ac44:	0800aed6 	.word	0x0800aed6
 800ac48:	0800aee7 	.word	0x0800aee7

0800ac4c <memmove>:
 800ac4c:	4288      	cmp	r0, r1
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	eb01 0402 	add.w	r4, r1, r2
 800ac54:	d902      	bls.n	800ac5c <memmove+0x10>
 800ac56:	4284      	cmp	r4, r0
 800ac58:	4623      	mov	r3, r4
 800ac5a:	d807      	bhi.n	800ac6c <memmove+0x20>
 800ac5c:	1e43      	subs	r3, r0, #1
 800ac5e:	42a1      	cmp	r1, r4
 800ac60:	d008      	beq.n	800ac74 <memmove+0x28>
 800ac62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac6a:	e7f8      	b.n	800ac5e <memmove+0x12>
 800ac6c:	4402      	add	r2, r0
 800ac6e:	4601      	mov	r1, r0
 800ac70:	428a      	cmp	r2, r1
 800ac72:	d100      	bne.n	800ac76 <memmove+0x2a>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac7e:	e7f7      	b.n	800ac70 <memmove+0x24>

0800ac80 <_sbrk_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4d06      	ldr	r5, [pc, #24]	; (800ac9c <_sbrk_r+0x1c>)
 800ac84:	2300      	movs	r3, #0
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	602b      	str	r3, [r5, #0]
 800ac8c:	f7f5 ffc4 	bl	8000c18 <_sbrk>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_sbrk_r+0x1a>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_sbrk_r+0x1a>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	20001f5c 	.word	0x20001f5c

0800aca0 <memcpy>:
 800aca0:	440a      	add	r2, r1
 800aca2:	4291      	cmp	r1, r2
 800aca4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aca8:	d100      	bne.n	800acac <memcpy+0xc>
 800acaa:	4770      	bx	lr
 800acac:	b510      	push	{r4, lr}
 800acae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acb6:	4291      	cmp	r1, r2
 800acb8:	d1f9      	bne.n	800acae <memcpy+0xe>
 800acba:	bd10      	pop	{r4, pc}

0800acbc <_realloc_r>:
 800acbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc0:	4680      	mov	r8, r0
 800acc2:	4614      	mov	r4, r2
 800acc4:	460e      	mov	r6, r1
 800acc6:	b921      	cbnz	r1, 800acd2 <_realloc_r+0x16>
 800acc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800accc:	4611      	mov	r1, r2
 800acce:	f7ff bc49 	b.w	800a564 <_malloc_r>
 800acd2:	b92a      	cbnz	r2, 800ace0 <_realloc_r+0x24>
 800acd4:	f7ff fbda 	bl	800a48c <_free_r>
 800acd8:	4625      	mov	r5, r4
 800acda:	4628      	mov	r0, r5
 800acdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace0:	f000 f81b 	bl	800ad1a <_malloc_usable_size_r>
 800ace4:	4284      	cmp	r4, r0
 800ace6:	4607      	mov	r7, r0
 800ace8:	d802      	bhi.n	800acf0 <_realloc_r+0x34>
 800acea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acee:	d812      	bhi.n	800ad16 <_realloc_r+0x5a>
 800acf0:	4621      	mov	r1, r4
 800acf2:	4640      	mov	r0, r8
 800acf4:	f7ff fc36 	bl	800a564 <_malloc_r>
 800acf8:	4605      	mov	r5, r0
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d0ed      	beq.n	800acda <_realloc_r+0x1e>
 800acfe:	42bc      	cmp	r4, r7
 800ad00:	4622      	mov	r2, r4
 800ad02:	4631      	mov	r1, r6
 800ad04:	bf28      	it	cs
 800ad06:	463a      	movcs	r2, r7
 800ad08:	f7ff ffca 	bl	800aca0 <memcpy>
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4640      	mov	r0, r8
 800ad10:	f7ff fbbc 	bl	800a48c <_free_r>
 800ad14:	e7e1      	b.n	800acda <_realloc_r+0x1e>
 800ad16:	4635      	mov	r5, r6
 800ad18:	e7df      	b.n	800acda <_realloc_r+0x1e>

0800ad1a <_malloc_usable_size_r>:
 800ad1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad1e:	1f18      	subs	r0, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	bfbc      	itt	lt
 800ad24:	580b      	ldrlt	r3, [r1, r0]
 800ad26:	18c0      	addlt	r0, r0, r3
 800ad28:	4770      	bx	lr
	...

0800ad2c <_init>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	bf00      	nop
 800ad30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad32:	bc08      	pop	{r3}
 800ad34:	469e      	mov	lr, r3
 800ad36:	4770      	bx	lr

0800ad38 <_fini>:
 800ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3a:	bf00      	nop
 800ad3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3e:	bc08      	pop	{r3}
 800ad40:	469e      	mov	lr, r3
 800ad42:	4770      	bx	lr
